{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2022-03-19T17:57:46.941Z",
        "id": "page_1",
        "title": "http://localhost:6006/",
        "pageTimings": {
          "onContentLoad": 1516.1739999894053,
          "onLoad": 1650.4710000008345
        }
      }
    ],
    "entries": [
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "k",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20319,
                "columnNumber": 2839
              },
              {
                "functionName": "t.scheduleTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 7617
              },
              {
                "functionName": "onScheduleTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 4692
              },
              {
                "functionName": "t.scheduleTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 7516
              },
              {
                "functionName": "e.scheduleTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 3524
              },
              {
                "functionName": "e.scheduleMacroTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 3877
              },
              {
                "functionName": "f",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20211,
                "columnNumber": 342
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20319,
                "columnNumber": 2032
              },
              {
                "functionName": "T.a.<computed>",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20211,
                "columnNumber": 3356
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20537,
                "columnNumber": 2241
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "g",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28335
              },
              {
                "functionName": "u",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28266
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 24153
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "i",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28598
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28669
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 30756
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26790
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26790
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "s",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 29136
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 29265
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 39037
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26790
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 37732
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 31305
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 37165
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 37814
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 30813
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 39094
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28389
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 30813
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 39094
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 30813
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 11438
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 11296
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20472,
                "columnNumber": 6158
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 7766
              },
              {
                "functionName": "n._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 7065
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 31597
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 39094
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20472,
                "columnNumber": 5813
              },
              {
                "functionName": "n._execute",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 16394
              },
              {
                "functionName": "n.execute",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 19139
              },
              {
                "functionName": "n.flush",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 18253
              },
              {
                "functionName": "n.schedule",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 19022
              },
              {
                "functionName": "t.schedule",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 17955
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20472,
                "columnNumber": 5783
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 11438
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 11296
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 13898
              },
              {
                "functionName": "next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20472,
                "columnNumber": 1617
              },
              {
                "functionName": "dispatch",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20472,
                "columnNumber": 7030
              },
              {
                "functionName": "onPluginSelectionChange",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 21818,
                "columnNumber": 26107
              },
              {
                "functionName": "t",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 21818,
                "columnNumber": 26479
              },
              {
                "functionName": "Tf",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 19179,
                "columnNumber": 1382
              },
              {
                "functionName": "a",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 19179,
                "columnNumber": 1562
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 7766
              },
              {
                "functionName": "n._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 7065
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 11438
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 11296
              },
              {
                "functionName": "emit",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 19552,
                "columnNumber": 139
              },
              {
                "functionName": "onActivePluginSelection",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 21818,
                "columnNumber": 1600
              },
              {
                "functionName": "e",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 21818,
                "columnNumber": 130
              },
              {
                "functionName": "Tf",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 19179,
                "columnNumber": 1382
              },
              {
                "functionName": "a",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 19179,
                "columnNumber": 1562
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20122,
                "columnNumber": 791
              },
              {
                "functionName": "t.invokeTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 7876
              },
              {
                "functionName": "onInvokeTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 19663,
                "columnNumber": 1683
              },
              {
                "functionName": "t.invokeTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 7797
              },
              {
                "functionName": "e.runTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 2953
              },
              {
                "functionName": "e.invokeTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 9010
              },
              {
                "functionName": "y",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20234,
                "columnNumber": 711
              },
              {
                "functionName": "_",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20234,
                "columnNumber": 941
              }
            ]
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "524",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "http://localhost:6006/experiment/defaultExperimentId/data/plugin/timeseries/tags",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:6006"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "sec-ch-ua",
              "value": "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"99\", \"Microsoft Edge\";v=\"99\""
            },
            {
              "name": "Accept",
              "value": "application/json, text/plain, */*"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36 Edg/99.0.1150.46"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:6006/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-GB,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,en-US;q=0.6"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 648,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Content-Length",
              "value": "287"
            },
            {
              "name": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "name": "Content-Encoding",
              "value": "gzip"
            },
            {
              "name": "Expires",
              "value": "0"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache, must-revalidate"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Server",
              "value": "Werkzeug/2.0.3 Python/3.8.10"
            },
            {
              "name": "Date",
              "value": "Sat, 19 Mar 2022 17:57:54 GMT"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1172,
            "mimeType": "application/json",
            "compression": 885,
            "text": "{\"scalars\": {\"runTagInfo\": {\"tb_logs/MultiStepLR013748-Adam\": [\"Accuracy/test\", \"LR/train\", \"Loss/test\", \"Loss/train\"], \"tb_logs/OneCycleLR014815-SGD\": [\"Accuracy/test\", \"LR/train\", \"Loss/test\", \"Loss/train\"], \"tb_logs/MultiStepLR014231-AdamW\": [\"Accuracy/test\", \"LR/train\", \"Loss/test\", \"Loss/train\"], \"tb_logs/OneCycleLR015549-RAdam\": [\"Accuracy/test\", \"LR/train\", \"Loss/test\", \"Loss/train\"], \"tb_logs/exp000650-AdamW\": [\"LR/train\", \"Loss/test\", \"Loss/train\"], \"tb_logs/OneCycleLR015052-Adam\": [\"Accuracy/test\", \"LR/train\", \"Loss/test\", \"Loss/train\"], \"tb_logs/MultiStepLR013420-SGD\": [\"Accuracy/test\", \"LR/train\", \"Loss/test\", \"Loss/train\"], \"tb_logs/MultiStepLR014532-RAdam\": [\"Accuracy/test\", \"LR/train\", \"Loss/test\", \"Loss/train\"], \"tb_logs/exp000926-RAdam\": [\"LR/train\", \"Loss/test\", \"Loss/train\"], \"tb_logs/exp002043-SGD\": [\"LR/train\", \"Loss/test\", \"Loss/train\"], \"tb_logs/OneCycleLR015321-AdamW\": [\"Accuracy/test\", \"LR/train\", \"Loss/test\", \"Loss/train\"], \"tb_logs/exp000418-Adam\": [\"LR/train\", \"Loss/test\", \"Loss/train\"]}, \"tagDescriptions\": {}}, \"histograms\": {\"runTagInfo\": {}, \"tagDescriptions\": {}}, \"images\": {\"tagDescriptions\": {}, \"tagRunSampledInfo\": {}}}"
          },
          "redirectURL": "",
          "headersSize": 258,
          "bodySize": 287,
          "_transferSize": 545,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2022-03-19T17:57:54.122Z",
        "time": 15.306000015698373,
        "timings": {
          "blocked": 1.5260000022593885,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.09800000000000009,
          "wait": 13.319999992752448,
          "receive": 0.362000020686537,
          "_blocked_queueing": 0.5010000022593886
        }
      },
      {
        "_initiator": {
          "type": "other"
        },
        "_priority": "VeryHigh",
        "_resourceType": "font",
        "cache": {},
        "connection": "524",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "http://localhost:6006/font-roboto/vPcynSL0qHq_6dX7lKVByXYhjbSpvc47ee6xR_80Hnw.woff2",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:6006"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "sec-ch-ua",
              "value": "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"99\", \"Microsoft Edge\";v=\"99\""
            },
            {
              "name": "Origin",
              "value": "http://localhost:6006"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36 Edg/99.0.1150.46"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "font"
            },
            {
              "name": "Referer",
              "value": "http://localhost:6006/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-GB,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,en-US;q=0.6"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 694,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Content-Length",
              "value": "12375"
            },
            {
              "name": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "name": "Content-Encoding",
              "value": "gzip"
            },
            {
              "name": "Expires",
              "value": "0"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache, must-revalidate"
            },
            {
              "name": "Content-Type",
              "value": "font/woff2"
            },
            {
              "name": "Server",
              "value": "Werkzeug/2.0.3 Python/3.8.10"
            },
            {
              "name": "Date",
              "value": "Sat, 19 Mar 2022 17:57:54 GMT"
            }
          ],
          "cookies": [],
          "content": {
            "size": 12352,
            "mimeType": "font/woff2",
            "compression": -23,
            "text": "d09GMgABAAAAADBAAA4AAAAAWSgAAC/nAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGmQbmUAcg0oGYACGTBEMCvtU5E8Lg14AATYCJAOHNgQgBYMKByAbzkqzoqzvGjeKSs5nUZTtzWj2XyXwZOjNKyMiImBY6zWKNWA4InKyCXHjC4uVkc/4jsPk6tWO0dBIYh7RfvvZ2xfNC6JEQBvBRsACoSVa6XxUtYSUCCLyUMJGxQYVRREVMb/RPwqiaO3/++ju6jlvgdCDQkS1EtguC4OoERR+EIr4ZoID9KtY027T2QGFC8Sv3Wdr/ZL9V7XGmSLf7eVq1V0NM8fgyzEnvgOVQLoTJHeOBOnpy033erpXvoAXNLb//7rMVtfPikfHmhw/mzsrxFN0S6eXEzdVikojDfjPtwysJR4vzhKPJzAOEfRLwFWQSiyarXJStOlSlGlLxmrvXfu0V2RVV2FkMjP5L5lJPmT3mHIAoFJEoSpsHaOtc/Xd3n97Iqt3cLdZiriXiEgIUqQLI3uXfvxtVWfBTplCeE5blssTmOjrTLc6eFqS0E7GBITAcXnvmyMwrLEPos8VEi8eki4dkikTkiMHki8fUqgY0uYowhmfIAgBgAWACwFAkHgIAMMW+5COOsbUFmSvjI8IBtlrI3yCQPYmj6hQkEUCAN9CU914dUQo0IBckjoaBEapySreYP2mPI4vu7Ctb1pjaFwYc+NO0+4EQcNznUNId7Wu3T171HjWc3pRSfcur/xpY6KxduwohWEOw3scHykWzHNjqODCuJM1d17PSlpRcJT6uiWhYGIRWGOd9TbYaLMtttthJ3UatOy21z77GTNhyoIVazbsHebIiQs3larUqHXGqDHjJpx1znkXXHTJZdfdcNMtt93zxLynFry05JXX3njro08Qjcwh0SJuN769JN0jCRFE0RbcSOLTqq2JPbW1P2kQp59nDPOB0QRjHIQN7GZtnzcc8hvHvOMyBRbng+pIqkODMRp7YxjHBM7inHE/zzzALB7iEeaMx/ngCebxFAtYwiu8xhu8Nd7lN+/xGz4YH/POpwp0rc/FO9tym3IYR3qOINPILK28sjsf7c2Ce06QKhgUnwpMW3RYaEiZYx8Rp1wTsnampKyXHjM5KZGfNiRs4nTw2OclDwKAGFj4IDkbT/wahVo+0yTcwV1MY+bU4ii4mKE+iXyGeccIMMZB2Nl9RXGKV+KqItSg1nicd55gHk+xcGomw3xkBGMchB2K8RhPMI+nWFg0ZkLMYds44aGwKcUS8Aqv8QZvT03GTRY+qlGHBosLNWjiDu5iGjOJTKYUWQCWs7ZJmkMp44Rp6UW8Al7jDd5KVJ0QW5XLDudLpuX5xOy8oZOfPIotI5jkM6f8BknPcxyMvMQmjpO7mgmT+mD7zDmcHK0SQzIgKbeZn6NWObkoPxfU5z6kKoMQE2zEtEQC5C9XHJAnLWTzHb+8lFfKCzyNyx9cj9eZ9QW/5X1Fg/eD1l9g+WcM4tR38iWpaXdZDeQ9+jhY7u1f/e3J/QoZt+VFE8ou12lY/hTr88U/UW8AiHfCtzb8ZT/LTf8lCqG8S/mGH8nuWpe/N0PX1F2k2IzqNnG9f7O7kd9kMe/zenXcZZ1jyQsufj5LmYub+jjtOZ2PacXDz9W8zFdsALD8Hi+qpbhVT4Tl5rxKJY3elpMpzZnfwhHcFGXy3Y2fIpa1Zat0uMBH4oUfveKDd+j5/YQNll/vVb7lyg/oskXm5F5K8WVf6p32MV740dM/Cc59Dh/cm8JythXCbrzlmPwiBmcnet7w/x/lX9a48Gb1A8jzjh8QPFVibqx9WubB9/9rvuVwfdmqbvnK4FouF+bljr48mMKUDcuLbrR8ymyeozMcbTn7skwOe2uvc73ivkvygS7xe3kV0fWy/JI/ryvB8rxQZtmeJH7LLA+IMyHchQn8RWNrbECyyQ50GvaVifoMyTAGyzMNXMGKLQX2rMwxcBVnrlYrCFynUp31Guas5owFm730lt0xZhQnhJ22JSmSIjnIWcSEtSxjHfOsZ2QDk6kxw2Zm2sKStjOyg8VpMJsmM2ixrN0sbQ9z7WWWfSxGnykMmMowJrGvbDSQ4tZIbMCYLVPZs4Aj0zkznwvTuTJHgaQe8Twp1ZByRz1PSh1YTgPLOROIjDqHcH7VeC64jOy625A7ZjDcmwJZ7ptD8ThQwhMLaF6OTrLkLaxeFp14xPPE8cCS+FJcQ0khj6BCTFBjKduZsJMJu2IcxbIxiE4SJCAxYhLX1ipuDDlIEqlEmEgeZgdGDjGLQ4ysmAkN0ST73OERiogJxaMj5SpIakg8EiceiXviTkNKgiiSUI8IohMT1G4LkG6ELRz/zgdkl3Z2KV+Rl1kbM4ZjvFlQD79AXxFMjrS2jTnHWOuU7DnZwpRP0bHnMyzMcs6yPihNRFQ3JSFnHWMQT0256hZhCKz9vzuTwaabAvw8QJ1oz9hGt0SHRIBll6EAGCEvAQQ51/AKgtCyyCg4tnEWpsEEAzSpnSTRkh0Hyqc204Zg1u5Qno6ypXZpuR2bQPYVSBaUBQIUgQF+D18wmiAWNA8D6DQwcKj36u3B0K1Lpx69julzXH87OkN2b5+QIFKUQScNOWWYCAERtwIALmErQwbkZ+Z2gHZJw/B3fPvbEQqlaWAdv65dYHiqhSEgoLw5Bf4HvquGDorQiwCAdMAcpHjTCwMv5fcVSlvCAOg6pGYKQIMiEmkAbClax9+z51111xtfLKOtzaZf7U/6013FFWUVFRSVFdcqainqKUYpHlfmLy8jgqJs2/nEF1wz7a2vUK2PFyhKK8p3qLnolt/zimQuYeQiWP5zxfcj7xit/0/9J3pYikQJYkXx5GDj8x/PSiAwi43ADrh2MSSfXh+a7oypk+uRz5DpjrumzbgnS7b7Hpj10CNzcuSeaNc7T7533vvNBx8V+IQFANDhvcN1QC57BYYiUkBSWzGCNhyHl9qP0xjAeQhxAVcwql5FOq65dznuNHAGM3iIKTzCHDLwGAu4g2d4jiy8wGvcV98gB2/dLxL3K5CLb/gdL/EH/kQe/sJ/eKf+jwJ1Wfmko318UKihM5QzfVCkEx/7oEQnfvJBqU784oMyTXELZUsflGuK24rtX1CJHbEzarA7dkc99sbeaMD+OACNOApHoRl34S60VL4EHxzRlTc/B7RCCLTGLB/1Mj43oF+08HEO9cl+Pxr+DRC3IYssieX8I2QYSicSiBjub1G0sFGJs1RQiS5FIGaI7RD3wggdtDVEjBhLR0pBboIDoEgknIZ24jAchLlpKE9WI/ySrE5yqEP61Qg0XYwA+K6b4x6/4bGw7FpLNLCoWacXj+Uo65icZAV0wv9g/qK1a+/ptkSmJNeyt+OS7MU0bbTOwCiw8Y2byrEZLdngAgM2rdTGwnAa9TUwuyUWY/jdeplHwDeS81iWTnKeWpDE+IA+GTXGCfMfp85F+3h4tyC8nxpXiVHcFWfJoZleGFEVR4wwOeM21siDx7x5HZD9mFKJjCClRCYmX4vD0mRHXKyAYHLt1Ve3XuZm2LoYCpQycIS99jSgB4zkuEKABrMJamFAsTDxzmnH3jMjZRkKT8ct2WyZtFhLw2B2jhH6qMxLE0Shy9693ptc+baB+dtpZ28Td6DiR7SogHG6iKkmLajt86QvKdDfbx3KePzrFl9mYtUH7HnRQc2KgQAj395kZRv/qJmmItcKPFdtY430ZuR1S3PWbJIlGeahAM2IGuyjfqOlQHkDQd5aqa2qtTGzCL7/0r6w9VmvQHBoDMob25vKDGmsideq9jVWNTWfdwlkkI9jZ5mr7M1oJq/9Q0ZLotJbxWRVqBxWvOQCUU8gCi2u/sWgyIJJIXo/ikpUNF5lTbJrdhc0Zqae+b8IgV2iDkJ2b57j9mZhYt5CM4Ve5CQBKXKntBe9DxSq4ROdKGZ7DhifAw4atwrXNtYGgdGv6n+l8JD75Fz2QRYfpVMsJGXuDLc1copPUsKVco8jSOhGDPCa9o19fr0+5XRidXHtYUyFNmeH/nbgWzi+1DC2Wf0aKwtupdXh2purKltu5mbaUzb/wJ/tDB595xokRQOCU3CuMIAylGZk4xAMhEMurw5vRFwEUuNbh7Kmgpb+0jWIzGWuGpeb4V2Xl0Slm+w9+kophiUqSycVTekL8FDapWZiu+3CqGDZaJifDgrPD/Jc2gpRwTkYliIsXKqSpLgZIANcJfPFnCqemYKR5Nropqo2iKKtMR0G2a2nS3otCUc7Ye4HqhlqNMjGyTfU1tL2OIQJjd5l6/OKtIVqGESF2cCCZKzmJfXJ0UPb4NznlNf6p5X4Kwi6b1xRSi0TSITurGUv+QS2Id4qiXsBvGRhlNP29E9jhcTOKcUnUdP5yyXGM4dhcgKqk1jt+5IQoiFxJ21hsK4ngQQpL4XAquMzSZ5RQEYhxkNwFGSLoR9LFzt24HnWKqqkmxfSXPeuYaCWuoYXrmEXNfkb4VzMd9kSyegY/Uihij2+t3qZ0xBv7JqjfATQFGECXGBQLygbZvhYYIdciw8KdG9ZtLBt2Gnf9Ud3eocCjINhtkoV3fyuppgiJEhqDAyLQrPApveRJYlBAxAtHlAYQOFw++P+Wy9zl9m6fyWJtfqe5htfpCxBgp3MXZZKH5ufcAVHD0PxQkjFvbWx3QXf6L2FWmKJvezyDaUqh/4ApynK93jIOLcpPMPUATwrD4YiJkaI5ue1axchmXYwmhRdo6TUTPrtaa/Jn8LDT/rb6SzT0DeTYZYDM60Lz+/OMP2eIB45yl1y/H6KMLy8XzkE26URQVzDc9PUq+MKThyG/lGIB7AindfQNzV/4XmlG+ISlQHIYzkKPID0f3lEWfPJTF3ZR7Q7U30gSD5QK+3xqwe1DXDb4Nz+TPGEDBLoQv2XA0f7CNCqZgBTzz2IhX2lI0gIPMOg6BiTYS/lIN3uQxuTOXScyqzkCKPaqmt011kgAXbUXNbyKQpSbYqy/HiDWqZtoFDstBLjBFKe2M/x9v4BNIKJQIRiiScyrtS0AlYyH12t+H9ALQ9rSrBPH0SNXBA+HznUhPV3KV7a3TFqO5KtH2m1rV0L+TvJt7E+kW0safRPVW2h1u0Yqt5Le+qhe7ZL1/Ey03V5/3DKDNY+8alw512dUVkNwrgHDUfnZDlkqI7nAvmaLru7exdcPci9+XdMed+7OABjliVpnDTmuajF3mvjjT2jhh9OlbmzWuSK52v1L53tYrrBP6ggNY3VoUZQH8RAr50dOCPZM/6CUZDQdgOViGVTTRuQUvRd7v0yDiXRov/+1svcnG+uO/yYogFJ/lf9JccQEY+gjKmKqs265pK+gZlZgoAQ/KakHBRH85rafiMsTReioDLOYxU1Okbjo0dJkznpFSKsDiCykB3vnQzIR506ydi7WUyiLoNhA9LHwha/ypgIpg1q5i5FAPGaUrdIGr2LJt+rMY4MDg7XPK036QppIcJKd7/UUz5N8dqlr7R3sSdoUJqG6Mi3sldQg4M5KbJwnMM8bWk+NevdUVsPF/dBBpDM12Kqrl/o3dneDK2Kpx7puNMTD6e2mae+0xjmJBB128pEfVuLA99epZSbFyQZi4PRpPbJxbhDcxoQMYl2oVszH+K9PCv05ofs/WJOa6KOCor3mGY5mzB3XH4JW7gYevTs0eee3JjeyR6+lbIo5On0op/uZc3miPJRg7JP/m1H3Af9eysofbtGodLPWpTkrVIXXW7JHZAqtjczHn5wAXHA18CGh1i7wm1acMlFoCMdC3Amoaaiqiird/MnF+Z7SyeQfLKVGamYsDxzD0wtT4qD9xspJa4vDKswRFaUXBJ1wl2Lh+ZgaK87jQQEnM+9CYO3g8D87seYFrJ6FO758bvaZN45wOs4ARlYReOQn1M8GqtOQJxHX21B2xkihgcxv4KkC58uBNfqsi/eUgk9KU5lwi67BG9y6nXdt/fSnqvfEGRtM2Z1NOXtFYGRLwRt8G133ySQByexjzOQqbwM/ZgvzNilNoxc8pALhi0NRxlVEufkJOw5Td9mxtU2j7ngXpCuDrV2CgGL33Npn8uellCLX7DycKn+7+r6sqr6N1J5yw8M/SlVwK89Ul535J9aqaiYpCueSSrm5BXftL8EKrYr/53m8Tds46XQ7QJS/3U32VMZx77M6Hj4cFBy7ZOKdQuV8mVfOedPUSt8m7yIMFSRwQyl2Tkn8oKLY7TrKZ6sY69mJgRK58qVL3RIdb9njIoYGVGN0SgFHcsCxdmrcbikh5pGNuVkD/cm4ThU3kdNdmOVjhw/kEKy1HP9pou8vRmWNDPKQR2fA0gP+fgwLJ+QE3HxMWoy+QCraHggFceiil5qGlmXVXCyf28KyeKAuw7SR54+DEuaOcWkSo4B8voJZcH66Wm4S9zf0wAMUjmjd8rDD240NcykhjGPPprqwDnoxDFqCq3vZkmFx59JjjmSDW2y/9f3Nf28YRTWnzuNJ9DrFz2m2UR1JKe7fyiRn8EJSi6m4qdUGw3vgTrfQAuGv5uVjZ6NMA6kfAoO+qeZPquALBPFN0MivOOIuWxiU9SLuHgK+uduoJa34yZhV+TgFepq5Ma0B2Uj5R+nh2Bjo5lchD2K0FJ9jR6Qjt8YVRMKzRoII3t8mnBn2oE0nhd30C2VCNvmVKN/SC2I36LlWMFPPZShtCAV7gEbO9gFCgP5FjdHVnt71LVxzwjQlP1MIkvkimRqTornrFqCHwrzsjXz0DED/yGPf93wE8+92rAt6ag6RbUDHglO49P/Uj8hY5rhqu+b1dlbn5JG8cjvlN8IE5qh8m87jJibmTbZ7Dg4QPrvPKWQdHxO6e1GJXYkGJFo5yhZ5ON3Vy+C8wjb+1ZGrsIJuUuKMHJEokia7uHe08MrYYUIC3xwBj7Ryi8cAlZ2wZ2XoVnEMH5wj9PNPX/zvpPz/YnzIIu3xULWcAErhhUpzApE4agljxc5BNxT3BcTaARPP2UP03wLexN3ea7zOE6NFJuU/jKFx/DCc+rgMJCFsXnhOBX31jPTGDHpWWm4AGBn+ftJ2ZrLWlYjWlZZ4jHb8NurW+5fG0y/eR2ePD1z76HsMS1hcYh2KhpGF1m8u/znUmLTuB/NzpNHeimx8Zl+KBUPnBWrZ+fED0RjIxS2OQl2i4bEmlZdw3JfzN7n5opwBOpIMJ1jZgieiitcJ7fhu685F6j+ikN6UTX5Wpql7qg3UtWBcgBZWm+t97DQgTjS8bPcBrrDhmp3ezDs3Lc1et/VrTul/5SqnYADWXtpwXkD0RouOx2HqYGcCyveXccTeH6RM8BIqh/L0jTbadJBdWGfIS+dw/345mNepiUzLLYmHCeiE63sFGZkXGEoSsYnGiirlBje/vnuWIjqK1iRDL/AbHcUjBrKYHtEmrFZp6kVikDtySbzzHRWae6XJxmZuB9f+UG9RQTKtehEZyVsIauKNa55iPnvZv90xN2hO12oRoQlbgjs9sKJpIEpdk0wL/nETnegpO74V3HscYJM+c6ZhFW3YN8qtY1yrSre+zfKHVGBLfdK7AhF0T8JMmUaKGnVFGjXsSLcTgS5WRokhYrFM13soh2xD8oI4x4+BfyjP68Oom585ib7KFc01h3v53FYsuaP/Zymb9M3OGrjLxZ7weSr+GEUfJhlmttXQkQioYjZSG+tNZ8fTEcFRJZPlipdR46U405UkEV2DDblVADvTWEP8RTH//fzNVOSOhwi97ysDXpwr5VsVIH963Mg01WvfQ/NtVyStfcfvEZcJCS7K3RuLWa4PR0+uZd0LIoIJDlX/WRk/bXbvYB0QUrpI2jMJJlfTby+NXqwk08eHN0v8zyuC3aLzQ4eg+cL19hDvOmfAR5r3E/TQjmTK94sXetxZK6HvNPlnER2dEhmNFZp4EDqQDonnBUQHJRMWgFgzJvesKhHfUnOIa6nCD+Ty7AVw4wbq2YYmkAh3cJfgLI0ztr6UgpNkP5VXv2PRA35EPl0yVwRriVdbdx+vOXDEA9DcFKoIXmRbqSytzphO6rms7yjz8CDtVSV18qnGWmchhMDlRj2Em3eDnhKrimzxCLkms9a3veG3RGZlsKMCUEJfkEN2n2zAsPBC0a+kqFDqISYTY3/TKulxBhVi9ZxG08QN/DXd9x7Y4z80soUPE75V24dl19IHLzS9rAc3SMlBu82MJJrBEiYiGq9tto19p4IDr+a9zkLpHGq9zhovBb2BOMnVf624OdtfB7PPGdeHmfECkuEKAH3tvHTYGX7g3M2S5VWIXHy9eT3o4XyNqtngN/UItfkqJjtWVC2GxT72b5hsv2PxhbntT/GeINeQRlXr80h0n1TqVlAwohiViBLL/AsZZGXYpWQZSscB0tBAXErNfpPcgM5TserbUWkXVPkFH6AfynQfmL/bboZEt4uJzq4S7Xkyeq5SpyN79XmqPHeEtrky7ULZXiC9Kfs+uWWDA6anpodvBhew+KPz9wrvOn1X37sa9aF+sv13DyxhOy6VHwYQGPQdG66IOy/78ZiJnlwNyPid3IjOVnbuVlaaHck/jYuIu6mh4sflrChWzNt9w74J1Gu1c6Wt7maOGLvtRw/D+I05W+pDf+Lp8BxU0sfU3Pe7CJ4BV9e868w8gbvVuxY9GVNwXsBlF2p46ZyktKLs7AygPpMrMSRcePj++pWZfG/0uPKR7965xKZxB1h0BQ5eQLo2YUV6SgPnc5khwuqbphW7TBZKZMuvuwSSod+9ygm8uBlRPQ1Sso40NJb6pTweDqYz/KvcCT449vRZlfkmvXBmjzIyHys9FKX9QqXEPcSvJ5xixmZT0YZkfPcuvyBQlxLnh6UPcLIfAp7YfXPEw82kwe7+NGDV+DsBXxCt09u+48j1B1A79w3JaW7cHFV52Af9ZUq9toQuYK0oo+6ZvA0bOjI7Nn0Tv2J9YP7SF2k/u7AG+OpafCc/fz4xfr7jc7i424bxG1ybsH7JmW5JrJs/R7vuJ9yzU9kamB957tRrn3emFStUGB4JgyYvwaPCkZUO4Dxe1qY4NCZMKnaca593gQoTo4yn59sfZjU/rAF/q5JkK1JAOXhJyW31twGUbD8+qr8LlyChgapWfQ+6QuvJ4BpR3d3DXNFzqjEVcxMBDTX9IqblsGoB49PctoPSZFMJWe59wvtUYP9LtO1z/KgTxTE9KQdPOwN+62lBZ3F9OupCcRl7FqyOrmbOwKi4L3ppaO4EfcvkC6JBfXbEOV+DYG4B0f1Wz7cffQoDsAt2VZf4W26O2qMknI9BhyfrO7rLgFEDhrLO/STXafDbyz99TavEPfim/O9PYACwjPccREx9kjy4gY3rEuJis4FawXB0WL63cwkYhi7p/rtEHG7oJMfmVo4jqvxyZeUcxtFEkRJULMfaqLEH7X7sbuyGQcS7Tm23+G74DpeUuItmnBbm+iLORlEFz47SxshtCnaDOvLvIqs25n4CM6t9Duk6/EwFAluC4mu5i2NbNgvlhzWBbEM3b5u6ZIuXqpMu5eTv1s72m7Glaj5C7lGRbHdxQJfSJe8YGzvAxsFqcES0q2keGIcu+Wviuti6q2SvyPx501yCJry0rT3DfUoa8VpeKhWvlDglpk5iL2JKl+rSzhWdkRAlPg3BeA2HNVu+3V3ZRO5Ak/8wb0HUoKR4oYzuBZV3OKfiZ4UxVyzNOYWVhKdOPYkzYsk4o6ACJaGmZNaw2sLZm5s4fS54FHk0gwy3lqsB+OCuqNHspCODk+s0mgmXaae9XNcQY5T/G3mlhpnfPHiOLR/L07ZH1nHlyED14QKU90+fL1lF3wVloa5XSACab3dknG5pRewLypxkLWqPXkHt+H6GcFgzNXh6CkbR35uC+GJWlMkfRPujMReY4U6x3qgHuzVTKuUEjEntUDae7dMXvmRUVyHy2+qX9JOJAw6BV7767LMc9HFUud/OdUS/Obq/z8VF+McdKnU4Q9WFae7lvm54rlhKEWXHh1X6E04ELWufuc5UVQnc2ZcfKE3LiQuL0qOwP5t0oKj+dSbGYnEOPZKcKeLuPpPOkAQl106Bs1d4CQi2VSENvjjJhxe50jZU9qMc4iJOVhdZTGC3VIUQ7rdD9+wB05P7MO1SLRIOU9O1OcX3Drrc8eQZEOUhbb6oTocXe0i0CmoxnnE+CPYhKttaQNeTTQbZMc32wDIJkfUNGIlc5hYzRHmq46rf7KinqWU/D7ShTrQrTFcfQqQZYDPIeSCdDd/pBuxXFI3OkqPbm6sJ4eTvWOrr5mHEX3o+SRuGAanyBAfT1RqDytntVXJV6RLJsNaN0hQzMyVAtg12jzdIBTUwMwIaT4vXXJelQy3A1MyLuMGXDXLPxM5Joo6e3ADyfCglS5xkRzQTssUV+5v+z7o/lfaa+95ZXGtArae1hDsawOJSq1xhQdalVS8TdprWyXVVquftGqtNF5bAV9OrMl/dnIlVebKUOWWyoVzKsvhKrRzpQUbptav/pxNmSG0Dbli1a/scJLtZlftRObwqrPwvsZdtuaAdNkmG+5OuTp5qUJYCG7eUfmZ3yd3x9KYm1tBFSubo6/8TWFJy9rVWzbqvv4mhtIXxWsnXXxN6cUqWgrfkYECtyV7BwyxK7hvzlVA5N9zBhu5CosKdy85h+mxKjRNFX4hA+J0leamsMYdpZ/5x2TvWhmJ5VRQOWWP6Ss/yd3Z5hHgB2b3Gez2S3OFKJlIEI4aHjiQS6h0RTUSYm2XpotwDBHkfNhad8/+g/4hPB8Y6utkVImfk/1lsbnZDferih1bnL4O79LdUVOErHsfiGdPTxxZofpOpPYhZkXZOLuIGarCiJsZzYoR37Qo2vQiY2XFjepjgcJMd1xLvrLMXqITxZFNcDpE7r6g7pDvDUK+6YN84wEUtl7+qeztVtmmJoV/pW9K/DpP7sbnp6mDY0AJ8Ij3xiG4vkMsbeXf6rJNsE87dCz7LL6Kc5ObcoNLW7JX2NLt+dWHFf2iopqKUsIrh+JFeBzlxQzUhpYfr1hpzzzMK7WU8YyNqC5J2foyghNufLclIQhH4YfJZQtiCewIo9vNcUE4Gj9KLp0H5UzZpuonL+7+KZGkJX90t0Si1i6dsxo6OyUSd8gf3SmRRHpzdwpobFqH1Mj2vcLInBrJ/DUCut9O887dc/P1ZfWw+1feXEBz+NtrxtVhINvuS07XOwTWqHKnkydNj2kaGCp+2GLNtwjBB/bpGV/PAFYnNSj7eIxawuYidAe/eMW8MkxNzqxOxDloJIrjz7B0C+bYGCiwIj9Q6rd3qUnUsL1M9kgjS23p/u0SFQwjV2HMBmB3OrCn1LNffNHbuondvPh1TGzzWKjefHrWduya0a4qXIaPPGJ30T0EE3eeNKFi3NBOriwBsq2ehwNyRSll8v+z+RRTcwddopeifO6ejMQdTDmLxrDps5EkwVmJW8voAmkCmz4XxTqukbi65OVy4yI+ieQuFzuKX5a8seRx6No4MEawFPdag+hz2NjJLiIgNgG7kyJGE7tDIXujFMXclgiz3/K2kcEIPpGSgRJwVhU9caejJitZL/6go65cicshwm9/jIkL7DoZO6JGjZRvXQfRMx0tfADJnqtwlJiSvPna0/H6eTwEFrswl0xVZkba/K3oZGIMG8+3E/AvsbPSHt2IzJUzf3fPTiRNhO6wKqDZWAEUkKrSKOEbdN0sVU1VaO4shr3CZm6BrYBiaEfR2ayniyvTSsAQeevlt2jvPUwUgYa+ZLFkSTFwJk/j0NZWX+SOUqqQNxa2NPogD5RRluRrucdoq7qtxSG3XeY71O1tYcOSvYdUjbt281Ht5hjpmmjtpg6q+A8VqVoVaGswEER6bvC0YRoL9b/qgIXJQj0wovqrUlEsKkgm+VATapK+Xy5LBIkoXzPQQc57fCynt4XJOzcxvFvikpOJ4miSOyWmVid6I04jhQ6nZaEYVJUYXLtNR11L23G/N8uniGQPIPc7vN265gjIvNLyFdJtNtBHyokRsnsT7ZTSCHNSq50fEZrfhnItTA7PDnP1n4C4I/XrPeLF/4IpdnHl4y9RZeIgdmUQjs7CHm3et/+2wf/oorYWdBukyeNswqc/vJrAQZ1kMW+mgR9zVjULPjQ0+NnO75LK8QqTgNWzV4pw6ySrjmLA7ZyeqsbFuPUaq5qiz+2+d83kNN3NMMIUmRPCcI4fzZLqYxxsiKyQMJLtBYY9zGDrVn8vd8eYCFYEy8Ml0hl5oKwwnssp4Hf9uDGIj+Oz1zmdnJFzA5E+jrbSVb/2b+5f/NavyhmbmZ6CoDBwUHOXJ7m/018z2C5b27Lv4T7Zml0G/H5zpbhhtxlYZ5VgTrJIDSebxZl5Z8RakL//ASkWCRZgJt6JoywSG2on3gYcI70G9y0qMcTJM4vuKcRtnBafcbTm7vKWSHo8u8dufHFfi45Q7cj/KEjBepNXkalfI0lE+keg8kPp/LZyQ2zGMFPZHmOsGY7Pkf5ds44tUQEKosFtqz/BXfjwkjPOSC+a/BRYLgnqGiNis4P+E65KAIUX67gp7Ni04mgM90XMV4d42dG3RwPiUAvuP8mqpLm2/WAezNkZVF6pGaZC73g7dhyfROFGWnUBJmHIp8CTYeevHlhRvSfG1WSXu7ajhms83epgkCX2J3JrxMvAEMTj0BnnbbY9pwW4HPUcpxfRj/x36vEiMO2YfnZxDtgPlQZy7Ib4YjX/nBhFwajdXsm0reciTkH9ycZPufm86HM03VJWYFqSHzigpt3Gajvy8mP3DVbroxYjHY2Nn25AXGcY05Fm7GC/+9TOEKK3aUczwy3Hg2Hh4wSarwWDa7dGsByluproL7LSiXH8nM+fYpfmf1/IzcT1ODQUiwLqPldqBd1J9rE7uV2/aX5Xde50umbwm6ldyb2kUnz5Br+HU5A6JiRSSKInCudB++XhG4qnr0upbwXo2J888HzRsnflv91wC9a9svRFjht9qjKh9E5IOuWKJNWO39hC+ZJbjA4jZ+Wrb6GiW9GJlFvyTitXUXZuO1FFz9zmeGM0+FsTnubb8wljBb1rpyTTC4mpeYUxlivsvyQt6Cyk30hLJEaxd6I7XSSxq3U4QD0jbxg34+NLxARrdC/JplzY6IeOYGGtA2VPSRMpj5h4Aksjja0VgZ8ibJrj6UEtftLszhNvUdu4kXfY+DsyRvf4mj/ff6LLNXk54CkDkD5I5LPY4mVBXLcB9OG74n01FboZxYyeUVwD616Zx6GzkRs9Tz6dI5LQiWTjeW4uP344yY0eFJXmRvSRS0P3pOhqX9OJQIloIkzF9djcD3IWGi+2/VOsauUq0qbtTUYhWJcUFVHiTeSSLs3LjEmQ7EsjOoJxIenCG8lhfaVab+JovXrNf3Awyp1l7usI6npfORUorOdEdx3BlWAHAndnHHJMS3awjoi0Q4fTEh1sI8I9bPe6qqiZG1i57NLZqGZhBFqvF5ih8dkua+6IFrbYEgrB8RRmSFKhM5J7EaCNWu1XhoGspMDLWFgomy2VPcwTrloAzgNJL+PoCql8yYwhftyqF0CS9TSJKJUq4AWIOG7K84BV/Uwia2RrVhwblm5c+9WnxpfOqZephGhnfYHWf8kuUWH2Vv7Bh2XIDmEhjta+AXbAkDuZkfwiQ+CYVQc8L9ED8UkMawezwFLo8Y+ytb9pYdvLFRE0Y4oBMzY7O5xwJRKVSK3h8jFoEX/aufLXKZBIPC6d1y+R1LmXpSX7FjlUrlDqCFjliVrRveuqFxMkkqKk8qJhr2ehimyNCjgxtvd1SZd0AttLdiTWK8J1ABmgLGV9KZXmsG2h6BVWWmLZP5IueegS00DmpY6A5i+fNIndXrGhHFdexOLvqCrRz60Vp8h0PRrtRMHo9AY3gdjrOdEvscPDjZPsvn/+CLIyEZOo/Qs5RAVwXfhxmWxvmcE3U8PIEOWt0ZVSa4jYFoqWkNIiy35OuuRRvcENmZVCaMpYZe1OJpUXxbv4mBUjndpWu3G9U1SImC83KIsTKH1q9kIvskNhEufWtd8ittO7/KB7biGll2zXRZmS5zXeILCZ79Ljs8fCVjLTcdopZh0rnt9//HTeZ1XK8Gc2dhq/99ip7VtwoieRRchfFgxRcIo3kUmWn+KLYOlGtpyQsdFfMt1vRU/D+g0cxBKe++fouffTmsouoJ8dXXJfKtNS69g/B0LSsnAEObG/IQNFobJUkmcl0LxDkY6dFVXXSVt/UPc9rLq8kpXB/I+we2Fl5oMCoyvIQeT4Ey3/4PI+RqGhxE3apwdXy53RHsutFANNtxR7e2f/3cbQOjg52D9ZMSSZ7ggRJpSwXKMgLRxN+LenJhHcZKI0huRBSW80clTH/jiwPSkWRaK8mMtntXXU1ffZ7vey2nwBtdNWyze23aJutNvVMUptm9keuLjfdL9jUHwxOYycMNCdjlJQ1iCjdJtE6MzAix+3sFIebHA51GaJ95yQvGmTuZ/qXlsnis6FWgfB4Y76cdma8dCU/x8fubn+x6H/iVV8xub3PwHW4v8DgIqvdERahyHE9aXgbljnxv/837uxaQVWxk0bwaybmhuAdbqY9zrMvrnx0FD19gvgTvPGbsHYquV3Dkp2KzJ6hwxYXI+O3shA609g+pV2T60Pge812lty5TowKpsm4KoNoV9V22lUpZR13dpxIw8e+wCRjF6RvRHdqFN71WNqn3pc7aeBkSjAA4TjNWCEXgto6pk5uv0wl/jr5LKGkNZNA9v2ulHaUpoOrTPi26X84W7ozrvaAXVD+kUyl7iWF9gQqZr18tkcLdZckpS8wJxxt41IO2n7CL1W0DRgju7ippImG5QUKbc9eYHN1tXs0Mu7qZM5un02l/iZF9jU3L0sOkv6I/TMAxRFN5+7UJTcOOeV3Ulyel1VJ98o9RXTNdSY9rnGnemCakwmmcZpp1XzAhVQYS+955Zf9Oi9Quo2bgo5kL5ZpfVoGTe4NhvSddXGtSEH8vxriN/B5XmBKl0HMd1WHehQpoN7MTkCqnVdOKRALl7gJRCOxWZLIga8dgf0/wcy7dr/AVDJ93a0DNK4toCKy4CD2lEyThFTN+yHyCgg7zf7DSfcj5aZPzbP6u6FVT2UNUzafLhrRmrr2LcIVJfkkFgANPO9bNzn1Rv7mzmorOf1nxIrR11Lv3zUDsJNWN4L+vw8o72mjbVbmtKL+oc5rreX9t/mGJm+sosRIzkBSI+u1IGnk/L8V1dKjct/9OmpELV2oP6a1+0GpNdXByiRDsaA2A5B6HgnnfhjLV6v9WnZDcj3rpTE5u1kUzWQuaqEsgzXlkNxpT7R8p8eQN4Xo27Pu3F3AejFjOZ5SvNDj9/ntdqSnRmsHRhvypp+fhsvFiD16zEvgtxR1QD6ZC7DT3yhPlX67rxqZR/StvMDHsO7WrkA/PMDX+NUDoUFrNYp0rmmPz6GEHSHAQEg9th87stPo0vF9vydJrMOAAAm/8RTAwCYbda/+1vjv1m66bpIBDoCzQwB6k1rLAD61rP2f/DdAL0pnOnTqOGtAf3j9pAS64FuzzZVM6zLl8kcNV4LtJq3Y/2kkH42pcNTUIUxbWUp7WpkuoSdY29KucIf+AtS2AEyIhCGZujMqqp9oNIG0jj+zYVpfdOkaY1hnSsC9KZsTtRzu6eUqKlkd0WSsKVSG/Gzwv5mSShrjHrrlF3aMh2sjTbdxdaXtGuFNUOrOq2rPj2Tz6/+dnT56HK9zYM6padO5EOXyfLQdH7aNQnDiMUoSHoPM126tpePlSXLoAIdrLX0+4SocvGksrSyfbS5vYr4+IviS8LyiEJZc3dlLP3yyaOKZNyPWVkMUOuVdMuK07gldD6XNpYyOUbS6cSn9mCN9pkSWlI08VswoH3OtzJiXUX5MSvwawXd9iZ/1K0sDCNPllU8R4bLY4BD2UtfVvMYdf7oX72rzdb0l5z7S6E93mwJ83rMSuxcne33TPWXno1yF0Y/sTlqdBGD4UWgZYzk/upgskrV+ulOsVppVDeFpZagajhXHL0S0qzMvGi/qK3C2K4kGY6TTaq3N4RPWZjKuhcZ9a3WQKuV36pT16eM9Luq+0iqerfWuZtmd+XWXRGjPF/6S17ly6ri9ZW9wxUhajm2FveXea8JUlZo+Uf5qpGEAjaDCXWUwQv5KEc7UmK9FrYt2Xfux7NSSmdby7FVlEJIQsRSbaMMn59tJ8cyqci2kG2fJLJ1TELUOm2ijBUn2zaWXwIE4LMykuyRs20F4AACsT0KBIDGF4aKDgCuYD4RYXEFoQaeiMmK6ZB0ItlaZYJSU0c2lcPWNF1CYeJFCODHXxRF22yxdTEUGRJa4GA+pzYWyoua0CkQXG0tkJGZ5yNy9SLE+Im9qbEm5AlECWM8vYdgAbxq7RW9tJd6kQIgQ8eA2ojtdtk9VPtdriNVhxKjhNGyeaFYodbIC+Ph+VCjEyP42dzNR+jAIrIQppSoS585myhVN07cAoPln9d7C+TtAgAAAA==",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 254,
          "bodySize": 12375,
          "_transferSize": 12629,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2022-03-19T17:57:54.245Z",
        "time": 15.486999996937811,
        "timings": {
          "blocked": 1.0280000041034074,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.08999999999999997,
          "wait": 13.799999996658414,
          "receive": 0.5689999961759895,
          "_blocked_queueing": 0.35600000410340726
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "k",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20319,
                "columnNumber": 2839
              },
              {
                "functionName": "t.scheduleTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 7617
              },
              {
                "functionName": "onScheduleTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 4692
              },
              {
                "functionName": "t.scheduleTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 7516
              },
              {
                "functionName": "e.scheduleTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 3524
              },
              {
                "functionName": "e.scheduleMacroTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 3877
              },
              {
                "functionName": "f",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20211,
                "columnNumber": 342
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20319,
                "columnNumber": 2032
              },
              {
                "functionName": "T.a.<computed>",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20211,
                "columnNumber": 3356
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20537,
                "columnNumber": 2241
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "g",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28335
              },
              {
                "functionName": "u",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28266
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 24153
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "i",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28598
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28669
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 30756
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26790
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "g",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28335
              },
              {
                "functionName": "u",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28266
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 39094
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 32586
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 30813
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 33107
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26823
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "n._subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 13711
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "n._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 12248
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "t._subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8951
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8557
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26790
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 33041
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 30756
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 32544
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 39037
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "i",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28598
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28669
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26790
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "s",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 29136
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 29265
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26790
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "s",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 29136
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 29265
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 37732
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 31305
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "g",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28335
              },
              {
                "functionName": "u",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28266
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 24153
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "i",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28598
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28669
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "g",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28335
              },
              {
                "functionName": "u",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28266
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 37814
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 24153
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 37732
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "i",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28598
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28669
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "g",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28335
              },
              {
                "functionName": "u",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28266
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 39094
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 30813
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28389
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26823
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 37207
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 32586
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26823
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 37207
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 29216
              },
              {
                "functionName": "r._complete",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9932
              },
              {
                "functionName": "n.complete",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6878
              }
            ]
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "524",
        "pageref": "page_1",
        "request": {
          "method": "POST",
          "url": "http://localhost:6006/experiment/defaultExperimentId/data/plugin/timeseries/timeSeries",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:6006"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "183"
            },
            {
              "name": "sec-ch-ua",
              "value": "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"99\", \"Microsoft Edge\";v=\"99\""
            },
            {
              "name": "Accept",
              "value": "application/json, text/plain, */*"
            },
            {
              "name": "Content-Type",
              "value": "multipart/form-data; boundary=----WebKitFormBoundaryH3I2y8ud4Mj1Cxzo"
            },
            {
              "name": "X-XSRF-Protected",
              "value": "1"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36 Edg/99.0.1150.46"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            },
            {
              "name": "Origin",
              "value": "http://localhost:6006"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:6006/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-GB,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,en-US;q=0.6"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 812,
          "bodySize": 183,
          "postData": {
            "mimeType": "multipart/form-data; boundary=----WebKitFormBoundaryH3I2y8ud4Mj1Cxzo",
            "text": "------WebKitFormBoundaryH3I2y8ud4Mj1Cxzo\r\nContent-Disposition: form-data; name=\"requests\"\r\n\r\n[{\"plugin\":\"scalars\",\"tag\":\"Accuracy/test\"}]\r\n------WebKitFormBoundaryH3I2y8ud4Mj1Cxzo--\r\n",
            "params": [
              {
                "name": "requests",
                "value": "[{\"plugin\":\"scalars\",\"tag\":\"Accuracy/test\"}]"
              }
            ]
          }
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Content-Length",
              "value": "1022"
            },
            {
              "name": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "name": "Content-Encoding",
              "value": "gzip"
            },
            {
              "name": "Expires",
              "value": "0"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache, must-revalidate"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Server",
              "value": "Werkzeug/2.0.3 Python/3.8.10"
            },
            {
              "name": "Date",
              "value": "Sat, 19 Mar 2022 17:57:54 GMT"
            }
          ],
          "cookies": [],
          "content": {
            "size": 3397,
            "mimeType": "application/json",
            "compression": 2375,
            "text": "[{\"plugin\": \"scalars\", \"tag\": \"Accuracy/test\", \"runToSeries\": {\"tb_logs/MultiStepLR013748-Adam\": [{\"wallTime\": 1647711363.1177452, \"step\": 469, \"value\": 0.9325000047683716}, {\"wallTime\": 1647711388.5490575, \"step\": 938, \"value\": 0.951200008392334}, {\"wallTime\": 1647711415.2980506, \"step\": 1407, \"value\": 0.9610000252723694}, {\"wallTime\": 1647711441.8729265, \"step\": 1876, \"value\": 0.9642000198364258}, {\"wallTime\": 1647711468.2443435, \"step\": 2345, \"value\": 0.9668999910354614}], \"tb_logs/OneCycleLR014815-SGD\": [{\"wallTime\": 1647711977.550563, \"step\": 469, \"value\": 0.9153000116348267}, {\"wallTime\": 1647712016.3403695, \"step\": 938, \"value\": 0.9628999829292297}, {\"wallTime\": 1647712042.5710444, \"step\": 1407, \"value\": 0.9732000231742859}, {\"wallTime\": 1647712069.765728, \"step\": 1876, \"value\": 0.979200005531311}, {\"wallTime\": 1647712095.8067362, \"step\": 2345, \"value\": 0.9803000092506409}], \"tb_logs/MultiStepLR014231-AdamW\": [{\"wallTime\": 1647711620.0182068, \"step\": 469, \"value\": 0.9323999881744385}, {\"wallTime\": 1647711649.4108608, \"step\": 938, \"value\": 0.9502000212669373}, {\"wallTime\": 1647711680.4092293, \"step\": 1407, \"value\": 0.9606000185012817}, {\"wallTime\": 1647711711.9208183, \"step\": 1876, \"value\": 0.9634000062942505}, {\"wallTime\": 1647711751.783528, \"step\": 2345, \"value\": 0.9666000008583069}], \"tb_logs/OneCycleLR015549-RAdam\": [{\"wallTime\": 1647712442.9980712, \"step\": 469, \"value\": 0.8845000267028809}, {\"wallTime\": 1647712469.705379, \"step\": 938, \"value\": 0.9397000074386597}, {\"wallTime\": 1647712495.8552656, \"step\": 1407, \"value\": 0.9584000110626221}, {\"wallTime\": 1647712522.5951805, \"step\": 1876, \"value\": 0.9656999707221985}, {\"wallTime\": 1647712549.4661424, \"step\": 2345, \"value\": 0.9671000242233276}], \"tb_logs/OneCycleLR015052-Adam\": [{\"wallTime\": 1647712136.915745, \"step\": 469, \"value\": 0.9014000296592712}, {\"wallTime\": 1647712163.657636, \"step\": 938, \"value\": 0.9455999732017517}, {\"wallTime\": 1647712189.858882, \"step\": 1407, \"value\": 0.9638000130653381}, {\"wallTime\": 1647712218.1383772, \"step\": 1876, \"value\": 0.9682999849319458}, {\"wallTime\": 1647712251.9831536, \"step\": 2345, \"value\": 0.9692999720573425}], \"tb_logs/MultiStepLR013420-SGD\": [{\"wallTime\": 1647711149.715168, \"step\": 469, \"value\": 0.9556000232696533}, {\"wallTime\": 1647711177.0296822, \"step\": 938, \"value\": 0.9728000164031982}, {\"wallTime\": 1647711206.8902068, \"step\": 1407, \"value\": 0.9767000079154968}, {\"wallTime\": 1647711233.5901923, \"step\": 1876, \"value\": 0.9815999865531921}, {\"wallTime\": 1647711259.581198, \"step\": 2345, \"value\": 0.9821000099182129}], \"tb_logs/MultiStepLR014532-RAdam\": [{\"wallTime\": 1647711813.846024, \"step\": 469, \"value\": 0.910099983215332}, {\"wallTime\": 1647711843.9537125, \"step\": 938, \"value\": 0.9380999803543091}, {\"wallTime\": 1647711873.6561453, \"step\": 1407, \"value\": 0.9495999813079834}, {\"wallTime\": 1647711901.9558964, \"step\": 1876, \"value\": 0.957099974155426}, {\"wallTime\": 1647711932.0635734, \"step\": 2345, \"value\": 0.9620000123977661}], \"tb_logs/OneCycleLR015321-AdamW\": [{\"wallTime\": 1647712292.246713, \"step\": 469, \"value\": 0.9013000130653381}, {\"wallTime\": 1647712318.086829, \"step\": 938, \"value\": 0.9451000094413757}, {\"wallTime\": 1647712345.557591, \"step\": 1407, \"value\": 0.9635000228881836}, {\"wallTime\": 1647712372.9329946, \"step\": 1876, \"value\": 0.9682000279426575}, {\"wallTime\": 1647712401.2383282, \"step\": 2345, \"value\": 0.9689000248908997}]}}]"
          },
          "redirectURL": "",
          "headersSize": 259,
          "bodySize": 1022,
          "_transferSize": 1281,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2022-03-19T17:57:54.366Z",
        "time": 42.34299997915514,
        "timings": {
          "blocked": 0.9429999831654131,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.11800000000000002,
          "wait": 40.85799999796971,
          "receive": 0.4239999980200082,
          "_blocked_queueing": 0.7239999831654131
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "k",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20319,
                "columnNumber": 2839
              },
              {
                "functionName": "t.scheduleTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 7617
              },
              {
                "functionName": "onScheduleTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 4692
              },
              {
                "functionName": "t.scheduleTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 7516
              },
              {
                "functionName": "e.scheduleTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 3524
              },
              {
                "functionName": "e.scheduleMacroTask",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20203,
                "columnNumber": 3877
              },
              {
                "functionName": "f",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20211,
                "columnNumber": 342
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20319,
                "columnNumber": 2032
              },
              {
                "functionName": "T.a.<computed>",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20211,
                "columnNumber": 3356
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 20537,
                "columnNumber": 2241
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "g",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28335
              },
              {
                "functionName": "u",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28266
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 24153
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "i",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28598
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28669
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 30756
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26790
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "g",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28335
              },
              {
                "functionName": "u",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28266
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 39094
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 32586
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 30813
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 33107
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26823
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "n._subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 13711
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "n._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 12248
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "t._subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8951
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8557
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26790
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 33041
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 30756
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 32544
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 39037
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "i",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28598
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28669
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26790
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "s",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 29136
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 29265
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26790
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "s",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 29136
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 29265
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 37732
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 31305
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "g",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28335
              },
              {
                "functionName": "u",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28266
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 24153
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "i",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28598
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28669
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "g",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28335
              },
              {
                "functionName": "u",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28266
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 37814
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 24153
              },
              {
                "functionName": "t._trySubscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8651
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8573
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 37732
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "i",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28598
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28669
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9540
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8543
              },
              {
                "functionName": "x",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6467
              },
              {
                "functionName": "t.subscribe",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 8491
              },
              {
                "functionName": "g",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28335
              },
              {
                "functionName": "u",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28266
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 39094
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 30813
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 28389
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26823
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 37207
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 32586
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 26823
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 37207
              },
              {
                "functionName": "r._next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9758
              },
              {
                "functionName": "n.next",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6714
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 29216
              },
              {
                "functionName": "r._complete",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 9932
              },
              {
                "functionName": "n.complete",
                "scriptId": "18",
                "url": "http://localhost:6006/index.js?_file_hash=4a366cbe",
                "lineNumber": 18418,
                "columnNumber": 6878
              }
            ]
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "475",
        "pageref": "page_1",
        "request": {
          "method": "POST",
          "url": "http://localhost:6006/experiment/defaultExperimentId/data/plugin/timeseries/timeSeries",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:6006"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "178"
            },
            {
              "name": "sec-ch-ua",
              "value": "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"99\", \"Microsoft Edge\";v=\"99\""
            },
            {
              "name": "Accept",
              "value": "application/json, text/plain, */*"
            },
            {
              "name": "Content-Type",
              "value": "multipart/form-data; boundary=----WebKitFormBoundary4rmntnVzGxYZ6OAx"
            },
            {
              "name": "X-XSRF-Protected",
              "value": "1"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36 Edg/99.0.1150.46"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            },
            {
              "name": "Origin",
              "value": "http://localhost:6006"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:6006/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-GB,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,en-US;q=0.6"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 812,
          "bodySize": 178,
          "postData": {
            "mimeType": "multipart/form-data; boundary=----WebKitFormBoundary4rmntnVzGxYZ6OAx",
            "text": "------WebKitFormBoundary4rmntnVzGxYZ6OAx\r\nContent-Disposition: form-data; name=\"requests\"\r\n\r\n[{\"plugin\":\"scalars\",\"tag\":\"LR/train\"}]\r\n------WebKitFormBoundary4rmntnVzGxYZ6OAx--\r\n",
            "params": [
              {
                "name": "requests",
                "value": "[{\"plugin\":\"scalars\",\"tag\":\"LR/train\"}]"
              }
            ]
          }
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Content-Length",
              "value": "214314"
            },
            {
              "name": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "name": "Content-Encoding",
              "value": "gzip"
            },
            {
              "name": "Expires",
              "value": "0"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache, must-revalidate"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Server",
              "value": "Werkzeug/2.0.3 Python/3.8.10"
            },
            {
              "name": "Date",
              "value": "Sat, 19 Mar 2022 17:57:54 GMT"
            }
          ],
          "cookies": [],
          "content": {
            "size": 946989,
            "mimeType": "application/json",
            "compression": 732675,
            "text": "[{\"plugin\": \"scalars\", \"tag\": \"LR/train\", \"runToSeries\": {\"tb_logs/MultiStepLR013748-Adam\": [{\"wallTime\": 1647711328.1474535, \"step\": 3, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711328.2226603, \"step\": 4, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711328.6490035, \"step\": 10, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711328.7949646, \"step\": 14, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711328.8309371, \"step\": 15, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711328.945301, \"step\": 18, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711328.9856627, \"step\": 19, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711329.0238152, \"step\": 20, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711329.1037529, \"step\": 22, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711329.1462054, \"step\": 23, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711329.274958, \"step\": 26, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711329.3189225, \"step\": 27, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711329.5897532, \"step\": 33, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711329.7203672, \"step\": 36, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711329.8011396, \"step\": 38, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711329.8958092, \"step\": 40, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711330.261331, \"step\": 47, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711330.3049443, \"step\": 48, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711330.3458989, \"step\": 49, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711330.433096, \"step\": 51, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711330.5601149, \"step\": 54, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711330.6889825, \"step\": 57, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711330.818407, \"step\": 60, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711330.8602693, \"step\": 61, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711330.9008346, \"step\": 62, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711330.942462, \"step\": 63, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711331.0246823, \"step\": 65, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711331.0706124, \"step\": 66, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711331.115052, \"step\": 67, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711331.155477, \"step\": 68, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711331.2375557, \"step\": 70, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711331.2798448, \"step\": 71, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711331.5205734, \"step\": 77, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711331.6406639, \"step\": 79, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711331.6848724, \"step\": 80, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711331.7762704, \"step\": 82, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711331.9380744, \"step\": 85, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711332.1190252, \"step\": 89, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711332.1643107, \"step\": 90, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711332.5564413, \"step\": 99, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711332.5989602, \"step\": 100, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711332.721349, \"step\": 103, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711332.8569343, \"step\": 106, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711339.8010476, \"step\": 107, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711339.8292563, \"step\": 109, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711340.2058637, \"step\": 116, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711340.4198875, \"step\": 121, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711340.6538684, \"step\": 125, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711340.7093377, \"step\": 126, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711340.786624, \"step\": 128, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711340.866734, \"step\": 130, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711340.9082248, \"step\": 131, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711341.662971, \"step\": 136, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711341.6774724, \"step\": 137, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711342.0931458, \"step\": 144, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711342.1969728, \"step\": 146, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711342.24165, \"step\": 147, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711342.4197116, \"step\": 150, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711342.835934, \"step\": 157, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711342.9815514, \"step\": 159, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711343.0264306, \"step\": 160, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711343.1165297, \"step\": 162, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711343.2067072, \"step\": 164, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711344.8032703, \"step\": 170, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711344.848188, \"step\": 171, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711344.881983, \"step\": 172, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711345.0114639, \"step\": 175, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711345.0808363, \"step\": 176, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711345.160637, \"step\": 177, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711345.238847, \"step\": 178, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711345.3636844, \"step\": 180, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711345.4049346, \"step\": 181, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711345.5381627, \"step\": 184, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711345.5838656, \"step\": 185, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711345.637172, \"step\": 186, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711345.8182023, \"step\": 190, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711345.8630605, \"step\": 191, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711345.906528, \"step\": 192, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711346.046339, \"step\": 195, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711346.2291598, \"step\": 199, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711346.270855, \"step\": 200, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711346.3622956, \"step\": 202, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711346.4028733, \"step\": 203, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711346.4483624, \"step\": 204, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711346.4899561, \"step\": 205, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711346.5929246, \"step\": 207, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711346.689512, \"step\": 209, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711346.772915, \"step\": 211, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711346.8610225, \"step\": 213, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711346.9496858, \"step\": 215, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711346.994285, \"step\": 216, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711347.1267679, \"step\": 219, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711347.1780722, \"step\": 220, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711347.2225664, \"step\": 221, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711347.2664027, \"step\": 222, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711347.3498464, \"step\": 224, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711347.5653956, \"step\": 229, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711347.909351, \"step\": 237, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711347.970165, \"step\": 238, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711348.0143378, \"step\": 239, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711348.1434503, \"step\": 241, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711348.2031515, \"step\": 242, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711348.2899299, \"step\": 244, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711348.332046, \"step\": 245, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711348.3721678, \"step\": 246, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711348.4123468, \"step\": 247, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711348.6293166, \"step\": 252, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711348.6847649, \"step\": 253, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711348.7622724, \"step\": 254, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711348.9835517, \"step\": 258, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711349.0291243, \"step\": 259, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711349.094944, \"step\": 260, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711349.1995523, \"step\": 262, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711349.6357195, \"step\": 270, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711349.6881056, \"step\": 271, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711349.8523936, \"step\": 274, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711349.9557853, \"step\": 276, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711350.0531938, \"step\": 278, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711350.1569428, \"step\": 280, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711350.2722387, \"step\": 282, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711350.3283842, \"step\": 283, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711350.4380004, \"step\": 285, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711350.5657563, \"step\": 287, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711350.619952, \"step\": 288, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711350.7886002, \"step\": 290, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711351.05299, \"step\": 295, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711351.0930583, \"step\": 296, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711351.135133, \"step\": 297, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711351.177171, \"step\": 298, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711351.523191, \"step\": 306, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711351.6144576, \"step\": 308, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711351.65973, \"step\": 309, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711351.7920325, \"step\": 312, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711351.9761922, \"step\": 316, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711352.0693312, \"step\": 318, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711352.113676, \"step\": 319, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711352.254466, \"step\": 322, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711352.3387432, \"step\": 324, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711352.59295, \"step\": 329, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711352.7094045, \"step\": 331, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711352.754723, \"step\": 332, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711352.983152, \"step\": 337, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711353.0282838, \"step\": 338, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711353.1185198, \"step\": 340, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711353.2556202, \"step\": 343, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711353.3532004, \"step\": 345, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711353.397155, \"step\": 346, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711353.5639691, \"step\": 350, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711353.6464026, \"step\": 352, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711353.686594, \"step\": 353, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711353.7261395, \"step\": 354, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711353.905678, \"step\": 358, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711354.090998, \"step\": 362, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711354.1313446, \"step\": 363, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711354.1753347, \"step\": 364, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711354.2210608, \"step\": 365, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711354.2649477, \"step\": 366, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711354.3094246, \"step\": 367, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711354.6389685, \"step\": 374, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711354.7700424, \"step\": 377, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711354.8123732, \"step\": 378, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711355.1709802, \"step\": 386, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711355.3546278, \"step\": 390, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711355.4007554, \"step\": 391, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711355.4468365, \"step\": 392, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711355.4926682, \"step\": 393, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711355.5388248, \"step\": 394, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711355.6935732, \"step\": 397, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711355.9240103, \"step\": 402, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711356.014907, \"step\": 404, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711356.1848311, \"step\": 408, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711356.227521, \"step\": 409, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711356.415136, \"step\": 413, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711356.4557893, \"step\": 414, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711356.5016282, \"step\": 415, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711356.638333, \"step\": 418, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711356.7757444, \"step\": 421, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711356.8213735, \"step\": 422, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711356.9639826, \"step\": 425, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711357.0084991, \"step\": 426, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711357.1905243, \"step\": 430, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711357.2350993, \"step\": 431, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711357.4113753, \"step\": 435, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711357.4550142, \"step\": 436, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711357.4989946, \"step\": 437, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711357.6015751, \"step\": 439, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711357.6451297, \"step\": 440, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711357.6887748, \"step\": 441, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711357.7750034, \"step\": 443, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711357.818726, \"step\": 444, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711357.8630474, \"step\": 445, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711357.9069357, \"step\": 446, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711358.0820944, \"step\": 450, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711358.1260307, \"step\": 451, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711358.171586, \"step\": 452, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711358.2145824, \"step\": 453, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711358.262743, \"step\": 454, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711358.3430593, \"step\": 456, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711358.4257472, \"step\": 458, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711358.510711, \"step\": 460, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711358.5530663, \"step\": 461, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711358.7174933, \"step\": 465, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711358.792364, \"step\": 466, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711358.8532948, \"step\": 468, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711363.4826903, \"step\": 470, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711363.6568832, \"step\": 474, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711363.702213, \"step\": 475, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711363.8346617, \"step\": 478, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711363.8791778, \"step\": 479, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711363.923927, \"step\": 480, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711363.9686217, \"step\": 481, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711364.0623088, \"step\": 483, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711364.1048486, \"step\": 484, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711364.2289426, \"step\": 487, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711364.273575, \"step\": 488, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711364.31169, \"step\": 489, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711364.396633, \"step\": 491, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711364.5107853, \"step\": 494, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711364.6870825, \"step\": 498, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711364.8537169, \"step\": 502, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711364.9004653, \"step\": 503, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711365.043232, \"step\": 506, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711365.1789806, \"step\": 509, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711365.224448, \"step\": 510, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711365.270279, \"step\": 511, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711365.3180437, \"step\": 512, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711365.3682353, \"step\": 513, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711365.4148538, \"step\": 514, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711365.5429564, \"step\": 517, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711365.5813885, \"step\": 518, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711365.623808, \"step\": 519, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711365.6745532, \"step\": 520, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711365.8040085, \"step\": 523, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711366.189316, \"step\": 530, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711366.3289847, \"step\": 533, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711366.3773458, \"step\": 534, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711366.4676123, \"step\": 536, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711366.518044, \"step\": 537, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711366.5602756, \"step\": 538, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711366.6012177, \"step\": 539, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711366.6470351, \"step\": 540, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711366.725174, \"step\": 542, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711366.809376, \"step\": 544, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711366.895752, \"step\": 546, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711366.9288669, \"step\": 547, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711367.0614076, \"step\": 550, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711367.151936, \"step\": 552, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711367.2869349, \"step\": 555, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711367.3289769, \"step\": 556, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711367.5979698, \"step\": 562, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711367.6423824, \"step\": 563, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711367.686638, \"step\": 564, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711367.849091, \"step\": 568, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711367.979413, \"step\": 571, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711368.0616987, \"step\": 573, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711368.1988757, \"step\": 576, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711368.3732862, \"step\": 580, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711368.563262, \"step\": 584, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647711368.6103625, \"step\": 585, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711368.6609845, \"step\": 586, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711368.7538474, \"step\": 588, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711368.848998, \"step\": 590, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711368.8949225, \"step\": 591, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711368.9402544, \"step\": 592, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711369.032449, \"step\": 594, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711369.1239815, \"step\": 596, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711369.185227, \"step\": 597, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711369.2297196, \"step\": 598, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711369.2721179, \"step\": 599, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711369.3596337, \"step\": 601, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711369.4041386, \"step\": 602, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711369.4489079, \"step\": 603, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711369.527065, \"step\": 605, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711369.6649835, \"step\": 608, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711369.757012, \"step\": 610, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711369.9166217, \"step\": 613, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711369.957196, \"step\": 614, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711370.044284, \"step\": 616, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711370.1338298, \"step\": 618, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711370.2332988, \"step\": 620, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711370.320549, \"step\": 622, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711370.3635104, \"step\": 623, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711370.5026045, \"step\": 626, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711370.5887964, \"step\": 628, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711370.626559, \"step\": 629, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711370.797943, \"step\": 633, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711370.990557, \"step\": 637, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711371.121822, \"step\": 640, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711371.168305, \"step\": 641, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711371.2122095, \"step\": 642, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711371.25262, \"step\": 643, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711371.298896, \"step\": 644, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711371.5412872, \"step\": 649, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711371.6271715, \"step\": 651, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711371.6671503, \"step\": 652, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711371.7154872, \"step\": 653, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711371.7554967, \"step\": 654, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711371.7955976, \"step\": 655, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711371.9110558, \"step\": 658, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711371.9952226, \"step\": 660, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711372.2940886, \"step\": 667, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711372.4298341, \"step\": 670, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711372.6363714, \"step\": 675, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711372.6851983, \"step\": 676, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711372.7615879, \"step\": 677, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711372.9079883, \"step\": 680, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711373.0093837, \"step\": 682, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711373.062052, \"step\": 683, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711373.1002693, \"step\": 684, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711373.2357264, \"step\": 687, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711373.4567525, \"step\": 692, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711373.553434, \"step\": 694, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711373.6441665, \"step\": 696, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711373.689299, \"step\": 697, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711373.7774112, \"step\": 699, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711373.913124, \"step\": 702, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711373.9574296, \"step\": 703, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711374.0416932, \"step\": 705, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711374.2103403, \"step\": 709, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711374.2524362, \"step\": 710, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711374.3295577, \"step\": 712, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711374.4556468, \"step\": 715, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711374.5419908, \"step\": 717, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711374.6893303, \"step\": 720, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711374.7273874, \"step\": 721, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711374.815368, \"step\": 723, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711374.9050734, \"step\": 725, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711374.9503672, \"step\": 726, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711375.0370207, \"step\": 728, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711375.0834045, \"step\": 729, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711375.168103, \"step\": 731, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711375.2058244, \"step\": 732, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711375.250278, \"step\": 733, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711375.495111, \"step\": 738, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711375.721645, \"step\": 742, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711375.7637773, \"step\": 743, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711375.8048863, \"step\": 744, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711376.2952526, \"step\": 755, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711376.3414814, \"step\": 756, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711376.4261932, \"step\": 758, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711376.646199, \"step\": 763, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711376.6814392, \"step\": 764, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711376.723249, \"step\": 765, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711376.8637452, \"step\": 768, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711376.9026296, \"step\": 769, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711377.062796, \"step\": 772, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711377.2669458, \"step\": 775, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711377.306521, \"step\": 776, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711377.3986497, \"step\": 778, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711377.4376047, \"step\": 779, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711377.4800994, \"step\": 780, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711377.5252428, \"step\": 781, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711377.5673764, \"step\": 782, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711377.8532195, \"step\": 788, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711378.0001686, \"step\": 791, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711378.0807004, \"step\": 793, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711378.164321, \"step\": 795, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711378.3257153, \"step\": 799, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711378.538353, \"step\": 804, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711378.5826485, \"step\": 805, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711378.6279519, \"step\": 806, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711378.6772163, \"step\": 807, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711378.803561, \"step\": 810, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711379.1445045, \"step\": 818, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711379.190777, \"step\": 819, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711379.2832935, \"step\": 821, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711379.3764422, \"step\": 823, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711379.522249, \"step\": 826, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711379.5655973, \"step\": 827, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711379.6099174, \"step\": 828, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711379.7934146, \"step\": 832, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711379.838802, \"step\": 833, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711379.9279332, \"step\": 835, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711379.9690244, \"step\": 836, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711380.0143287, \"step\": 837, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711380.1035538, \"step\": 839, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711380.1457253, \"step\": 840, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711380.269931, \"step\": 843, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711380.3691719, \"step\": 845, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711380.596903, \"step\": 850, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711380.6416342, \"step\": 851, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711380.7771227, \"step\": 854, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711380.909411, \"step\": 857, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711381.0423522, \"step\": 860, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711381.1269665, \"step\": 862, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711381.2503843, \"step\": 865, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711381.2928245, \"step\": 866, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711381.4562728, \"step\": 870, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711381.4919872, \"step\": 871, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711382.0778382, \"step\": 884, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711382.1229777, \"step\": 885, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711382.1683393, \"step\": 886, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711382.2802556, \"step\": 888, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711382.3633893, \"step\": 890, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711382.447315, \"step\": 892, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711382.5798206, \"step\": 895, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711382.6594048, \"step\": 897, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711382.6918058, \"step\": 898, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711382.8100734, \"step\": 901, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711382.8503766, \"step\": 902, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711382.9325817, \"step\": 904, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711383.067678, \"step\": 907, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711383.1129124, \"step\": 908, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711383.209725, \"step\": 910, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711383.2544348, \"step\": 911, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711383.3901663, \"step\": 914, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711383.5651062, \"step\": 918, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711383.6053002, \"step\": 919, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711383.6797316, \"step\": 921, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711383.7644627, \"step\": 923, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711383.9262745, \"step\": 927, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711383.9678478, \"step\": 928, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711384.0601656, \"step\": 930, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711384.10132, \"step\": 931, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711384.1485493, \"step\": 932, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711384.1923625, \"step\": 933, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711384.3176343, \"step\": 935, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711388.9370856, \"step\": 939, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711389.0011292, \"step\": 941, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711389.0465653, \"step\": 942, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711389.1882908, \"step\": 945, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711389.3754961, \"step\": 949, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711389.5085468, \"step\": 952, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711389.6489775, \"step\": 955, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711389.698538, \"step\": 956, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711389.8846593, \"step\": 960, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711389.9708042, \"step\": 962, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711390.0155048, \"step\": 963, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711390.0953374, \"step\": 965, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711390.1937878, \"step\": 967, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711390.2405531, \"step\": 968, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711390.3854513, \"step\": 971, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711390.6036704, \"step\": 976, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711390.688785, \"step\": 978, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711390.7327251, \"step\": 979, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711390.8287265, \"step\": 981, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711390.8792996, \"step\": 982, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711391.0571618, \"step\": 986, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711391.2329366, \"step\": 990, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711391.3492277, \"step\": 992, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711391.461183, \"step\": 994, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711391.5902402, \"step\": 996, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711391.707587, \"step\": 998, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711391.7652984, \"step\": 999, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711391.9386165, \"step\": 1002, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711391.992667, \"step\": 1003, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711392.0368462, \"step\": 1004, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711392.0958753, \"step\": 1006, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711392.308714, \"step\": 1011, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711392.422899, \"step\": 1013, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711392.5460067, \"step\": 1015, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711392.601078, \"step\": 1016, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711392.654464, \"step\": 1017, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711392.9517205, \"step\": 1022, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711393.1860125, \"step\": 1026, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711393.2911248, \"step\": 1028, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711393.3393903, \"step\": 1029, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711393.7013626, \"step\": 1035, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711393.7403314, \"step\": 1036, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711393.7915006, \"step\": 1037, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711393.8348043, \"step\": 1038, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711393.8824506, \"step\": 1039, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711394.079347, \"step\": 1043, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711394.1715603, \"step\": 1045, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711394.2194607, \"step\": 1046, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711394.515863, \"step\": 1052, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711394.563827, \"step\": 1053, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711394.7166915, \"step\": 1056, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711394.8499088, \"step\": 1058, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711394.8984034, \"step\": 1059, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711394.9400406, \"step\": 1060, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711395.0273933, \"step\": 1062, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711395.1668847, \"step\": 1065, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711395.2846258, \"step\": 1067, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711395.4031842, \"step\": 1069, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711395.486131, \"step\": 1070, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711395.5472744, \"step\": 1071, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711395.6084683, \"step\": 1072, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711395.670486, \"step\": 1073, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711395.7283156, \"step\": 1074, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711395.8615603, \"step\": 1077, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711395.9050417, \"step\": 1078, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711395.998125, \"step\": 1080, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711396.044408, \"step\": 1081, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711396.090787, \"step\": 1082, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711396.2114575, \"step\": 1085, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711396.257985, \"step\": 1086, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711396.3086586, \"step\": 1087, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711396.4889557, \"step\": 1091, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711396.8323042, \"step\": 1098, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711396.9228578, \"step\": 1100, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711397.0245826, \"step\": 1102, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711397.053426, \"step\": 1103, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711397.0837936, \"step\": 1104, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711397.1963472, \"step\": 1107, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711397.2581978, \"step\": 1109, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711397.3386023, \"step\": 1111, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711397.3812866, \"step\": 1112, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711397.4731925, \"step\": 1114, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711397.694709, \"step\": 1119, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711397.77979, \"step\": 1121, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711397.8305326, \"step\": 1122, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711397.9713745, \"step\": 1125, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711398.0189567, \"step\": 1126, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711398.121262, \"step\": 1128, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711398.1700583, \"step\": 1129, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711398.2146313, \"step\": 1130, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711398.2568693, \"step\": 1131, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711398.3108912, \"step\": 1132, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711398.4020822, \"step\": 1134, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711398.4399552, \"step\": 1135, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711398.5726972, \"step\": 1136, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711398.8070166, \"step\": 1139, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711398.9466438, \"step\": 1142, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711399.0881672, \"step\": 1145, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711399.1362393, \"step\": 1146, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711399.2317832, \"step\": 1148, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711399.3352587, \"step\": 1150, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711399.3790255, \"step\": 1151, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711399.4203458, \"step\": 1152, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711399.4616535, \"step\": 1153, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711399.6876018, \"step\": 1160, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711399.7562723, \"step\": 1162, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711399.8369534, \"step\": 1164, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711399.928757, \"step\": 1166, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711399.973994, \"step\": 1167, \"value\": 0.00027536883135326207}, {\"wallTime\": 1647711400.2560258, \"step\": 1173, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711400.3014684, \"step\": 1174, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711400.4045877, \"step\": 1176, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711400.455656, \"step\": 1177, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711400.5052803, \"step\": 1178, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711400.765483, \"step\": 1182, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711400.8586788, \"step\": 1184, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711400.947793, \"step\": 1186, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711401.037405, \"step\": 1188, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711401.0821362, \"step\": 1189, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711401.1286726, \"step\": 1190, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711401.2641358, \"step\": 1193, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711401.3115575, \"step\": 1194, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711401.3574579, \"step\": 1195, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711401.4508586, \"step\": 1197, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711401.5020416, \"step\": 1198, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711401.659666, \"step\": 1201, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711401.8415294, \"step\": 1205, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711401.8848777, \"step\": 1206, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711401.9342167, \"step\": 1207, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711402.043799, \"step\": 1209, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711402.2232904, \"step\": 1213, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711402.2645688, \"step\": 1214, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711402.3028107, \"step\": 1215, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711402.4272125, \"step\": 1218, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711402.7198684, \"step\": 1223, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711402.8586698, \"step\": 1225, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711403.0636601, \"step\": 1229, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711403.1961155, \"step\": 1232, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711403.2404258, \"step\": 1233, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711403.4030516, \"step\": 1238, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711403.4787076, \"step\": 1240, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711403.5200646, \"step\": 1241, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711403.5605102, \"step\": 1242, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711403.5979273, \"step\": 1243, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711403.6348937, \"step\": 1244, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711403.716583, \"step\": 1246, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711403.8448505, \"step\": 1249, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711403.8923397, \"step\": 1250, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711403.940589, \"step\": 1251, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711403.9889443, \"step\": 1252, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711404.0818424, \"step\": 1254, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711404.1780484, \"step\": 1256, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711404.223895, \"step\": 1257, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711404.366237, \"step\": 1260, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711404.4109724, \"step\": 1261, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711404.6762567, \"step\": 1267, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711404.8488789, \"step\": 1271, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711405.04952, \"step\": 1276, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711405.1103475, \"step\": 1277, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711405.1558678, \"step\": 1278, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711405.3710465, \"step\": 1282, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711405.5118861, \"step\": 1285, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711405.7294235, \"step\": 1290, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711405.8650603, \"step\": 1293, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711406.0860045, \"step\": 1298, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711406.1328905, \"step\": 1299, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711406.2723596, \"step\": 1302, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711406.4575372, \"step\": 1306, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711406.6485825, \"step\": 1310, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711406.8757787, \"step\": 1315, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711407.1071079, \"step\": 1320, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711407.191096, \"step\": 1322, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711407.3553896, \"step\": 1325, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711407.401736, \"step\": 1326, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711407.493507, \"step\": 1328, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711407.8820875, \"step\": 1335, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711408.2719326, \"step\": 1344, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711408.310276, \"step\": 1345, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711408.3947458, \"step\": 1347, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711408.4399688, \"step\": 1348, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711408.5761647, \"step\": 1351, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711408.6227872, \"step\": 1352, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711408.7139192, \"step\": 1354, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711408.8623433, \"step\": 1358, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711408.9801207, \"step\": 1360, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711409.23177, \"step\": 1364, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711409.2836263, \"step\": 1365, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711409.3344376, \"step\": 1366, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711409.3978276, \"step\": 1367, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711409.4592726, \"step\": 1368, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711409.6417575, \"step\": 1372, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711409.6877012, \"step\": 1373, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711409.780093, \"step\": 1375, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711409.840681, \"step\": 1376, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711410.0348365, \"step\": 1380, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711410.267602, \"step\": 1385, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711410.3140116, \"step\": 1386, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711410.500159, \"step\": 1390, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711410.6440709, \"step\": 1393, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711410.8479292, \"step\": 1397, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711411.1335917, \"step\": 1403, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711416.0709403, \"step\": 1416, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711416.118894, \"step\": 1417, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711416.3136246, \"step\": 1421, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711416.775423, \"step\": 1431, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711416.8079674, \"step\": 1432, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711416.99829, \"step\": 1436, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711417.0987103, \"step\": 1438, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711417.1617205, \"step\": 1439, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711417.221189, \"step\": 1440, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711417.2694197, \"step\": 1441, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711417.4150763, \"step\": 1444, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711417.5066674, \"step\": 1446, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711417.552466, \"step\": 1447, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711417.64332, \"step\": 1449, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711417.75281, \"step\": 1451, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711417.7994428, \"step\": 1452, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711417.8859248, \"step\": 1454, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711417.9097004, \"step\": 1455, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711417.9559722, \"step\": 1456, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711418.0115502, \"step\": 1457, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711418.0671604, \"step\": 1458, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711418.1309547, \"step\": 1459, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711418.189582, \"step\": 1460, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711418.247161, \"step\": 1461, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711418.3609753, \"step\": 1463, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711418.7004302, \"step\": 1470, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711418.8488586, \"step\": 1473, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711418.8928611, \"step\": 1474, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711418.981612, \"step\": 1476, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711419.319554, \"step\": 1483, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711419.4945774, \"step\": 1487, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711419.5835385, \"step\": 1489, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711419.6284537, \"step\": 1490, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711419.765122, \"step\": 1493, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711419.8167086, \"step\": 1494, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711420.00072, \"step\": 1498, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711420.045221, \"step\": 1499, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711420.0974133, \"step\": 1500, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711420.1834767, \"step\": 1502, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711420.533811, \"step\": 1509, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711420.58428, \"step\": 1510, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711420.6347313, \"step\": 1511, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711420.754052, \"step\": 1513, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711420.8676624, \"step\": 1515, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711420.9194741, \"step\": 1516, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711421.2767382, \"step\": 1523, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711421.5098312, \"step\": 1528, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711421.7418234, \"step\": 1534, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711421.8810654, \"step\": 1537, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711421.9270284, \"step\": 1538, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711422.075233, \"step\": 1541, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711422.4066014, \"step\": 1548, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711422.5446284, \"step\": 1551, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711422.5994358, \"step\": 1552, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711422.6440017, \"step\": 1553, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711423.078329, \"step\": 1562, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711423.223476, \"step\": 1565, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711423.2685661, \"step\": 1566, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711423.3652349, \"step\": 1568, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711423.4544785, \"step\": 1570, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711423.5011792, \"step\": 1571, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711423.5471296, \"step\": 1572, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711423.5959573, \"step\": 1573, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711423.749301, \"step\": 1576, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711423.8309045, \"step\": 1578, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711423.9224825, \"step\": 1580, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711423.9621089, \"step\": 1581, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711423.9977648, \"step\": 1582, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711424.1982725, \"step\": 1585, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711424.4497566, \"step\": 1590, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711424.6934257, \"step\": 1595, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711424.7409759, \"step\": 1596, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711424.7873619, \"step\": 1597, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711424.9927075, \"step\": 1601, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711425.0431798, \"step\": 1602, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711425.0811455, \"step\": 1603, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711425.5268066, \"step\": 1611, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711425.647443, \"step\": 1613, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711425.7073565, \"step\": 1614, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711425.8382115, \"step\": 1616, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711426.173594, \"step\": 1622, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711426.266479, \"step\": 1624, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711426.3570154, \"step\": 1626, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711426.4015267, \"step\": 1627, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711426.6017869, \"step\": 1631, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711426.7876682, \"step\": 1635, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711426.8405693, \"step\": 1636, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711426.8830292, \"step\": 1637, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711427.0277338, \"step\": 1640, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711427.0971384, \"step\": 1641, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711427.320235, \"step\": 1646, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711427.3625677, \"step\": 1647, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711427.4490511, \"step\": 1649, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711427.53995, \"step\": 1651, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711427.576685, \"step\": 1652, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711427.6186492, \"step\": 1653, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711427.6609662, \"step\": 1654, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711427.7510877, \"step\": 1656, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711427.8421178, \"step\": 1658, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711428.0237176, \"step\": 1662, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711428.1254346, \"step\": 1664, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711428.2169294, \"step\": 1666, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711428.35403, \"step\": 1669, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711428.4026747, \"step\": 1670, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711428.5816371, \"step\": 1674, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711428.7648516, \"step\": 1677, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711428.818344, \"step\": 1679, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711428.8391929, \"step\": 1680, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711428.9349935, \"step\": 1682, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711429.0926745, \"step\": 1685, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711429.1468654, \"step\": 1686, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711429.2009132, \"step\": 1687, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711429.2538786, \"step\": 1688, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711429.5208519, \"step\": 1693, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711429.566855, \"step\": 1694, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711429.6446798, \"step\": 1695, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711429.7445111, \"step\": 1697, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711429.829396, \"step\": 1699, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711429.8801613, \"step\": 1700, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711429.9709451, \"step\": 1702, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711430.0688405, \"step\": 1704, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711430.1766906, \"step\": 1707, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711430.2978842, \"step\": 1709, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711430.3423254, \"step\": 1710, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711430.3784633, \"step\": 1711, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711430.415697, \"step\": 1712, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711430.8374155, \"step\": 1718, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711430.875128, \"step\": 1719, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711431.0132911, \"step\": 1722, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711431.0599952, \"step\": 1723, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711431.102406, \"step\": 1724, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711431.1479197, \"step\": 1725, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711431.3722064, \"step\": 1730, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711431.7515287, \"step\": 1738, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711431.7992768, \"step\": 1739, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711431.9694886, \"step\": 1743, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711432.0529435, \"step\": 1745, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711432.184802, \"step\": 1748, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711432.2325933, \"step\": 1749, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711432.2728584, \"step\": 1750, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711432.310747, \"step\": 1751, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711432.4167724, \"step\": 1753, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711432.4548628, \"step\": 1754, \"value\": 0.00014974483929108828}, {\"wallTime\": 1647711432.5856173, \"step\": 1757, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711432.7982798, \"step\": 1762, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711432.8429232, \"step\": 1763, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711432.9315786, \"step\": 1765, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711433.0690417, \"step\": 1768, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711433.3962765, \"step\": 1775, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711433.4419203, \"step\": 1776, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711433.4863007, \"step\": 1777, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711433.6150267, \"step\": 1780, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711433.784709, \"step\": 1784, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711433.8288183, \"step\": 1785, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711433.873224, \"step\": 1786, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711433.997253, \"step\": 1789, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711434.0369327, \"step\": 1790, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711434.099814, \"step\": 1792, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711434.1841693, \"step\": 1794, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711434.2787247, \"step\": 1796, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711434.4934776, \"step\": 1800, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711434.5958486, \"step\": 1802, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711434.6416464, \"step\": 1803, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711434.927079, \"step\": 1808, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711435.0137775, \"step\": 1810, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711435.2726998, \"step\": 1814, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711435.5134203, \"step\": 1818, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711435.5870879, \"step\": 1819, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711435.7769108, \"step\": 1823, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711435.9237037, \"step\": 1826, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711435.9705503, \"step\": 1827, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711436.052389, \"step\": 1829, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711436.096606, \"step\": 1830, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711436.1994, \"step\": 1832, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711436.2606626, \"step\": 1833, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711436.290275, \"step\": 1834, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711436.3531673, \"step\": 1836, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711436.3827724, \"step\": 1837, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711436.4168909, \"step\": 1838, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711436.6603556, \"step\": 1844, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711436.699047, \"step\": 1845, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711436.739314, \"step\": 1846, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711436.7746136, \"step\": 1847, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711436.8235607, \"step\": 1848, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711436.9478643, \"step\": 1851, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711437.034819, \"step\": 1853, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711437.2732828, \"step\": 1860, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711437.4418344, \"step\": 1864, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711437.4888299, \"step\": 1865, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711437.5322614, \"step\": 1866, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711437.5796766, \"step\": 1867, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711437.7631662, \"step\": 1871, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711437.8130686, \"step\": 1872, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711437.915852, \"step\": 1874, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711437.937396, \"step\": 1875, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711442.3331606, \"step\": 1877, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711442.4789827, \"step\": 1880, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711442.611879, \"step\": 1883, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711442.6552603, \"step\": 1884, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711442.7957468, \"step\": 1886, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711442.9165392, \"step\": 1888, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711443.0426054, \"step\": 1890, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711443.3995676, \"step\": 1895, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711443.5708492, \"step\": 1899, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711443.7054715, \"step\": 1902, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711443.8905342, \"step\": 1906, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711443.9718425, \"step\": 1908, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711444.0136142, \"step\": 1909, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711444.0534263, \"step\": 1910, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711444.180569, \"step\": 1913, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711444.3985374, \"step\": 1918, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711444.6571925, \"step\": 1924, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711444.701801, \"step\": 1925, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711444.742159, \"step\": 1926, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711444.8799677, \"step\": 1929, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711445.0473907, \"step\": 1932, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711445.1900375, \"step\": 1935, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711445.22965, \"step\": 1936, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711445.35908, \"step\": 1940, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711445.385918, \"step\": 1941, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711445.4181392, \"step\": 1942, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711445.5413394, \"step\": 1945, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711445.6483982, \"step\": 1947, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711445.781886, \"step\": 1950, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711445.8266168, \"step\": 1951, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711445.9152822, \"step\": 1953, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711446.0438936, \"step\": 1956, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711446.2192616, \"step\": 1960, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711446.2643473, \"step\": 1961, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711446.3073401, \"step\": 1962, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711446.355557, \"step\": 1963, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711446.4009898, \"step\": 1964, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711446.49859, \"step\": 1966, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711446.5440152, \"step\": 1967, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711446.5901499, \"step\": 1968, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711446.6365001, \"step\": 1969, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711446.915603, \"step\": 1975, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711447.015071, \"step\": 1977, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711447.0902042, \"step\": 1979, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711447.1354895, \"step\": 1980, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711447.1860578, \"step\": 1981, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711447.2303429, \"step\": 1982, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711447.2726674, \"step\": 1983, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711447.353721, \"step\": 1985, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711447.4373262, \"step\": 1987, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711447.4921887, \"step\": 1988, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711447.634225, \"step\": 1991, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711447.6800466, \"step\": 1992, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711447.8196201, \"step\": 1995, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711448.141138, \"step\": 2002, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711448.7429082, \"step\": 2016, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711448.7879043, \"step\": 2017, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711448.969889, \"step\": 2021, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711449.0156026, \"step\": 2022, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711449.0617516, \"step\": 2023, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711449.1578598, \"step\": 2025, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711449.203818, \"step\": 2026, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711449.2906446, \"step\": 2028, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711449.3945334, \"step\": 2031, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711449.4447377, \"step\": 2032, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711449.5413196, \"step\": 2034, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711449.588052, \"step\": 2035, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711449.6344223, \"step\": 2036, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711449.8177068, \"step\": 2040, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711449.8463645, \"step\": 2041, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711449.9175024, \"step\": 2043, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711449.9629936, \"step\": 2044, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711450.0989165, \"step\": 2047, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711450.1441956, \"step\": 2048, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711450.189885, \"step\": 2049, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711450.4311235, \"step\": 2054, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711450.475337, \"step\": 2055, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711450.5186956, \"step\": 2056, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711450.5648947, \"step\": 2057, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711450.9746568, \"step\": 2067, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711451.0146585, \"step\": 2068, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711451.1014016, \"step\": 2070, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711451.2676785, \"step\": 2074, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711451.4305327, \"step\": 2078, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711451.4712026, \"step\": 2079, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711451.7109282, \"step\": 2084, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711451.7808378, \"step\": 2086, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711451.8104699, \"step\": 2087, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711451.8805258, \"step\": 2089, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711451.9142363, \"step\": 2090, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711451.9731483, \"step\": 2091, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711452.2182271, \"step\": 2095, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711452.2613735, \"step\": 2096, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711452.30535, \"step\": 2097, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711452.3502443, \"step\": 2098, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711452.4630947, \"step\": 2100, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711452.5984986, \"step\": 2103, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711452.6443071, \"step\": 2104, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711452.6911328, \"step\": 2105, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711452.7378066, \"step\": 2106, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711452.8747015, \"step\": 2109, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711452.9205117, \"step\": 2110, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711453.1050534, \"step\": 2114, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711453.1436324, \"step\": 2115, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711453.3248641, \"step\": 2119, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711453.3665426, \"step\": 2120, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711453.4516726, \"step\": 2122, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711453.4976265, \"step\": 2123, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711453.5442152, \"step\": 2124, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711453.634002, \"step\": 2126, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711453.6812952, \"step\": 2127, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711453.989913, \"step\": 2134, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711454.0346568, \"step\": 2135, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711454.0795896, \"step\": 2136, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711454.221726, \"step\": 2139, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711454.4570773, \"step\": 2143, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711454.7556107, \"step\": 2149, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711454.8037105, \"step\": 2150, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711454.9755497, \"step\": 2154, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711455.0236197, \"step\": 2155, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711455.2121518, \"step\": 2159, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711455.2590683, \"step\": 2160, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711455.3071196, \"step\": 2161, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711455.3555436, \"step\": 2162, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711455.707351, \"step\": 2169, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711455.900472, \"step\": 2173, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711455.999101, \"step\": 2175, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711456.0412283, \"step\": 2176, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711456.3920455, \"step\": 2183, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711456.5215032, \"step\": 2185, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711456.6505404, \"step\": 2187, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711456.7418725, \"step\": 2189, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711456.9944446, \"step\": 2194, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711457.2125075, \"step\": 2199, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711457.3173518, \"step\": 2201, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711457.3649702, \"step\": 2202, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711457.4216921, \"step\": 2203, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711457.6077948, \"step\": 2206, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711457.7810233, \"step\": 2209, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711457.8991852, \"step\": 2211, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711457.9599438, \"step\": 2212, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711458.0833876, \"step\": 2214, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711458.130141, \"step\": 2215, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711458.181783, \"step\": 2216, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711458.4201596, \"step\": 2221, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711458.4642782, \"step\": 2222, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711458.5043685, \"step\": 2223, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711458.5897062, \"step\": 2225, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711458.6917732, \"step\": 2227, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711458.9723828, \"step\": 2233, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711459.1124892, \"step\": 2236, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711459.2526493, \"step\": 2239, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711459.4269693, \"step\": 2242, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711459.514113, \"step\": 2244, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711459.6372707, \"step\": 2247, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711459.9461157, \"step\": 2254, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711460.0760765, \"step\": 2257, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711460.120789, \"step\": 2258, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711460.3989468, \"step\": 2264, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711460.4894266, \"step\": 2266, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711460.535222, \"step\": 2267, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711460.874672, \"step\": 2274, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711460.9659057, \"step\": 2276, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711461.1420634, \"step\": 2280, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711461.1902258, \"step\": 2281, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711461.3586376, \"step\": 2284, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711461.4149861, \"step\": 2285, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711461.769927, \"step\": 2291, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711461.824213, \"step\": 2292, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711461.889423, \"step\": 2293, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711462.191187, \"step\": 2300, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711462.4146733, \"step\": 2305, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711462.462608, \"step\": 2306, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711462.5064635, \"step\": 2307, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711462.5962086, \"step\": 2309, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711462.6916866, \"step\": 2311, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711462.878033, \"step\": 2315, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711462.9448638, \"step\": 2316, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711463.0970142, \"step\": 2319, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711463.3126926, \"step\": 2324, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711463.5852873, \"step\": 2330, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711463.6782672, \"step\": 2332, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711463.84916, \"step\": 2335, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711464.100635, \"step\": 2340, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711464.2397783, \"step\": 2342, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711464.2476466, \"step\": 2343, \"value\": 8.143085142364725e-05}, {\"wallTime\": 1647711464.2929683, \"step\": 2344, \"value\": 8.143085142364725e-05}], \"tb_logs/OneCycleLR014815-SGD\": [{\"wallTime\": 1647711948.1935189, \"step\": 3, \"value\": 0.004949684254825115}, {\"wallTime\": 1647711948.264873, \"step\": 4, \"value\": 0.0049550193361938}, {\"wallTime\": 1647711948.6355343, \"step\": 10, \"value\": 0.005011913366615772}, {\"wallTime\": 1647711948.850845, \"step\": 14, \"value\": 0.00507352827116847}, {\"wallTime\": 1647711948.8943045, \"step\": 15, \"value\": 0.005091890227049589}, {\"wallTime\": 1647711949.0318377, \"step\": 18, \"value\": 0.005154069513082504}, {\"wallTime\": 1647711949.0778754, \"step\": 19, \"value\": 0.005177158862352371}, {\"wallTime\": 1647711949.1238666, \"step\": 20, \"value\": 0.005201429594308138}, {\"wallTime\": 1647711949.2181945, \"step\": 22, \"value\": 0.005253511015325785}, {\"wallTime\": 1647711949.260219, \"step\": 23, \"value\": 0.00528132077306509}, {\"wallTime\": 1647711949.3896558, \"step\": 26, \"value\": 0.005371821112930775}, {\"wallTime\": 1647711949.4295304, \"step\": 27, \"value\": 0.00540434243157506}, {\"wallTime\": 1647711949.6756072, \"step\": 33, \"value\": 0.005624148994684219}, {\"wallTime\": 1647711949.8140047, \"step\": 36, \"value\": 0.005749883595854044}, {\"wallTime\": 1647711949.9164999, \"step\": 38, \"value\": 0.005839554592967033}, {\"wallTime\": 1647711950.017531, \"step\": 40, \"value\": 0.0059338961727917194}, {\"wallTime\": 1647711950.7933247, \"step\": 47, \"value\": 0.006300758104771376}, {\"wallTime\": 1647711950.8509898, \"step\": 48, \"value\": 0.006357809063047171}, {\"wallTime\": 1647711950.919214, \"step\": 49, \"value\": 0.006416017655283213}, {\"wallTime\": 1647711951.0189967, \"step\": 51, \"value\": 0.0065359012223780155}, {\"wallTime\": 1647711951.1276183, \"step\": 54, \"value\": 0.006724375765770674}, {\"wallTime\": 1647711951.2881677, \"step\": 57, \"value\": 0.0069231996312737465}, {\"wallTime\": 1647711951.4460537, \"step\": 60, \"value\": 0.007132336962968111}, {\"wallTime\": 1647711951.4871933, \"step\": 61, \"value\": 0.00720433471724391}, {\"wallTime\": 1647711951.5213525, \"step\": 62, \"value\": 0.007277472410351038}, {\"wallTime\": 1647711951.562715, \"step\": 63, \"value\": 0.007351749576628208}, {\"wallTime\": 1647711951.649475, \"step\": 65, \"value\": 0.007503713481128216}, {\"wallTime\": 1647711951.697525, \"step\": 66, \"value\": 0.007581397891044617}, {\"wallTime\": 1647711951.744499, \"step\": 67, \"value\": 0.007660215254873037}, {\"wallTime\": 1647711951.7887266, \"step\": 68, \"value\": 0.0077401637099683285}, {\"wallTime\": 1647711951.8821657, \"step\": 70, \"value\": 0.0079034473747015}, {\"wallTime\": 1647711951.9284658, \"step\": 71, \"value\": 0.007986779324710369}, {\"wallTime\": 1647711952.203419, \"step\": 77, \"value\": 0.008510330691933632}, {\"wallTime\": 1647711952.3212364, \"step\": 79, \"value\": 0.008693779818713665}, {\"wallTime\": 1647711952.3712752, \"step\": 80, \"value\": 0.008787170983850956}, {\"wallTime\": 1647711952.485141, \"step\": 82, \"value\": 0.008977278135716915}, {\"wallTime\": 1647711952.6523771, \"step\": 85, \"value\": 0.009270720183849335}, {\"wallTime\": 1647711953.3700833, \"step\": 89, \"value\": 0.009677351452410221}, {\"wallTime\": 1647711953.382817, \"step\": 90, \"value\": 0.00978174153715372}, {\"wallTime\": 1647711953.8431158, \"step\": 99, \"value\": 0.010769990272819996}, {\"wallTime\": 1647711953.9013662, \"step\": 100, \"value\": 0.01088517066091299}, {\"wallTime\": 1647711954.101503, \"step\": 103, \"value\": 0.011237101629376411}, {\"wallTime\": 1647711954.3400488, \"step\": 106, \"value\": 0.01159857027232647}, {\"wallTime\": 1647711954.405918, \"step\": 107, \"value\": 0.011721167713403702}, {\"wallTime\": 1647711954.5538073, \"step\": 109, \"value\": 0.011969510465860367}, {\"wallTime\": 1647711954.9435856, \"step\": 116, \"value\": 0.01287149265408516}, {\"wallTime\": 1647711955.2158475, \"step\": 121, \"value\": 0.013546626083552837}, {\"wallTime\": 1647711955.4623103, \"step\": 125, \"value\": 0.014104991219937801}, {\"wallTime\": 1647711955.5148764, \"step\": 126, \"value\": 0.014247095212340355}, {\"wallTime\": 1647711955.600587, \"step\": 128, \"value\": 0.014534299261868}, {\"wallTime\": 1647711955.6941478, \"step\": 130, \"value\": 0.01482547726482153}, {\"wallTime\": 1647711955.7411385, \"step\": 131, \"value\": 0.014972549863159657}, {\"wallTime\": 1647711955.9747257, \"step\": 136, \"value\": 0.015722626820206642}, {\"wallTime\": 1647711956.0189488, \"step\": 137, \"value\": 0.015875564888119698}, {\"wallTime\": 1647711956.3898594, \"step\": 144, \"value\": 0.016973024234175682}, {\"wallTime\": 1647711956.7843108, \"step\": 146, \"value\": 0.01729513704776764}, {\"wallTime\": 1647711956.8338144, \"step\": 147, \"value\": 0.01745760254561901}, {\"wallTime\": 1647711956.9963317, \"step\": 150, \"value\": 0.017950596287846565}, {\"wallTime\": 1647711957.328127, \"step\": 157, \"value\": 0.019133150577545166}, {\"wallTime\": 1647711957.4778247, \"step\": 159, \"value\": 0.019479189068078995}, {\"wallTime\": 1647711957.5367534, \"step\": 160, \"value\": 0.019653553143143654}, {\"wallTime\": 1647711957.6342053, \"step\": 162, \"value\": 0.02000495046377182}, {\"wallTime\": 1647711957.747719, \"step\": 164, \"value\": 0.020359884947538376}, {\"wallTime\": 1647711958.0233102, \"step\": 170, \"value\": 0.02144562639296055}, {\"wallTime\": 1647711958.0710452, \"step\": 171, \"value\": 0.02162959985435009}, {\"wallTime\": 1647711958.1203814, \"step\": 172, \"value\": 0.02181442268192768}, {\"wallTime\": 1647711958.2633605, \"step\": 175, \"value\": 0.022373970597982407}, {\"wallTime\": 1647711958.3115098, \"step\": 176, \"value\": 0.022562164813280106}, {\"wallTime\": 1647711958.360221, \"step\": 177, \"value\": 0.02275119163095951}, {\"wallTime\": 1647711958.4068503, \"step\": 178, \"value\": 0.022941049188375473}, {\"wallTime\": 1647711958.5038328, \"step\": 180, \"value\": 0.023323236033320427}, {\"wallTime\": 1647711958.5533347, \"step\": 181, \"value\": 0.02351555787026882}, {\"wallTime\": 1647711958.7012942, \"step\": 184, \"value\": 0.024097394198179245}, {\"wallTime\": 1647711958.762046, \"step\": 185, \"value\": 0.024292949587106705}, {\"wallTime\": 1647711958.8025274, \"step\": 186, \"value\": 0.024489304050803185}, {\"wallTime\": 1647711959.1562161, \"step\": 190, \"value\": 0.02528262697160244}, {\"wallTime\": 1647711959.2037692, \"step\": 191, \"value\": 0.025482913479208946}, {\"wallTime\": 1647711959.2613308, \"step\": 192, \"value\": 0.025683976709842682}, {\"wallTime\": 1647711959.4252765, \"step\": 195, \"value\": 0.026291770860552788}, {\"wallTime\": 1647711959.6191423, \"step\": 199, \"value\": 0.027112765237689018}, {\"wallTime\": 1647711959.66146, \"step\": 200, \"value\": 0.027319878339767456}, {\"wallTime\": 1647711959.747921, \"step\": 202, \"value\": 0.027736317366361618}, {\"wallTime\": 1647711959.817692, \"step\": 203, \"value\": 0.027945633977651596}, {\"wallTime\": 1647711959.8932908, \"step\": 204, \"value\": 0.028155675157904625}, {\"wallTime\": 1647711959.9351974, \"step\": 205, \"value\": 0.028366437181830406}, {\"wallTime\": 1647711959.9963555, \"step\": 207, \"value\": 0.028790108859539032}, {\"wallTime\": 1647711960.0678518, \"step\": 209, \"value\": 0.029216615483164787}, {\"wallTime\": 1647711960.137129, \"step\": 211, \"value\": 0.029645923525094986}, {\"wallTime\": 1647711960.2357976, \"step\": 213, \"value\": 0.030077995732426643}, {\"wallTime\": 1647711960.3816488, \"step\": 215, \"value\": 0.030512800440192223}, {\"wallTime\": 1647711960.4246974, \"step\": 216, \"value\": 0.030731216073036194}, {\"wallTime\": 1647711960.5454202, \"step\": 219, \"value\": 0.031390462070703506}, {\"wallTime\": 1647711960.585506, \"step\": 220, \"value\": 0.03161153197288513}, {\"wallTime\": 1647711960.6293683, \"step\": 221, \"value\": 0.03183325380086899}, {\"wallTime\": 1647711960.6795442, \"step\": 222, \"value\": 0.03205562010407448}, {\"wallTime\": 1647711960.7728424, \"step\": 224, \"value\": 0.03250228241086006}, {\"wallTime\": 1647711960.9675226, \"step\": 229, \"value\": 0.03362996131181717}, {\"wallTime\": 1647711961.3514645, \"step\": 237, \"value\": 0.035465821623802185}, {\"wallTime\": 1647711961.4080107, \"step\": 238, \"value\": 0.03569794073700905}, {\"wallTime\": 1647711961.4641218, \"step\": 239, \"value\": 0.03593062981963158}, {\"wallTime\": 1647711961.5601277, \"step\": 241, \"value\": 0.03639770299196243}, {\"wallTime\": 1647711961.606363, \"step\": 242, \"value\": 0.036632075905799866}, {\"wallTime\": 1647711961.6953273, \"step\": 244, \"value\": 0.03710247203707695}, {\"wallTime\": 1647711961.7368193, \"step\": 245, \"value\": 0.037338484078645706}, {\"wallTime\": 1647711961.8170173, \"step\": 246, \"value\": 0.03757503628730774}, {\"wallTime\": 1647711961.8592842, \"step\": 247, \"value\": 0.03781212121248245}, {\"wallTime\": 1647711962.1194577, \"step\": 252, \"value\": 0.03900537267327309}, {\"wallTime\": 1647711962.171455, \"step\": 253, \"value\": 0.03924555331468582}, {\"wallTime\": 1647711962.2233894, \"step\": 254, \"value\": 0.03948623687028885}, {\"wallTime\": 1647711962.432037, \"step\": 258, \"value\": 0.04045386239886284}, {\"wallTime\": 1647711962.479559, \"step\": 259, \"value\": 0.040696971118450165}, {\"wallTime\": 1647711962.555593, \"step\": 260, \"value\": 0.0409405454993248}, {\"wallTime\": 1647711962.6763656, \"step\": 262, \"value\": 0.04142909497022629}, {\"wallTime\": 1647711963.1415007, \"step\": 270, \"value\": 0.043401122093200684}, {\"wallTime\": 1647711963.199314, \"step\": 271, \"value\": 0.04364955052733421}, {\"wallTime\": 1647711963.3540008, \"step\": 274, \"value\": 0.04439728707075119}, {\"wallTime\": 1647711963.4494438, \"step\": 276, \"value\": 0.04489776864647865}, {\"wallTime\": 1647711963.5433578, \"step\": 278, \"value\": 0.04539979621767998}, {\"wallTime\": 1647711963.6295793, \"step\": 280, \"value\": 0.04590333253145218}, {\"wallTime\": 1647711963.7216187, \"step\": 282, \"value\": 0.04640832915902138}, {\"wallTime\": 1647711963.7720296, \"step\": 283, \"value\": 0.046661365777254105}, {\"wallTime\": 1647711963.8602226, \"step\": 285, \"value\": 0.047168485820293427}, {\"wallTime\": 1647711963.947921, \"step\": 287, \"value\": 0.047676973044872284}, {\"wallTime\": 1647711963.9958053, \"step\": 288, \"value\": 0.04793171584606171}, {\"wallTime\": 1647711964.0914621, \"step\": 290, \"value\": 0.04844217002391815}, {\"wallTime\": 1647711964.3663719, \"step\": 295, \"value\": 0.04972374439239502}, {\"wallTime\": 1647711964.4111333, \"step\": 296, \"value\": 0.04998094588518143}, {\"wallTime\": 1647711964.4569938, \"step\": 297, \"value\": 0.050238437950611115}, {\"wallTime\": 1647711964.5026073, \"step\": 298, \"value\": 0.05049620568752289}, {\"wallTime\": 1647711964.8668978, \"step\": 306, \"value\": 0.05256780982017517}, {\"wallTime\": 1647711964.944729, \"step\": 308, \"value\": 0.053088147193193436}, {\"wallTime\": 1647711965.2700064, \"step\": 309, \"value\": 0.05334864929318428}, {\"wallTime\": 1647711965.4179528, \"step\": 312, \"value\": 0.05413144826889038}, {\"wallTime\": 1647711965.6464033, \"step\": 316, \"value\": 0.055177975445985794}, {\"wallTime\": 1647711965.7422364, \"step\": 318, \"value\": 0.05570234730839729}, {\"wallTime\": 1647711965.7928488, \"step\": 319, \"value\": 0.055964790284633636}, {\"wallTime\": 1647711965.9452002, \"step\": 322, \"value\": 0.056753095239400864}, {\"wallTime\": 1647711966.045584, \"step\": 324, \"value\": 0.05727938190102577}, {\"wallTime\": 1647711966.226582, \"step\": 329, \"value\": 0.058597445487976074}, {\"wallTime\": 1647711966.299936, \"step\": 331, \"value\": 0.059125494211912155}, {\"wallTime\": 1647711966.3517227, \"step\": 332, \"value\": 0.05938967689871788}, {\"wallTime\": 1647711966.5930037, \"step\": 337, \"value\": 0.06071192026138306}, {\"wallTime\": 1647711966.9393537, \"step\": 338, \"value\": 0.060976602137088776}, {\"wallTime\": 1647711966.9850903, \"step\": 340, \"value\": 0.06150615215301514}, {\"wallTime\": 1647711967.1828887, \"step\": 343, \"value\": 0.062300875782966614}, {\"wallTime\": 1647711967.2641838, \"step\": 345, \"value\": 0.06283088773488998}, {\"wallTime\": 1647711967.3208258, \"step\": 346, \"value\": 0.06309594213962555}, {\"wallTime\": 1647711967.5842988, \"step\": 350, \"value\": 0.06415632367134094}, {\"wallTime\": 1647711967.6978533, \"step\": 352, \"value\": 0.06468654423952103}, {\"wallTime\": 1647711967.7555451, \"step\": 353, \"value\": 0.06495163589715958}, {\"wallTime\": 1647711967.8131013, \"step\": 354, \"value\": 0.06521672010421753}, {\"wallTime\": 1647711968.0352228, \"step\": 358, \"value\": 0.06627680361270905}, {\"wallTime\": 1647711968.5216255, \"step\": 362, \"value\": 0.06733623147010803}, {\"wallTime\": 1647711968.5343652, \"step\": 363, \"value\": 0.06760094314813614}, {\"wallTime\": 1647711968.5763814, \"step\": 364, \"value\": 0.06786559522151947}, {\"wallTime\": 1647711968.6434076, \"step\": 365, \"value\": 0.06813016533851624}, {\"wallTime\": 1647711968.6984503, \"step\": 366, \"value\": 0.06839466094970703}, {\"wallTime\": 1647711968.7440274, \"step\": 367, \"value\": 0.06865907460451126}, {\"wallTime\": 1647711969.0599983, \"step\": 374, \"value\": 0.07050717622041702}, {\"wallTime\": 1647711969.1955376, \"step\": 377, \"value\": 0.07129744440317154}, {\"wallTime\": 1647711969.2406178, \"step\": 378, \"value\": 0.07156059145927429}, {\"wallTime\": 1647711969.5863602, \"step\": 386, \"value\": 0.07366003096103668}, {\"wallTime\": 1647711969.7501383, \"step\": 390, \"value\": 0.07470538467168808}, {\"wallTime\": 1647711969.7947912, \"step\": 391, \"value\": 0.07496621459722519}, {\"wallTime\": 1647711969.8375807, \"step\": 392, \"value\": 0.07522682845592499}, {\"wallTime\": 1647711969.8803394, \"step\": 393, \"value\": 0.07548722624778748}, {\"wallTime\": 1647711969.9237366, \"step\": 394, \"value\": 0.07574739307165146}, {\"wallTime\": 1647711970.0594046, \"step\": 397, \"value\": 0.07652649283409119}, {\"wallTime\": 1647711970.2999344, \"step\": 402, \"value\": 0.07782000303268433}, {\"wallTime\": 1647711970.4278514, \"step\": 404, \"value\": 0.07833554595708847}, {\"wallTime\": 1647711970.607598, \"step\": 408, \"value\": 0.07936318963766098}, {\"wallTime\": 1647711970.6497564, \"step\": 409, \"value\": 0.07961935549974442}, {\"wallTime\": 1647711970.8096576, \"step\": 413, \"value\": 0.08064089715480804}, {\"wallTime\": 1647711970.8494587, \"step\": 414, \"value\": 0.08089547604322433}, {\"wallTime\": 1647711970.891531, \"step\": 415, \"value\": 0.08114971965551376}, {\"wallTime\": 1647711971.0139418, \"step\": 418, \"value\": 0.0819103941321373}, {\"wallTime\": 1647711971.1576478, \"step\": 421, \"value\": 0.08266789466142654}, {\"wallTime\": 1647711971.2063818, \"step\": 422, \"value\": 0.0829196572303772}, {\"wallTime\": 1647711971.3423471, \"step\": 425, \"value\": 0.08367269486188889}, {\"wallTime\": 1647711971.3768094, \"step\": 426, \"value\": 0.08392293751239777}, {\"wallTime\": 1647711971.604205, \"step\": 430, \"value\": 0.08491991460323334}, {\"wallTime\": 1647711971.651048, \"step\": 431, \"value\": 0.08516813814640045}, {\"wallTime\": 1647711971.8198183, \"step\": 435, \"value\": 0.08615678548812866}, {\"wallTime\": 1647711971.867352, \"step\": 436, \"value\": 0.08640286326408386}, {\"wallTime\": 1647711971.9134605, \"step\": 437, \"value\": 0.08664849400520325}, {\"wallTime\": 1647711972.0017498, \"step\": 439, \"value\": 0.08713841438293457}, {\"wallTime\": 1647711972.0500934, \"step\": 440, \"value\": 0.08738268911838531}, {\"wallTime\": 1647711972.0843902, \"step\": 441, \"value\": 0.08762650191783905}, {\"wallTime\": 1647711972.1660898, \"step\": 443, \"value\": 0.0881127119064331}, {\"wallTime\": 1647711972.212225, \"step\": 444, \"value\": 0.08835510164499283}, {\"wallTime\": 1647711972.2572045, \"step\": 445, \"value\": 0.08859701454639435}, {\"wallTime\": 1647711972.301667, \"step\": 446, \"value\": 0.08883843570947647}, {\"wallTime\": 1647711972.4756582, \"step\": 450, \"value\": 0.08979915082454681}, {\"wallTime\": 1647711972.5182228, \"step\": 451, \"value\": 0.09003806859254837}, {\"wallTime\": 1647711972.5584042, \"step\": 452, \"value\": 0.09027646481990814}, {\"wallTime\": 1647711972.614872, \"step\": 453, \"value\": 0.09051433950662613}, {\"wallTime\": 1647711972.6579633, \"step\": 454, \"value\": 0.09075168520212173}, {\"wallTime\": 1647711972.7503061, \"step\": 456, \"value\": 0.0912247896194458}, {\"wallTime\": 1647711972.8273196, \"step\": 458, \"value\": 0.09169573336839676}, {\"wallTime\": 1647711972.9327462, \"step\": 460, \"value\": 0.09216447919607162}, {\"wallTime\": 1647711972.9713142, \"step\": 461, \"value\": 0.0923980101943016}, {\"wallTime\": 1647711973.1791449, \"step\": 465, \"value\": 0.09332647919654846}, {\"wallTime\": 1647711973.255019, \"step\": 466, \"value\": 0.09355714917182922}, {\"wallTime\": 1647711973.3568976, \"step\": 468, \"value\": 0.09401673078536987}, {\"wallTime\": 1647711977.9201467, \"step\": 470, \"value\": 0.0944739282131195}, {\"wallTime\": 1647711978.090434, \"step\": 474, \"value\": 0.09538102895021439}, {\"wallTime\": 1647711978.1374607, \"step\": 475, \"value\": 0.0956062525510788}, {\"wallTime\": 1647711978.2769709, \"step\": 478, \"value\": 0.09627815335988998}, {\"wallTime\": 1647711978.3227274, \"step\": 479, \"value\": 0.09650084376335144}, {\"wallTime\": 1647711978.3685985, \"step\": 480, \"value\": 0.09672288596630096}, {\"wallTime\": 1647711978.414318, \"step\": 481, \"value\": 0.09694428741931915}, {\"wallTime\": 1647711978.506673, \"step\": 483, \"value\": 0.09738510847091675}, {\"wallTime\": 1647711978.5522768, \"step\": 484, \"value\": 0.09760452806949615}, {\"wallTime\": 1647711978.6893833, \"step\": 487, \"value\": 0.09825875610113144}, {\"wallTime\": 1647711978.7394643, \"step\": 488, \"value\": 0.09847547858953476}, {\"wallTime\": 1647711978.7837057, \"step\": 489, \"value\": 0.09869151562452316}, {\"wallTime\": 1647711978.8923807, \"step\": 491, \"value\": 0.09912151843309402}, {\"wallTime\": 1647711979.0522058, \"step\": 494, \"value\": 0.09976127743721008}, {\"wallTime\": 1647711979.221254, \"step\": 498, \"value\": 0.10060431808233261}, {\"wallTime\": 1647711979.4115813, \"step\": 502, \"value\": 0.10143571346998215}, {\"wallTime\": 1647711979.4572434, \"step\": 503, \"value\": 0.1016417145729065}, {\"wallTime\": 1647711979.604088, \"step\": 506, \"value\": 0.1022552028298378}, {\"wallTime\": 1647711979.7361119, \"step\": 509, \"value\": 0.10286185145378113}, {\"wallTime\": 1647711979.7782948, \"step\": 510, \"value\": 0.10306252539157867}, {\"wallTime\": 1647711979.821881, \"step\": 511, \"value\": 0.10326242446899414}, {\"wallTime\": 1647711979.875529, \"step\": 512, \"value\": 0.10346154123544693}, {\"wallTime\": 1647711979.9211535, \"step\": 513, \"value\": 0.10365987569093704}, {\"wallTime\": 1647711979.962948, \"step\": 514, \"value\": 0.10385742038488388}, {\"wallTime\": 1647711980.0955431, \"step\": 517, \"value\": 0.10444528609514236}, {\"wallTime\": 1647711980.1453543, \"step\": 518, \"value\": 0.10463963449001312}, {\"wallTime\": 1647711980.1895652, \"step\": 519, \"value\": 0.10483317822217941}, {\"wallTime\": 1647711980.2337127, \"step\": 520, \"value\": 0.10502590239048004}, {\"wallTime\": 1647711980.3637848, \"step\": 523, \"value\": 0.10559917986392975}, {\"wallTime\": 1647711980.6977863, \"step\": 530, \"value\": 0.10690769553184509}, {\"wallTime\": 1647711980.9752543, \"step\": 533, \"value\": 0.10745575278997421}, {\"wallTime\": 1647711981.0246217, \"step\": 534, \"value\": 0.1076367124915123}, {\"wallTime\": 1647711981.1163235, \"step\": 536, \"value\": 0.10799603164196014}, {\"wallTime\": 1647711981.1625907, \"step\": 537, \"value\": 0.10817437618970871}, {\"wallTime\": 1647711981.2081394, \"step\": 538, \"value\": 0.10835184901952744}, {\"wallTime\": 1647711981.253871, \"step\": 539, \"value\": 0.10852843523025513}, {\"wallTime\": 1647711981.2981029, \"step\": 540, \"value\": 0.10870413482189178}, {\"wallTime\": 1647711981.3940768, \"step\": 542, \"value\": 0.1090528592467308}, {\"wallTime\": 1647711981.4823608, \"step\": 544, \"value\": 0.1093979999423027}, {\"wallTime\": 1647711981.5773342, \"step\": 546, \"value\": 0.1097395196557045}, {\"wallTime\": 1647711981.60895, \"step\": 547, \"value\": 0.10990892350673676}, {\"wallTime\": 1647711981.7341783, \"step\": 550, \"value\": 0.1104116216301918}, {\"wallTime\": 1647711981.8247726, \"step\": 552, \"value\": 0.11074214428663254}, {\"wallTime\": 1647711981.9611208, \"step\": 555, \"value\": 0.11123094707727432}, {\"wallTime\": 1647711982.0106046, \"step\": 556, \"value\": 0.11139199882745743}, {\"wallTime\": 1647711982.2897913, \"step\": 562, \"value\": 0.11233841627836227}, {\"wallTime\": 1647711982.3376198, \"step\": 563, \"value\": 0.11249280720949173}, {\"wallTime\": 1647711982.3844995, \"step\": 564, \"value\": 0.11264622211456299}, {\"wallTime\": 1647711982.56659, \"step\": 568, \"value\": 0.11325019598007202}, {\"wallTime\": 1647711982.6975646, \"step\": 571, \"value\": 0.11369288712739944}, {\"wallTime\": 1647711982.7835433, \"step\": 573, \"value\": 0.11398307234048843}, {\"wallTime\": 1647711982.9083395, \"step\": 576, \"value\": 0.1144108846783638}, {\"wallTime\": 1647711983.0851805, \"step\": 580, \"value\": 0.1149672344326973}, {\"wallTime\": 1647711983.269235, \"step\": 584, \"value\": 0.1155073419213295}, {\"wallTime\": 1647711983.314816, \"step\": 585, \"value\": 0.1156398132443428}, {\"wallTime\": 1647711983.359541, \"step\": 586, \"value\": 0.11577125638723373}, {\"wallTime\": 1647711983.471678, \"step\": 588, \"value\": 0.11603104323148727}, {\"wallTime\": 1647711983.5619333, \"step\": 590, \"value\": 0.11628668755292892}, {\"wallTime\": 1647711983.6070817, \"step\": 591, \"value\": 0.11641295254230499}, {\"wallTime\": 1647711983.6558976, \"step\": 592, \"value\": 0.1165381669998169}, {\"wallTime\": 1647711983.7425122, \"step\": 594, \"value\": 0.1167854592204094}, {\"wallTime\": 1647711983.8247108, \"step\": 596, \"value\": 0.11702854931354523}, {\"wallTime\": 1647711983.8690267, \"step\": 597, \"value\": 0.1171485111117363}, {\"wallTime\": 1647711983.9089417, \"step\": 598, \"value\": 0.1172674149274826}, {\"wallTime\": 1647711983.9488606, \"step\": 599, \"value\": 0.11738526076078415}, {\"wallTime\": 1647711984.0311286, \"step\": 601, \"value\": 0.11761775612831116}, {\"wallTime\": 1647711984.0793636, \"step\": 602, \"value\": 0.11773239821195602}, {\"wallTime\": 1647711984.1231127, \"step\": 603, \"value\": 0.11784597486257553}, {\"wallTime\": 1647711984.2094433, \"step\": 605, \"value\": 0.11806990951299667}, {\"wallTime\": 1647711984.364925, \"step\": 608, \"value\": 0.11839772760868073}, {\"wallTime\": 1647711984.4734397, \"step\": 610, \"value\": 0.11861085146665573}, {\"wallTime\": 1647711984.6677008, \"step\": 613, \"value\": 0.1189223900437355}, {\"wallTime\": 1647711984.7209063, \"step\": 614, \"value\": 0.11902404576539993}, {\"wallTime\": 1647711984.8338678, \"step\": 616, \"value\": 0.11922407895326614}, {\"wallTime\": 1647711984.9861662, \"step\": 618, \"value\": 0.11941970139741898}, {\"wallTime\": 1647711985.092969, \"step\": 620, \"value\": 0.11961092054843903}, {\"wallTime\": 1647711985.1797445, \"step\": 622, \"value\": 0.11979769915342331}, {\"wallTime\": 1647711985.2370946, \"step\": 623, \"value\": 0.11988942325115204}, {\"wallTime\": 1647711985.4194937, \"step\": 626, \"value\": 0.12015791237354279}, {\"wallTime\": 1647711985.5092876, \"step\": 628, \"value\": 0.12033131718635559}, {\"wallTime\": 1647711985.5878804, \"step\": 629, \"value\": 0.12041633576154709}, {\"wallTime\": 1647711985.7991061, \"step\": 633, \"value\": 0.12074515223503113}, {\"wallTime\": 1647711985.9737403, \"step\": 637, \"value\": 0.12105588614940643}, {\"wallTime\": 1647711986.113092, \"step\": 640, \"value\": 0.12127700448036194}, {\"wallTime\": 1647711986.1637597, \"step\": 641, \"value\": 0.12134843319654465}, {\"wallTime\": 1647711986.2079296, \"step\": 642, \"value\": 0.12141872197389603}, {\"wallTime\": 1647711986.255841, \"step\": 643, \"value\": 0.12148785591125488}, {\"wallTime\": 1647711986.3003469, \"step\": 644, \"value\": 0.121555857360363}, {\"wallTime\": 1647711986.5221436, \"step\": 649, \"value\": 0.12187860906124115}, {\"wallTime\": 1647711986.6412756, \"step\": 651, \"value\": 0.12199964374303818}, {\"wallTime\": 1647711986.6876788, \"step\": 652, \"value\": 0.1220584288239479}, {\"wallTime\": 1647711993.144659, \"step\": 653, \"value\": 0.12211605906486511}, {\"wallTime\": 1647711993.1616478, \"step\": 654, \"value\": 0.1221725344657898}, {\"wallTime\": 1647711993.1706498, \"step\": 655, \"value\": 0.12222784757614136}, {\"wallTime\": 1647711993.3767323, \"step\": 658, \"value\": 0.12238682061433792}, {\"wallTime\": 1647711993.4663897, \"step\": 660, \"value\": 0.12248698621988297}, {\"wallTime\": 1647711993.7650328, \"step\": 667, \"value\": 0.12280082702636719}, {\"wallTime\": 1647711993.9719748, \"step\": 670, \"value\": 0.1229177713394165}, {\"wallTime\": 1647711994.20587, \"step\": 675, \"value\": 0.12308920174837112}, {\"wallTime\": 1647711999.4726882, \"step\": 676, \"value\": 0.12311995774507523}, {\"wallTime\": 1647711999.4917848, \"step\": 677, \"value\": 0.12314952909946442}, {\"wallTime\": 1647711999.5781908, \"step\": 680, \"value\": 0.1232311949133873}, {\"wallTime\": 1647711999.723167, \"step\": 682, \"value\": 0.12327973544597626}, {\"wallTime\": 1647711999.8075423, \"step\": 683, \"value\": 0.12330222874879837}, {\"wallTime\": 1647711999.8754396, \"step\": 684, \"value\": 0.12332355231046677}, {\"wallTime\": 1647712000.037358, \"step\": 687, \"value\": 0.12338040769100189}, {\"wallTime\": 1647712000.2624202, \"step\": 692, \"value\": 0.12345150858163834}, {\"wallTime\": 1647712000.3899474, \"step\": 694, \"value\": 0.12347165495157242}, {\"wallTime\": 1647712000.482739, \"step\": 696, \"value\": 0.12348707020282745}, {\"wallTime\": 1647712000.5283997, \"step\": 697, \"value\": 0.12349299341440201}, {\"wallTime\": 1647712000.6172042, \"step\": 699, \"value\": 0.12350129336118698}, {\"wallTime\": 1647712000.7497046, \"step\": 702, \"value\": 0.12350497394800186}, {\"wallTime\": 1647712000.793867, \"step\": 703, \"value\": 0.12350474298000336}, {\"wallTime\": 1647712000.908885, \"step\": 705, \"value\": 0.12350361794233322}, {\"wallTime\": 1647712001.0986693, \"step\": 709, \"value\": 0.12349864095449448}, {\"wallTime\": 1647712001.1441338, \"step\": 710, \"value\": 0.12349683046340942}, {\"wallTime\": 1647712001.2348268, \"step\": 712, \"value\": 0.123492531478405}, {\"wallTime\": 1647712001.3767936, \"step\": 715, \"value\": 0.12348438799381256}, {\"wallTime\": 1647712001.4706454, \"step\": 717, \"value\": 0.12347783148288727}, {\"wallTime\": 1647712001.6149313, \"step\": 720, \"value\": 0.12346629798412323}, {\"wallTime\": 1647712001.6591454, \"step\": 721, \"value\": 0.1234619989991188}, {\"wallTime\": 1647712001.7643824, \"step\": 723, \"value\": 0.12345273047685623}, {\"wallTime\": 1647712001.846387, \"step\": 725, \"value\": 0.12344255298376083}, {\"wallTime\": 1647712001.8926895, \"step\": 726, \"value\": 0.12343712896108627}, {\"wallTime\": 1647712001.9766817, \"step\": 728, \"value\": 0.12342559546232224}, {\"wallTime\": 1647712002.019212, \"step\": 729, \"value\": 0.12341949343681335}, {\"wallTime\": 1647712002.120947, \"step\": 731, \"value\": 0.12340660393238068}, {\"wallTime\": 1647712002.165756, \"step\": 732, \"value\": 0.12339982390403748}, {\"wallTime\": 1647712002.212076, \"step\": 733, \"value\": 0.12339281290769577}, {\"wallTime\": 1647712002.4368215, \"step\": 738, \"value\": 0.12335439026355743}, {\"wallTime\": 1647712002.6663437, \"step\": 742, \"value\": 0.1233195886015892}, {\"wallTime\": 1647712002.7262123, \"step\": 743, \"value\": 0.12331032752990723}, {\"wallTime\": 1647712002.7833753, \"step\": 744, \"value\": 0.12330083549022675}, {\"wallTime\": 1647712003.271709, \"step\": 755, \"value\": 0.12318158149719238}, {\"wallTime\": 1647712003.3187509, \"step\": 756, \"value\": 0.12316938489675522}, {\"wallTime\": 1647712003.4068363, \"step\": 758, \"value\": 0.12314432859420776}, {\"wallTime\": 1647712003.6714888, \"step\": 763, \"value\": 0.12307774275541306}, {\"wallTime\": 1647712003.7297986, \"step\": 764, \"value\": 0.12306375056505203}, {\"wallTime\": 1647712003.7749174, \"step\": 765, \"value\": 0.1230495348572731}, {\"wallTime\": 1647712003.9236495, \"step\": 768, \"value\": 0.12300554662942886}, {\"wallTime\": 1647712003.9773586, \"step\": 769, \"value\": 0.1229904294013977}, {\"wallTime\": 1647712004.1182177, \"step\": 772, \"value\": 0.12294374406337738}, {\"wallTime\": 1647712004.30118, \"step\": 775, \"value\": 0.12289503961801529}, {\"wallTime\": 1647712004.335209, \"step\": 776, \"value\": 0.12287835776805878}, {\"wallTime\": 1647712004.4943056, \"step\": 778, \"value\": 0.12284432351589203}, {\"wallTime\": 1647712004.5845034, \"step\": 779, \"value\": 0.1228269711136818}, {\"wallTime\": 1647712004.6264374, \"step\": 780, \"value\": 0.12280939519405365}, {\"wallTime\": 1647712004.690115, \"step\": 781, \"value\": 0.1227915957570076}, {\"wallTime\": 1647712004.736149, \"step\": 782, \"value\": 0.12277356535196304}, {\"wallTime\": 1647712005.0480738, \"step\": 788, \"value\": 0.12266073375940323}, {\"wallTime\": 1647712005.1842668, \"step\": 791, \"value\": 0.12260130047798157}, {\"wallTime\": 1647712005.273334, \"step\": 793, \"value\": 0.12256056070327759}, {\"wallTime\": 1647712005.361511, \"step\": 795, \"value\": 0.12251893430948257}, {\"wallTime\": 1647712005.5255585, \"step\": 799, \"value\": 0.12243301421403885}, {\"wallTime\": 1647712005.7456896, \"step\": 804, \"value\": 0.12232060730457306}, {\"wallTime\": 1647712005.7965024, \"step\": 805, \"value\": 0.12229745835065842}, {\"wallTime\": 1647712005.8350103, \"step\": 806, \"value\": 0.12227409332990646}, {\"wallTime\": 1647712005.88094, \"step\": 807, \"value\": 0.1222505047917366}, {\"wallTime\": 1647712006.017329, \"step\": 810, \"value\": 0.12217840552330017}, {\"wallTime\": 1647712006.3857768, \"step\": 818, \"value\": 0.12197640538215637}, {\"wallTime\": 1647712006.4263847, \"step\": 819, \"value\": 0.12195015698671341}, {\"wallTime\": 1647712006.510535, \"step\": 821, \"value\": 0.12189701199531555}, {\"wallTime\": 1647712006.6030245, \"step\": 823, \"value\": 0.12184298038482666}, {\"wallTime\": 1647712006.738176, \"step\": 826, \"value\": 0.1217602863907814}, {\"wallTime\": 1647712006.7808707, \"step\": 827, \"value\": 0.12173227965831757}, {\"wallTime\": 1647712006.8266065, \"step\": 828, \"value\": 0.12170405685901642}, {\"wallTime\": 1647712007.00961, \"step\": 832, \"value\": 0.12158896774053574}, {\"wallTime\": 1647712007.0550325, \"step\": 833, \"value\": 0.12155964225530624}, {\"wallTime\": 1647712007.1454422, \"step\": 835, \"value\": 0.12150034308433533}, {\"wallTime\": 1647712007.2280126, \"step\": 836, \"value\": 0.1214703693985939}, {\"wallTime\": 1647712007.2738082, \"step\": 837, \"value\": 0.12144017219543457}, {\"wallTime\": 1647712007.3644516, \"step\": 839, \"value\": 0.12137912213802338}, {\"wallTime\": 1647712007.4072006, \"step\": 840, \"value\": 0.12134826928377151}, {\"wallTime\": 1647712007.567422, \"step\": 843, \"value\": 0.12125439941883087}, {\"wallTime\": 1647712007.673343, \"step\": 845, \"value\": 0.12119073420763016}, {\"wallTime\": 1647712007.8811269, \"step\": 850, \"value\": 0.12102776020765305}, {\"wallTime\": 1647712007.9223351, \"step\": 851, \"value\": 0.12099450826644897}, {\"wallTime\": 1647712008.0501304, \"step\": 854, \"value\": 0.12089347094297409}, {\"wallTime\": 1647712008.184668, \"step\": 857, \"value\": 0.12079047411680222}, {\"wallTime\": 1647712008.3150318, \"step\": 860, \"value\": 0.12068554013967514}, {\"wallTime\": 1647712008.4058108, \"step\": 862, \"value\": 0.12061449885368347}, {\"wallTime\": 1647712008.5405958, \"step\": 865, \"value\": 0.12050632387399673}, {\"wallTime\": 1647712008.5860844, \"step\": 866, \"value\": 0.120469830930233}, {\"wallTime\": 1647712008.7741055, \"step\": 870, \"value\": 0.12032172828912735}, {\"wallTime\": 1647712008.8231895, \"step\": 871, \"value\": 0.12028416991233826}, {\"wallTime\": 1647712009.3781714, \"step\": 884, \"value\": 0.11977639049291611}, {\"wallTime\": 1647712009.4241264, \"step\": 885, \"value\": 0.11973583698272705}, {\"wallTime\": 1647712009.4680955, \"step\": 886, \"value\": 0.11969507485628128}, {\"wallTime\": 1647712009.5604286, \"step\": 888, \"value\": 0.1196129098534584}, {\"wallTime\": 1647712009.648639, \"step\": 890, \"value\": 0.11952990293502808}, {\"wallTime\": 1647712009.7411284, \"step\": 892, \"value\": 0.1194460391998291}, {\"wallTime\": 1647712009.9274309, \"step\": 895, \"value\": 0.11931867152452469}, {\"wallTime\": 1647712010.0915844, \"step\": 897, \"value\": 0.11923269927501678}, {\"wallTime\": 1647712010.1358058, \"step\": 898, \"value\": 0.11918939650058746}, {\"wallTime\": 1647712010.2625685, \"step\": 901, \"value\": 0.11905823647975922}, {\"wallTime\": 1647712010.3066638, \"step\": 902, \"value\": 0.11901409178972244}, {\"wallTime\": 1647712010.3949583, \"step\": 904, \"value\": 0.11892518401145935}, {\"wallTime\": 1647712010.526291, \"step\": 907, \"value\": 0.11879024654626846}, {\"wallTime\": 1647712010.5709257, \"step\": 908, \"value\": 0.1187448501586914}, {\"wallTime\": 1647712010.6663902, \"step\": 910, \"value\": 0.11865343153476715}, {\"wallTime\": 1647712010.7130482, \"step\": 911, \"value\": 0.11860740929841995}, {\"wallTime\": 1647712010.8515944, \"step\": 914, \"value\": 0.11846809089183807}, {\"wallTime\": 1647712011.0504856, \"step\": 918, \"value\": 0.11827942728996277}, {\"wallTime\": 1647712011.1086435, \"step\": 919, \"value\": 0.11823174357414246}, {\"wallTime\": 1647712011.2257168, \"step\": 921, \"value\": 0.11813575029373169}, {\"wallTime\": 1647712011.34851, \"step\": 923, \"value\": 0.11803893744945526}, {\"wallTime\": 1647712011.628047, \"step\": 927, \"value\": 0.11784283816814423}, {\"wallTime\": 1647712011.6636777, \"step\": 928, \"value\": 0.11779329180717468}, {\"wallTime\": 1647712011.7567842, \"step\": 930, \"value\": 0.11769360303878784}, {\"wallTime\": 1647712011.809373, \"step\": 931, \"value\": 0.11764344573020935}, {\"wallTime\": 1647712011.866001, \"step\": 932, \"value\": 0.11759308725595474}, {\"wallTime\": 1647712011.9167476, \"step\": 933, \"value\": 0.11754252016544342}, {\"wallTime\": 1647712012.0426314, \"step\": 935, \"value\": 0.11744078248739243}, {\"wallTime\": 1647712016.7047324, \"step\": 939, \"value\": 0.11723485589027405}, {\"wallTime\": 1647712016.783304, \"step\": 941, \"value\": 0.11713066697120667}, {\"wallTime\": 1647712016.834167, \"step\": 942, \"value\": 0.1170782744884491}, {\"wallTime\": 1647712016.9872203, \"step\": 945, \"value\": 0.1169198676943779}, {\"wallTime\": 1647712017.168835, \"step\": 949, \"value\": 0.11670583486557007}, {\"wallTime\": 1647712017.3823273, \"step\": 952, \"value\": 0.11654319614171982}, {\"wallTime\": 1647712017.5305834, \"step\": 955, \"value\": 0.11637874692678452}, {\"wallTime\": 1647712017.586897, \"step\": 956, \"value\": 0.11632353067398071}, {\"wallTime\": 1647712017.7845383, \"step\": 960, \"value\": 0.11610067635774612}, {\"wallTime\": 1647712017.8704236, \"step\": 962, \"value\": 0.11598804593086243}, {\"wallTime\": 1647712017.9143112, \"step\": 963, \"value\": 0.115931436419487}, {\"wallTime\": 1647712017.9978292, \"step\": 965, \"value\": 0.11581762135028839}, {\"wallTime\": 1647712018.1374874, \"step\": 967, \"value\": 0.11570300906896591}, {\"wallTime\": 1647712018.1814547, \"step\": 968, \"value\": 0.1156454086303711}, {\"wallTime\": 1647712018.3252246, \"step\": 971, \"value\": 0.11547142267227173}, {\"wallTime\": 1647712018.5625098, \"step\": 976, \"value\": 0.11517751961946487}, {\"wallTime\": 1647712018.6608052, \"step\": 978, \"value\": 0.11505857855081558}, {\"wallTime\": 1647712018.7070312, \"step\": 979, \"value\": 0.11499882489442825}, {\"wallTime\": 1647712018.8019664, \"step\": 981, \"value\": 0.11487871408462524}, {\"wallTime\": 1647712018.8439674, \"step\": 982, \"value\": 0.11481837183237076}, {\"wallTime\": 1647712019.018392, \"step\": 986, \"value\": 0.11457505077123642}, {\"wallTime\": 1647712019.1841092, \"step\": 990, \"value\": 0.11432863026857376}, {\"wallTime\": 1647712019.280197, \"step\": 992, \"value\": 0.11420426517724991}, {\"wallTime\": 1647712019.371869, \"step\": 994, \"value\": 0.11407913267612457}, {\"wallTime\": 1647712019.4589934, \"step\": 996, \"value\": 0.11395323276519775}, {\"wallTime\": 1647712019.5524783, \"step\": 998, \"value\": 0.11382657289505005}, {\"wallTime\": 1647712019.5980628, \"step\": 999, \"value\": 0.11376295238733292}, {\"wallTime\": 1647712019.7614355, \"step\": 1002, \"value\": 0.11357095837593079}, {\"wallTime\": 1647712019.8137853, \"step\": 1003, \"value\": 0.11350657790899277}, {\"wallTime\": 1647712019.9010003, \"step\": 1004, \"value\": 0.11344200372695923}, {\"wallTime\": 1647712019.995813, \"step\": 1006, \"value\": 0.11331230401992798}, {\"wallTime\": 1647712020.185026, \"step\": 1011, \"value\": 0.11298473924398422}, {\"wallTime\": 1647712020.2420182, \"step\": 1013, \"value\": 0.11285239458084106}, {\"wallTime\": 1647712020.3171883, \"step\": 1015, \"value\": 0.11271930485963821}, {\"wallTime\": 1647712020.3593402, \"step\": 1016, \"value\": 0.1126524806022644}, {\"wallTime\": 1647712020.3968062, \"step\": 1017, \"value\": 0.11258547008037567}, {\"wallTime\": 1647712020.6052225, \"step\": 1022, \"value\": 0.11224763095378876}, {\"wallTime\": 1647712020.7822964, \"step\": 1026, \"value\": 0.11197402328252792}, {\"wallTime\": 1647712020.8718195, \"step\": 1028, \"value\": 0.11183611303567886}, {\"wallTime\": 1647712020.9013028, \"step\": 1029, \"value\": 0.11176688224077225}, {\"wallTime\": 1647712021.1481264, \"step\": 1035, \"value\": 0.11134766787290573}, {\"wallTime\": 1647712021.192268, \"step\": 1036, \"value\": 0.11127716302871704}, {\"wallTime\": 1647712021.2323759, \"step\": 1037, \"value\": 0.11120647937059402}, {\"wallTime\": 1647712021.2831824, \"step\": 1038, \"value\": 0.11113560944795609}, {\"wallTime\": 1647712021.3301704, \"step\": 1039, \"value\": 0.11106456071138382}, {\"wallTime\": 1647712021.5184543, \"step\": 1043, \"value\": 0.1107785552740097}, {\"wallTime\": 1647712021.647058, \"step\": 1045, \"value\": 0.11063447594642639}, {\"wallTime\": 1647712021.6926975, \"step\": 1046, \"value\": 0.11056216806173325}, {\"wallTime\": 1647712021.9819994, \"step\": 1052, \"value\": 0.11012457311153412}, {\"wallTime\": 1647712022.0300167, \"step\": 1053, \"value\": 0.11005102097988129}, {\"wallTime\": 1647712022.1730945, \"step\": 1056, \"value\": 0.10982929170131683}, {\"wallTime\": 1647712022.2609165, \"step\": 1058, \"value\": 0.10968060046434402}, {\"wallTime\": 1647712022.3051054, \"step\": 1059, \"value\": 0.10960599035024643}, {\"wallTime\": 1647712022.3513987, \"step\": 1060, \"value\": 0.10953120142221451}, {\"wallTime\": 1647712022.4398248, \"step\": 1062, \"value\": 0.10938110202550888}, {\"wallTime\": 1647712022.5700862, \"step\": 1065, \"value\": 0.10915464907884598}, {\"wallTime\": 1647712022.662784, \"step\": 1067, \"value\": 0.10900280624628067}, {\"wallTime\": 1647712022.7585742, \"step\": 1069, \"value\": 0.10885027796030045}, {\"wallTime\": 1647712022.8058765, \"step\": 1070, \"value\": 0.10877375304698944}, {\"wallTime\": 1647712022.8534236, \"step\": 1071, \"value\": 0.10869705677032471}, {\"wallTime\": 1647712022.9051943, \"step\": 1072, \"value\": 0.10862018167972565}, {\"wallTime\": 1647712022.9552033, \"step\": 1073, \"value\": 0.10854314267635345}, {\"wallTime\": 1647712023.003524, \"step\": 1074, \"value\": 0.10846593230962753}, {\"wallTime\": 1647712023.1581721, \"step\": 1077, \"value\": 0.10823327302932739}, {\"wallTime\": 1647712023.2058933, \"step\": 1078, \"value\": 0.10815537720918655}, {\"wallTime\": 1647712023.3034732, \"step\": 1080, \"value\": 0.10799907892942429}, {\"wallTime\": 1647712023.3496988, \"step\": 1081, \"value\": 0.10792067646980286}, {\"wallTime\": 1647712023.3934171, \"step\": 1082, \"value\": 0.1078421026468277}, {\"wallTime\": 1647712023.5408568, \"step\": 1085, \"value\": 0.10760537534952164}, {\"wallTime\": 1647712023.5872536, \"step\": 1086, \"value\": 0.10752612352371216}, {\"wallTime\": 1647712023.6422896, \"step\": 1087, \"value\": 0.10744671523571014}, {\"wallTime\": 1647712023.8553154, \"step\": 1091, \"value\": 0.10712738335132599}, {\"wallTime\": 1647712024.1997588, \"step\": 1098, \"value\": 0.10656217485666275}, {\"wallTime\": 1647712024.2915716, \"step\": 1100, \"value\": 0.10639920830726624}, {\"wallTime\": 1647712024.38725, \"step\": 1102, \"value\": 0.10623558610677719}, {\"wallTime\": 1647712024.4322307, \"step\": 1103, \"value\": 0.10615352541208267}, {\"wallTime\": 1647712024.4755356, \"step\": 1104, \"value\": 0.10607130825519562}, {\"wallTime\": 1647712024.612206, \"step\": 1107, \"value\": 0.10582368075847626}, {\"wallTime\": 1647712024.7071373, \"step\": 1109, \"value\": 0.10565778613090515}, {\"wallTime\": 1647712024.7849267, \"step\": 1111, \"value\": 0.10549124330282211}, {\"wallTime\": 1647712024.8206942, \"step\": 1112, \"value\": 0.10540773719549179}, {\"wallTime\": 1647712024.9005997, \"step\": 1114, \"value\": 0.10524024069309235}, {\"wallTime\": 1647712025.1269515, \"step\": 1119, \"value\": 0.10481870919466019}, {\"wallTime\": 1647712025.2129934, \"step\": 1121, \"value\": 0.10464899241924286}, {\"wallTime\": 1647712025.2598298, \"step\": 1122, \"value\": 0.10456389933824539}, {\"wallTime\": 1647712025.3971066, \"step\": 1125, \"value\": 0.10430767387151718}, {\"wallTime\": 1647712025.443024, \"step\": 1126, \"value\": 0.10422195494174957}, {\"wallTime\": 1647712025.532384, \"step\": 1128, \"value\": 0.10405004769563675}, {\"wallTime\": 1647712025.5780928, \"step\": 1129, \"value\": 0.10396386682987213}, {\"wallTime\": 1647712025.6462631, \"step\": 1130, \"value\": 0.10387752205133438}, {\"wallTime\": 1647712025.6921701, \"step\": 1131, \"value\": 0.10379102826118469}, {\"wallTime\": 1647712025.7379546, \"step\": 1132, \"value\": 0.10370438545942307}, {\"wallTime\": 1647712025.8294094, \"step\": 1134, \"value\": 0.10353062301874161}, {\"wallTime\": 1647712025.8707144, \"step\": 1135, \"value\": 0.10344351828098297}, {\"wallTime\": 1647712025.9236367, \"step\": 1136, \"value\": 0.1033562570810318}, {\"wallTime\": 1647712026.0378907, \"step\": 1139, \"value\": 0.10309355705976486}, {\"wallTime\": 1647712026.171078, \"step\": 1142, \"value\": 0.10282950103282928}, {\"wallTime\": 1647712026.3002555, \"step\": 1145, \"value\": 0.10256408900022507}, {\"wallTime\": 1647712026.34514, \"step\": 1146, \"value\": 0.10247531533241272}, {\"wallTime\": 1647712026.435869, \"step\": 1148, \"value\": 0.1022973284125328}, {\"wallTime\": 1647712026.526228, \"step\": 1150, \"value\": 0.10211874544620514}, {\"wallTime\": 1647712026.5716765, \"step\": 1151, \"value\": 0.1020292341709137}, {\"wallTime\": 1647712026.6168091, \"step\": 1152, \"value\": 0.10193957388401031}, {\"wallTime\": 1647712026.6625724, \"step\": 1153, \"value\": 0.101849764585495}, {\"wallTime\": 1647712026.9974823, \"step\": 1160, \"value\": 0.10121701657772064}, {\"wallTime\": 1647712027.0935714, \"step\": 1162, \"value\": 0.10103492438793182}, {\"wallTime\": 1647712027.1912596, \"step\": 1164, \"value\": 0.10085225850343704}, {\"wallTime\": 1647712027.317348, \"step\": 1166, \"value\": 0.1006690189242363}, {\"wallTime\": 1647712027.3683412, \"step\": 1167, \"value\": 0.10057718306779861}, {\"wallTime\": 1647712027.6796544, \"step\": 1173, \"value\": 0.10002320259809494}, {\"wallTime\": 1647712027.7332842, \"step\": 1174, \"value\": 0.09993038326501846}, {\"wallTime\": 1647712027.8285625, \"step\": 1176, \"value\": 0.09974431991577148}, {\"wallTime\": 1647712027.8761644, \"step\": 1177, \"value\": 0.09965107589960098}, {\"wallTime\": 1647712027.919358, \"step\": 1178, \"value\": 0.09955769777297974}, {\"wallTime\": 1647712028.106652, \"step\": 1182, \"value\": 0.09918279945850372}, {\"wallTime\": 1647712028.2007854, \"step\": 1184, \"value\": 0.09899452328681946}, {\"wallTime\": 1647712028.2897437, \"step\": 1186, \"value\": 0.09880571067333221}, {\"wallTime\": 1647712028.4060729, \"step\": 1188, \"value\": 0.0986163467168808}, {\"wallTime\": 1647712028.4544604, \"step\": 1189, \"value\": 0.09852146357297897}, {\"wallTime\": 1647712028.5091891, \"step\": 1190, \"value\": 0.0984264463186264}, {\"wallTime\": 1647712028.6840973, \"step\": 1193, \"value\": 0.09814058244228363}, {\"wallTime\": 1647712028.7345605, \"step\": 1194, \"value\": 0.09804502874612808}, {\"wallTime\": 1647712028.7885675, \"step\": 1195, \"value\": 0.09794934093952179}, {\"wallTime\": 1647712028.890545, \"step\": 1197, \"value\": 0.09775757044553757}, {\"wallTime\": 1647712028.934667, \"step\": 1198, \"value\": 0.09766148775815964}, {\"wallTime\": 1647712029.0771627, \"step\": 1201, \"value\": 0.09737244993448257}, {\"wallTime\": 1647712029.2759736, \"step\": 1205, \"value\": 0.09698524326086044}, {\"wallTime\": 1647712029.3237338, \"step\": 1206, \"value\": 0.09688811749219894}, {\"wallTime\": 1647712029.3717215, \"step\": 1207, \"value\": 0.0967908650636673}, {\"wallTime\": 1647712029.4705625, \"step\": 1209, \"value\": 0.09659597277641296}, {\"wallTime\": 1647712029.689814, \"step\": 1213, \"value\": 0.09620465338230133}, {\"wallTime\": 1647712029.7339623, \"step\": 1214, \"value\": 0.09610650688409805}, {\"wallTime\": 1647712029.7761047, \"step\": 1215, \"value\": 0.09600824117660522}, {\"wallTime\": 1647712029.910059, \"step\": 1218, \"value\": 0.09571267664432526}, {\"wallTime\": 1647712030.1325295, \"step\": 1223, \"value\": 0.09521758556365967}, {\"wallTime\": 1647712030.220959, \"step\": 1225, \"value\": 0.09501868486404419}, {\"wallTime\": 1647712030.416104, \"step\": 1229, \"value\": 0.09461943060159683}, {\"wallTime\": 1647712030.56505, \"step\": 1232, \"value\": 0.09431873261928558}, {\"wallTime\": 1647712030.6162326, \"step\": 1233, \"value\": 0.09421825408935547}, {\"wallTime\": 1647712030.8678026, \"step\": 1238, \"value\": 0.09371411055326462}, {\"wallTime\": 1647712030.9580524, \"step\": 1240, \"value\": 0.09351162612438202}, {\"wallTime\": 1647712031.0022323, \"step\": 1241, \"value\": 0.09341021627187729}, {\"wallTime\": 1647712031.0463035, \"step\": 1242, \"value\": 0.09330867975950241}, {\"wallTime\": 1647712031.0904112, \"step\": 1243, \"value\": 0.09320703893899918}, {\"wallTime\": 1647712031.140888, \"step\": 1244, \"value\": 0.0931052714586258}, {\"wallTime\": 1647712031.225845, \"step\": 1246, \"value\": 0.09290140867233276}, {\"wallTime\": 1647712031.3645802, \"step\": 1249, \"value\": 0.09259475022554398}, {\"wallTime\": 1647712031.4128008, \"step\": 1250, \"value\": 0.09249230474233627}, {\"wallTime\": 1647712031.460831, \"step\": 1251, \"value\": 0.09238974750041962}, {\"wallTime\": 1647712031.50812, \"step\": 1252, \"value\": 0.092287078499794}, {\"wallTime\": 1647712031.6112633, \"step\": 1254, \"value\": 0.09208140522241592}, {\"wallTime\": 1647712031.70728, \"step\": 1256, \"value\": 0.09187528491020203}, {\"wallTime\": 1647712031.755377, \"step\": 1257, \"value\": 0.09177205711603165}, {\"wallTime\": 1647712031.8997083, \"step\": 1260, \"value\": 0.09146172553300858}, {\"wallTime\": 1647712031.9472451, \"step\": 1261, \"value\": 0.09135805815458298}, {\"wallTime\": 1647712032.2233636, \"step\": 1267, \"value\": 0.09073381870985031}, {\"wallTime\": 1647712032.3725932, \"step\": 1271, \"value\": 0.09031552821397781}, {\"wallTime\": 1647712032.58489, \"step\": 1276, \"value\": 0.08979031443595886}, {\"wallTime\": 1647712032.633446, \"step\": 1277, \"value\": 0.08968496322631836}, {\"wallTime\": 1647712032.6738915, \"step\": 1278, \"value\": 0.0895795077085495}, {\"wallTime\": 1647712032.8563666, \"step\": 1282, \"value\": 0.08915667235851288}, {\"wallTime\": 1647712032.9930992, \"step\": 1285, \"value\": 0.08883849531412125}, {\"wallTime\": 1647712033.2249901, \"step\": 1290, \"value\": 0.08830621838569641}, {\"wallTime\": 1647712033.352102, \"step\": 1293, \"value\": 0.08798567950725555}, {\"wallTime\": 1647712033.5701628, \"step\": 1298, \"value\": 0.08744952827692032}, {\"wallTime\": 1647712033.6097484, \"step\": 1299, \"value\": 0.08734201639890671}, {\"wallTime\": 1647712033.7373903, \"step\": 1302, \"value\": 0.08701891452074051}, {\"wallTime\": 1647712033.926402, \"step\": 1306, \"value\": 0.08658682554960251}, {\"wallTime\": 1647712034.10664, \"step\": 1310, \"value\": 0.08615327626466751}, {\"wallTime\": 1647712034.3223722, \"step\": 1315, \"value\": 0.0856093242764473}, {\"wallTime\": 1647712034.5870497, \"step\": 1320, \"value\": 0.08506319671869278}, {\"wallTime\": 1647712034.6698024, \"step\": 1322, \"value\": 0.08484414219856262}, {\"wallTime\": 1647712034.8001804, \"step\": 1325, \"value\": 0.08451493084430695}, {\"wallTime\": 1647712034.8421457, \"step\": 1326, \"value\": 0.08440502732992172}, {\"wallTime\": 1647712034.9224513, \"step\": 1328, \"value\": 0.08418497443199158}, {\"wallTime\": 1647712035.2496195, \"step\": 1335, \"value\": 0.08341220021247864}, {\"wallTime\": 1647712035.693229, \"step\": 1344, \"value\": 0.082412950694561}, {\"wallTime\": 1647712035.737255, \"step\": 1345, \"value\": 0.0823015347123146}, {\"wallTime\": 1647712035.8272197, \"step\": 1347, \"value\": 0.0820784866809845}, {\"wallTime\": 1647712035.873767, \"step\": 1348, \"value\": 0.08196685463190079}, {\"wallTime\": 1647712036.0041234, \"step\": 1351, \"value\": 0.08163149654865265}, {\"wallTime\": 1647712036.0451121, \"step\": 1352, \"value\": 0.08151956647634506}, {\"wallTime\": 1647712036.1379905, \"step\": 1354, \"value\": 0.08129549026489258}, {\"wallTime\": 1647712036.3299336, \"step\": 1358, \"value\": 0.08084648102521896}, {\"wallTime\": 1647712036.424556, \"step\": 1360, \"value\": 0.08062155544757843}, {\"wallTime\": 1647712036.6376371, \"step\": 1364, \"value\": 0.0801708772778511}, {\"wallTime\": 1647712036.6953335, \"step\": 1365, \"value\": 0.0800580382347107}, {\"wallTime\": 1647712036.759749, \"step\": 1366, \"value\": 0.07994513213634491}, {\"wallTime\": 1647712036.8200545, \"step\": 1367, \"value\": 0.07983215898275375}, {\"wallTime\": 1647712036.878885, \"step\": 1368, \"value\": 0.07971911877393723}, {\"wallTime\": 1647712037.1088538, \"step\": 1372, \"value\": 0.07926630973815918}, {\"wallTime\": 1647712037.1620536, \"step\": 1373, \"value\": 0.07915294170379639}, {\"wallTime\": 1647712037.2714121, \"step\": 1375, \"value\": 0.07892602682113647}, {\"wallTime\": 1647712037.3313622, \"step\": 1376, \"value\": 0.07881247252225876}, {\"wallTime\": 1647712037.549238, \"step\": 1380, \"value\": 0.07835763692855835}, {\"wallTime\": 1647712037.8210442, \"step\": 1385, \"value\": 0.07778771966695786}, {\"wallTime\": 1647712037.8686216, \"step\": 1386, \"value\": 0.07767356187105179}, {\"wallTime\": 1647712038.0512726, \"step\": 1390, \"value\": 0.07721634209156036}, {\"wallTime\": 1647712038.179126, \"step\": 1393, \"value\": 0.07687283307313919}, {\"wallTime\": 1647712038.3477542, \"step\": 1397, \"value\": 0.07641404122114182}, {\"wallTime\": 1647712038.621734, \"step\": 1403, \"value\": 0.07572425901889801}, {\"wallTime\": 1647712043.3181086, \"step\": 1416, \"value\": 0.07422352582216263}, {\"wallTime\": 1647712043.3640108, \"step\": 1417, \"value\": 0.07410775125026703}, {\"wallTime\": 1647712043.545981, \"step\": 1421, \"value\": 0.07364421337842941}, {\"wallTime\": 1647712044.0168622, \"step\": 1431, \"value\": 0.07248237729072571}, {\"wallTime\": 1647712044.045838, \"step\": 1432, \"value\": 0.07236596941947937}, {\"wallTime\": 1647712044.2119102, \"step\": 1436, \"value\": 0.07189995795488358}, {\"wallTime\": 1647712044.3085523, \"step\": 1438, \"value\": 0.07166673243045807}, {\"wallTime\": 1647712044.351212, \"step\": 1439, \"value\": 0.07155006378889084}, {\"wallTime\": 1647712044.3932176, \"step\": 1440, \"value\": 0.07143335789442062}, {\"wallTime\": 1647712044.4349215, \"step\": 1441, \"value\": 0.07131661474704742}, {\"wallTime\": 1647712044.5875707, \"step\": 1444, \"value\": 0.07096618413925171}, {\"wallTime\": 1647712044.676852, \"step\": 1446, \"value\": 0.07073239237070084}, {\"wallTime\": 1647712044.7318954, \"step\": 1447, \"value\": 0.07061544805765152}, {\"wallTime\": 1647712044.8285923, \"step\": 1449, \"value\": 0.07038145512342453}, {\"wallTime\": 1647712044.9150515, \"step\": 1451, \"value\": 0.07014734297990799}, {\"wallTime\": 1647712044.953065, \"step\": 1452, \"value\": 0.07003024220466614}, {\"wallTime\": 1647712045.0230892, \"step\": 1454, \"value\": 0.06979594379663467}, {\"wallTime\": 1647712045.068751, \"step\": 1455, \"value\": 0.06967875361442566}, {\"wallTime\": 1647712045.1257784, \"step\": 1456, \"value\": 0.06956153362989426}, {\"wallTime\": 1647712045.1761894, \"step\": 1457, \"value\": 0.06944428384304047}, {\"wallTime\": 1647712045.2202032, \"step\": 1458, \"value\": 0.06932700425386429}, {\"wallTime\": 1647712045.255945, \"step\": 1459, \"value\": 0.06920969486236572}, {\"wallTime\": 1647712045.2928555, \"step\": 1460, \"value\": 0.06909236311912537}, {\"wallTime\": 1647712045.384577, \"step\": 1461, \"value\": 0.06897500157356262}, {\"wallTime\": 1647712045.507042, \"step\": 1463, \"value\": 0.06874020397663116}, {\"wallTime\": 1647712045.8661034, \"step\": 1470, \"value\": 0.06791761517524719}, {\"wallTime\": 1647712046.0100114, \"step\": 1473, \"value\": 0.06756473332643509}, {\"wallTime\": 1647712046.0575926, \"step\": 1474, \"value\": 0.06744706630706787}, {\"wallTime\": 1647712046.16307, \"step\": 1476, \"value\": 0.06721165776252747}, {\"wallTime\": 1647712046.4802334, \"step\": 1483, \"value\": 0.06638713926076889}, {\"wallTime\": 1647712046.6648428, \"step\": 1487, \"value\": 0.06591560691595078}, {\"wallTime\": 1647712046.7689626, \"step\": 1489, \"value\": 0.06567974388599396}, {\"wallTime\": 1647712046.8185618, \"step\": 1490, \"value\": 0.06556178629398346}, {\"wallTime\": 1647712046.9741473, \"step\": 1493, \"value\": 0.06520784646272659}, {\"wallTime\": 1647712047.0234275, \"step\": 1494, \"value\": 0.06508984416723251}, {\"wallTime\": 1647712047.2425017, \"step\": 1498, \"value\": 0.06461770087480545}, {\"wallTime\": 1647712047.2925735, \"step\": 1499, \"value\": 0.0644996389746666}, {\"wallTime\": 1647712047.3429723, \"step\": 1500, \"value\": 0.06438156217336655}, {\"wallTime\": 1647712047.4458344, \"step\": 1502, \"value\": 0.06414539366960526}, {\"wallTime\": 1647712047.7330267, \"step\": 1509, \"value\": 0.06331852823495865}, {\"wallTime\": 1647712047.7855341, \"step\": 1510, \"value\": 0.06320037692785263}, {\"wallTime\": 1647712047.8273025, \"step\": 1511, \"value\": 0.06308222562074661}, {\"wallTime\": 1647712047.9344025, \"step\": 1513, \"value\": 0.06284590065479279}, {\"wallTime\": 1647712048.0493777, \"step\": 1515, \"value\": 0.06260956078767776}, {\"wallTime\": 1647712048.1069584, \"step\": 1516, \"value\": 0.06249138340353966}, {\"wallTime\": 1647712048.519907, \"step\": 1523, \"value\": 0.06166410818696022}, {\"wallTime\": 1647712048.8027072, \"step\": 1528, \"value\": 0.06107319891452789}, {\"wallTime\": 1647712049.0701258, \"step\": 1534, \"value\": 0.060364190489053726}, {\"wallTime\": 1647712049.1925516, \"step\": 1537, \"value\": 0.060009751468896866}, {\"wallTime\": 1647712049.2370312, \"step\": 1538, \"value\": 0.05989161878824234}, {\"wallTime\": 1647712049.3590195, \"step\": 1541, \"value\": 0.05953725799918175}, {\"wallTime\": 1647712049.6892734, \"step\": 1548, \"value\": 0.058710720390081406}, {\"wallTime\": 1647712049.8557923, \"step\": 1551, \"value\": 0.058356646448373795}, {\"wallTime\": 1647712049.9063861, \"step\": 1552, \"value\": 0.05823864787817001}, {\"wallTime\": 1647712049.9504645, \"step\": 1553, \"value\": 0.05812066048383713}, {\"wallTime\": 1647712050.3658202, \"step\": 1562, \"value\": 0.057059429585933685}, {\"wallTime\": 1647712050.5048487, \"step\": 1565, \"value\": 0.056705981492996216}, {\"wallTime\": 1647712050.5522828, \"step\": 1566, \"value\": 0.056588198989629745}, {\"wallTime\": 1647712050.6528075, \"step\": 1568, \"value\": 0.05635269731283188}, {\"wallTime\": 1647712050.74752, \"step\": 1570, \"value\": 0.05611727386713028}, {\"wallTime\": 1647712050.79575, \"step\": 1571, \"value\": 0.05599959194660187}, {\"wallTime\": 1647712050.8432753, \"step\": 1572, \"value\": 0.05588193237781525}, {\"wallTime\": 1647712050.897765, \"step\": 1573, \"value\": 0.05576429143548012}, {\"wallTime\": 1647712051.0409532, \"step\": 1576, \"value\": 0.05541151016950607}, {\"wallTime\": 1647712051.1347501, \"step\": 1578, \"value\": 0.05517643690109253}, {\"wallTime\": 1647712051.2549114, \"step\": 1580, \"value\": 0.054941460490226746}, {\"wallTime\": 1647712051.2969506, \"step\": 1581, \"value\": 0.05482400953769684}, {\"wallTime\": 1647712051.3242517, \"step\": 1582, \"value\": 0.05470658093690872}, {\"wallTime\": 1647712051.4401278, \"step\": 1585, \"value\": 0.0543544627726078}, {\"wallTime\": 1647712051.6476598, \"step\": 1590, \"value\": 0.05376814305782318}, {\"wallTime\": 1647712051.8470826, \"step\": 1595, \"value\": 0.05318255349993706}, {\"wallTime\": 1647712051.8769972, \"step\": 1596, \"value\": 0.053065527230501175}, {\"wallTime\": 1647712051.922709, \"step\": 1597, \"value\": 0.05294853448867798}, {\"wallTime\": 1647712052.1039898, \"step\": 1601, \"value\": 0.05248088762164116}, {\"wallTime\": 1647712052.1492171, \"step\": 1602, \"value\": 0.052364058792591095}, {\"wallTime\": 1647712052.1943822, \"step\": 1603, \"value\": 0.05224726349115372}, {\"wallTime\": 1647712052.5147765, \"step\": 1611, \"value\": 0.051314204931259155}, {\"wallTime\": 1647712052.5969086, \"step\": 1613, \"value\": 0.05108131468296051}, {\"wallTime\": 1647712052.6307704, \"step\": 1614, \"value\": 0.050964925438165665}, {\"wallTime\": 1647712052.7036293, \"step\": 1616, \"value\": 0.05073226988315582}, {\"wallTime\": 1647712053.038002, \"step\": 1622, \"value\": 0.05003528669476509}, {\"wallTime\": 1647712053.1933954, \"step\": 1624, \"value\": 0.049803297966718674}, {\"wallTime\": 1647712053.380433, \"step\": 1626, \"value\": 0.049571484327316284}, {\"wallTime\": 1647712053.5046003, \"step\": 1627, \"value\": 0.04945564270019531}, {\"wallTime\": 1647712053.7166724, \"step\": 1631, \"value\": 0.048992738127708435}, {\"wallTime\": 1647712053.8950386, \"step\": 1635, \"value\": 0.04853057861328125}, {\"wallTime\": 1647712053.93928, \"step\": 1636, \"value\": 0.048415157943964005}, {\"wallTime\": 1647712053.9846542, \"step\": 1637, \"value\": 0.04829978942871094}, {\"wallTime\": 1647712054.129518, \"step\": 1640, \"value\": 0.047953974455595016}, {\"wallTime\": 1647712054.1776414, \"step\": 1641, \"value\": 0.04783880338072777}, {\"wallTime\": 1647712054.4189317, \"step\": 1646, \"value\": 0.04726371914148331}, {\"wallTime\": 1647712054.466528, \"step\": 1647, \"value\": 0.04714886099100113}, {\"wallTime\": 1647712054.5662224, \"step\": 1649, \"value\": 0.04691930487751961}, {\"wallTime\": 1647712054.6643417, \"step\": 1651, \"value\": 0.0466899648308754}, {\"wallTime\": 1647712054.7127326, \"step\": 1652, \"value\": 0.04657537490129471}, {\"wallTime\": 1647712054.7647963, \"step\": 1653, \"value\": 0.046460844576358795}, {\"wallTime\": 1647712054.813794, \"step\": 1654, \"value\": 0.04634637013077736}, {\"wallTime\": 1647712054.900108, \"step\": 1656, \"value\": 0.04611758515238762}, {\"wallTime\": 1647712055.01755, \"step\": 1658, \"value\": 0.04588903486728668}, {\"wallTime\": 1647712055.20056, \"step\": 1662, \"value\": 0.04543262720108032}, {\"wallTime\": 1647712055.2779408, \"step\": 1664, \"value\": 0.04520478472113609}, {\"wallTime\": 1647712055.3659039, \"step\": 1666, \"value\": 0.044977180659770966}, {\"wallTime\": 1647712055.4986043, \"step\": 1669, \"value\": 0.04463623836636543}, {\"wallTime\": 1647712055.5770767, \"step\": 1670, \"value\": 0.044522713869810104}, {\"wallTime\": 1647712055.7530196, \"step\": 1674, \"value\": 0.044069260358810425}, {\"wallTime\": 1647712055.8893158, \"step\": 1677, \"value\": 0.04372984543442726}, {\"wallTime\": 1647712055.984032, \"step\": 1679, \"value\": 0.04350389912724495}, {\"wallTime\": 1647712056.024068, \"step\": 1680, \"value\": 0.04339102655649185}, {\"wallTime\": 1647712056.1391985, \"step\": 1682, \"value\": 0.043165482580661774}, {\"wallTime\": 1647712056.3030355, \"step\": 1685, \"value\": 0.042827680706977844}, {\"wallTime\": 1647712056.359671, \"step\": 1686, \"value\": 0.04271521791815758}, {\"wallTime\": 1647712056.4330347, \"step\": 1687, \"value\": 0.04260282218456268}, {\"wallTime\": 1647712056.4819992, \"step\": 1688, \"value\": 0.04249050095677376}, {\"wallTime\": 1647712056.7330637, \"step\": 1693, \"value\": 0.0419299490749836}, {\"wallTime\": 1647712056.7833061, \"step\": 1694, \"value\": 0.041818056255578995}, {\"wallTime\": 1647712056.8296528, \"step\": 1695, \"value\": 0.041706234216690063}, {\"wallTime\": 1647712056.9313293, \"step\": 1697, \"value\": 0.04148281365633011}, {\"wallTime\": 1647712057.0292583, \"step\": 1699, \"value\": 0.04125969111919403}, {\"wallTime\": 1647712057.078451, \"step\": 1700, \"value\": 0.041148241609334946}, {\"wallTime\": 1647712057.173824, \"step\": 1702, \"value\": 0.04092556983232498}, {\"wallTime\": 1647712057.265815, \"step\": 1704, \"value\": 0.04070320352911949}, {\"wallTime\": 1647712057.407983, \"step\": 1707, \"value\": 0.04037022963166237}, {\"wallTime\": 1647712057.521877, \"step\": 1709, \"value\": 0.04014864191412926}, {\"wallTime\": 1647712057.5658967, \"step\": 1710, \"value\": 0.040037963539361954}, {\"wallTime\": 1647712057.6084611, \"step\": 1711, \"value\": 0.039927367120981216}, {\"wallTime\": 1647712057.6434867, \"step\": 1712, \"value\": 0.03981684893369675}, {\"wallTime\": 1647712057.9122317, \"step\": 1718, \"value\": 0.03915544971823692}, {\"wallTime\": 1647712057.9568758, \"step\": 1719, \"value\": 0.03904550150036812}, {\"wallTime\": 1647712058.134601, \"step\": 1722, \"value\": 0.038716163486242294}, {\"wallTime\": 1647712058.1824265, \"step\": 1723, \"value\": 0.03860655426979065}, {\"wallTime\": 1647712058.2286034, \"step\": 1724, \"value\": 0.03849702700972557}, {\"wallTime\": 1647712058.2741506, \"step\": 1725, \"value\": 0.03838758543133736}, {\"wallTime\": 1647712058.5024855, \"step\": 1730, \"value\": 0.03784167394042015}, {\"wallTime\": 1647712058.804142, \"step\": 1738, \"value\": 0.036972787231206894}, {\"wallTime\": 1647712058.8404214, \"step\": 1739, \"value\": 0.03686457872390747}, {\"wallTime\": 1647712059.006237, \"step\": 1743, \"value\": 0.036432668566703796}, {\"wallTime\": 1647712059.0993977, \"step\": 1745, \"value\": 0.03621726855635643}, {\"wallTime\": 1647712059.2365482, \"step\": 1748, \"value\": 0.03589487075805664}, {\"wallTime\": 1647712059.2843168, \"step\": 1749, \"value\": 0.03578759357333183}, {\"wallTime\": 1647712059.3321335, \"step\": 1750, \"value\": 0.03568040952086449}, {\"wallTime\": 1647712059.3757699, \"step\": 1751, \"value\": 0.0355733223259449}, {\"wallTime\": 1647712059.4761658, \"step\": 1753, \"value\": 0.03535943850874901}, {\"wallTime\": 1647712059.5239773, \"step\": 1754, \"value\": 0.0352526418864727}, {\"wallTime\": 1647712059.6718407, \"step\": 1757, \"value\": 0.034932833164930344}, {\"wallTime\": 1647712059.8888938, \"step\": 1762, \"value\": 0.034401785582304}, {\"wallTime\": 1647712059.9394066, \"step\": 1763, \"value\": 0.03429587557911873}, {\"wallTime\": 1647712060.0199733, \"step\": 1765, \"value\": 0.03408435732126236}, {\"wallTime\": 1647712060.1516056, \"step\": 1768, \"value\": 0.03376784175634384}, {\"wallTime\": 1647712060.4859235, \"step\": 1775, \"value\": 0.03303290903568268}, {\"wallTime\": 1647712060.569909, \"step\": 1776, \"value\": 0.032928336411714554}, {\"wallTime\": 1647712060.6178205, \"step\": 1777, \"value\": 0.032823868095874786}, {\"wallTime\": 1647712060.7670946, \"step\": 1780, \"value\": 0.03251110762357712}, {\"wallTime\": 1647712060.9473267, \"step\": 1784, \"value\": 0.032095588743686676}, {\"wallTime\": 1647712060.9914086, \"step\": 1785, \"value\": 0.03199198096990585}, {\"wallTime\": 1647712061.0356266, \"step\": 1786, \"value\": 0.031888481229543686}, {\"wallTime\": 1647712061.1699288, \"step\": 1789, \"value\": 0.03157864138484001}, {\"wallTime\": 1647712061.217224, \"step\": 1790, \"value\": 0.03147558122873306}, {\"wallTime\": 1647712061.3094168, \"step\": 1792, \"value\": 0.03126979246735573}, {\"wallTime\": 1647712061.400364, \"step\": 1794, \"value\": 0.031064454466104507}, {\"wallTime\": 1647712061.4927437, \"step\": 1796, \"value\": 0.030859563499689102}, {\"wallTime\": 1647712061.6797814, \"step\": 1800, \"value\": 0.03045114316046238}, {\"wallTime\": 1647712061.774275, \"step\": 1802, \"value\": 0.03024762123823166}, {\"wallTime\": 1647712061.8229165, \"step\": 1803, \"value\": 0.030146032571792603}, {\"wallTime\": 1647712062.0713747, \"step\": 1808, \"value\": 0.029639832675457}, {\"wallTime\": 1647712062.1484675, \"step\": 1810, \"value\": 0.02943817339837551}, {\"wallTime\": 1647712062.3344715, \"step\": 1814, \"value\": 0.029036277905106544}, {\"wallTime\": 1647712062.512128, \"step\": 1818, \"value\": 0.028636299073696136}, {\"wallTime\": 1647712062.5600476, \"step\": 1819, \"value\": 0.028536608442664146}, {\"wallTime\": 1647712062.7626772, \"step\": 1823, \"value\": 0.028139060363173485}, {\"wallTime\": 1647712062.9063134, \"step\": 1826, \"value\": 0.027842190116643906}, {\"wallTime\": 1647712062.956005, \"step\": 1827, \"value\": 0.02774348109960556}, {\"wallTime\": 1647712063.052719, \"step\": 1829, \"value\": 0.027546437457203865}, {\"wallTime\": 1647712063.1009362, \"step\": 1830, \"value\": 0.027448104694485664}, {\"wallTime\": 1647712063.2016027, \"step\": 1832, \"value\": 0.02725181356072426}, {\"wallTime\": 1647712063.2479806, \"step\": 1833, \"value\": 0.02715385891497135}, {\"wallTime\": 1647712063.3311863, \"step\": 1834, \"value\": 0.027056029066443443}, {\"wallTime\": 1647712063.423495, \"step\": 1836, \"value\": 0.026860753074288368}, {\"wallTime\": 1647712063.4721954, \"step\": 1837, \"value\": 0.0267633069306612}, {\"wallTime\": 1647712063.5162997, \"step\": 1838, \"value\": 0.026665987446904182}, {\"wallTime\": 1647712063.8377643, \"step\": 1844, \"value\": 0.026084788143634796}, {\"wallTime\": 1647712063.8836107, \"step\": 1845, \"value\": 0.025988375768065453}, {\"wallTime\": 1647712063.9293487, \"step\": 1846, \"value\": 0.025892095640301704}, {\"wallTime\": 1647712063.974479, \"step\": 1847, \"value\": 0.025795945897698402}, {\"wallTime\": 1647712064.02203, \"step\": 1848, \"value\": 0.025699928402900696}, {\"wallTime\": 1647712064.1976414, \"step\": 1851, \"value\": 0.025412671267986298}, {\"wallTime\": 1647712064.3142586, \"step\": 1853, \"value\": 0.02522183023393154}, {\"wallTime\": 1647712064.7483351, \"step\": 1860, \"value\": 0.02455812133848667}, {\"wallTime\": 1647712064.9353282, \"step\": 1864, \"value\": 0.024181848391890526}, {\"wallTime\": 1647712064.9920914, \"step\": 1865, \"value\": 0.024088123813271523}, {\"wallTime\": 1647712065.0493817, \"step\": 1866, \"value\": 0.023994535207748413}, {\"wallTime\": 1647712065.1082718, \"step\": 1867, \"value\": 0.023901086300611496}, {\"wallTime\": 1647712065.3452172, \"step\": 1871, \"value\": 0.023528682067990303}, {\"wallTime\": 1647712065.4028764, \"step\": 1872, \"value\": 0.0234359297901392}, {\"wallTime\": 1647712065.5667078, \"step\": 1874, \"value\": 0.023250846192240715}, {\"wallTime\": 1647712065.6101158, \"step\": 1875, \"value\": 0.023158516734838486}, {\"wallTime\": 1647712070.1781821, \"step\": 1877, \"value\": 0.022974280640482903}, {\"wallTime\": 1647712070.3206108, \"step\": 1880, \"value\": 0.02269899472594261}, {\"wallTime\": 1647712070.4619842, \"step\": 1883, \"value\": 0.02242499403655529}, {\"wallTime\": 1647712070.525493, \"step\": 1884, \"value\": 0.02233394794166088}, {\"wallTime\": 1647712070.61402, \"step\": 1886, \"value\": 0.022152289748191833}, {\"wallTime\": 1647712070.6987715, \"step\": 1888, \"value\": 0.021971212700009346}, {\"wallTime\": 1647712070.7851896, \"step\": 1890, \"value\": 0.021790718659758568}, {\"wallTime\": 1647712070.9871168, \"step\": 1895, \"value\": 0.021342048421502113}, {\"wallTime\": 1647712071.1638448, \"step\": 1899, \"value\": 0.02098577469587326}, {\"wallTime\": 1647712071.3037302, \"step\": 1902, \"value\": 0.020720137283205986}, {\"wallTime\": 1647712071.4933448, \"step\": 1906, \"value\": 0.0203680582344532}, {\"wallTime\": 1647712071.6001124, \"step\": 1908, \"value\": 0.02019292674958706}, {\"wallTime\": 1647712071.6461287, \"step\": 1909, \"value\": 0.02010558918118477}, {\"wallTime\": 1647712071.692015, \"step\": 1910, \"value\": 0.020018404349684715}, {\"wallTime\": 1647712071.8361707, \"step\": 1913, \"value\": 0.019757768139243126}, {\"wallTime\": 1647712072.0565417, \"step\": 1918, \"value\": 0.019326455891132355}, {\"wallTime\": 1647712072.3863847, \"step\": 1924, \"value\": 0.01881401240825653}, {\"wallTime\": 1647712072.438972, \"step\": 1925, \"value\": 0.018729152157902718}, {\"wallTime\": 1647712072.4861565, \"step\": 1926, \"value\": 0.01864445209503174}, {\"wallTime\": 1647712072.6549594, \"step\": 1929, \"value\": 0.01839129813015461}, {\"wallTime\": 1647712072.8437285, \"step\": 1932, \"value\": 0.01813957281410694}, {\"wallTime\": 1647712072.9831474, \"step\": 1935, \"value\": 0.01788928546011448}, {\"wallTime\": 1647712073.0308354, \"step\": 1936, \"value\": 0.017806176096200943}, {\"wallTime\": 1647712073.2158031, \"step\": 1940, \"value\": 0.01747535727918148}, {\"wallTime\": 1647712073.258044, \"step\": 1941, \"value\": 0.01739305630326271}, {\"wallTime\": 1647712073.3001351, \"step\": 1942, \"value\": 0.017310919240117073}, {\"wallTime\": 1647712073.4283643, \"step\": 1945, \"value\": 0.01706548221409321}, {\"wallTime\": 1647712073.5058868, \"step\": 1947, \"value\": 0.016902677714824677}, {\"wallTime\": 1647712073.6422367, \"step\": 1950, \"value\": 0.016659701243042946}, {\"wallTime\": 1647712073.6936274, \"step\": 1951, \"value\": 0.0165790393948555}, {\"wallTime\": 1647712073.7836008, \"step\": 1953, \"value\": 0.0164182111620903}, {\"wallTime\": 1647712073.9152997, \"step\": 1956, \"value\": 0.01617821678519249}, {\"wallTime\": 1647712074.101447, \"step\": 1960, \"value\": 0.015860561281442642}, {\"wallTime\": 1647712074.1454484, \"step\": 1961, \"value\": 0.015781568363308907}, {\"wallTime\": 1647712074.1908994, \"step\": 1962, \"value\": 0.015702741220593452}, {\"wallTime\": 1647712074.2624786, \"step\": 1963, \"value\": 0.015624084509909153}, {\"wallTime\": 1647712074.306694, \"step\": 1964, \"value\": 0.015545596368610859}, {\"wallTime\": 1647712074.3963692, \"step\": 1966, \"value\": 0.015389127656817436}, {\"wallTime\": 1647712074.4406583, \"step\": 1967, \"value\": 0.015311148948967457}, {\"wallTime\": 1647712074.4826624, \"step\": 1968, \"value\": 0.015233338810503483}, {\"wallTime\": 1647712074.5247622, \"step\": 1969, \"value\": 0.015155700035393238}, {\"wallTime\": 1647712074.7894757, \"step\": 1975, \"value\": 0.014693459495902061}, {\"wallTime\": 1647712074.8834612, \"step\": 1977, \"value\": 0.014540755189955235}, {\"wallTime\": 1647712074.97849, \"step\": 1979, \"value\": 0.014388742856681347}, {\"wallTime\": 1647712075.023748, \"step\": 1980, \"value\": 0.014312997460365295}, {\"wallTime\": 1647712075.0722716, \"step\": 1981, \"value\": 0.014237424358725548}, {\"wallTime\": 1647712075.117597, \"step\": 1982, \"value\": 0.014162026345729828}, {\"wallTime\": 1647712075.1628344, \"step\": 1983, \"value\": 0.014086802490055561}, {\"wallTime\": 1647712075.2603784, \"step\": 1985, \"value\": 0.013936878181993961}, {\"wallTime\": 1647712075.3506603, \"step\": 1987, \"value\": 0.013787655159831047}, {\"wallTime\": 1647712075.395538, \"step\": 1988, \"value\": 0.013713306747376919}, {\"wallTime\": 1647712075.566673, \"step\": 1991, \"value\": 0.013491318561136723}, {\"wallTime\": 1647712075.6062107, \"step\": 1992, \"value\": 0.013417676091194153}, {\"wallTime\": 1647712075.728269, \"step\": 1995, \"value\": 0.01319781132042408}, {\"wallTime\": 1647712076.0102282, \"step\": 2002, \"value\": 0.012691029347479343}, {\"wallTime\": 1647712076.6196485, \"step\": 2016, \"value\": 0.011703971773386002}, {\"wallTime\": 1647712076.665482, \"step\": 2017, \"value\": 0.011634835042059422}, {\"wallTime\": 1647712076.8402228, \"step\": 2021, \"value\": 0.011360122822225094}, {\"wallTime\": 1647712076.8824048, \"step\": 2022, \"value\": 0.01129190530627966}, {\"wallTime\": 1647712076.9243808, \"step\": 2023, \"value\": 0.011223873123526573}, {\"wallTime\": 1647712077.008328, \"step\": 2025, \"value\": 0.011088364757597446}, {\"wallTime\": 1647712077.050432, \"step\": 2026, \"value\": 0.011020887643098831}, {\"wallTime\": 1647712077.1642394, \"step\": 2028, \"value\": 0.010886493138968945}, {\"wallTime\": 1647712077.2998567, \"step\": 2031, \"value\": 0.010686298832297325}, {\"wallTime\": 1647712077.3451755, \"step\": 2032, \"value\": 0.010619941167533398}, {\"wallTime\": 1647712077.4352906, \"step\": 2034, \"value\": 0.010487787425518036}, {\"wallTime\": 1647712077.4806857, \"step\": 2035, \"value\": 0.01042199321091175}, {\"wallTime\": 1647712077.5238051, \"step\": 2036, \"value\": 0.010356385260820389}, {\"wallTime\": 1647712077.705816, \"step\": 2040, \"value\": 0.010095842182636261}, {\"wallTime\": 1647712077.7510154, \"step\": 2041, \"value\": 0.010031178593635559}, {\"wallTime\": 1647712077.8460536, \"step\": 2043, \"value\": 0.009902420453727245}, {\"wallTime\": 1647712077.888124, \"step\": 2044, \"value\": 0.009838326834142208}, {\"wallTime\": 1647712078.0145078, \"step\": 2047, \"value\": 0.009647184982895851}, {\"wallTime\": 1647712078.058643, \"step\": 2048, \"value\": 0.00958385318517685}, {\"wallTime\": 1647712078.1007054, \"step\": 2049, \"value\": 0.00952071137726307}, {\"wallTime\": 1647712078.3028786, \"step\": 2054, \"value\": 0.00920788012444973}, {\"wallTime\": 1647712078.342673, \"step\": 2055, \"value\": 0.009145890362560749}, {\"wallTime\": 1647712078.386514, \"step\": 2056, \"value\": 0.009084092453122139}, {\"wallTime\": 1647712078.4247985, \"step\": 2057, \"value\": 0.009022488258779049}, {\"wallTime\": 1647712078.82926, \"step\": 2067, \"value\": 0.008417105302214622}, {\"wallTime\": 1647712078.8689208, \"step\": 2068, \"value\": 0.0083576375618577}, {\"wallTime\": 1647712078.9414227, \"step\": 2070, \"value\": 0.008239289745688438}, {\"wallTime\": 1647712079.1646392, \"step\": 2074, \"value\": 0.008004947565495968}, {\"wallTime\": 1647712079.35091, \"step\": 2078, \"value\": 0.007773755583912134}, {\"wallTime\": 1647712079.3929694, \"step\": 2079, \"value\": 0.007716451305896044}, {\"wallTime\": 1647712079.6188984, \"step\": 2084, \"value\": 0.007432903163135052}, {\"wallTime\": 1647712079.689842, \"step\": 2086, \"value\": 0.007320874836295843}, {\"wallTime\": 1647712079.7345948, \"step\": 2087, \"value\": 0.007265159860253334}, {\"wallTime\": 1647712079.838099, \"step\": 2089, \"value\": 0.007154328748583794}, {\"wallTime\": 1647712079.8944757, \"step\": 2090, \"value\": 0.00709921307861805}, {\"wallTime\": 1647712079.9363484, \"step\": 2091, \"value\": 0.007044297643005848}, {\"wallTime\": 1647712080.1437354, \"step\": 2095, \"value\": 0.006826641503721476}, {\"wallTime\": 1647712080.190586, \"step\": 2096, \"value\": 0.006772729568183422}, {\"wallTime\": 1647712080.2456756, \"step\": 2097, \"value\": 0.006719019263982773}, {\"wallTime\": 1647712080.308727, \"step\": 2098, \"value\": 0.006665511056780815}, {\"wallTime\": 1647712080.4036288, \"step\": 2100, \"value\": 0.006559099070727825}, {\"wallTime\": 1647712080.5262356, \"step\": 2103, \"value\": 0.006400998216122389}, {\"wallTime\": 1647712080.5734348, \"step\": 2104, \"value\": 0.006348703056573868}, {\"wallTime\": 1647712080.6145473, \"step\": 2105, \"value\": 0.006296610925346613}, {\"wallTime\": 1647712080.6649806, \"step\": 2106, \"value\": 0.0062447222881019115}, {\"wallTime\": 1647712080.7905507, \"step\": 2109, \"value\": 0.006090275943279266}, {\"wallTime\": 1647712080.8369548, \"step\": 2110, \"value\": 0.006039201281964779}, {\"wallTime\": 1647712081.0186894, \"step\": 2114, \"value\": 0.005836945492774248}, {\"wallTime\": 1647712081.099716, \"step\": 2115, \"value\": 0.005786892957985401}, {\"wallTime\": 1647712081.283791, \"step\": 2119, \"value\": 0.0055887349881231785}, {\"wallTime\": 1647712081.3295672, \"step\": 2120, \"value\": 0.005539709702134132}, {\"wallTime\": 1647712081.4207191, \"step\": 2122, \"value\": 0.005442276131361723}, {\"wallTime\": 1647712081.4663413, \"step\": 2123, \"value\": 0.005393868777900934}, {\"wallTime\": 1647712081.5176618, \"step\": 2124, \"value\": 0.00534566817805171}, {\"wallTime\": 1647712081.6175115, \"step\": 2126, \"value\": 0.005249886307865381}, {\"wallTime\": 1647712081.6596324, \"step\": 2127, \"value\": 0.005202305503189564}, {\"wallTime\": 1647712081.9737196, \"step\": 2134, \"value\": 0.004875050857663155}, {\"wallTime\": 1647712082.0218184, \"step\": 2135, \"value\": 0.004829132463783026}, {\"wallTime\": 1647712082.0692253, \"step\": 2136, \"value\": 0.0047834222204983234}, {\"wallTime\": 1647712082.2155282, \"step\": 2139, \"value\": 0.004647544119507074}, {\"wallTime\": 1647712082.4139395, \"step\": 2143, \"value\": 0.004469302948564291}, {\"wallTime\": 1647712082.711016, \"step\": 2149, \"value\": 0.004208238795399666}, {\"wallTime\": 1647712082.7563725, \"step\": 2150, \"value\": 0.004165464546531439}, {\"wallTime\": 1647712082.9760666, \"step\": 2154, \"value\": 0.003996479790657759}, {\"wallTime\": 1647712083.0360794, \"step\": 2155, \"value\": 0.003954762127250433}, {\"wallTime\": 1647712083.3006845, \"step\": 2159, \"value\": 0.0037900099996477365}, {\"wallTime\": 1647712083.3771963, \"step\": 2160, \"value\": 0.003749352414160967}, {\"wallTime\": 1647712083.453994, \"step\": 2161, \"value\": 0.0037089071702212095}, {\"wallTime\": 1647712083.523877, \"step\": 2162, \"value\": 0.003668674500659108}, {\"wallTime\": 1647712083.8415136, \"step\": 2169, \"value\": 0.0033930116333067417}, {\"wallTime\": 1647712084.0001705, \"step\": 2173, \"value\": 0.003240189515054226}, {\"wallTime\": 1647712084.088489, \"step\": 2175, \"value\": 0.0031650636810809374}, {\"wallTime\": 1647712084.1325195, \"step\": 2176, \"value\": 0.0031278226524591446}, {\"wallTime\": 1647712084.4399962, \"step\": 2183, \"value\": 0.002873155754059553}, {\"wallTime\": 1647712084.5334835, \"step\": 2185, \"value\": 0.0028023328632116318}, {\"wallTime\": 1647712084.6273725, \"step\": 2187, \"value\": 0.0027323735412210226}, {\"wallTime\": 1647712084.720749, \"step\": 2189, \"value\": 0.002663278952240944}, {\"wallTime\": 1647712084.9583254, \"step\": 2194, \"value\": 0.002494332380592823}, {\"wallTime\": 1647712085.1976912, \"step\": 2199, \"value\": 0.0023308121599256992}, {\"wallTime\": 1647712085.282467, \"step\": 2201, \"value\": 0.0022669266909360886}, {\"wallTime\": 1647712085.3243563, \"step\": 2202, \"value\": 0.0022353108506649733}, {\"wallTime\": 1647712085.364214, \"step\": 2203, \"value\": 0.002203912939876318}, {\"wallTime\": 1647712085.4896998, \"step\": 2206, \"value\": 0.002111028414219618}, {\"wallTime\": 1647712085.6162024, \"step\": 2209, \"value\": 0.002020109910517931}, {\"wallTime\": 1647712085.705525, \"step\": 2211, \"value\": 0.0019605914130806923}, {\"wallTime\": 1647712085.7804282, \"step\": 2212, \"value\": 0.0019311605719849467}, {\"wallTime\": 1647712085.89461, \"step\": 2214, \"value\": 0.0018729564035311341}, {\"wallTime\": 1647712085.9670513, \"step\": 2215, \"value\": 0.0018441833090037107}, {\"wallTime\": 1647712086.0092618, \"step\": 2216, \"value\": 0.0018156295409426093}, {\"wallTime\": 1647712086.2380419, \"step\": 2221, \"value\": 0.0016761563019827008}, {\"wallTime\": 1647712086.2822776, \"step\": 2222, \"value\": 0.0016489214031025767}, {\"wallTime\": 1647712086.3255556, \"step\": 2223, \"value\": 0.0016219065291807055}, {\"wallTime\": 1647712086.4253495, \"step\": 2225, \"value\": 0.0015685379039496183}, {\"wallTime\": 1647712086.4968667, \"step\": 2227, \"value\": 0.0015160510083660483}, {\"wallTime\": 1647712086.7538548, \"step\": 2233, \"value\": 0.0013638886157423258}, {\"wallTime\": 1647712086.9247074, \"step\": 2236, \"value\": 0.0012907922500744462}, {\"wallTime\": 1647712087.0960765, \"step\": 2239, \"value\": 0.0012196890311315656}, {\"wallTime\": 1647712087.2360291, \"step\": 2242, \"value\": 0.0011505814036354423}, {\"wallTime\": 1647712087.320807, \"step\": 2244, \"value\": 0.0011056193616241217}, {\"wallTime\": 1647712087.4554467, \"step\": 2247, \"value\": 0.0010398426093161106}, {\"wallTime\": 1647712087.7623808, \"step\": 2254, \"value\": 0.0008941502892412245}, {\"wallTime\": 1647712087.8882065, \"step\": 2257, \"value\": 0.0008350529824383557}, {\"wallTime\": 1647712087.9308589, \"step\": 2258, \"value\": 0.0008158000418916345}, {\"wallTime\": 1647712088.20205, \"step\": 2264, \"value\": 0.0007049720734357834}, {\"wallTime\": 1647712088.3272853, \"step\": 2266, \"value\": 0.0006698176148347557}, {\"wallTime\": 1647712088.3720424, \"step\": 2267, \"value\": 0.0006525759235955775}, {\"wallTime\": 1647712088.6883366, \"step\": 2274, \"value\": 0.0005381540395319462}, {\"wallTime\": 1647712088.7725954, \"step\": 2276, \"value\": 0.000507479184307158}, {\"wallTime\": 1647712088.9544423, \"step\": 2280, \"value\": 0.0004488218401093036}, {\"wallTime\": 1647712088.9872694, \"step\": 2281, \"value\": 0.00043471873505041003}, {\"wallTime\": 1647712089.1101413, \"step\": 2284, \"value\": 0.0003937572182621807}, {\"wallTime\": 1647712089.150449, \"step\": 2285, \"value\": 0.0003805528103839606}, {\"wallTime\": 1647712089.4152238, \"step\": 2291, \"value\": 0.00030604872154071927}, {\"wallTime\": 1647712089.4587438, \"step\": 2292, \"value\": 0.0002944188890978694}, {\"wallTime\": 1647712089.5039034, \"step\": 2293, \"value\": 0.00028301411657594144}, {\"wallTime\": 1647712089.8202248, \"step\": 2300, \"value\": 0.0002094874216709286}, {\"wallTime\": 1647712090.0409052, \"step\": 2305, \"value\": 0.0001637302484596148}, {\"wallTime\": 1647712090.0812485, \"step\": 2306, \"value\": 0.00015525546041317284}, {\"wallTime\": 1647712090.1191518, \"step\": 2307, \"value\": 0.00014700628526043147}, {\"wallTime\": 1647712090.201174, \"step\": 2309, \"value\": 0.0001311849191552028}, {\"wallTime\": 1647712090.2788644, \"step\": 2311, \"value\": 0.00011626640480244532}, {\"wallTime\": 1647712090.4418566, \"step\": 2315, \"value\": 8.913874626159668e-05}, {\"wallTime\": 1647712090.4824786, \"step\": 2316, \"value\": 8.292143320431933e-05}, {\"wallTime\": 1647712090.6168904, \"step\": 2319, \"value\": 6.562489579664543e-05}, {\"wallTime\": 1647712090.8437126, \"step\": 2324, \"value\": 4.131656896788627e-05}, {\"wallTime\": 1647712091.1517353, \"step\": 2330, \"value\": 1.9605973648140207e-05}, {\"wallTime\": 1647712091.2451105, \"step\": 2332, \"value\": 1.4177927369019017e-05}, {\"wallTime\": 1647712091.3732996, \"step\": 2335, \"value\": 7.731914593023248e-06}, {\"wallTime\": 1647712091.5835557, \"step\": 2340, \"value\": 1.5118660030566389e-06}, {\"wallTime\": 1647712091.7376819, \"step\": 2342, \"value\": 6.071142593100376e-07}, {\"wallTime\": 1647712091.7423615, \"step\": 2343, \"value\": 4.940200142300455e-07}, {\"wallTime\": 1647712091.7730227, \"step\": 2344, \"value\": 6.071142593100376e-07}], \"tb_logs/MultiStepLR014231-AdamW\": [{\"wallTime\": 1647711587.019536, \"step\": 3, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711587.0702558, \"step\": 4, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711587.4892201, \"step\": 10, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711587.7394838, \"step\": 14, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711587.8086238, \"step\": 15, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711588.0314395, \"step\": 18, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711588.0996456, \"step\": 19, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711588.186302, \"step\": 20, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711588.3527236, \"step\": 22, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711588.417769, \"step\": 23, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711588.6017756, \"step\": 26, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711588.648141, \"step\": 27, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711589.058254, \"step\": 33, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711589.175451, \"step\": 36, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711589.289849, \"step\": 38, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711589.3662884, \"step\": 40, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711589.6722512, \"step\": 47, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711589.7079618, \"step\": 48, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711589.7492588, \"step\": 49, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711589.832573, \"step\": 51, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711589.9638946, \"step\": 54, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711590.1526477, \"step\": 57, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711590.281467, \"step\": 60, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711590.3227913, \"step\": 61, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711590.3778331, \"step\": 62, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711590.4193003, \"step\": 63, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711590.5131655, \"step\": 65, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711590.555573, \"step\": 66, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711590.595752, \"step\": 67, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711590.6386592, \"step\": 68, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711590.722864, \"step\": 70, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711590.7648225, \"step\": 71, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711591.0130994, \"step\": 77, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711591.1152306, \"step\": 79, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711591.156331, \"step\": 80, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711591.241678, \"step\": 82, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711591.3657463, \"step\": 85, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711591.543569, \"step\": 89, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711591.57031, \"step\": 90, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711591.9145045, \"step\": 99, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711591.9566758, \"step\": 100, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711592.082104, \"step\": 103, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711592.2079852, \"step\": 106, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711592.2486548, \"step\": 107, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711592.353343, \"step\": 109, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711592.6533968, \"step\": 116, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711592.8760772, \"step\": 121, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711593.0370164, \"step\": 125, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711593.0818799, \"step\": 126, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711593.1655903, \"step\": 128, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711593.2424889, \"step\": 130, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711593.2926395, \"step\": 131, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711593.5176196, \"step\": 136, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711593.5627038, \"step\": 137, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711593.88893, \"step\": 144, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711593.974058, \"step\": 146, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711594.022693, \"step\": 147, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711594.143919, \"step\": 150, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711594.422408, \"step\": 157, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711594.500235, \"step\": 159, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711594.5395727, \"step\": 160, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711594.6232262, \"step\": 162, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711594.7138138, \"step\": 164, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711594.992598, \"step\": 170, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711595.0360365, \"step\": 171, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711595.0814557, \"step\": 172, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711595.215353, \"step\": 175, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711595.2595613, \"step\": 176, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711595.3237276, \"step\": 177, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711595.3731246, \"step\": 178, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711595.5023944, \"step\": 180, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711595.559249, \"step\": 181, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711595.6930163, \"step\": 184, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711595.74131, \"step\": 185, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711595.7896686, \"step\": 186, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711595.9833462, \"step\": 190, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711596.0351772, \"step\": 191, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711596.0910451, \"step\": 192, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711596.2545996, \"step\": 195, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711596.4873793, \"step\": 199, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711596.546221, \"step\": 200, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711596.6514926, \"step\": 202, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711596.6935875, \"step\": 203, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711596.7356017, \"step\": 204, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711596.7841277, \"step\": 205, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711596.8631938, \"step\": 207, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711596.9482086, \"step\": 209, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711597.034525, \"step\": 211, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711597.1210663, \"step\": 213, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711597.2109537, \"step\": 215, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711597.2802935, \"step\": 216, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711597.413631, \"step\": 219, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711597.4583807, \"step\": 220, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711597.503255, \"step\": 221, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711597.5479167, \"step\": 222, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711597.637468, \"step\": 224, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711597.8523943, \"step\": 229, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711600.4940412, \"step\": 237, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711600.5369055, \"step\": 238, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711600.581873, \"step\": 239, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711600.6677213, \"step\": 241, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711600.7087514, \"step\": 242, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711600.8007133, \"step\": 244, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711600.8467379, \"step\": 245, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711600.893031, \"step\": 246, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711600.9386542, \"step\": 247, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711601.1735892, \"step\": 252, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711601.2200434, \"step\": 253, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711601.266443, \"step\": 254, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711601.448169, \"step\": 258, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711601.492449, \"step\": 259, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711601.5599406, \"step\": 260, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711601.6483192, \"step\": 262, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711601.9953606, \"step\": 270, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711602.037779, \"step\": 271, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711602.1711688, \"step\": 274, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711602.259581, \"step\": 276, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711602.348979, \"step\": 278, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711602.4341848, \"step\": 280, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711602.525053, \"step\": 282, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711602.5645196, \"step\": 283, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711602.6553464, \"step\": 285, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711602.7396898, \"step\": 287, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711602.781775, \"step\": 288, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711602.8644693, \"step\": 290, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711603.0788026, \"step\": 295, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711603.122761, \"step\": 296, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711603.166997, \"step\": 297, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711608.3055017, \"step\": 298, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711608.592347, \"step\": 306, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711608.6765547, \"step\": 308, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711608.7442157, \"step\": 309, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711608.8622656, \"step\": 312, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711609.0308762, \"step\": 316, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711609.1134064, \"step\": 318, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711609.1567762, \"step\": 319, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711609.2873745, \"step\": 322, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711609.3703985, \"step\": 324, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711609.550455, \"step\": 329, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711609.6356862, \"step\": 331, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711609.6793392, \"step\": 332, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711609.886423, \"step\": 337, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711609.92022, \"step\": 338, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711609.995283, \"step\": 340, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711610.1275775, \"step\": 343, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711610.217575, \"step\": 345, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711610.269148, \"step\": 346, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711610.446221, \"step\": 350, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711610.5350535, \"step\": 352, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711610.5818698, \"step\": 353, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711610.6227124, \"step\": 354, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711610.8044515, \"step\": 358, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711610.9960346, \"step\": 362, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711611.0365906, \"step\": 363, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711611.0748956, \"step\": 364, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711611.1172414, \"step\": 365, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711611.156986, \"step\": 366, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711611.1941733, \"step\": 367, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711611.4981987, \"step\": 374, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711611.6308746, \"step\": 377, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711611.675706, \"step\": 378, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711612.040949, \"step\": 386, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711612.2126832, \"step\": 390, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711612.2552464, \"step\": 391, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711612.2960186, \"step\": 392, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711612.333223, \"step\": 393, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711612.3721335, \"step\": 394, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711612.502014, \"step\": 397, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711612.727972, \"step\": 402, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711612.8157325, \"step\": 404, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711612.9929202, \"step\": 408, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711613.0370343, \"step\": 409, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711613.2142665, \"step\": 413, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711613.259568, \"step\": 414, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711613.2978969, \"step\": 415, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711613.4294667, \"step\": 418, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711613.5723772, \"step\": 421, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711613.604258, \"step\": 422, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711613.7475154, \"step\": 425, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711613.7920103, \"step\": 426, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711613.9672992, \"step\": 430, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711614.0110009, \"step\": 431, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711614.18914, \"step\": 435, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711614.2387283, \"step\": 436, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711614.2785692, \"step\": 437, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711614.370308, \"step\": 439, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711614.4127815, \"step\": 440, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711614.456037, \"step\": 441, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711614.5388958, \"step\": 443, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711614.583527, \"step\": 444, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711614.6260607, \"step\": 445, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711614.6705956, \"step\": 446, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711614.8360727, \"step\": 450, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711614.8809612, \"step\": 451, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711614.9253166, \"step\": 452, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711614.9733398, \"step\": 453, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711615.0126185, \"step\": 454, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711615.0987468, \"step\": 456, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711615.1875477, \"step\": 458, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711615.2764068, \"step\": 460, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711615.3207147, \"step\": 461, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711615.4980593, \"step\": 465, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711615.5904133, \"step\": 466, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711615.7424173, \"step\": 468, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711620.394397, \"step\": 470, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711620.5747545, \"step\": 474, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711620.6193929, \"step\": 475, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711620.7547698, \"step\": 478, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711620.7928119, \"step\": 479, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711620.8341107, \"step\": 480, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711620.8767056, \"step\": 481, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711620.9688728, \"step\": 483, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711621.0151737, \"step\": 484, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711621.1518114, \"step\": 487, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711621.1965358, \"step\": 488, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711621.241227, \"step\": 489, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711621.3321922, \"step\": 491, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711621.4689114, \"step\": 494, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711621.6484306, \"step\": 498, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711621.8147776, \"step\": 502, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711621.8587976, \"step\": 503, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711621.9903846, \"step\": 506, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711622.12567, \"step\": 509, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711622.1800506, \"step\": 510, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711622.2256603, \"step\": 511, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711622.2710316, \"step\": 512, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711622.314505, \"step\": 513, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711622.3577828, \"step\": 514, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711622.4956882, \"step\": 517, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711622.5410826, \"step\": 518, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711622.5868123, \"step\": 519, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711622.6325362, \"step\": 520, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711622.7775521, \"step\": 523, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711623.1639106, \"step\": 530, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711623.3119245, \"step\": 533, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711623.3582573, \"step\": 534, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711623.4707685, \"step\": 536, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711623.516396, \"step\": 537, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711623.5700328, \"step\": 538, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711623.615335, \"step\": 539, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711623.661073, \"step\": 540, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711623.75223, \"step\": 542, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711623.8463066, \"step\": 544, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711623.9394639, \"step\": 546, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711623.965111, \"step\": 547, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711624.0971951, \"step\": 550, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711624.1797764, \"step\": 552, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711624.30195, \"step\": 555, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711624.3671393, \"step\": 556, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711624.6213768, \"step\": 562, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711624.6660354, \"step\": 563, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711624.7115095, \"step\": 564, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711624.8864377, \"step\": 568, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711625.0442708, \"step\": 571, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711625.155642, \"step\": 573, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711625.3239524, \"step\": 576, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711625.611874, \"step\": 580, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711625.8043067, \"step\": 584, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647711625.845373, \"step\": 585, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711625.9106917, \"step\": 586, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711625.9975288, \"step\": 588, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711626.0852923, \"step\": 590, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711626.1299791, \"step\": 591, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711626.1776326, \"step\": 592, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711626.2618237, \"step\": 594, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711626.3507354, \"step\": 596, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711626.3980718, \"step\": 597, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711626.4402778, \"step\": 598, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711626.4853053, \"step\": 599, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711626.5723438, \"step\": 601, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711626.6165793, \"step\": 602, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711626.6673589, \"step\": 603, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711626.7537537, \"step\": 605, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711626.8761308, \"step\": 608, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711626.972041, \"step\": 610, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711627.1026976, \"step\": 613, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711627.149984, \"step\": 614, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711627.2552693, \"step\": 616, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711627.3440027, \"step\": 618, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711627.45424, \"step\": 620, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711627.542877, \"step\": 622, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711627.5872934, \"step\": 623, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711627.7226634, \"step\": 626, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711627.8010058, \"step\": 628, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711627.8431034, \"step\": 629, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711628.0027587, \"step\": 633, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711628.1701195, \"step\": 637, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711628.3027434, \"step\": 640, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711628.346827, \"step\": 641, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711628.390947, \"step\": 642, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711628.4352133, \"step\": 643, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711628.4794722, \"step\": 644, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711628.7295547, \"step\": 649, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711628.8218758, \"step\": 651, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711628.8686266, \"step\": 652, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711628.9110403, \"step\": 653, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711628.955774, \"step\": 654, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711628.9987795, \"step\": 655, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711629.1240416, \"step\": 658, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711629.208844, \"step\": 660, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711629.5290296, \"step\": 667, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711629.660875, \"step\": 670, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711629.8817456, \"step\": 675, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711629.9257286, \"step\": 676, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711629.9704, \"step\": 677, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711630.1027508, \"step\": 680, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711630.193623, \"step\": 682, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711630.2478151, \"step\": 683, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711630.2975602, \"step\": 684, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711630.4159, \"step\": 687, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711630.623468, \"step\": 692, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711630.7189355, \"step\": 694, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711630.8068233, \"step\": 696, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711630.8509393, \"step\": 697, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711630.9395375, \"step\": 699, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711631.0694795, \"step\": 702, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711631.1137614, \"step\": 703, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711631.2053678, \"step\": 705, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711631.399903, \"step\": 709, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711631.4423678, \"step\": 710, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711631.5247025, \"step\": 712, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711631.6467454, \"step\": 715, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711631.7320716, \"step\": 717, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711631.942394, \"step\": 720, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711632.0111132, \"step\": 721, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711632.153255, \"step\": 723, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711632.2434647, \"step\": 725, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711632.2884297, \"step\": 726, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711632.3782015, \"step\": 728, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711632.4227273, \"step\": 729, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711632.5108135, \"step\": 731, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711632.5559015, \"step\": 732, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711632.604625, \"step\": 733, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711632.8148766, \"step\": 738, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711632.9819398, \"step\": 742, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711633.022762, \"step\": 743, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711633.0632775, \"step\": 744, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711633.566139, \"step\": 755, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711633.6098866, \"step\": 756, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711633.7503858, \"step\": 758, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711634.089326, \"step\": 763, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711634.1472101, \"step\": 764, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711634.1953247, \"step\": 765, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711634.386869, \"step\": 768, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711634.4572434, \"step\": 769, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711634.6660342, \"step\": 772, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711634.8513787, \"step\": 775, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711634.9027488, \"step\": 776, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711635.0092752, \"step\": 778, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711635.0623538, \"step\": 779, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711635.1176999, \"step\": 780, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711635.1840444, \"step\": 781, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711635.2391071, \"step\": 782, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711635.579114, \"step\": 788, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711635.7399483, \"step\": 791, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711635.849592, \"step\": 793, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711635.9892585, \"step\": 795, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711636.2229125, \"step\": 799, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711636.5050519, \"step\": 804, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711636.543024, \"step\": 805, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711636.5916088, \"step\": 806, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711636.6550794, \"step\": 807, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711636.7940373, \"step\": 810, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711637.2404056, \"step\": 818, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711637.2927918, \"step\": 819, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711637.3893714, \"step\": 821, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711637.4989626, \"step\": 823, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711637.6740136, \"step\": 826, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711637.737224, \"step\": 827, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711637.798333, \"step\": 828, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711638.0112543, \"step\": 832, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711638.0561807, \"step\": 833, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711638.1745617, \"step\": 835, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711638.242591, \"step\": 836, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711638.295607, \"step\": 837, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711638.394048, \"step\": 839, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711638.4457033, \"step\": 840, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711638.631037, \"step\": 843, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711638.7255123, \"step\": 845, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711639.0182235, \"step\": 850, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711639.0630474, \"step\": 851, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711639.2047002, \"step\": 854, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711640.0757482, \"step\": 857, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711640.3228824, \"step\": 860, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711640.4395056, \"step\": 862, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711640.593929, \"step\": 865, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711640.6595383, \"step\": 866, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711640.955979, \"step\": 870, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711641.032723, \"step\": 871, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711642.4619925, \"step\": 884, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711642.5188358, \"step\": 885, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711642.5921633, \"step\": 886, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711642.7110395, \"step\": 888, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711642.814865, \"step\": 890, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711642.8995214, \"step\": 892, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711643.043579, \"step\": 895, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711643.1562498, \"step\": 897, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711643.2208045, \"step\": 898, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711643.369744, \"step\": 901, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711643.4175742, \"step\": 902, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711643.5180652, \"step\": 904, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711643.6621182, \"step\": 907, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711643.7058249, \"step\": 908, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711643.8042583, \"step\": 910, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711643.8489738, \"step\": 911, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711644.0416546, \"step\": 914, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711644.2404742, \"step\": 918, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711644.2856646, \"step\": 919, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711644.3869236, \"step\": 921, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711644.5395947, \"step\": 923, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711644.8004463, \"step\": 927, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711644.8542802, \"step\": 928, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711644.9853148, \"step\": 930, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711645.046585, \"step\": 931, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711645.0926766, \"step\": 932, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711645.1562402, \"step\": 933, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711645.3213177, \"step\": 935, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711649.874703, \"step\": 939, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711649.9827964, \"step\": 941, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711650.027332, \"step\": 942, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711650.1599517, \"step\": 945, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711650.3408291, \"step\": 949, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711650.4765759, \"step\": 952, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711650.6101584, \"step\": 955, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711650.6543646, \"step\": 956, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711650.823009, \"step\": 960, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711650.9161215, \"step\": 962, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711650.960681, \"step\": 963, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711651.047392, \"step\": 965, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711651.1304767, \"step\": 967, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711651.1772263, \"step\": 968, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711651.3066504, \"step\": 971, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711651.5226905, \"step\": 976, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711651.6144168, \"step\": 978, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711651.656945, \"step\": 979, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711651.7559028, \"step\": 981, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711651.7974052, \"step\": 982, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711652.0646074, \"step\": 986, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711652.2806897, \"step\": 990, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711652.3632371, \"step\": 992, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711652.4505544, \"step\": 994, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711652.5323908, \"step\": 996, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711652.620939, \"step\": 998, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711652.66661, \"step\": 999, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711652.8081243, \"step\": 1002, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711652.8533762, \"step\": 1003, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711652.8986633, \"step\": 1004, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711652.9907565, \"step\": 1006, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711653.219915, \"step\": 1011, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711653.3151155, \"step\": 1013, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711653.4062524, \"step\": 1015, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711653.4499662, \"step\": 1016, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711653.4882033, \"step\": 1017, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711653.7033541, \"step\": 1022, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711653.873644, \"step\": 1026, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711653.9850633, \"step\": 1028, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711654.0405977, \"step\": 1029, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711654.4052942, \"step\": 1035, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711654.4624581, \"step\": 1036, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711654.5186725, \"step\": 1037, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711654.5782256, \"step\": 1038, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711654.622472, \"step\": 1039, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711654.7921603, \"step\": 1043, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711654.8749206, \"step\": 1045, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711654.914995, \"step\": 1046, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711655.1739273, \"step\": 1052, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711655.2185516, \"step\": 1053, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711655.3526065, \"step\": 1056, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711655.4480722, \"step\": 1058, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711655.4916856, \"step\": 1059, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711655.535126, \"step\": 1060, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711655.6156921, \"step\": 1062, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711655.762679, \"step\": 1065, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711655.8509977, \"step\": 1067, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711655.9355388, \"step\": 1069, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711655.9759562, \"step\": 1070, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711656.0166535, \"step\": 1071, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711656.0528848, \"step\": 1072, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711656.0933404, \"step\": 1073, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711656.137956, \"step\": 1074, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711656.257286, \"step\": 1077, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711656.2990515, \"step\": 1078, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711656.3862388, \"step\": 1080, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711656.4299695, \"step\": 1081, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711656.473641, \"step\": 1082, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711656.6108122, \"step\": 1085, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711656.6560133, \"step\": 1086, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711656.699766, \"step\": 1087, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711656.8819516, \"step\": 1091, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711657.1926928, \"step\": 1098, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711657.3426409, \"step\": 1100, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711657.4520266, \"step\": 1102, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711657.4924612, \"step\": 1103, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711657.534838, \"step\": 1104, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711657.6677046, \"step\": 1107, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711657.756019, \"step\": 1109, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711657.8445537, \"step\": 1111, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711657.8888948, \"step\": 1112, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711657.9776158, \"step\": 1114, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711658.2030487, \"step\": 1119, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711658.297683, \"step\": 1121, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711658.3380966, \"step\": 1122, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711658.4582245, \"step\": 1125, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711658.4964936, \"step\": 1126, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711658.587545, \"step\": 1128, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711658.6279025, \"step\": 1129, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711658.6652822, \"step\": 1130, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711658.704394, \"step\": 1131, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711658.7455554, \"step\": 1132, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711658.8339198, \"step\": 1134, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711658.8788702, \"step\": 1135, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711658.9247792, \"step\": 1136, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711659.0478067, \"step\": 1139, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711659.200948, \"step\": 1142, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711659.3268485, \"step\": 1145, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711659.3646986, \"step\": 1146, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711659.4444058, \"step\": 1148, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711659.5306902, \"step\": 1150, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711659.5710957, \"step\": 1151, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711659.612237, \"step\": 1152, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711659.6508203, \"step\": 1153, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711659.9250846, \"step\": 1160, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711660.0066447, \"step\": 1162, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711660.0994003, \"step\": 1164, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711660.189303, \"step\": 1166, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711660.234159, \"step\": 1167, \"value\": 0.00027150262030772865}, {\"wallTime\": 1647711660.506668, \"step\": 1173, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711660.551459, \"step\": 1174, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711660.6416137, \"step\": 1176, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711660.685834, \"step\": 1177, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711660.7370036, \"step\": 1178, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711660.8961072, \"step\": 1182, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711660.9788966, \"step\": 1184, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711661.0843687, \"step\": 1186, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711661.1596878, \"step\": 1188, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711661.2017581, \"step\": 1189, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711661.2462778, \"step\": 1190, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711661.372767, \"step\": 1193, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711661.4204407, \"step\": 1194, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711661.4606934, \"step\": 1195, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711661.5496519, \"step\": 1197, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711661.594108, \"step\": 1198, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711661.7270734, \"step\": 1201, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711661.9068618, \"step\": 1205, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711661.9547367, \"step\": 1206, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711662.0056608, \"step\": 1207, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711662.0865598, \"step\": 1209, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711662.2425098, \"step\": 1213, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711662.2825954, \"step\": 1214, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711662.324088, \"step\": 1215, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711662.4457672, \"step\": 1218, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711662.6582296, \"step\": 1223, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711662.7424092, \"step\": 1225, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711662.9173694, \"step\": 1229, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711663.0487313, \"step\": 1232, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711663.1168892, \"step\": 1233, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711666.0770202, \"step\": 1238, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711666.2231119, \"step\": 1240, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711666.2988646, \"step\": 1241, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711666.3639858, \"step\": 1242, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711666.4076636, \"step\": 1243, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711666.452013, \"step\": 1244, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711666.5401065, \"step\": 1246, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711666.6745636, \"step\": 1249, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711666.7189095, \"step\": 1250, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711666.7637088, \"step\": 1251, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711666.811615, \"step\": 1252, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711666.899665, \"step\": 1254, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711666.9910004, \"step\": 1256, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711667.0350726, \"step\": 1257, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711667.1656737, \"step\": 1260, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711667.2040958, \"step\": 1261, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711667.4692438, \"step\": 1267, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711667.6552873, \"step\": 1271, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711667.9281974, \"step\": 1276, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711667.9720929, \"step\": 1277, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711668.0150383, \"step\": 1278, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711668.1970732, \"step\": 1282, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711668.3342395, \"step\": 1285, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711668.5567842, \"step\": 1290, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711668.68269, \"step\": 1293, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711668.9040084, \"step\": 1298, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711668.947512, \"step\": 1299, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711669.0821805, \"step\": 1302, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711669.259095, \"step\": 1306, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711669.4690905, \"step\": 1310, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711670.0254025, \"step\": 1315, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711670.267138, \"step\": 1320, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711670.356769, \"step\": 1322, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711670.4946525, \"step\": 1325, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711670.5392663, \"step\": 1326, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711670.6213832, \"step\": 1328, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711671.3995106, \"step\": 1335, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711671.9479418, \"step\": 1344, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711671.996729, \"step\": 1345, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711672.1024024, \"step\": 1347, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711672.155353, \"step\": 1348, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711672.3260813, \"step\": 1351, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711672.3675344, \"step\": 1352, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711672.7100608, \"step\": 1354, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711672.9063847, \"step\": 1358, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711673.000713, \"step\": 1360, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711674.3281107, \"step\": 1364, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711674.3708487, \"step\": 1365, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711674.418908, \"step\": 1366, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711674.466333, \"step\": 1367, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711674.5160031, \"step\": 1368, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711674.7231581, \"step\": 1372, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711674.7759023, \"step\": 1373, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711674.8730807, \"step\": 1375, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711674.9233365, \"step\": 1376, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711675.1391773, \"step\": 1380, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711675.4010131, \"step\": 1385, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711675.4560733, \"step\": 1386, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711675.667455, \"step\": 1390, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711675.8457391, \"step\": 1393, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711676.0439212, \"step\": 1397, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711676.3963501, \"step\": 1403, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711680.7474637, \"step\": 1416, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711680.768336, \"step\": 1417, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711680.854064, \"step\": 1421, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.0621164, \"step\": 1431, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.082453, \"step\": 1432, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.159013, \"step\": 1436, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.1976237, \"step\": 1438, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.2178955, \"step\": 1439, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.2382343, \"step\": 1440, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.2563846, \"step\": 1441, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.31003, \"step\": 1444, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.3495963, \"step\": 1446, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.3658679, \"step\": 1447, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.404555, \"step\": 1449, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.442785, \"step\": 1451, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.461376, \"step\": 1452, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.4994042, \"step\": 1454, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.5179791, \"step\": 1455, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.5372617, \"step\": 1456, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.556252, \"step\": 1457, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.5751457, \"step\": 1458, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.593708, \"step\": 1459, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.6129413, \"step\": 1460, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.6347394, \"step\": 1461, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711681.6688876, \"step\": 1463, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711682.2491944, \"step\": 1470, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711682.3130453, \"step\": 1473, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711682.3388681, \"step\": 1474, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711682.37574, \"step\": 1476, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711682.5197809, \"step\": 1483, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711682.6056998, \"step\": 1487, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711682.6467452, \"step\": 1489, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711682.6697593, \"step\": 1490, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711682.7322896, \"step\": 1493, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711682.7561865, \"step\": 1494, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711682.8373306, \"step\": 1498, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711682.8598645, \"step\": 1499, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711682.880348, \"step\": 1500, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711683.1656723, \"step\": 1502, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711683.30941, \"step\": 1509, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711683.330129, \"step\": 1510, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711683.350607, \"step\": 1511, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711683.3925653, \"step\": 1513, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711683.4329057, \"step\": 1515, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711683.4558609, \"step\": 1516, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711683.6059546, \"step\": 1523, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711683.7088509, \"step\": 1528, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711683.8617249, \"step\": 1534, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711683.917926, \"step\": 1537, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711683.9359426, \"step\": 1538, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711684.0019348, \"step\": 1541, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711684.1455514, \"step\": 1548, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711684.2087224, \"step\": 1551, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711684.2443473, \"step\": 1552, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711684.2651658, \"step\": 1553, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711684.766422, \"step\": 1562, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711684.8295884, \"step\": 1565, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711684.8497758, \"step\": 1566, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711684.8908806, \"step\": 1568, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711684.937913, \"step\": 1570, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711684.955809, \"step\": 1571, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711684.9774528, \"step\": 1572, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711684.9984868, \"step\": 1573, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711685.0651171, \"step\": 1576, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711685.106748, \"step\": 1578, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711685.172674, \"step\": 1580, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711685.21335, \"step\": 1581, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711685.251033, \"step\": 1582, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711685.347838, \"step\": 1585, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711685.7107291, \"step\": 1590, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711685.7959728, \"step\": 1595, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711685.8142047, \"step\": 1596, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711685.8381753, \"step\": 1597, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711685.9117172, \"step\": 1601, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711685.9598637, \"step\": 1602, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711685.981263, \"step\": 1603, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711686.2092512, \"step\": 1611, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711686.25085, \"step\": 1613, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711686.2734342, \"step\": 1614, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711686.3169856, \"step\": 1616, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711686.4467926, \"step\": 1622, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711686.4923127, \"step\": 1624, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711686.5357044, \"step\": 1626, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711686.553671, \"step\": 1627, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711686.63757, \"step\": 1631, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711686.7216692, \"step\": 1635, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711686.7431278, \"step\": 1636, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711686.766785, \"step\": 1637, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711686.8267994, \"step\": 1640, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711687.0759463, \"step\": 1641, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711687.482493, \"step\": 1646, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711687.5597224, \"step\": 1647, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711687.7309997, \"step\": 1649, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711687.9268098, \"step\": 1651, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711688.0198379, \"step\": 1652, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711688.0987666, \"step\": 1653, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711688.1775434, \"step\": 1654, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711688.4195313, \"step\": 1656, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711688.6006756, \"step\": 1658, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711688.9548676, \"step\": 1662, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711689.1068995, \"step\": 1664, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711689.2378588, \"step\": 1666, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711689.4944525, \"step\": 1669, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711689.5793998, \"step\": 1670, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711689.9637077, \"step\": 1674, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711690.249695, \"step\": 1677, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711690.4291496, \"step\": 1679, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711690.522723, \"step\": 1680, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711690.7148514, \"step\": 1682, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711691.0100656, \"step\": 1685, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711691.1001642, \"step\": 1686, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711691.241362, \"step\": 1687, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711691.3289309, \"step\": 1688, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711691.77147, \"step\": 1693, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711691.8679793, \"step\": 1694, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711691.973712, \"step\": 1695, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711692.1896145, \"step\": 1697, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711692.373414, \"step\": 1699, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711692.4733572, \"step\": 1700, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711692.5939987, \"step\": 1702, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711692.7524562, \"step\": 1704, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711692.9850998, \"step\": 1707, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711693.1267796, \"step\": 1709, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711693.2569366, \"step\": 1710, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711693.332778, \"step\": 1711, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711693.4251738, \"step\": 1712, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711693.8855548, \"step\": 1718, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711693.9771543, \"step\": 1719, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711694.2026381, \"step\": 1722, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711694.2639282, \"step\": 1723, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711694.337875, \"step\": 1724, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711694.399305, \"step\": 1725, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711694.784147, \"step\": 1730, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711695.4582574, \"step\": 1738, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711695.5417137, \"step\": 1739, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711695.869018, \"step\": 1743, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711696.0521924, \"step\": 1745, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711696.3982217, \"step\": 1748, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711696.4570625, \"step\": 1749, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711696.5580075, \"step\": 1750, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711696.6935756, \"step\": 1751, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711696.8771093, \"step\": 1753, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711696.9556892, \"step\": 1754, \"value\": 0.00014816522889304906}, {\"wallTime\": 1647711697.2503362, \"step\": 1757, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711697.648333, \"step\": 1762, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711697.732246, \"step\": 1763, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711697.9013426, \"step\": 1765, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711698.122602, \"step\": 1768, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711698.6282754, \"step\": 1775, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711698.71571, \"step\": 1776, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711698.816063, \"step\": 1777, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711698.9952745, \"step\": 1780, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711699.4918323, \"step\": 1784, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711699.5278556, \"step\": 1785, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711699.6274867, \"step\": 1786, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711699.8398368, \"step\": 1789, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711699.958408, \"step\": 1790, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711700.0978746, \"step\": 1792, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711700.216724, \"step\": 1794, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711700.3959565, \"step\": 1796, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711700.8292341, \"step\": 1800, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711701.0434368, \"step\": 1802, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711701.1034658, \"step\": 1803, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711701.4438622, \"step\": 1808, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711701.5637445, \"step\": 1810, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711701.836537, \"step\": 1814, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711702.119565, \"step\": 1818, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711702.2118294, \"step\": 1819, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711702.6356566, \"step\": 1823, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711702.9010682, \"step\": 1826, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711702.96401, \"step\": 1827, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711703.150015, \"step\": 1829, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711703.2179341, \"step\": 1830, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711703.3920188, \"step\": 1832, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711703.4825826, \"step\": 1833, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711703.5566583, \"step\": 1834, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711703.713777, \"step\": 1836, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711703.8191507, \"step\": 1837, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711703.9035807, \"step\": 1838, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711704.430057, \"step\": 1844, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711704.512596, \"step\": 1845, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711704.5831206, \"step\": 1846, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711704.6581912, \"step\": 1847, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711704.7100096, \"step\": 1848, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711704.8804562, \"step\": 1851, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711704.9947174, \"step\": 1853, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711705.423387, \"step\": 1860, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711705.6559439, \"step\": 1864, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711705.7234428, \"step\": 1865, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711705.782099, \"step\": 1866, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711705.84156, \"step\": 1867, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711706.0848176, \"step\": 1871, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711706.1574335, \"step\": 1872, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711706.2961366, \"step\": 1874, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711706.350838, \"step\": 1875, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711712.4250293, \"step\": 1877, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711712.6681645, \"step\": 1880, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711712.8800168, \"step\": 1883, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711712.9616525, \"step\": 1884, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711713.1078932, \"step\": 1886, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711713.243139, \"step\": 1888, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711713.3762484, \"step\": 1890, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711713.7504253, \"step\": 1895, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711714.0194118, \"step\": 1899, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711714.2181756, \"step\": 1902, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711714.500365, \"step\": 1906, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711714.6311312, \"step\": 1908, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711714.700026, \"step\": 1909, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711714.7820544, \"step\": 1910, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711715.0172622, \"step\": 1913, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711715.481629, \"step\": 1918, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711715.8996894, \"step\": 1924, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711715.962759, \"step\": 1925, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711716.02745, \"step\": 1926, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711716.2260776, \"step\": 1929, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711716.4122767, \"step\": 1932, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711716.6009, \"step\": 1935, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711716.6529934, \"step\": 1936, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711716.9391932, \"step\": 1940, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711717.1019797, \"step\": 1941, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711717.1313958, \"step\": 1942, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711717.3333607, \"step\": 1945, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711717.5502913, \"step\": 1947, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711717.7743435, \"step\": 1950, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711717.8195858, \"step\": 1951, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711717.9126818, \"step\": 1953, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711718.1350954, \"step\": 1956, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711718.3663993, \"step\": 1960, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711718.4162626, \"step\": 1961, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711718.4689848, \"step\": 1962, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711718.5218902, \"step\": 1963, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711718.5726252, \"step\": 1964, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711718.6889195, \"step\": 1966, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711718.7435515, \"step\": 1967, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711718.8048902, \"step\": 1968, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711718.8619058, \"step\": 1969, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711719.438623, \"step\": 1975, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711719.6116655, \"step\": 1977, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711719.710774, \"step\": 1979, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711719.8397214, \"step\": 1980, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711719.90234, \"step\": 1981, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711719.976639, \"step\": 1982, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711720.0692563, \"step\": 1983, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711720.2317312, \"step\": 1985, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711720.35081, \"step\": 1987, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711720.4132233, \"step\": 1988, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711720.6048222, \"step\": 1991, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711720.6808026, \"step\": 1992, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711720.8754647, \"step\": 1995, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711721.321366, \"step\": 2002, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711722.3891115, \"step\": 2016, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711722.4813855, \"step\": 2017, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711722.849283, \"step\": 2021, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711722.9154427, \"step\": 2022, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711722.9817398, \"step\": 2023, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711723.1106806, \"step\": 2025, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711723.1700284, \"step\": 2026, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711723.310511, \"step\": 2028, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711723.4848273, \"step\": 2031, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711723.5430791, \"step\": 2032, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711723.691292, \"step\": 2034, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711723.751991, \"step\": 2035, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711723.8205786, \"step\": 2036, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711724.1014657, \"step\": 2040, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711724.1640732, \"step\": 2041, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711724.2876256, \"step\": 2043, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711724.3524191, \"step\": 2044, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711724.7000608, \"step\": 2047, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711724.7406526, \"step\": 2048, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711724.8359485, \"step\": 2049, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711725.148556, \"step\": 2054, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711725.2171736, \"step\": 2055, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711725.289507, \"step\": 2056, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711725.3458066, \"step\": 2057, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711726.0283477, \"step\": 2067, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711726.143911, \"step\": 2068, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711726.3440456, \"step\": 2070, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711726.618037, \"step\": 2074, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711726.8517644, \"step\": 2078, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711726.9363942, \"step\": 2079, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711727.3158782, \"step\": 2084, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711727.4386234, \"step\": 2086, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711727.5036767, \"step\": 2087, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711727.652572, \"step\": 2089, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711727.7416966, \"step\": 2090, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711727.828186, \"step\": 2091, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711728.0855145, \"step\": 2095, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711728.1506875, \"step\": 2096, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711728.2170808, \"step\": 2097, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711728.3052578, \"step\": 2098, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711728.4389555, \"step\": 2100, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711728.6330814, \"step\": 2103, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711728.687951, \"step\": 2104, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711728.7505565, \"step\": 2105, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711728.8194582, \"step\": 2106, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711729.0583503, \"step\": 2109, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711729.1296866, \"step\": 2110, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711729.38841, \"step\": 2114, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711729.604728, \"step\": 2115, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711729.801366, \"step\": 2119, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711729.859169, \"step\": 2120, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711729.9950807, \"step\": 2122, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711730.0676005, \"step\": 2123, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711730.1436357, \"step\": 2124, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711730.37363, \"step\": 2126, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711730.4431975, \"step\": 2127, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711730.9551876, \"step\": 2134, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711731.0232003, \"step\": 2135, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711731.0935888, \"step\": 2136, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711731.3224974, \"step\": 2139, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711731.6605926, \"step\": 2143, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711732.0433977, \"step\": 2149, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711732.0952873, \"step\": 2150, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711732.3965795, \"step\": 2154, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711732.485719, \"step\": 2155, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711732.7600462, \"step\": 2159, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711732.8310032, \"step\": 2160, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711732.9045875, \"step\": 2161, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711732.9618385, \"step\": 2162, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711733.404987, \"step\": 2169, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711733.658453, \"step\": 2173, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711733.781473, \"step\": 2175, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711733.8404126, \"step\": 2176, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711734.2987, \"step\": 2183, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711735.0403948, \"step\": 2185, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711735.0790198, \"step\": 2187, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711735.203261, \"step\": 2189, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711735.5930126, \"step\": 2194, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711735.9421017, \"step\": 2199, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711736.0756803, \"step\": 2201, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711736.1422224, \"step\": 2202, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711736.2109466, \"step\": 2203, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711736.4037607, \"step\": 2206, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711736.608644, \"step\": 2209, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711736.8517718, \"step\": 2211, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711736.8705626, \"step\": 2212, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711737.0175807, \"step\": 2214, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711737.1061535, \"step\": 2215, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711737.162006, \"step\": 2216, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711737.492079, \"step\": 2221, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711737.5639262, \"step\": 2222, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711737.6347907, \"step\": 2223, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711737.780823, \"step\": 2225, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711737.9217722, \"step\": 2227, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711738.362638, \"step\": 2233, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711738.612621, \"step\": 2236, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711738.9134336, \"step\": 2239, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711739.2315922, \"step\": 2242, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711739.3752246, \"step\": 2244, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711739.5968366, \"step\": 2247, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711740.0284681, \"step\": 2254, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711740.2154174, \"step\": 2257, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711740.285406, \"step\": 2258, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711740.8336802, \"step\": 2264, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711740.9534142, \"step\": 2266, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711741.0237732, \"step\": 2267, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711741.5622637, \"step\": 2274, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711741.7060213, \"step\": 2276, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711741.9686, \"step\": 2280, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711742.0346043, \"step\": 2281, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711742.242465, \"step\": 2284, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711742.3058703, \"step\": 2285, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711742.6580327, \"step\": 2291, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711742.7198923, \"step\": 2292, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711742.7873044, \"step\": 2293, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711743.2510943, \"step\": 2300, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711743.5901883, \"step\": 2305, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711743.662159, \"step\": 2306, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711743.7298117, \"step\": 2307, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711743.8575864, \"step\": 2309, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711743.9818456, \"step\": 2311, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711744.1878085, \"step\": 2315, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711744.2470322, \"step\": 2316, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711744.4277294, \"step\": 2319, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711744.802373, \"step\": 2324, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711745.198308, \"step\": 2330, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711745.3172963, \"step\": 2332, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711745.4984746, \"step\": 2335, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711745.7833223, \"step\": 2340, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711745.9453144, \"step\": 2342, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711745.9734278, \"step\": 2343, \"value\": 8.085717854555696e-05}, {\"wallTime\": 1647711746.0174644, \"step\": 2344, \"value\": 8.085717854555696e-05}], \"tb_logs/OneCycleLR015549-RAdam\": [{\"wallTime\": 1647712416.3905313, \"step\": 3, \"value\": 2.8560871214722283e-05}, {\"wallTime\": 1647712416.4308264, \"step\": 4, \"value\": 2.859165397239849e-05}, {\"wallTime\": 1647712416.7910542, \"step\": 10, \"value\": 2.8919948817929253e-05}, {\"wallTime\": 1647712417.0440738, \"step\": 14, \"value\": 2.9275481210788712e-05}, {\"wallTime\": 1647712417.097603, \"step\": 15, \"value\": 2.938143370556645e-05}, {\"wallTime\": 1647712417.263059, \"step\": 18, \"value\": 2.9740222089458257e-05}, {\"wallTime\": 1647712417.3094747, \"step\": 19, \"value\": 2.9873455787310377e-05}, {\"wallTime\": 1647712417.3492014, \"step\": 20, \"value\": 3.0013501600478776e-05}, {\"wallTime\": 1647712417.4555418, \"step\": 22, \"value\": 3.03140241157962e-05}, {\"wallTime\": 1647712417.5053263, \"step\": 23, \"value\": 3.0474493541987613e-05}, {\"wallTime\": 1647712417.6523857, \"step\": 26, \"value\": 3.0996703571872786e-05}, {\"wallTime\": 1647712417.6948545, \"step\": 27, \"value\": 3.118435779470019e-05}, {\"wallTime\": 1647712417.9787102, \"step\": 33, \"value\": 3.245269545004703e-05}, {\"wallTime\": 1647712418.1034083, \"step\": 36, \"value\": 3.3178213925566524e-05}, {\"wallTime\": 1647712418.2009482, \"step\": 38, \"value\": 3.3695636375341564e-05}, {\"wallTime\": 1647712418.29243, \"step\": 40, \"value\": 3.424000897211954e-05}, {\"wallTime\": 1647712418.6515875, \"step\": 47, \"value\": 3.6356890632305294e-05}, {\"wallTime\": 1647712418.696603, \"step\": 48, \"value\": 3.668609133455902e-05}, {\"wallTime\": 1647712418.7367027, \"step\": 49, \"value\": 3.7021967727923766e-05}, {\"wallTime\": 1647712418.837084, \"step\": 51, \"value\": 3.771372576011345e-05}, {\"wallTime\": 1647712419.0083582, \"step\": 54, \"value\": 3.880127042066306e-05}, {\"wallTime\": 1647712419.2028687, \"step\": 57, \"value\": 3.994852886535227e-05}, {\"wallTime\": 1647712419.3515263, \"step\": 60, \"value\": 4.11553010053467e-05}, {\"wallTime\": 1647712419.3804646, \"step\": 61, \"value\": 4.157074727118015e-05}, {\"wallTime\": 1647712419.4074996, \"step\": 62, \"value\": 4.199277100269683e-05}, {\"wallTime\": 1647712419.446966, \"step\": 63, \"value\": 4.242136492393911e-05}, {\"wallTime\": 1647712419.5415144, \"step\": 65, \"value\": 4.329823423177004e-05}, {\"wallTime\": 1647712419.5854013, \"step\": 66, \"value\": 4.374649142846465e-05}, {\"wallTime\": 1647712419.6287005, \"step\": 67, \"value\": 4.420128607307561e-05}, {\"wallTime\": 1647712419.6734877, \"step\": 68, \"value\": 4.4662607251666486e-05}, {\"wallTime\": 1647712419.7714624, \"step\": 70, \"value\": 4.560479283099994e-05}, {\"wallTime\": 1647712419.8143702, \"step\": 71, \"value\": 4.608564267982729e-05}, {\"wallTime\": 1647712420.0897183, \"step\": 77, \"value\": 4.910665666102432e-05}, {\"wallTime\": 1647712420.1559024, \"step\": 79, \"value\": 5.01652029925026e-05}, {\"wallTime\": 1647712420.1858954, \"step\": 80, \"value\": 5.0704096793197095e-05}, {\"wallTime\": 1647712420.24285, \"step\": 82, \"value\": 5.180105654289946e-05}, {\"wallTime\": 1647712420.3690913, \"step\": 85, \"value\": 5.349428829504177e-05}, {\"wallTime\": 1647712420.5278196, \"step\": 89, \"value\": 5.584065002040006e-05}, {\"wallTime\": 1647712420.567961, \"step\": 90, \"value\": 5.644300836138427e-05}, {\"wallTime\": 1647712421.031238, \"step\": 99, \"value\": 6.214543827809393e-05}, {\"wallTime\": 1647712421.1199434, \"step\": 100, \"value\": 6.28100533504039e-05}, {\"wallTime\": 1647712421.2518768, \"step\": 103, \"value\": 6.484078767243773e-05}, {\"wallTime\": 1647712421.392871, \"step\": 106, \"value\": 6.692654278595e-05}, {\"wallTime\": 1647712421.4393096, \"step\": 107, \"value\": 6.763396231690422e-05}, {\"wallTime\": 1647712421.5364766, \"step\": 109, \"value\": 6.906695489306003e-05}, {\"wallTime\": 1647712421.8491318, \"step\": 116, \"value\": 7.427161472151056e-05}, {\"wallTime\": 1647712422.0693488, \"step\": 121, \"value\": 7.816729339538142e-05}, {\"wallTime\": 1647712422.242438, \"step\": 125, \"value\": 8.138919656630605e-05}, {\"wallTime\": 1647712422.2849567, \"step\": 126, \"value\": 8.220917516155168e-05}, {\"wallTime\": 1647712422.36868, \"step\": 128, \"value\": 8.386640547541901e-05}, {\"wallTime\": 1647712422.4577808, \"step\": 130, \"value\": 8.554657688364387e-05}, {\"wallTime\": 1647712422.5038846, \"step\": 131, \"value\": 8.639521547593176e-05}, {\"wallTime\": 1647712422.7407253, \"step\": 136, \"value\": 9.072334069060162e-05}, {\"wallTime\": 1647712422.785952, \"step\": 137, \"value\": 9.16058270377107e-05}, {\"wallTime\": 1647712423.1607218, \"step\": 144, \"value\": 9.793844219530001e-05}, {\"wallTime\": 1647712423.2629068, \"step\": 146, \"value\": 9.979710739571601e-05}, {\"wallTime\": 1647712423.2948656, \"step\": 147, \"value\": 0.00010073457087855786}, {\"wallTime\": 1647712423.4515817, \"step\": 150, \"value\": 0.00010357926657889038}, {\"wallTime\": 1647712423.8022861, \"step\": 157, \"value\": 0.00011040288518415764}, {\"wallTime\": 1647712423.903486, \"step\": 159, \"value\": 0.00011239961168030277}, {\"wallTime\": 1647712423.9557722, \"step\": 160, \"value\": 0.00011340573109919205}, {\"wallTime\": 1647712424.0658495, \"step\": 162, \"value\": 0.00011543338041519746}, {\"wallTime\": 1647712424.17382, \"step\": 164, \"value\": 0.00011748143879231066}, {\"wallTime\": 1647712424.5138674, \"step\": 170, \"value\": 0.00012374643119983375}, {\"wallTime\": 1647712424.5647502, \"step\": 171, \"value\": 0.0001248079934157431}, {\"wallTime\": 1647712424.6135373, \"step\": 172, \"value\": 0.00012587447417899966}, {\"wallTime\": 1647712424.763772, \"step\": 175, \"value\": 0.00012910319492220879}, {\"wallTime\": 1647712424.8100786, \"step\": 176, \"value\": 0.00013018913159612566}, {\"wallTime\": 1647712424.8553052, \"step\": 177, \"value\": 0.00013127985585015267}, {\"wallTime\": 1647712424.9413507, \"step\": 178, \"value\": 0.00013237538223620504}, {\"wallTime\": 1647712425.0390859, \"step\": 180, \"value\": 0.00013458069588523358}, {\"wallTime\": 1647712425.083137, \"step\": 181, \"value\": 0.00013569043949246407}, {\"wallTime\": 1647712425.2291868, \"step\": 184, \"value\": 0.0001390477700624615}, {\"wallTime\": 1647712425.2794607, \"step\": 185, \"value\": 0.00014017616922501475}, {\"wallTime\": 1647712425.3263774, \"step\": 186, \"value\": 0.0001413091813446954}, {\"wallTime\": 1647712425.5173602, \"step\": 190, \"value\": 0.0001458868500776589}, {\"wallTime\": 1647712425.5624979, \"step\": 191, \"value\": 0.00014704254863318056}, {\"wallTime\": 1647712425.6079078, \"step\": 192, \"value\": 0.00014820272917859256}, {\"wallTime\": 1647712425.7459564, \"step\": 195, \"value\": 0.0001517098571639508}, {\"wallTime\": 1647712425.9193332, \"step\": 199, \"value\": 0.00015644718951079994}, {\"wallTime\": 1647712425.9619615, \"step\": 200, \"value\": 0.0001576422801008448}, {\"wallTime\": 1647712426.043466, \"step\": 202, \"value\": 0.00016004523786250502}, {\"wallTime\": 1647712426.085988, \"step\": 203, \"value\": 0.00016125303227454424}, {\"wallTime\": 1647712426.1290464, \"step\": 204, \"value\": 0.00016246501763816923}, {\"wallTime\": 1647712426.1751585, \"step\": 205, \"value\": 0.00016368117940146476}, {\"wallTime\": 1647712426.2674348, \"step\": 207, \"value\": 0.00016612587205599993}, {\"wallTime\": 1647712426.3582757, \"step\": 209, \"value\": 0.00016858690651133657}, {\"wallTime\": 1647712426.453422, \"step\": 211, \"value\": 0.0001710641081444919}, {\"wallTime\": 1647712426.5478828, \"step\": 213, \"value\": 0.00017355727322865278}, {\"wallTime\": 1647712426.6322842, \"step\": 215, \"value\": 0.00017606619803700596}, {\"wallTime\": 1647712426.6781065, \"step\": 216, \"value\": 0.00017732651031110436}, {\"wallTime\": 1647712426.812698, \"step\": 219, \"value\": 0.00018113054102286696}, {\"wallTime\": 1647712426.8577733, \"step\": 220, \"value\": 0.00018240614735987037}, {\"wallTime\": 1647712426.9007096, \"step\": 221, \"value\": 0.00018368553719483316}, {\"wallTime\": 1647712426.983947, \"step\": 222, \"value\": 0.0001849686523200944}, {\"wallTime\": 1647712427.0751257, \"step\": 224, \"value\": 0.00018754600023385137}, {\"wallTime\": 1647712427.297377, \"step\": 229, \"value\": 0.00019405297643970698}, {\"wallTime\": 1647712427.6209047, \"step\": 237, \"value\": 0.0002046463341685012}, {\"wallTime\": 1647712427.6610322, \"step\": 238, \"value\": 0.00020598572154995054}, {\"wallTime\": 1647712427.707547, \"step\": 239, \"value\": 0.00020732838311232626}, {\"wallTime\": 1647712427.7955215, \"step\": 241, \"value\": 0.0002100234996760264}, {\"wallTime\": 1647712427.8359692, \"step\": 242, \"value\": 0.0002113758964696899}, {\"wallTime\": 1647712427.9205763, \"step\": 244, \"value\": 0.00021409019245766103}, {\"wallTime\": 1647712427.9682217, \"step\": 245, \"value\": 0.00021545204799622297}, {\"wallTime\": 1647712428.0084746, \"step\": 246, \"value\": 0.00021681701764464378}, {\"wallTime\": 1647712428.0523272, \"step\": 247, \"value\": 0.00021818504319526255}, {\"wallTime\": 1647712428.2773407, \"step\": 252, \"value\": 0.00022507039830088615}, {\"wallTime\": 1647712428.3217757, \"step\": 253, \"value\": 0.00022645630815532058}, {\"wallTime\": 1647712428.3520598, \"step\": 254, \"value\": 0.00022784509928897023}, {\"wallTime\": 1647712428.5212219, \"step\": 258, \"value\": 0.0002334285236429423}, {\"wallTime\": 1647712428.560945, \"step\": 259, \"value\": 0.00023483131371904165}, {\"wallTime\": 1647712428.6053817, \"step\": 260, \"value\": 0.00023623681045137346}, {\"wallTime\": 1647712428.6871595, \"step\": 262, \"value\": 0.00023905585112515837}, {\"wallTime\": 1647712429.0442836, \"step\": 270, \"value\": 0.00025043493951670825}, {\"wallTime\": 1647712429.0895352, \"step\": 271, \"value\": 0.0002518684195820242}, {\"wallTime\": 1647712429.1919146, \"step\": 274, \"value\": 0.00025618303334340453}, {\"wallTime\": 1647712429.3106525, \"step\": 276, \"value\": 0.0002590709482319653}, {\"wallTime\": 1647712429.3930197, \"step\": 278, \"value\": 0.00026196776889264584}, {\"wallTime\": 1647712429.47356, \"step\": 280, \"value\": 0.0002648732624948025}, {\"wallTime\": 1647712429.5796032, \"step\": 282, \"value\": 0.0002677872544154525}, {\"wallTime\": 1647712429.6267428, \"step\": 283, \"value\": 0.0002692473353818059}, {\"wallTime\": 1647712429.7298563, \"step\": 285, \"value\": 0.0002721735218074173}, {\"wallTime\": 1647712429.8291001, \"step\": 287, \"value\": 0.0002751076244749129}, {\"wallTime\": 1647712429.888155, \"step\": 288, \"value\": 0.0002765775425359607}, {\"wallTime\": 1647712429.996563, \"step\": 290, \"value\": 0.0002795229956973344}, {\"wallTime\": 1647712430.2300122, \"step\": 295, \"value\": 0.0002869179588742554}, {\"wallTime\": 1647712430.2722905, \"step\": 296, \"value\": 0.00028840210870839655}, {\"wallTime\": 1647712430.3190942, \"step\": 297, \"value\": 0.00028988788835704327}, {\"wallTime\": 1647712430.363469, \"step\": 298, \"value\": 0.0002913752687163651}, {\"wallTime\": 1647712430.777002, \"step\": 306, \"value\": 0.00030332893948070705}, {\"wallTime\": 1647712430.9024107, \"step\": 308, \"value\": 0.00030633137794211507}, {\"wallTime\": 1647712430.9446437, \"step\": 309, \"value\": 0.0003078345616813749}, {\"wallTime\": 1647712431.0796921, \"step\": 312, \"value\": 0.00031235147616826}, {\"wallTime\": 1647712431.2596014, \"step\": 316, \"value\": 0.00031839022994972765}, {\"wallTime\": 1647712431.3496885, \"step\": 318, \"value\": 0.0003214159805793315}, {\"wallTime\": 1647712431.421721, \"step\": 319, \"value\": 0.00032293034018948674}, {\"wallTime\": 1647712431.5555959, \"step\": 322, \"value\": 0.0003274790069554001}, {\"wallTime\": 1647712431.6427639, \"step\": 324, \"value\": 0.000330515846144408}, {\"wallTime\": 1647712431.9000092, \"step\": 329, \"value\": 0.00033812137553468347}, {\"wallTime\": 1647712431.994894, \"step\": 331, \"value\": 0.0003411683428566903}, {\"wallTime\": 1647712432.0397205, \"step\": 332, \"value\": 0.0003426927432883531}, {\"wallTime\": 1647712432.2629657, \"step\": 337, \"value\": 0.0003503223997540772}, {\"wallTime\": 1647712432.308191, \"step\": 338, \"value\": 0.0003518496814649552}, {\"wallTime\": 1647712432.399041, \"step\": 340, \"value\": 0.00035490532172843814}, {\"wallTime\": 1647712432.536995, \"step\": 343, \"value\": 0.0003594910667743534}, {\"wallTime\": 1647712432.6238647, \"step\": 345, \"value\": 0.00036254938459023833}, {\"wallTime\": 1647712432.668442, \"step\": 346, \"value\": 0.0003640787908807397}, {\"wallTime\": 1647712432.8491952, \"step\": 350, \"value\": 0.0003701974346768111}, {\"wallTime\": 1647712432.9514425, \"step\": 352, \"value\": 0.0003732569166459143}, {\"wallTime\": 1647712432.9976933, \"step\": 353, \"value\": 0.00037478661397472024}, {\"wallTime\": 1647712433.0420923, \"step\": 354, \"value\": 0.00037631619488820434}, {\"wallTime\": 1647712433.2252033, \"step\": 358, \"value\": 0.00038243315066210926}, {\"wallTime\": 1647712433.416227, \"step\": 362, \"value\": 0.00038854629383422434}, {\"wallTime\": 1647712433.4595103, \"step\": 363, \"value\": 0.0003900737501680851}, {\"wallTime\": 1647712433.5098257, \"step\": 364, \"value\": 0.0003916008281521499}, {\"wallTime\": 1647712433.5496132, \"step\": 365, \"value\": 0.0003931274695787579}, {\"wallTime\": 1647712433.5947292, \"step\": 366, \"value\": 0.000394653674447909}, {\"wallTime\": 1647712433.6456854, \"step\": 367, \"value\": 0.00039617938455194235}, {\"wallTime\": 1647712433.9774206, \"step\": 374, \"value\": 0.0004068434063810855}, {\"wallTime\": 1647712434.144849, \"step\": 377, \"value\": 0.000411403423640877}, {\"wallTime\": 1647712434.1911945, \"step\": 378, \"value\": 0.0004129218286834657}, {\"wallTime\": 1647712434.5634768, \"step\": 386, \"value\": 0.0004250361234880984}, {\"wallTime\": 1647712434.7425823, \"step\": 390, \"value\": 0.00043106809607706964}, {\"wallTime\": 1647712434.7924542, \"step\": 391, \"value\": 0.00043257311335764825}, {\"wallTime\": 1647712434.8349967, \"step\": 392, \"value\": 0.00043407693738117814}, {\"wallTime\": 1647712434.877339, \"step\": 393, \"value\": 0.0004355794517323375}, {\"wallTime\": 1647712434.9304047, \"step\": 394, \"value\": 0.0004370806855149567}, {\"wallTime\": 1647712435.0877824, \"step\": 397, \"value\": 0.00044157629599794745}, {\"wallTime\": 1647712435.319663, \"step\": 402, \"value\": 0.00044904017704539}, {\"wallTime\": 1647712435.4232638, \"step\": 404, \"value\": 0.0004520149377640337}, {\"wallTime\": 1647712435.644799, \"step\": 408, \"value\": 0.00045794472680427134}, {\"wallTime\": 1647712435.7280405, \"step\": 409, \"value\": 0.0004594228812493384}, {\"wallTime\": 1647712435.9121058, \"step\": 413, \"value\": 0.0004653173964470625}, {\"wallTime\": 1647712435.9571319, \"step\": 414, \"value\": 0.00046678638318553567}, {\"wallTime\": 1647712436.0068536, \"step\": 415, \"value\": 0.00046825341996736825}, {\"wallTime\": 1647712436.135581, \"step\": 418, \"value\": 0.00047264271415770054}, {\"wallTime\": 1647712436.2861712, \"step\": 421, \"value\": 0.00047701364383101463}, {\"wallTime\": 1647712436.3329103, \"step\": 422, \"value\": 0.00047846639063209295}, {\"wallTime\": 1647712436.4735615, \"step\": 425, \"value\": 0.00048281162162311375}, {\"wallTime\": 1647712436.5185902, \"step\": 426, \"value\": 0.00048425557906739414}, {\"wallTime\": 1647712436.699806, \"step\": 430, \"value\": 0.0004900083877146244}, {\"wallTime\": 1647712436.7446327, \"step\": 431, \"value\": 0.0004914406454190612}, {\"wallTime\": 1647712436.9401433, \"step\": 435, \"value\": 0.0004971454036422074}, {\"wallTime\": 1647712436.9876099, \"step\": 436, \"value\": 0.0004985653213225305}, {\"wallTime\": 1647712437.0711162, \"step\": 437, \"value\": 0.0004999826778657734}, {\"wallTime\": 1647712437.1755612, \"step\": 439, \"value\": 0.0005028096493333578}, {\"wallTime\": 1647712437.2202234, \"step\": 440, \"value\": 0.0005042191478423774}, {\"wallTime\": 1647712437.2651403, \"step\": 441, \"value\": 0.0005056260270066559}, {\"wallTime\": 1647712437.352734, \"step\": 443, \"value\": 0.0005084315780550241}, {\"wallTime\": 1647712437.3953059, \"step\": 444, \"value\": 0.0005098302499391139}, {\"wallTime\": 1647712437.4380884, \"step\": 445, \"value\": 0.0005112261278554797}, {\"wallTime\": 1647712437.484582, \"step\": 446, \"value\": 0.0005126191535964608}, {\"wallTime\": 1647712437.6816838, \"step\": 450, \"value\": 0.0005181627348065376}, {\"wallTime\": 1647712437.7409267, \"step\": 451, \"value\": 0.0005195413250476122}, {\"wallTime\": 1647712437.7980127, \"step\": 452, \"value\": 0.0005209169466979802}, {\"wallTime\": 1647712437.845867, \"step\": 453, \"value\": 0.0005222895415499806}, {\"wallTime\": 1647712437.8896134, \"step\": 454, \"value\": 0.0005236591096036136}, {\"wallTime\": 1647712438.0056386, \"step\": 456, \"value\": 0.0005263889906927943}, {\"wallTime\": 1647712438.1007407, \"step\": 458, \"value\": 0.0005291064735502005}, {\"wallTime\": 1647712438.1955714, \"step\": 460, \"value\": 0.0005318112089298666}, {\"wallTime\": 1647712438.2360926, \"step\": 461, \"value\": 0.0005331587744876742}, {\"wallTime\": 1647712438.4212866, \"step\": 465, \"value\": 0.0005385162658058107}, {\"wallTime\": 1647712438.561502, \"step\": 466, \"value\": 0.000539847300387919}, {\"wallTime\": 1647712438.7049794, \"step\": 468, \"value\": 0.0005424991832114756}, {\"wallTime\": 1647712443.3827069, \"step\": 470, \"value\": 0.0005451373290270567}, {\"wallTime\": 1647712443.6114035, \"step\": 474, \"value\": 0.0005503714783117175}, {\"wallTime\": 1647712443.6580079, \"step\": 475, \"value\": 0.0005516711389645934}, {\"wallTime\": 1647712443.7841356, \"step\": 478, \"value\": 0.0005555481184273958}, {\"wallTime\": 1647712443.8304858, \"step\": 479, \"value\": 0.0005568331107497215}, {\"wallTime\": 1647712443.8770494, \"step\": 480, \"value\": 0.0005581143777817488}, {\"wallTime\": 1647712443.9217453, \"step\": 481, \"value\": 0.0005593918613158166}, {\"wallTime\": 1647712444.012722, \"step\": 483, \"value\": 0.0005619355360977352}, {\"wallTime\": 1647712444.0589545, \"step\": 484, \"value\": 0.000563201610930264}, {\"wallTime\": 1647712444.1969044, \"step\": 487, \"value\": 0.0005669767269864678}, {\"wallTime\": 1647712444.2426107, \"step\": 488, \"value\": 0.0005682272603735328}, {\"wallTime\": 1647712444.288258, \"step\": 489, \"value\": 0.0005694738356396556}, {\"wallTime\": 1647712444.3823743, \"step\": 491, \"value\": 0.000571955053601414}, {\"wallTime\": 1647712444.5193307, \"step\": 494, \"value\": 0.0005756465834565461}, {\"wallTime\": 1647712444.7035687, \"step\": 498, \"value\": 0.0005805111140944064}, {\"wallTime\": 1647712444.8832812, \"step\": 502, \"value\": 0.0005853085312992334}, {\"wallTime\": 1647712444.9236453, \"step\": 503, \"value\": 0.0005864971899427474}, {\"wallTime\": 1647712445.057184, \"step\": 506, \"value\": 0.0005900371470488608}, {\"wallTime\": 1647712445.1934812, \"step\": 509, \"value\": 0.0005935376393608749}, {\"wallTime\": 1647712445.235591, \"step\": 510, \"value\": 0.0005946956225670874}, {\"wallTime\": 1647712445.2787988, \"step\": 511, \"value\": 0.0005958490655757487}, {\"wallTime\": 1647712445.3245437, \"step\": 512, \"value\": 0.0005969980265945196}, {\"wallTime\": 1647712445.3709264, \"step\": 513, \"value\": 0.0005981424474157393}, {\"wallTime\": 1647712445.4222786, \"step\": 514, \"value\": 0.0005992823280394077}, {\"wallTime\": 1647712445.5600233, \"step\": 517, \"value\": 0.000602674437686801}, {\"wallTime\": 1647712445.605567, \"step\": 518, \"value\": 0.0006037958664819598}, {\"wallTime\": 1647712445.6517594, \"step\": 519, \"value\": 0.0006049126968719065}, {\"wallTime\": 1647712445.7028024, \"step\": 520, \"value\": 0.0006060247542336583}, {\"wallTime\": 1647712445.8396654, \"step\": 523, \"value\": 0.0006093326956033707}, {\"wallTime\": 1647712446.2104423, \"step\": 530, \"value\": 0.000616883160546422}, {\"wallTime\": 1647712446.3996859, \"step\": 533, \"value\": 0.0006200455827638507}, {\"wallTime\": 1647712446.4381795, \"step\": 534, \"value\": 0.0006210897699929774}, {\"wallTime\": 1647712446.5360959, \"step\": 536, \"value\": 0.0006231631268747151}, {\"wallTime\": 1647712446.584381, \"step\": 537, \"value\": 0.0006241922383196652}, {\"wallTime\": 1647712446.6346765, \"step\": 538, \"value\": 0.0006252162274904549}, {\"wallTime\": 1647712446.6796682, \"step\": 539, \"value\": 0.0006262352108024061}, {\"wallTime\": 1647712446.7258425, \"step\": 540, \"value\": 0.0006272490136325359}, {\"wallTime\": 1647712446.8242137, \"step\": 542, \"value\": 0.0006292612524703145}, {\"wallTime\": 1647712446.9244432, \"step\": 544, \"value\": 0.0006312527693808079}, {\"wallTime\": 1647712447.0181098, \"step\": 546, \"value\": 0.0006332235061563551}, {\"wallTime\": 1647712447.058271, \"step\": 547, \"value\": 0.0006342009291984141}, {\"wallTime\": 1647712447.1993434, \"step\": 550, \"value\": 0.0006371016497723758}, {\"wallTime\": 1647712447.2970445, \"step\": 552, \"value\": 0.0006390088819898665}, {\"wallTime\": 1647712447.4277859, \"step\": 555, \"value\": 0.0006418293341994286}, {\"wallTime\": 1647712447.4698381, \"step\": 556, \"value\": 0.000642758677713573}, {\"wallTime\": 1647712447.6889822, \"step\": 562, \"value\": 0.0006482197204604745}, {\"wallTime\": 1647712447.7327328, \"step\": 563, \"value\": 0.0006491105887107551}, {\"wallTime\": 1647712447.7748742, \"step\": 564, \"value\": 0.000649995869025588}, {\"wallTime\": 1647712447.9504228, \"step\": 568, \"value\": 0.0006534809363074601}, {\"wallTime\": 1647712448.0849693, \"step\": 571, \"value\": 0.0006560353795066476}, {\"wallTime\": 1647712448.1807523, \"step\": 573, \"value\": 0.0006577097810804844}, {\"wallTime\": 1647712448.3074672, \"step\": 576, \"value\": 0.0006601783679798245}, {\"wallTime\": 1647712448.491001, \"step\": 580, \"value\": 0.0006633886368945241}, {\"wallTime\": 1647712448.6629786, \"step\": 584, \"value\": 0.000666505191475153}, {\"wallTime\": 1647712448.708328, \"step\": 585, \"value\": 0.0006672695744782686}, {\"wallTime\": 1647712448.759208, \"step\": 586, \"value\": 0.0006680280202999711}, {\"wallTime\": 1647712448.9175591, \"step\": 588, \"value\": 0.0006695271003991365}, {\"wallTime\": 1647712449.0202558, \"step\": 590, \"value\": 0.0006710021989420056}, {\"wallTime\": 1647712449.0653167, \"step\": 591, \"value\": 0.0006717307842336595}, {\"wallTime\": 1647712449.1157968, \"step\": 592, \"value\": 0.0006724533159285784}, {\"wallTime\": 1647712449.2197778, \"step\": 594, \"value\": 0.000673880276735872}, {\"wallTime\": 1647712449.3220296, \"step\": 596, \"value\": 0.0006752829067409039}, {\"wallTime\": 1647712449.3750067, \"step\": 597, \"value\": 0.0006759751704521477}, {\"wallTime\": 1647712449.4239266, \"step\": 598, \"value\": 0.0006766612641513348}, {\"wallTime\": 1647712449.4682536, \"step\": 599, \"value\": 0.0006773412460461259}, {\"wallTime\": 1647712449.5611467, \"step\": 601, \"value\": 0.0006786827580071986}, {\"wallTime\": 1647712449.601493, \"step\": 602, \"value\": 0.0006793442880734801}, {\"wallTime\": 1647712449.6462324, \"step\": 603, \"value\": 0.0006799996481277049}, {\"wallTime\": 1647712449.7319343, \"step\": 605, \"value\": 0.0006812917999923229}, {\"wallTime\": 1647712449.8626182, \"step\": 608, \"value\": 0.0006831833743490279}, {\"wallTime\": 1647712449.9535933, \"step\": 610, \"value\": 0.0006844131858088076}, {\"wallTime\": 1647712450.0805428, \"step\": 613, \"value\": 0.0006862108130007982}, {\"wallTime\": 1647712450.124841, \"step\": 614, \"value\": 0.0006867974298074841}, {\"wallTime\": 1647712450.2368865, \"step\": 616, \"value\": 0.0006879516295157373}, {\"wallTime\": 1647712450.3283474, \"step\": 618, \"value\": 0.0006890804506838322}, {\"wallTime\": 1647712450.4231517, \"step\": 620, \"value\": 0.0006901837768964469}, {\"wallTime\": 1647712450.527226, \"step\": 622, \"value\": 0.0006912616081535816}, {\"wallTime\": 1647712450.5753396, \"step\": 623, \"value\": 0.0006917908322066069}, {\"wallTime\": 1647712450.6983335, \"step\": 626, \"value\": 0.0006933400873094797}, {\"wallTime\": 1647712450.789183, \"step\": 628, \"value\": 0.0006943406770005822}, {\"wallTime\": 1647712450.8304877, \"step\": 629, \"value\": 0.0006948312511667609}, {\"wallTime\": 1647712451.0561366, \"step\": 633, \"value\": 0.0006967285880818963}, {\"wallTime\": 1647712451.2436454, \"step\": 637, \"value\": 0.0006985216168686748}, {\"wallTime\": 1647712451.3847258, \"step\": 640, \"value\": 0.000699797528795898}, {\"wallTime\": 1647712451.432479, \"step\": 641, \"value\": 0.0007002096972428262}, {\"wallTime\": 1647712451.4813886, \"step\": 642, \"value\": 0.0007006152300164104}, {\"wallTime\": 1647712451.5258567, \"step\": 643, \"value\": 0.0007010141853243113}, {\"wallTime\": 1647712451.5717728, \"step\": 644, \"value\": 0.0007014065631665289}, {\"wallTime\": 1647712451.7944038, \"step\": 649, \"value\": 0.0007032689172774553}, {\"wallTime\": 1647712451.888112, \"step\": 651, \"value\": 0.000703967351000756}, {\"wallTime\": 1647712451.9263737, \"step\": 652, \"value\": 0.0007043065270408988}, {\"wallTime\": 1647712451.9647563, \"step\": 653, \"value\": 0.0007046390674076974}, {\"wallTime\": 1647712452.0093482, \"step\": 654, \"value\": 0.0007049649721011519}, {\"wallTime\": 1647712452.0477424, \"step\": 655, \"value\": 0.0007052841247059405}, {\"wallTime\": 1647712452.1799893, \"step\": 658, \"value\": 0.0007062014192342758}, {\"wallTime\": 1647712452.2742634, \"step\": 660, \"value\": 0.0007067794213071465}, {\"wallTime\": 1647712452.5982742, \"step\": 667, \"value\": 0.0007085903780534863}, {\"wallTime\": 1647712452.7363954, \"step\": 670, \"value\": 0.0007092651794664562}, {\"wallTime\": 1647712453.0051425, \"step\": 675, \"value\": 0.0007102543022483587}, {\"wallTime\": 1647712453.0505185, \"step\": 676, \"value\": 0.0007104317774064839}, {\"wallTime\": 1647712453.0973954, \"step\": 677, \"value\": 0.0007106024422682822}, {\"wallTime\": 1647712453.2350655, \"step\": 680, \"value\": 0.0007110736914910376}, {\"wallTime\": 1647712453.320471, \"step\": 682, \"value\": 0.0007113537285476923}, {\"wallTime\": 1647712453.3664865, \"step\": 683, \"value\": 0.0007114835898391902}, {\"wallTime\": 1647712453.4140613, \"step\": 684, \"value\": 0.0007116065826267004}, {\"wallTime\": 1647712453.5555258, \"step\": 687, \"value\": 0.0007119346992112696}, {\"wallTime\": 1647712453.810901, \"step\": 692, \"value\": 0.0007123449468053877}, {\"wallTime\": 1647712453.92381, \"step\": 694, \"value\": 0.0007124611875042319}, {\"wallTime\": 1647712454.006384, \"step\": 696, \"value\": 0.0007125501288101077}, {\"wallTime\": 1647712454.0542464, \"step\": 697, \"value\": 0.0007125843549147248}, {\"wallTime\": 1647712454.13504, \"step\": 699, \"value\": 0.0007126322016119957}, {\"wallTime\": 1647712454.2566652, \"step\": 702, \"value\": 0.0007126534474082291}, {\"wallTime\": 1647712454.2970412, \"step\": 703, \"value\": 0.0007126521086320281}, {\"wallTime\": 1647712454.3799026, \"step\": 705, \"value\": 0.0007126455893740058}, {\"wallTime\": 1647712454.5368543, \"step\": 709, \"value\": 0.0007126168929971755}, {\"wallTime\": 1647712454.5821772, \"step\": 710, \"value\": 0.0007126064738258719}, {\"wallTime\": 1647712454.6674094, \"step\": 712, \"value\": 0.0007125816773623228}, {\"wallTime\": 1647712454.8092983, \"step\": 715, \"value\": 0.0007125346455723047}, {\"wallTime\": 1647712454.9100232, \"step\": 717, \"value\": 0.000712496810592711}, {\"wallTime\": 1647712455.0444472, \"step\": 720, \"value\": 0.0007124302792362869}, {\"wallTime\": 1647712455.0884624, \"step\": 721, \"value\": 0.0007124054827727377}, {\"wallTime\": 1647712455.173721, \"step\": 723, \"value\": 0.0007123519899323583}, {\"wallTime\": 1647712455.3031228, \"step\": 725, \"value\": 0.0007122932584024966}, {\"wallTime\": 1647712455.345688, \"step\": 726, \"value\": 0.0007122619426809251}, {\"wallTime\": 1647712455.4314363, \"step\": 728, \"value\": 0.000712195411324501}, {\"wallTime\": 1647712455.4738533, \"step\": 729, \"value\": 0.0007121601956896484}, {\"wallTime\": 1647712455.5609672, \"step\": 731, \"value\": 0.0007120858645066619}, {\"wallTime\": 1647712455.603442, \"step\": 732, \"value\": 0.0007120466907508671}, {\"wallTime\": 1647712455.647975, \"step\": 733, \"value\": 0.0007120062946341932}, {\"wallTime\": 1647712455.872979, \"step\": 738, \"value\": 0.0007117845234461129}, {\"wallTime\": 1647712456.057726, \"step\": 742, \"value\": 0.0007115837652236223}, {\"wallTime\": 1647712456.1044626, \"step\": 743, \"value\": 0.0007115302723832428}, {\"wallTime\": 1647712456.1506252, \"step\": 744, \"value\": 0.0007114754989743233}, {\"wallTime\": 1647712456.6426392, \"step\": 755, \"value\": 0.0007107873680070043}, {\"wallTime\": 1647712456.687408, \"step\": 756, \"value\": 0.0007107170531526208}, {\"wallTime\": 1647712456.7744505, \"step\": 758, \"value\": 0.0007105724071152508}, {\"wallTime\": 1647712456.9798067, \"step\": 763, \"value\": 0.0007101882365532219}, {\"wallTime\": 1647712457.023953, \"step\": 764, \"value\": 0.000710107502527535}, {\"wallTime\": 1647712457.067448, \"step\": 765, \"value\": 0.0007100254879333079}, {\"wallTime\": 1647712457.2092566, \"step\": 768, \"value\": 0.0007097715861164033}, {\"wallTime\": 1647712457.2537107, \"step\": 769, \"value\": 0.000709684391040355}, {\"wallTime\": 1647712457.388879, \"step\": 772, \"value\": 0.0007094150059856474}, {\"wallTime\": 1647712457.522082, \"step\": 775, \"value\": 0.0007091339793987572}, {\"wallTime\": 1647712457.5664606, \"step\": 776, \"value\": 0.0007090377621352673}, {\"wallTime\": 1647712457.6943092, \"step\": 778, \"value\": 0.0007088413694873452}, {\"wallTime\": 1647712457.7373958, \"step\": 779, \"value\": 0.0007087411941029131}, {\"wallTime\": 1647712457.7835553, \"step\": 780, \"value\": 0.0007086397963576019}, {\"wallTime\": 1647712457.827142, \"step\": 781, \"value\": 0.0007085370598360896}, {\"wallTime\": 1647712457.8717573, \"step\": 782, \"value\": 0.0007084330427460372}, {\"wallTime\": 1647712458.1291003, \"step\": 788, \"value\": 0.0007077819900587201}, {\"wallTime\": 1647712458.2698061, \"step\": 791, \"value\": 0.000707439030520618}, {\"wallTime\": 1647712458.3654573, \"step\": 793, \"value\": 0.0007072039879858494}, {\"wallTime\": 1647712458.4555602, \"step\": 795, \"value\": 0.0007069637649692595}, {\"wallTime\": 1647712458.633396, \"step\": 799, \"value\": 0.0007064679521135986}, {\"wallTime\": 1647712458.8776093, \"step\": 804, \"value\": 0.0007058194023557007}, {\"wallTime\": 1647712458.9246786, \"step\": 805, \"value\": 0.0007056858157739043}, {\"wallTime\": 1647712458.9744017, \"step\": 806, \"value\": 0.0007055509486235678}, {\"wallTime\": 1647712459.0387504, \"step\": 807, \"value\": 0.0007054148591123521}, {\"wallTime\": 1647712459.2352386, \"step\": 810, \"value\": 0.0007049987907521427}, {\"wallTime\": 1647712459.6315935, \"step\": 818, \"value\": 0.0007038332405500114}, {\"wallTime\": 1647712459.692924, \"step\": 819, \"value\": 0.0007036817842163146}, {\"wallTime\": 1647712459.8158293, \"step\": 821, \"value\": 0.0007033751462586224}, {\"wallTime\": 1647712459.9485528, \"step\": 823, \"value\": 0.0007030633860267699}, {\"wallTime\": 1647712460.0993874, \"step\": 826, \"value\": 0.0007025861996226013}, {\"wallTime\": 1647712460.1461859, \"step\": 827, \"value\": 0.0007024246151559055}, {\"wallTime\": 1647712460.1896574, \"step\": 828, \"value\": 0.0007022617501206696}, {\"wallTime\": 1647712460.3639114, \"step\": 832, \"value\": 0.0007015976007096469}, {\"wallTime\": 1647712460.412785, \"step\": 833, \"value\": 0.0007014284492470324}, {\"wallTime\": 1647712460.4943557, \"step\": 835, \"value\": 0.0007010862464085221}, {\"wallTime\": 1647712460.5727427, \"step\": 836, \"value\": 0.0007009132532402873}, {\"wallTime\": 1647712460.6187184, \"step\": 837, \"value\": 0.0007007390377111733}, {\"wallTime\": 1647712460.7093625, \"step\": 839, \"value\": 0.000700386764947325}, {\"wallTime\": 1647712460.7557268, \"step\": 840, \"value\": 0.0007002087659202516}, {\"wallTime\": 1647712460.902145, \"step\": 843, \"value\": 0.0006996670854277909}, {\"wallTime\": 1647712460.9873261, \"step\": 845, \"value\": 0.000699299736879766}, {\"wallTime\": 1647712461.228789, \"step\": 850, \"value\": 0.000698359333910048}, {\"wallTime\": 1647712461.2737944, \"step\": 851, \"value\": 0.0006981674814596772}, {\"wallTime\": 1647712461.4024093, \"step\": 854, \"value\": 0.000697584415320307}, {\"wallTime\": 1647712461.5383475, \"step\": 857, \"value\": 0.0006969901151023805}, {\"wallTime\": 1647712461.6701972, \"step\": 860, \"value\": 0.0006963846390135586}, {\"wallTime\": 1647712461.7727456, \"step\": 862, \"value\": 0.0006959746824577451}, {\"wallTime\": 1647712461.9244368, \"step\": 865, \"value\": 0.00069535052170977}, {\"wallTime\": 1647712461.9710777, \"step\": 866, \"value\": 0.000695139984600246}, {\"wallTime\": 1647712462.1634302, \"step\": 870, \"value\": 0.0006942853797227144}, {\"wallTime\": 1647712462.208913, \"step\": 871, \"value\": 0.0006940686143934727}, {\"wallTime\": 1647712462.7960222, \"step\": 884, \"value\": 0.0006911386153660715}, {\"wallTime\": 1647712462.8367865, \"step\": 885, \"value\": 0.0006909046205691993}, {\"wallTime\": 1647712462.8731165, \"step\": 886, \"value\": 0.000690669403411448}, {\"wallTime\": 1647712462.9630682, \"step\": 888, \"value\": 0.0006901953020133078}, {\"wallTime\": 1647712463.0546293, \"step\": 890, \"value\": 0.0006897163111716509}, {\"wallTime\": 1647712463.14652, \"step\": 892, \"value\": 0.0006892324308864772}, {\"wallTime\": 1647712463.301772, \"step\": 895, \"value\": 0.0006884974427521229}, {\"wallTime\": 1647712463.4222896, \"step\": 897, \"value\": 0.0006880013970658183}, {\"wallTime\": 1647712463.481606, \"step\": 898, \"value\": 0.0006877515697851777}, {\"wallTime\": 1647712463.69245, \"step\": 901, \"value\": 0.0006869946955703199}, {\"wallTime\": 1647712463.7538733, \"step\": 902, \"value\": 0.0006867399788461626}, {\"wallTime\": 1647712463.8356044, \"step\": 904, \"value\": 0.0006862269365228713}, {\"wallTime\": 1647712463.980492, \"step\": 907, \"value\": 0.0006854483508504927}, {\"wallTime\": 1647712464.0399668, \"step\": 908, \"value\": 0.0006851863581687212}, {\"wallTime\": 1647712464.1260006, \"step\": 910, \"value\": 0.0006846588803455234}, {\"wallTime\": 1647712464.1804485, \"step\": 911, \"value\": 0.0006843932787887752}, {\"wallTime\": 1647712464.3129642, \"step\": 914, \"value\": 0.0006835894309915602}, {\"wallTime\": 1647712464.5226836, \"step\": 918, \"value\": 0.0006825007731094956}, {\"wallTime\": 1647712464.5822058, \"step\": 919, \"value\": 0.0006822256254963577}, {\"wallTime\": 1647712464.7034857, \"step\": 921, \"value\": 0.0006816717213951051}, {\"wallTime\": 1647712464.82537, \"step\": 923, \"value\": 0.0006811131024733186}, {\"wallTime\": 1647712465.0767796, \"step\": 927, \"value\": 0.0006799815455451608}, {\"wallTime\": 1647712465.1296551, \"step\": 928, \"value\": 0.0006796956877224147}, {\"wallTime\": 1647712465.23556, \"step\": 930, \"value\": 0.0006791204214096069}, {\"wallTime\": 1647712465.277595, \"step\": 931, \"value\": 0.0006788310129195452}, {\"wallTime\": 1647712465.316613, \"step\": 932, \"value\": 0.0006785404402762651}, {\"wallTime\": 1647712465.36181, \"step\": 933, \"value\": 0.0006782486452721059}, {\"wallTime\": 1647712465.4671867, \"step\": 935, \"value\": 0.0006776616210117936}, {\"wallTime\": 1647712470.0609415, \"step\": 939, \"value\": 0.0006764733116142452}, {\"wallTime\": 1647712470.155639, \"step\": 941, \"value\": 0.0006758722010999918}, {\"wallTime\": 1647712470.2002957, \"step\": 942, \"value\": 0.0006755698123015463}, {\"wallTime\": 1647712470.3394732, \"step\": 945, \"value\": 0.0006746557774022222}, {\"wallTime\": 1647712470.527908, \"step\": 949, \"value\": 0.0006734207854606211}, {\"wallTime\": 1647712470.6666696, \"step\": 952, \"value\": 0.0006724823033437133}, {\"wallTime\": 1647712470.8142009, \"step\": 955, \"value\": 0.0006715334020555019}, {\"wallTime\": 1647712470.858859, \"step\": 956, \"value\": 0.0006712147733196616}, {\"wallTime\": 1647712471.0386124, \"step\": 960, \"value\": 0.0006699288496747613}, {\"wallTime\": 1647712471.1297414, \"step\": 962, \"value\": 0.0006692789611406624}, {\"wallTime\": 1647712471.1742704, \"step\": 963, \"value\": 0.000668952299747616}, {\"wallTime\": 1647712471.259933, \"step\": 965, \"value\": 0.0006682955427095294}, {\"wallTime\": 1647712471.3560855, \"step\": 967, \"value\": 0.0006676342454738915}, {\"wallTime\": 1647712471.4082808, \"step\": 968, \"value\": 0.0006673018797300756}, {\"wallTime\": 1647712471.5522041, \"step\": 971, \"value\": 0.0006662979139946401}, {\"wallTime\": 1647712471.7861037, \"step\": 976, \"value\": 0.0006646020337939262}, {\"wallTime\": 1647712471.878894, \"step\": 978, \"value\": 0.0006639157072640955}, {\"wallTime\": 1647712471.92381, \"step\": 979, \"value\": 0.0006635708850808442}, {\"wallTime\": 1647712472.0201247, \"step\": 981, \"value\": 0.0006628778646700084}, {\"wallTime\": 1647712472.0672295, \"step\": 982, \"value\": 0.0006625296664424241}, {\"wallTime\": 1647712472.2515845, \"step\": 986, \"value\": 0.0006611256394535303}, {\"wallTime\": 1647712472.462085, \"step\": 990, \"value\": 0.0006597037427127361}, {\"wallTime\": 1647712472.553302, \"step\": 992, \"value\": 0.0006589861586689949}, {\"wallTime\": 1647712472.652456, \"step\": 994, \"value\": 0.0006582640926353633}, {\"wallTime\": 1647712472.7444048, \"step\": 996, \"value\": 0.0006575376028195024}, {\"wallTime\": 1647712472.826983, \"step\": 998, \"value\": 0.0006568067474290729}, {\"wallTime\": 1647712472.8759434, \"step\": 999, \"value\": 0.0006564396317116916}, {\"wallTime\": 1647712473.0272613, \"step\": 1002, \"value\": 0.0006553317653015256}, {\"wallTime\": 1647712473.0888488, \"step\": 1003, \"value\": 0.0006549602840095758}, {\"wallTime\": 1647712473.148854, \"step\": 1004, \"value\": 0.0006545876967720687}, {\"wallTime\": 1647712473.2804468, \"step\": 1006, \"value\": 0.0006538392626680434}, {\"wallTime\": 1647712473.5278811, \"step\": 1011, \"value\": 0.0006519491435028613}, {\"wallTime\": 1647712473.6111937, \"step\": 1013, \"value\": 0.0006511855171993375}, {\"wallTime\": 1647712473.7534964, \"step\": 1015, \"value\": 0.0006504175835289061}, {\"wallTime\": 1647712473.8106995, \"step\": 1016, \"value\": 0.0006500319577753544}, {\"wallTime\": 1647712473.8717887, \"step\": 1017, \"value\": 0.0006496452842839062}, {\"wallTime\": 1647712474.1408842, \"step\": 1022, \"value\": 0.0006476958515122533}, {\"wallTime\": 1647712474.338198, \"step\": 1026, \"value\": 0.0006461170851252973}, {\"wallTime\": 1647712474.4340534, \"step\": 1028, \"value\": 0.0006453213281929493}, {\"wallTime\": 1647712474.4870913, \"step\": 1029, \"value\": 0.0006449218490161002}, {\"wallTime\": 1647712474.773249, \"step\": 1035, \"value\": 0.0006425028550438583}, {\"wallTime\": 1647712474.819967, \"step\": 1036, \"value\": 0.0006420960417017341}, {\"wallTime\": 1647712474.866587, \"step\": 1037, \"value\": 0.0006416881806217134}, {\"wallTime\": 1647712474.908947, \"step\": 1038, \"value\": 0.0006412792135961354}, {\"wallTime\": 1647712474.9512463, \"step\": 1039, \"value\": 0.0006408692570403218}, {\"wallTime\": 1647712475.1408613, \"step\": 1043, \"value\": 0.0006392189534381032}, {\"wallTime\": 1647712475.2294738, \"step\": 1045, \"value\": 0.0006383875734172761}, {\"wallTime\": 1647712475.2756648, \"step\": 1046, \"value\": 0.0006379703409038484}, {\"wallTime\": 1647712475.5576932, \"step\": 1052, \"value\": 0.0006354452925734222}, {\"wallTime\": 1647712475.603503, \"step\": 1053, \"value\": 0.0006350209005177021}, {\"wallTime\": 1647712475.740732, \"step\": 1056, \"value\": 0.0006337414961308241}, {\"wallTime\": 1647712475.8595476, \"step\": 1058, \"value\": 0.0006328834570012987}, {\"wallTime\": 1647712475.8862286, \"step\": 1059, \"value\": 0.0006324529531411827}, {\"wallTime\": 1647712475.9230456, \"step\": 1060, \"value\": 0.0006320214015431702}, {\"wallTime\": 1647712475.9839532, \"step\": 1062, \"value\": 0.0006311553297564387}, {\"wallTime\": 1647712476.0772595, \"step\": 1065, \"value\": 0.0006298486259765923}, {\"wallTime\": 1647712476.1327674, \"step\": 1067, \"value\": 0.0006289724260568619}, {\"wallTime\": 1647712476.1926584, \"step\": 1069, \"value\": 0.0006280923262238503}, {\"wallTime\": 1647712476.2212155, \"step\": 1070, \"value\": 0.0006276507629081607}, {\"wallTime\": 1647712476.2635028, \"step\": 1071, \"value\": 0.0006272082100622356}, {\"wallTime\": 1647712476.3117397, \"step\": 1072, \"value\": 0.0006267646094784141}, {\"wallTime\": 1647712476.3584826, \"step\": 1073, \"value\": 0.0006263200775720179}, {\"wallTime\": 1647712476.3982842, \"step\": 1074, \"value\": 0.0006258745561353862}, {\"wallTime\": 1647712476.524941, \"step\": 1077, \"value\": 0.000624532054644078}, {\"wallTime\": 1647712476.5647926, \"step\": 1078, \"value\": 0.0006240825750865042}, {\"wallTime\": 1647712476.650825, \"step\": 1080, \"value\": 0.000623180705588311}, {\"wallTime\": 1647712476.7051244, \"step\": 1081, \"value\": 0.0006227283156476915}, {\"wallTime\": 1647712476.7521133, \"step\": 1082, \"value\": 0.0006222748779691756}, {\"wallTime\": 1647712476.880844, \"step\": 1085, \"value\": 0.0006209089187905192}, {\"wallTime\": 1647712476.908267, \"step\": 1086, \"value\": 0.000620451639406383}, {\"wallTime\": 1647712476.954523, \"step\": 1087, \"value\": 0.0006199934286996722}, {\"wallTime\": 1647712477.1423283, \"step\": 1091, \"value\": 0.0006181508069857955}, {\"wallTime\": 1647712477.4550114, \"step\": 1098, \"value\": 0.0006148894317448139}, {\"wallTime\": 1647712477.586559, \"step\": 1100, \"value\": 0.0006139490287750959}, {\"wallTime\": 1647712477.6774075, \"step\": 1102, \"value\": 0.0006130049005150795}, {\"wallTime\": 1647712477.722963, \"step\": 1103, \"value\": 0.0006125314394012094}, {\"wallTime\": 1647712477.7701397, \"step\": 1104, \"value\": 0.0006120569887571037}, {\"wallTime\": 1647712477.9103515, \"step\": 1107, \"value\": 0.0006106281070969999}, {\"wallTime\": 1647712477.9992337, \"step\": 1109, \"value\": 0.0006096708821132779}, {\"wallTime\": 1647712478.0955353, \"step\": 1111, \"value\": 0.0006087098736315966}, {\"wallTime\": 1647712478.1356409, \"step\": 1112, \"value\": 0.0006082280306145549}, {\"wallTime\": 1647712478.2366397, \"step\": 1114, \"value\": 0.0006072615506127477}, {\"wallTime\": 1647712478.4228067, \"step\": 1119, \"value\": 0.0006048292270861566}, {\"wallTime\": 1647712478.5088336, \"step\": 1121, \"value\": 0.0006038498831912875}, {\"wallTime\": 1647712478.5498726, \"step\": 1122, \"value\": 0.0006033589015714824}, {\"wallTime\": 1647712478.6908324, \"step\": 1125, \"value\": 0.0006018804269842803}, {\"wallTime\": 1647712478.738028, \"step\": 1126, \"value\": 0.0006013857782818377}, {\"wallTime\": 1647712478.8335853, \"step\": 1128, \"value\": 0.0006003938615322113}, {\"wallTime\": 1647712478.8830764, \"step\": 1129, \"value\": 0.0005998965352773666}, {\"wallTime\": 1647712478.9312496, \"step\": 1130, \"value\": 0.0005993983359076083}, {\"wallTime\": 1647712478.9767709, \"step\": 1131, \"value\": 0.0005988992634229362}, {\"wallTime\": 1647712479.0239568, \"step\": 1132, \"value\": 0.0005983992596156895}, {\"wallTime\": 1647712479.1275764, \"step\": 1134, \"value\": 0.000597396632656455}, {\"wallTime\": 1647712479.1784785, \"step\": 1135, \"value\": 0.0005968940095044672}, {\"wallTime\": 1647712479.2229273, \"step\": 1136, \"value\": 0.0005963905132375658}, {\"wallTime\": 1647712479.3634944, \"step\": 1139, \"value\": 0.0005948746693320572}, {\"wallTime\": 1647712479.5323565, \"step\": 1142, \"value\": 0.0005933509673923254}, {\"wallTime\": 1647712479.6684084, \"step\": 1145, \"value\": 0.0005918194656260312}, {\"wallTime\": 1647712479.7150826, \"step\": 1146, \"value\": 0.0005913072382099926}, {\"wallTime\": 1647712479.799861, \"step\": 1148, \"value\": 0.0005902802222408354}, {\"wallTime\": 1647712479.8934417, \"step\": 1150, \"value\": 0.0005892497720196843}, {\"wallTime\": 1647712479.9380345, \"step\": 1151, \"value\": 0.0005887332372367382}, {\"wallTime\": 1647712479.9857533, \"step\": 1152, \"value\": 0.0005882158875465393}, {\"wallTime\": 1647712480.0334332, \"step\": 1153, \"value\": 0.0005876976647414267}, {\"wallTime\": 1647712480.3669357, \"step\": 1160, \"value\": 0.0005840465310029685}, {\"wallTime\": 1647712480.4635365, \"step\": 1162, \"value\": 0.0005829958245158195}, {\"wallTime\": 1647712480.563165, \"step\": 1164, \"value\": 0.0005819418001919985}, {\"wallTime\": 1647712480.6535347, \"step\": 1166, \"value\": 0.0005808844580315053}, {\"wallTime\": 1647712480.6981573, \"step\": 1167, \"value\": 0.00058035459369421}, {\"wallTime\": 1647712480.971685, \"step\": 1173, \"value\": 0.0005771580035798252}, {\"wallTime\": 1647712481.0208578, \"step\": 1174, \"value\": 0.0005766223766840994}, {\"wallTime\": 1647712481.111486, \"step\": 1176, \"value\": 0.0005755487363785505}, {\"wallTime\": 1647712481.1648028, \"step\": 1177, \"value\": 0.0005750107229687274}, {\"wallTime\": 1647712481.2123344, \"step\": 1178, \"value\": 0.0005744718946516514}, {\"wallTime\": 1647712481.39339, \"step\": 1182, \"value\": 0.0005723086651414633}, {\"wallTime\": 1647712481.4863613, \"step\": 1184, \"value\": 0.0005712222773581743}, {\"wallTime\": 1647712481.615836, \"step\": 1186, \"value\": 0.000570132746361196}, {\"wallTime\": 1647712481.718187, \"step\": 1188, \"value\": 0.0005690400721505284}, {\"wallTime\": 1647712481.7608109, \"step\": 1189, \"value\": 0.0005684925708919764}, {\"wallTime\": 1647712481.8041873, \"step\": 1190, \"value\": 0.0005679443129338324}, {\"wallTime\": 1647712481.9292612, \"step\": 1193, \"value\": 0.0005662948242388666}, {\"wallTime\": 1647712481.9717083, \"step\": 1194, \"value\": 0.0005657434230670333}, {\"wallTime\": 1647712482.0121787, \"step\": 1195, \"value\": 0.000565191323403269}, {\"wallTime\": 1647712482.087974, \"step\": 1197, \"value\": 0.0005640847375616431}, {\"wallTime\": 1647712482.1298373, \"step\": 1198, \"value\": 0.0005635303095914423}, {\"wallTime\": 1647712482.2639492, \"step\": 1201, \"value\": 0.0005618624854832888}, {\"wallTime\": 1647712482.440554, \"step\": 1205, \"value\": 0.0005596282426267862}, {\"wallTime\": 1647712482.4822745, \"step\": 1206, \"value\": 0.0005590677610598505}, {\"wallTime\": 1647712482.5277832, \"step\": 1207, \"value\": 0.0005585065810009837}, {\"wallTime\": 1647712482.5891564, \"step\": 1209, \"value\": 0.0005573820089921355}, {\"wallTime\": 1647712482.768589, \"step\": 1213, \"value\": 0.0005551240174099803}, {\"wallTime\": 1647712482.7964957, \"step\": 1214, \"value\": 0.0005545577150769532}, {\"wallTime\": 1647712482.8241844, \"step\": 1215, \"value\": 0.0005539906560443342}, {\"wallTime\": 1647712482.9999235, \"step\": 1218, \"value\": 0.0005522851715795696}, {\"wallTime\": 1647712483.2104578, \"step\": 1223, \"value\": 0.0005494283977895975}, {\"wallTime\": 1647712483.301826, \"step\": 1225, \"value\": 0.0005482807173393667}, {\"wallTime\": 1647712483.4679825, \"step\": 1229, \"value\": 0.0005459769163280725}, {\"wallTime\": 1647712483.6049027, \"step\": 1232, \"value\": 0.000544241804163903}, {\"wallTime\": 1647712483.6526005, \"step\": 1233, \"value\": 0.0005436620558612049}, {\"wallTime\": 1647712483.9241767, \"step\": 1238, \"value\": 0.0005407529533840716}, {\"wallTime\": 1647712484.0194948, \"step\": 1240, \"value\": 0.0005395846092142165}, {\"wallTime\": 1647712484.067477, \"step\": 1241, \"value\": 0.0005389994475990534}, {\"wallTime\": 1647712484.1185806, \"step\": 1242, \"value\": 0.0005384135874919593}, {\"wallTime\": 1647712484.1632445, \"step\": 1243, \"value\": 0.0005378270288929343}, {\"wallTime\": 1647712484.2076604, \"step\": 1244, \"value\": 0.0005372398300096393}, {\"wallTime\": 1647712484.299045, \"step\": 1246, \"value\": 0.000536063511390239}, {\"wallTime\": 1647712484.4410613, \"step\": 1249, \"value\": 0.0005342939984984696}, {\"wallTime\": 1647712484.4930732, \"step\": 1250, \"value\": 0.0005337028997018933}, {\"wallTime\": 1647712484.5454135, \"step\": 1251, \"value\": 0.0005331111024133861}, {\"wallTime\": 1647712484.5964475, \"step\": 1252, \"value\": 0.0005325186648406088}, {\"wallTime\": 1647712484.673585, \"step\": 1254, \"value\": 0.0005313318688422441}, {\"wallTime\": 1647712484.7582645, \"step\": 1256, \"value\": 0.0005301425117067993}, {\"wallTime\": 1647712484.7972066, \"step\": 1257, \"value\": 0.0005295468727126718}, {\"wallTime\": 1647712484.922812, \"step\": 1260, \"value\": 0.0005277561722323298}, {\"wallTime\": 1647712484.9717488, \"step\": 1261, \"value\": 0.0005271580303087831}, {\"wallTime\": 1647712485.199201, \"step\": 1267, \"value\": 0.000523555965628475}, {\"wallTime\": 1647712485.353407, \"step\": 1271, \"value\": 0.0005211423267610371}, {\"wallTime\": 1647712485.4991562, \"step\": 1276, \"value\": 0.0005181117448955774}, {\"wallTime\": 1647712485.5399811, \"step\": 1277, \"value\": 0.0005175038240849972}, {\"wallTime\": 1647712485.59258, \"step\": 1278, \"value\": 0.0005168953211978078}, {\"wallTime\": 1647712485.7847545, \"step\": 1282, \"value\": 0.0005144554888829589}, {\"wallTime\": 1647712485.9283915, \"step\": 1285, \"value\": 0.0005126195028424263}, {\"wallTime\": 1647712486.2075663, \"step\": 1290, \"value\": 0.0005095481174066663}, {\"wallTime\": 1647712486.3575544, \"step\": 1293, \"value\": 0.0005076985689811409}, {\"wallTime\": 1647712486.5875802, \"step\": 1298, \"value\": 0.0005046048318035901}, {\"wallTime\": 1647712486.63431, \"step\": 1299, \"value\": 0.0005039844545535743}, {\"wallTime\": 1647712486.7679594, \"step\": 1302, \"value\": 0.0005021201213821769}, {\"wallTime\": 1647712486.974424, \"step\": 1306, \"value\": 0.0004996268544346094}, {\"wallTime\": 1647712487.154256, \"step\": 1310, \"value\": 0.0004971251473762095}, {\"wallTime\": 1647712487.3846712, \"step\": 1315, \"value\": 0.0004939864156767726}, {\"wallTime\": 1647712487.613888, \"step\": 1320, \"value\": 0.0004908351693302393}, {\"wallTime\": 1647712487.7042694, \"step\": 1322, \"value\": 0.0004895711317658424}, {\"wallTime\": 1647712487.8361208, \"step\": 1325, \"value\": 0.00048767152475193143}, {\"wallTime\": 1647712487.8806565, \"step\": 1326, \"value\": 0.0004870373522862792}, {\"wallTime\": 1647712487.9609551, \"step\": 1328, \"value\": 0.0004857675521634519}, {\"wallTime\": 1647712488.269183, \"step\": 1335, \"value\": 0.0004813084960915148}, {\"wallTime\": 1647712488.8037488, \"step\": 1344, \"value\": 0.00047554256161674857}, {\"wallTime\": 1647712488.900159, \"step\": 1345, \"value\": 0.0004748996871057898}, {\"wallTime\": 1647712489.020965, \"step\": 1347, \"value\": 0.0004736126575153321}, {\"wallTime\": 1647712489.0802069, \"step\": 1348, \"value\": 0.00047296847333200276}, {\"wallTime\": 1647712489.25054, \"step\": 1351, \"value\": 0.00047103341785259545}, {\"wallTime\": 1647712489.3089402, \"step\": 1352, \"value\": 0.0004703875456470996}, {\"wallTime\": 1647712489.4317868, \"step\": 1354, \"value\": 0.00046909457887522876}, {\"wallTime\": 1647712489.6230814, \"step\": 1358, \"value\": 0.00046650366857647896}, {\"wallTime\": 1647712489.7129087, \"step\": 1360, \"value\": 0.0004652058123610914}, {\"wallTime\": 1647712489.9061167, \"step\": 1364, \"value\": 0.0004626052686944604}, {\"wallTime\": 1647712489.9608161, \"step\": 1365, \"value\": 0.00046195415779948235}, {\"wallTime\": 1647712490.0054946, \"step\": 1366, \"value\": 0.00046130266855470836}, {\"wallTime\": 1647712490.0526347, \"step\": 1367, \"value\": 0.000460650771856308}, {\"wallTime\": 1647712490.0996802, \"step\": 1368, \"value\": 0.0004599985259119421}, {\"wallTime\": 1647712490.292174, \"step\": 1372, \"value\": 0.0004573857004288584}, {\"wallTime\": 1647712490.3396678, \"step\": 1373, \"value\": 0.00045673156273551285}, {\"wallTime\": 1647712490.439105, \"step\": 1375, \"value\": 0.0004554221814032644}, {\"wallTime\": 1647712490.4878972, \"step\": 1376, \"value\": 0.0004547669377643615}, {\"wallTime\": 1647712490.6813576, \"step\": 1380, \"value\": 0.00045214241254143417}, {\"wallTime\": 1647712490.9195485, \"step\": 1385, \"value\": 0.00044885388342663646}, {\"wallTime\": 1647712490.967302, \"step\": 1386, \"value\": 0.0004481951764319092}, {\"wallTime\": 1647712491.153809, \"step\": 1390, \"value\": 0.00044555688509717584}, {\"wallTime\": 1647712491.2915466, \"step\": 1393, \"value\": 0.00044357473962008953}, {\"wallTime\": 1647712491.4844124, \"step\": 1397, \"value\": 0.0004409274260979146}, {\"wallTime\": 1647712491.741193, \"step\": 1403, \"value\": 0.00043694721534848213}, {\"wallTime\": 1647712496.6486564, \"step\": 1416, \"value\": 0.00042828763253055513}, {\"wallTime\": 1647712496.6964278, \"step\": 1417, \"value\": 0.00042761958320625126}, {\"wallTime\": 1647712496.902109, \"step\": 1421, \"value\": 0.00042494485387578607}, {\"wallTime\": 1647712497.3813727, \"step\": 1431, \"value\": 0.00041824078653007746}, {\"wallTime\": 1647712497.4259467, \"step\": 1432, \"value\": 0.0004175690992269665}, {\"wallTime\": 1647712497.589014, \"step\": 1436, \"value\": 0.00041488007991574705}, {\"wallTime\": 1647712497.6765974, \"step\": 1438, \"value\": 0.0004135342896915972}, {\"wallTime\": 1647712497.7222655, \"step\": 1439, \"value\": 0.0004128610889893025}, {\"wallTime\": 1647712497.7686212, \"step\": 1440, \"value\": 0.00041218765545636415}, {\"wallTime\": 1647712497.8126175, \"step\": 1441, \"value\": 0.00041151404730044305}, {\"wallTime\": 1647712497.9641278, \"step\": 1444, \"value\": 0.0004094919713679701}, {\"wallTime\": 1647712498.037598, \"step\": 1446, \"value\": 0.00040814292151480913}, {\"wallTime\": 1647712498.0827444, \"step\": 1447, \"value\": 0.0004074681201018393}, {\"wallTime\": 1647712498.181896, \"step\": 1449, \"value\": 0.00040611796430312097}, {\"wallTime\": 1647712498.2886274, \"step\": 1451, \"value\": 0.0004047670809086412}, {\"wallTime\": 1647712498.3334513, \"step\": 1452, \"value\": 0.00040409137727692723}, {\"wallTime\": 1647712498.4208934, \"step\": 1454, \"value\": 0.0004027394170407206}, {\"wallTime\": 1647712498.4634514, \"step\": 1455, \"value\": 0.0004020631895400584}, {\"wallTime\": 1647712498.507938, \"step\": 1456, \"value\": 0.0004013867874164134}, {\"wallTime\": 1647712498.5522778, \"step\": 1457, \"value\": 0.0004007102397736162}, {\"wallTime\": 1647712498.5947704, \"step\": 1458, \"value\": 0.00040003348840400577}, {\"wallTime\": 1647712498.640594, \"step\": 1459, \"value\": 0.0003993566206190735}, {\"wallTime\": 1647712498.6828907, \"step\": 1460, \"value\": 0.0003986795782111585}, {\"wallTime\": 1647712498.730264, \"step\": 1461, \"value\": 0.0003980023611802608}, {\"wallTime\": 1647712498.824182, \"step\": 1463, \"value\": 0.0003966475196648389}, {\"wallTime\": 1647712499.15975, \"step\": 1470, \"value\": 0.00039190100505948067}, {\"wallTime\": 1647712499.3065617, \"step\": 1473, \"value\": 0.0003898648137692362}, {\"wallTime\": 1647712499.3532846, \"step\": 1474, \"value\": 0.0003891858214046806}, {\"wallTime\": 1647712499.4497416, \"step\": 1476, \"value\": 0.00038782748742960393}, {\"wallTime\": 1647712499.7636197, \"step\": 1483, \"value\": 0.0003830697969533503}, {\"wallTime\": 1647712499.935013, \"step\": 1487, \"value\": 0.00038034890894778073}, {\"wallTime\": 1647712500.029426, \"step\": 1489, \"value\": 0.0003789879265241325}, {\"wallTime\": 1647712500.0754437, \"step\": 1490, \"value\": 0.0003783073043450713}, {\"wallTime\": 1647712500.2197962, \"step\": 1493, \"value\": 0.00037626500125043094}, {\"wallTime\": 1647712500.2613096, \"step\": 1494, \"value\": 0.00037558405892923474}, {\"wallTime\": 1647712500.456055, \"step\": 1498, \"value\": 0.0003728597075678408}, {\"wallTime\": 1647712500.5024202, \"step\": 1499, \"value\": 0.0003721784451045096}, {\"wallTime\": 1647712500.5502255, \"step\": 1500, \"value\": 0.0003714971535373479}, {\"wallTime\": 1647712500.643424, \"step\": 1502, \"value\": 0.00037013436667621136}, {\"wallTime\": 1647712500.9199696, \"step\": 1509, \"value\": 0.0003653631720226258}, {\"wallTime\": 1647712500.9625535, \"step\": 1510, \"value\": 0.0003646814147941768}, {\"wallTime\": 1647712501.0050912, \"step\": 1511, \"value\": 0.0003639996284618974}, {\"wallTime\": 1647712501.1225798, \"step\": 1513, \"value\": 0.0003626359684858471}, {\"wallTime\": 1647712501.49061, \"step\": 1515, \"value\": 0.00036127225030213594}, {\"wallTime\": 1647712501.5006423, \"step\": 1516, \"value\": 0.0003605903475545347}, {\"wallTime\": 1647712501.956924, \"step\": 1523, \"value\": 0.00035581676638685167}, {\"wallTime\": 1647712502.3238294, \"step\": 1528, \"value\": 0.0003524070489220321}, {\"wallTime\": 1647712503.166482, \"step\": 1534, \"value\": 0.00034831592347472906}, {\"wallTime\": 1647712503.2986825, \"step\": 1537, \"value\": 0.00034627073910087347}, {\"wallTime\": 1647712503.3536756, \"step\": 1538, \"value\": 0.00034558906918391585}, {\"wallTime\": 1647712503.5463629, \"step\": 1541, \"value\": 0.0003435443213675171}, {\"wallTime\": 1647712504.0298636, \"step\": 1548, \"value\": 0.0003387749893590808}, {\"wallTime\": 1647712504.169042, \"step\": 1551, \"value\": 0.0003367319004610181}, {\"wallTime\": 1647712504.2563603, \"step\": 1552, \"value\": 0.0003360510163474828}, {\"wallTime\": 1647712504.317766, \"step\": 1553, \"value\": 0.0003353702195454389}, {\"wallTime\": 1647712504.8228583, \"step\": 1562, \"value\": 0.0003292466572020203}, {\"wallTime\": 1647712504.9584408, \"step\": 1565, \"value\": 0.0003272071771789342}, {\"wallTime\": 1647712505.005601, \"step\": 1566, \"value\": 0.00032652754453010857}, {\"wallTime\": 1647712505.100472, \"step\": 1568, \"value\": 0.00032516862847842276}, {\"wallTime\": 1647712505.194301, \"step\": 1570, \"value\": 0.00032381017808802426}, {\"wallTime\": 1647712505.2413576, \"step\": 1571, \"value\": 0.00032313112751580775}, {\"wallTime\": 1647712505.2869754, \"step\": 1572, \"value\": 0.00032245219335891306}, {\"wallTime\": 1647712505.3331854, \"step\": 1573, \"value\": 0.00032177340472117066}, {\"wallTime\": 1647712505.4992397, \"step\": 1576, \"value\": 0.0003197377664037049}, {\"wallTime\": 1647712505.6043153, \"step\": 1578, \"value\": 0.0003183813241776079}, {\"wallTime\": 1647712505.7090209, \"step\": 1580, \"value\": 0.00031702546402812004}, {\"wallTime\": 1647712505.7495298, \"step\": 1581, \"value\": 0.0003163477231282741}, {\"wallTime\": 1647712505.7900612, \"step\": 1582, \"value\": 0.00031567015685141087}, {\"wallTime\": 1647712505.8901532, \"step\": 1585, \"value\": 0.0003136383311357349}, {\"wallTime\": 1647712506.0705342, \"step\": 1590, \"value\": 0.00031025512726046145}, {\"wallTime\": 1647712506.3332403, \"step\": 1595, \"value\": 0.0003068761434406042}, {\"wallTime\": 1647712506.37642, \"step\": 1596, \"value\": 0.0003062008763663471}, {\"wallTime\": 1647712506.424559, \"step\": 1597, \"value\": 0.0003055257839150727}, {\"wallTime\": 1647712506.6152084, \"step\": 1601, \"value\": 0.0003028273640666157}, {\"wallTime\": 1647712506.6374726, \"step\": 1602, \"value\": 0.0003021532320417464}, {\"wallTime\": 1647712506.666808, \"step\": 1603, \"value\": 0.00030147930374369025}, {\"wallTime\": 1647712506.9571714, \"step\": 1611, \"value\": 0.00029609532793983817}, {\"wallTime\": 1647712507.0143015, \"step\": 1613, \"value\": 0.00029475148767232895}, {\"wallTime\": 1647712507.0509179, \"step\": 1614, \"value\": 0.00029407988768070936}, {\"wallTime\": 1647712507.1500616, \"step\": 1616, \"value\": 0.0002927374152932316}, {\"wallTime\": 1647712507.4459171, \"step\": 1622, \"value\": 0.0002887156733777374}, {\"wallTime\": 1647712507.5328736, \"step\": 1624, \"value\": 0.0002873770135920495}, {\"wallTime\": 1647712507.6148794, \"step\": 1626, \"value\": 0.000286039401544258}, {\"wallTime\": 1647712507.6562665, \"step\": 1627, \"value\": 0.0002853709738701582}, {\"wallTime\": 1647712507.8071485, \"step\": 1631, \"value\": 0.0002826998825185001}, {\"wallTime\": 1647712507.9754343, \"step\": 1635, \"value\": 0.00028003312763758004}, {\"wallTime\": 1647712508.0156302, \"step\": 1636, \"value\": 0.0002793671446852386}, {\"wallTime\": 1647712508.0557368, \"step\": 1637, \"value\": 0.0002787014236673713}, {\"wallTime\": 1647712508.233485, \"step\": 1640, \"value\": 0.00027670597773976624}, {\"wallTime\": 1647712508.2841253, \"step\": 1641, \"value\": 0.0002760414208751172}, {\"wallTime\": 1647712508.5409596, \"step\": 1646, \"value\": 0.0002727230603341013}, {\"wallTime\": 1647712508.594978, \"step\": 1647, \"value\": 0.0002720602788031101}, {\"wallTime\": 1647712508.7017477, \"step\": 1649, \"value\": 0.0002707356761675328}, {\"wallTime\": 1647712508.7863696, \"step\": 1651, \"value\": 0.0002694123249966651}, {\"wallTime\": 1647712508.8341756, \"step\": 1652, \"value\": 0.00026875114417634904}, {\"wallTime\": 1647712508.8784077, \"step\": 1653, \"value\": 0.00026809025439433753}, {\"wallTime\": 1647712508.9231236, \"step\": 1654, \"value\": 0.0002674297138582915}, {\"wallTime\": 1647712509.0332823, \"step\": 1656, \"value\": 0.0002661095932126045}, {\"wallTime\": 1647712509.1123848, \"step\": 1658, \"value\": 0.0002647907822392881}, {\"wallTime\": 1647712509.2900722, \"step\": 1662, \"value\": 0.0002621572057250887}, {\"wallTime\": 1647712509.382615, \"step\": 1664, \"value\": 0.0002608424983918667}, {\"wallTime\": 1647712509.469484, \"step\": 1666, \"value\": 0.0002595291589386761}, {\"wallTime\": 1647712509.612409, \"step\": 1669, \"value\": 0.00025756185641512275}, {\"wallTime\": 1647712509.6529708, \"step\": 1670, \"value\": 0.0002569067873992026}, {\"wallTime\": 1647712509.8271515, \"step\": 1674, \"value\": 0.0002542902366258204}, {\"wallTime\": 1647712509.9623988, \"step\": 1677, \"value\": 0.0002523317525628954}, {\"wallTime\": 1647712510.043235, \"step\": 1679, \"value\": 0.0002510279882699251}, {\"wallTime\": 1647712510.0835862, \"step\": 1680, \"value\": 0.0002503766736481339}, {\"wallTime\": 1647712510.170747, \"step\": 1682, \"value\": 0.0002490752376616001}, {\"wallTime\": 1647712510.2936242, \"step\": 1685, \"value\": 0.00024712603772059083}, {\"wallTime\": 1647712510.3709729, \"step\": 1686, \"value\": 0.0002464770805090666}, {\"wallTime\": 1647712510.4116316, \"step\": 1687, \"value\": 0.0002458285598549992}, {\"wallTime\": 1647712510.4526615, \"step\": 1688, \"value\": 0.0002451804175507277}, {\"wallTime\": 1647712510.6565247, \"step\": 1693, \"value\": 0.00024194591969717294}, {\"wallTime\": 1647712510.6996524, \"step\": 1694, \"value\": 0.00024130026577040553}, {\"wallTime\": 1647712510.745577, \"step\": 1695, \"value\": 0.00024065501929726452}, {\"wallTime\": 1647712510.8328388, \"step\": 1697, \"value\": 0.00023936583602335304}, {\"wallTime\": 1647712510.9154677, \"step\": 1699, \"value\": 0.00023807835532352328}, {\"wallTime\": 1647712510.9555168, \"step\": 1700, \"value\": 0.00023743526253383607}, {\"wallTime\": 1647712511.0445547, \"step\": 1702, \"value\": 0.0002361503866268322}, {\"wallTime\": 1647712511.1234803, \"step\": 1704, \"value\": 0.00023486727150157094}, {\"wallTime\": 1647712511.2469194, \"step\": 1707, \"value\": 0.0002329459530301392}, {\"wallTime\": 1647712511.3296988, \"step\": 1709, \"value\": 0.0002316673198947683}, {\"wallTime\": 1647712511.370148, \"step\": 1710, \"value\": 0.0002310286945430562}, {\"wallTime\": 1647712511.4106996, \"step\": 1711, \"value\": 0.00023039052030071616}, {\"wallTime\": 1647712511.4466572, \"step\": 1712, \"value\": 0.00022975281171966344}, {\"wallTime\": 1647712511.705203, \"step\": 1718, \"value\": 0.00022593636822421104}, {\"wallTime\": 1647712511.7840726, \"step\": 1719, \"value\": 0.00022530194837599993}, {\"wallTime\": 1647712511.9176273, \"step\": 1722, \"value\": 0.00022340159921441227}, {\"wallTime\": 1647712511.96077, \"step\": 1723, \"value\": 0.00022276911477092654}, {\"wallTime\": 1647712512.0026293, \"step\": 1724, \"value\": 0.00022213712509255856}, {\"wallTime\": 1647712512.0476146, \"step\": 1725, \"value\": 0.00022150561562739313}, {\"wallTime\": 1647712512.335569, \"step\": 1730, \"value\": 0.00021835556253790855}, {\"wallTime\": 1647712512.5953202, \"step\": 1738, \"value\": 0.0002133418747689575}, {\"wallTime\": 1647712512.6272638, \"step\": 1739, \"value\": 0.00021271749574225396}, {\"wallTime\": 1647712512.749077, \"step\": 1743, \"value\": 0.00021022527653258294}, {\"wallTime\": 1647712512.8138108, \"step\": 1745, \"value\": 0.00020898235379718244}, {\"wallTime\": 1647712512.9360595, \"step\": 1748, \"value\": 0.00020712203695438802}, {\"wallTime\": 1647712512.9689577, \"step\": 1749, \"value\": 0.00020650302758440375}, {\"wallTime\": 1647712513.0025327, \"step\": 1750, \"value\": 0.00020588455663528293}, {\"wallTime\": 1647712513.0358398, \"step\": 1751, \"value\": 0.0002052666386589408}, {\"wallTime\": 1647712513.1022096, \"step\": 1753, \"value\": 0.00020403247617650777}, {\"wallTime\": 1647712513.1353223, \"step\": 1754, \"value\": 0.0002034162316704169}, {\"wallTime\": 1647712513.2356086, \"step\": 1757, \"value\": 0.00020157084509264678}, {\"wallTime\": 1647712513.4751701, \"step\": 1762, \"value\": 0.00019850659009534866}, {\"wallTime\": 1647712513.5287466, \"step\": 1763, \"value\": 0.00019789546786341816}, {\"wallTime\": 1647712513.6098113, \"step\": 1765, \"value\": 0.00019667495507746935}, {\"wallTime\": 1647712513.7224917, \"step\": 1768, \"value\": 0.00019484857330098748}, {\"wallTime\": 1647712513.9857562, \"step\": 1775, \"value\": 0.00019060783961322159}, {\"wallTime\": 1647712514.024413, \"step\": 1776, \"value\": 0.00019000442989636213}, {\"wallTime\": 1647712514.0686176, \"step\": 1777, \"value\": 0.00018940163135994226}, {\"wallTime\": 1647712514.1902435, \"step\": 1780, \"value\": 0.00018759691738523543}, {\"wallTime\": 1647712514.3489933, \"step\": 1784, \"value\": 0.0001851992856245488}, {\"wallTime\": 1647712514.3914816, \"step\": 1785, \"value\": 0.00018460143473930657}, {\"wallTime\": 1647712514.4364495, \"step\": 1786, \"value\": 0.00018400420958641917}, {\"wallTime\": 1647712514.5770667, \"step\": 1789, \"value\": 0.00018221636128146201}, {\"wallTime\": 1647712514.6195366, \"step\": 1790, \"value\": 0.00018162168271373957}, {\"wallTime\": 1647712514.7094054, \"step\": 1792, \"value\": 0.00018043424643110484}, {\"wallTime\": 1647712514.8028884, \"step\": 1794, \"value\": 0.00017924938583746552}, {\"wallTime\": 1647712514.8856268, \"step\": 1796, \"value\": 0.00017806711548473686}, {\"wallTime\": 1647712515.0505197, \"step\": 1800, \"value\": 0.00017571043281350285}, {\"wallTime\": 1647712515.1334834, \"step\": 1802, \"value\": 0.00017453604959882796}, {\"wallTime\": 1647712515.1750512, \"step\": 1803, \"value\": 0.00017394986934959888}, {\"wallTime\": 1647712515.4332266, \"step\": 1808, \"value\": 0.0001710289652692154}, {\"wallTime\": 1647712515.5252905, \"step\": 1810, \"value\": 0.0001698653504718095}, {\"wallTime\": 1647712515.7433298, \"step\": 1814, \"value\": 0.00016754631360527128}, {\"wallTime\": 1647712516.0219355, \"step\": 1818, \"value\": 0.00016523835074622184}, {\"wallTime\": 1647712516.088212, \"step\": 1819, \"value\": 0.00016466309898532927}, {\"wallTime\": 1647712516.2686768, \"step\": 1823, \"value\": 0.00016236914962064475}, {\"wallTime\": 1647712516.4002194, \"step\": 1826, \"value\": 0.0001606561418157071}, {\"wallTime\": 1647712516.4447982, \"step\": 1827, \"value\": 0.00016008656530175358}, {\"wallTime\": 1647712516.522644, \"step\": 1829, \"value\": 0.0001589495805092156}, {\"wallTime\": 1647712516.5656025, \"step\": 1830, \"value\": 0.0001583821722306311}, {\"wallTime\": 1647712516.6542554, \"step\": 1832, \"value\": 0.0001572495384607464}, {\"wallTime\": 1647712516.7032118, \"step\": 1833, \"value\": 0.00015668429841753095}, {\"wallTime\": 1647712516.7475517, \"step\": 1834, \"value\": 0.00015611980052199215}, {\"wallTime\": 1647712516.8387, \"step\": 1836, \"value\": 0.00015499301662202924}, {\"wallTime\": 1647712516.884319, \"step\": 1837, \"value\": 0.00015443071606568992}, {\"wallTime\": 1647712516.9298437, \"step\": 1838, \"value\": 0.00015386917220894247}, {\"wallTime\": 1647712517.2036135, \"step\": 1844, \"value\": 0.0001505155087215826}, {\"wallTime\": 1647712517.2491202, \"step\": 1845, \"value\": 0.00014995918900240213}, {\"wallTime\": 1647712517.3053238, \"step\": 1846, \"value\": 0.00014940362598281354}, {\"wallTime\": 1647712517.3521214, \"step\": 1847, \"value\": 0.00014884881966281682}, {\"wallTime\": 1647712517.3953762, \"step\": 1848, \"value\": 0.0001482947845943272}, {\"wallTime\": 1647712517.5334208, \"step\": 1851, \"value\": 0.00014663723413832486}, {\"wallTime\": 1647712517.6206825, \"step\": 1853, \"value\": 0.00014553603250533342}, {\"wallTime\": 1647712517.9282198, \"step\": 1860, \"value\": 0.00014170627400744706}, {\"wallTime\": 1647712518.150395, \"step\": 1864, \"value\": 0.00013953508459962904}, {\"wallTime\": 1647712518.1946192, \"step\": 1865, \"value\": 0.00013899427722208202}, {\"wallTime\": 1647712518.2411299, \"step\": 1866, \"value\": 0.00013845425564795732}, {\"wallTime\": 1647712518.286702, \"step\": 1867, \"value\": 0.0001379150344291702}, {\"wallTime\": 1647712518.4680052, \"step\": 1871, \"value\": 0.0001357661676593125}, {\"wallTime\": 1647712518.518444, \"step\": 1872, \"value\": 0.00013523096276912838}, {\"wallTime\": 1647712518.6645045, \"step\": 1874, \"value\": 0.0001341629831586033}, {\"wallTime\": 1647712518.6829643, \"step\": 1875, \"value\": 0.00013363022299017757}, {\"wallTime\": 1647712522.9762776, \"step\": 1877, \"value\": 0.00013256713282316923}, {\"wallTime\": 1647712523.1449752, \"step\": 1880, \"value\": 0.00013097866030875593}, {\"wallTime\": 1647712523.317816, \"step\": 1883, \"value\": 0.0001293976092711091}, {\"wallTime\": 1647712523.3747115, \"step\": 1884, \"value\": 0.0001288722560275346}, {\"wallTime\": 1647712523.4877675, \"step\": 1886, \"value\": 0.00012782405246980488}, {\"wallTime\": 1647712523.6063747, \"step\": 1888, \"value\": 0.00012677919585257769}, {\"wallTime\": 1647712523.716237, \"step\": 1890, \"value\": 0.00012573768617585301}, {\"wallTime\": 1647712523.998626, \"step\": 1895, \"value\": 0.00012314875493757427}, {\"wallTime\": 1647712524.2104886, \"step\": 1899, \"value\": 0.00012109297676943243}, {\"wallTime\": 1647712524.3456914, \"step\": 1902, \"value\": 0.00011956017988268286}, {\"wallTime\": 1647712524.5328436, \"step\": 1906, \"value\": 0.00011752860154956579}, {\"wallTime\": 1647712524.6197631, \"step\": 1908, \"value\": 0.00011651805107248947}, {\"wallTime\": 1647712524.662665, \"step\": 1909, \"value\": 0.00011601408914430067}, {\"wallTime\": 1647712524.7095103, \"step\": 1910, \"value\": 0.0001155110148829408}, {\"wallTime\": 1647712524.834901, \"step\": 1913, \"value\": 0.0001140070817200467}, {\"wallTime\": 1647712525.048789, \"step\": 1918, \"value\": 0.00011151830403832719}, {\"wallTime\": 1647712525.3364413, \"step\": 1924, \"value\": 0.00010856137669179589}, {\"wallTime\": 1647712525.381213, \"step\": 1925, \"value\": 0.00010807172657223418}, {\"wallTime\": 1647712525.4267685, \"step\": 1926, \"value\": 0.00010758297867141664}, {\"wallTime\": 1647712525.5659513, \"step\": 1929, \"value\": 0.00010612221376504749}, {\"wallTime\": 1647712525.7106953, \"step\": 1932, \"value\": 0.00010466969979461282}, {\"wallTime\": 1647712525.8304193, \"step\": 1935, \"value\": 0.00010322548041585833}, {\"wallTime\": 1647712525.876406, \"step\": 1936, \"value\": 0.00010274592932546511}, {\"wallTime\": 1647712526.0384293, \"step\": 1940, \"value\": 0.00010083701636176556}, {\"wallTime\": 1647712526.0767796, \"step\": 1941, \"value\": 0.00010036212188424543}, {\"wallTime\": 1647712526.1086078, \"step\": 1942, \"value\": 9.988816600525752e-05}, {\"wallTime\": 1647712526.2399855, \"step\": 1945, \"value\": 9.84719445114024e-05}, {\"wallTime\": 1647712526.3252273, \"step\": 1947, \"value\": 9.753251652000472e-05}, {\"wallTime\": 1647712526.4672282, \"step\": 1950, \"value\": 9.613049041945487e-05}, {\"wallTime\": 1647712526.5141113, \"step\": 1951, \"value\": 9.566504741087556e-05}, {\"wallTime\": 1647712526.6083777, \"step\": 1953, \"value\": 9.473703539697453e-05}, {\"wallTime\": 1647712526.7591074, \"step\": 1956, \"value\": 9.335220966022462e-05}, {\"wallTime\": 1647712526.9479678, \"step\": 1960, \"value\": 9.151926496997476e-05}, {\"wallTime\": 1647712526.992729, \"step\": 1961, \"value\": 9.106344805331901e-05}, {\"wallTime\": 1647712527.0463493, \"step\": 1962, \"value\": 9.060859883902594e-05}, {\"wallTime\": 1647712527.0778804, \"step\": 1963, \"value\": 9.01547318790108e-05}, {\"wallTime\": 1647712527.1225681, \"step\": 1964, \"value\": 8.970183262135834e-05}, {\"wallTime\": 1647712527.2454786, \"step\": 1966, \"value\": 8.879897359292954e-05}, {\"wallTime\": 1647712527.2879217, \"step\": 1967, \"value\": 8.834901382215321e-05}, {\"wallTime\": 1647712527.3262007, \"step\": 1968, \"value\": 8.79000363056548e-05}, {\"wallTime\": 1647712527.3688955, \"step\": 1969, \"value\": 8.745204104343429e-05}, {\"wallTime\": 1647712527.6398106, \"step\": 1975, \"value\": 8.478479867335409e-05}, {\"wallTime\": 1647712527.733521, \"step\": 1977, \"value\": 8.390366565436125e-05}, {\"wallTime\": 1647712527.8270044, \"step\": 1979, \"value\": 8.302651258418337e-05}, {\"wallTime\": 1647712527.8738003, \"step\": 1980, \"value\": 8.258943853434175e-05}, {\"wallTime\": 1647712527.9218495, \"step\": 1981, \"value\": 8.21533685666509e-05}, {\"wallTime\": 1647712527.9648364, \"step\": 1982, \"value\": 8.17183026811108e-05}, {\"wallTime\": 1647712528.0116582, \"step\": 1983, \"value\": 8.128424087772146e-05}, {\"wallTime\": 1647712528.1029544, \"step\": 1985, \"value\": 8.041914406931028e-05}, {\"wallTime\": 1647712528.1889029, \"step\": 1987, \"value\": 7.955809269333258e-05}, {\"wallTime\": 1647712528.2385488, \"step\": 1988, \"value\": 7.912908040452749e-05}, {\"wallTime\": 1647712528.3903499, \"step\": 1991, \"value\": 7.784816261846572e-05}, {\"wallTime\": 1647712528.449739, \"step\": 1992, \"value\": 7.742322486592457e-05}, {\"wallTime\": 1647712528.6049345, \"step\": 1995, \"value\": 7.615454524056986e-05}, {\"wallTime\": 1647712528.9181535, \"step\": 2002, \"value\": 7.323029421968386e-05}, {\"wallTime\": 1647712529.6284695, \"step\": 2016, \"value\": 6.75347400829196e-05}, {\"wallTime\": 1647712529.675197, \"step\": 2017, \"value\": 6.713579932693392e-05}, {\"wallTime\": 1647712529.860674, \"step\": 2021, \"value\": 6.555064464919269e-05}, {\"wallTime\": 1647712529.908551, \"step\": 2022, \"value\": 6.515701534226537e-05}, {\"wallTime\": 1647712529.9606504, \"step\": 2023, \"value\": 6.476445560110733e-05}, {\"wallTime\": 1647712530.0714216, \"step\": 2025, \"value\": 6.398253026418388e-05}, {\"wallTime\": 1647712530.121196, \"step\": 2026, \"value\": 6.35931792203337e-05}, {\"wallTime\": 1647712530.2174435, \"step\": 2028, \"value\": 6.281768582994118e-05}, {\"wallTime\": 1647712530.3673258, \"step\": 2031, \"value\": 6.166251841932535e-05}, {\"wallTime\": 1647712530.416883, \"step\": 2032, \"value\": 6.127962114987895e-05}, {\"wallTime\": 1647712530.5158315, \"step\": 2034, \"value\": 6.051706077414565e-05}, {\"wallTime\": 1647712530.5709977, \"step\": 2035, \"value\": 6.013740858179517e-05}, {\"wallTime\": 1647712530.624399, \"step\": 2036, \"value\": 5.975884050712921e-05}, {\"wallTime\": 1647712530.809781, \"step\": 2040, \"value\": 5.825544212711975e-05}, {\"wallTime\": 1647712530.8546996, \"step\": 2041, \"value\": 5.7882320106728e-05}, {\"wallTime\": 1647712530.9929252, \"step\": 2043, \"value\": 5.71393538848497e-05}, {\"wallTime\": 1647712531.0361476, \"step\": 2044, \"value\": 5.676951332134195e-05}, {\"wallTime\": 1647712531.1771016, \"step\": 2047, \"value\": 5.5666583648417145e-05}, {\"wallTime\": 1647712531.2237604, \"step\": 2048, \"value\": 5.530114140128717e-05}, {\"wallTime\": 1647712531.2731533, \"step\": 2049, \"value\": 5.493680146173574e-05}, {\"wallTime\": 1647712531.5276744, \"step\": 2054, \"value\": 5.3131683671381325e-05}, {\"wallTime\": 1647712531.5741715, \"step\": 2055, \"value\": 5.2773986681131646e-05}, {\"wallTime\": 1647712531.6166785, \"step\": 2056, \"value\": 5.241740291239694e-05}, {\"wallTime\": 1647712531.6648428, \"step\": 2057, \"value\": 5.20619323651772e-05}, {\"wallTime\": 1647712532.0953734, \"step\": 2067, \"value\": 4.85687269247137e-05}, {\"wallTime\": 1647712532.1254566, \"step\": 2068, \"value\": 4.8225585487671196e-05}, {\"wallTime\": 1647712532.203864, \"step\": 2070, \"value\": 4.754268593387678e-05}, {\"wallTime\": 1647712532.388744, \"step\": 2074, \"value\": 4.619047831511125e-05}, {\"wallTime\": 1647712532.5680726, \"step\": 2078, \"value\": 4.485644240048714e-05}, {\"wallTime\": 1647712532.6197772, \"step\": 2079, \"value\": 4.452578286873177e-05}, {\"wallTime\": 1647712532.8512428, \"step\": 2084, \"value\": 4.288964191800915e-05}, {\"wallTime\": 1647712532.9434774, \"step\": 2086, \"value\": 4.224321310175583e-05}, {\"wallTime\": 1647712532.994566, \"step\": 2087, \"value\": 4.1921721276594326e-05}, {\"wallTime\": 1647712533.1140654, \"step\": 2089, \"value\": 4.1282200982095674e-05}, {\"wallTime\": 1647712533.1606548, \"step\": 2090, \"value\": 4.0964168874779716e-05}, {\"wallTime\": 1647712533.207293, \"step\": 2091, \"value\": 4.0647293644724414e-05}, {\"wallTime\": 1647712533.3965943, \"step\": 2095, \"value\": 3.939136513508856e-05}, {\"wallTime\": 1647712533.4450917, \"step\": 2096, \"value\": 3.908028156729415e-05}, {\"wallTime\": 1647712533.4891467, \"step\": 2097, \"value\": 3.877036215271801e-05}, {\"wallTime\": 1647712533.5368464, \"step\": 2098, \"value\": 3.846160325338133e-05}, {\"wallTime\": 1647712533.6292982, \"step\": 2100, \"value\": 3.784758155234158e-05}, {\"wallTime\": 1647712533.8075323, \"step\": 2103, \"value\": 3.693530015880242e-05}, {\"wallTime\": 1647712533.8668604, \"step\": 2104, \"value\": 3.66335480066482e-05}, {\"wallTime\": 1647712533.9332168, \"step\": 2105, \"value\": 3.633296364569105e-05}, {\"wallTime\": 1647712533.995148, \"step\": 2106, \"value\": 3.603355071390979e-05}, {\"wallTime\": 1647712534.1617565, \"step\": 2109, \"value\": 3.514235868351534e-05}, {\"wallTime\": 1647712534.2119665, \"step\": 2110, \"value\": 3.484764602035284e-05}, {\"wallTime\": 1647712534.3638058, \"step\": 2114, \"value\": 3.368058241903782e-05}, {\"wallTime\": 1647712534.3958101, \"step\": 2115, \"value\": 3.3391766919521615e-05}, {\"wallTime\": 1647712534.5892103, \"step\": 2119, \"value\": 3.224834654247388e-05}, {\"wallTime\": 1647712534.652981, \"step\": 2120, \"value\": 3.196545731043443e-05}, {\"wallTime\": 1647712534.75189, \"step\": 2122, \"value\": 3.140324406558648e-05}, {\"wallTime\": 1647712534.8002715, \"step\": 2123, \"value\": 3.112392369075678e-05}, {\"wallTime\": 1647712534.8703954, \"step\": 2124, \"value\": 3.084579293499701e-05}, {\"wallTime\": 1647712534.9724581, \"step\": 2126, \"value\": 3.0293107556644827e-05}, {\"wallTime\": 1647712535.0174057, \"step\": 2127, \"value\": 3.001855657203123e-05}, {\"wallTime\": 1647712535.3414166, \"step\": 2134, \"value\": 2.8130218197475187e-05}, {\"wallTime\": 1647712535.4293962, \"step\": 2135, \"value\": 2.7865256924997084e-05}, {\"wallTime\": 1647712535.4719157, \"step\": 2136, \"value\": 2.7601498004514724e-05}, {\"wallTime\": 1647712535.605802, \"step\": 2139, \"value\": 2.6817449906957336e-05}, {\"wallTime\": 1647712535.8183434, \"step\": 2143, \"value\": 2.5788955099415034e-05}, {\"wallTime\": 1647712536.1239107, \"step\": 2149, \"value\": 2.4282549929921515e-05}, {\"wallTime\": 1647712536.170854, \"step\": 2150, \"value\": 2.4035734895733185e-05}, {\"wallTime\": 1647712536.3536503, \"step\": 2154, \"value\": 2.30606510740472e-05}, {\"wallTime\": 1647712536.399501, \"step\": 2155, \"value\": 2.2819931473350152e-05}, {\"wallTime\": 1647712536.5822296, \"step\": 2159, \"value\": 2.1869271222385578e-05}, {\"wallTime\": 1647712536.6283636, \"step\": 2160, \"value\": 2.1634665245073847e-05}, {\"wallTime\": 1647712536.6785285, \"step\": 2161, \"value\": 2.140128708560951e-05}, {\"wallTime\": 1647712536.7210317, \"step\": 2162, \"value\": 2.1169134925003164e-05}, {\"wallTime\": 1647712537.0419028, \"step\": 2169, \"value\": 1.957849417522084e-05}, {\"wallTime\": 1647712537.2968502, \"step\": 2173, \"value\": 1.8696673578233458e-05}, {\"wallTime\": 1647712537.4124253, \"step\": 2175, \"value\": 1.8263181118527427e-05}, {\"wallTime\": 1647712537.4706175, \"step\": 2176, \"value\": 1.804829116736073e-05}, {\"wallTime\": 1647712537.8867326, \"step\": 2183, \"value\": 1.657880056882277e-05}, {\"wallTime\": 1647712538.0407598, \"step\": 2185, \"value\": 1.6170135495485738e-05}, {\"wallTime\": 1647712538.1406305, \"step\": 2187, \"value\": 1.5766452634125017e-05}, {\"wallTime\": 1647712538.22567, \"step\": 2189, \"value\": 1.5367761079687625e-05}, {\"wallTime\": 1647712538.451808, \"step\": 2194, \"value\": 1.4392898265214171e-05}, {\"wallTime\": 1647712538.6836743, \"step\": 2199, \"value\": 1.3449347534333356e-05}, {\"wallTime\": 1647712538.7772481, \"step\": 2201, \"value\": 1.3080712960800156e-05}, {\"wallTime\": 1647712538.8234315, \"step\": 2202, \"value\": 1.2898281966045033e-05}, {\"wallTime\": 1647712538.8692844, \"step\": 2203, \"value\": 1.2717108802462462e-05}, {\"wallTime\": 1647712539.0249577, \"step\": 2206, \"value\": 1.2181141755718272e-05}, {\"wallTime\": 1647712539.158401, \"step\": 2209, \"value\": 1.16565206553787e-05}, {\"wallTime\": 1647712539.250612, \"step\": 2211, \"value\": 1.131308454205282e-05}, {\"wallTime\": 1647712539.2972324, \"step\": 2212, \"value\": 1.1143261872348376e-05}, {\"wallTime\": 1647712539.3867033, \"step\": 2214, \"value\": 1.0807410035340581e-05}, {\"wallTime\": 1647712539.4779322, \"step\": 2215, \"value\": 1.0641381777531933e-05}, {\"wallTime\": 1647712539.523025, \"step\": 2216, \"value\": 1.0476620445842855e-05}, {\"wallTime\": 1647712539.75521, \"step\": 2221, \"value\": 9.671825864643324e-06}, {\"wallTime\": 1647712539.8027945, \"step\": 2222, \"value\": 9.514673365629278e-06}, {\"wallTime\": 1647712539.849254, \"step\": 2223, \"value\": 9.358791430713609e-06}, {\"wallTime\": 1647712539.9452286, \"step\": 2225, \"value\": 9.050841072166804e-06}, {\"wallTime\": 1647712540.0569406, \"step\": 2227, \"value\": 8.747979336476419e-06}, {\"wallTime\": 1647712540.419005, \"step\": 2233, \"value\": 7.869965884310659e-06}, {\"wallTime\": 1647712540.550928, \"step\": 2236, \"value\": 7.448182259395253e-06}, {\"wallTime\": 1647712540.6733143, \"step\": 2239, \"value\": 7.037899649731116e-06}, {\"wallTime\": 1647712540.8445468, \"step\": 2242, \"value\": 6.639131697738776e-06}, {\"wallTime\": 1647712540.939349, \"step\": 2244, \"value\": 6.379690148605732e-06}, {\"wallTime\": 1647712541.0782118, \"step\": 2247, \"value\": 6.000142093398608e-06}, {\"wallTime\": 1647712541.4158032, \"step\": 2254, \"value\": 5.159462489245925e-06}, {\"wallTime\": 1647712541.564107, \"step\": 2257, \"value\": 4.818457000510534e-06}, {\"wallTime\": 1647712541.6070747, \"step\": 2258, \"value\": 4.707362677436322e-06}, {\"wallTime\": 1647712541.8785381, \"step\": 2264, \"value\": 4.067858753842302e-06}, {\"wallTime\": 1647712541.9943838, \"step\": 2266, \"value\": 3.865008693537675e-06}, {\"wallTime\": 1647712542.0408974, \"step\": 2267, \"value\": 3.7655202049791114e-06}, {\"wallTime\": 1647712542.343419, \"step\": 2274, \"value\": 3.1052784379426157e-06}, {\"wallTime\": 1647712542.4209757, \"step\": 2276, \"value\": 2.9282771265570773e-06}, {\"wallTime\": 1647712542.58553, \"step\": 2280, \"value\": 2.5898100375343347e-06}, {\"wallTime\": 1647712542.6315823, \"step\": 2281, \"value\": 2.5084318622248247e-06}, {\"wallTime\": 1647712542.8135939, \"step\": 2284, \"value\": 2.2720739707438042e-06}, {\"wallTime\": 1647712542.8708782, \"step\": 2285, \"value\": 2.1958812794764526e-06}, {\"wallTime\": 1647712543.1385343, \"step\": 2291, \"value\": 1.7659749573795125e-06}, {\"wallTime\": 1647712543.1804943, \"step\": 2292, \"value\": 1.6988677771223593e-06}, {\"wallTime\": 1647712543.2204492, \"step\": 2293, \"value\": 1.633059696359851e-06}, {\"wallTime\": 1647712543.556029, \"step\": 2300, \"value\": 1.2087929235349293e-06}, {\"wallTime\": 1647712543.8218114, \"step\": 2305, \"value\": 9.447629736314411e-07}, {\"wallTime\": 1647712543.8668058, \"step\": 2306, \"value\": 8.95861376193352e-07}, {\"wallTime\": 1647712543.9113142, \"step\": 2307, \"value\": 8.48261663577432e-07}, {\"wallTime\": 1647712543.9977043, \"step\": 2309, \"value\": 7.569686317765445e-07}, {\"wallTime\": 1647712544.1110373, \"step\": 2311, \"value\": 6.708851856274123e-07}, {\"wallTime\": 1647712544.2841976, \"step\": 2315, \"value\": 5.143520525052736e-07}, {\"wallTime\": 1647712544.324166, \"step\": 2316, \"value\": 4.784766360899084e-07}, {\"wallTime\": 1647712544.4600747, \"step\": 2319, \"value\": 3.7867144442316203e-07}, {\"wallTime\": 1647712544.6854708, \"step\": 2324, \"value\": 2.3840655671847344e-07}, {\"wallTime\": 1647712544.979247, \"step\": 2330, \"value\": 1.1313119330225163e-07}, {\"wallTime\": 1647712545.0640352, \"step\": 2332, \"value\": 8.181005028973232e-08}, {\"wallTime\": 1647712545.1735172, \"step\": 2335, \"value\": 4.46150103527998e-08}, {\"wallTime\": 1647712545.3984668, \"step\": 2340, \"value\": 8.723831435020202e-09}, {\"wallTime\": 1647712545.525485, \"step\": 2342, \"value\": 3.5031957335007746e-09}, {\"wallTime\": 1647712545.548762, \"step\": 2343, \"value\": 2.85061441118728e-09}, {\"wallTime\": 1647712545.5585341, \"step\": 2344, \"value\": 3.5031957335007746e-09}], \"tb_logs/exp000650-AdamW\": [{\"wallTime\": 1647705874.404185, \"step\": 3, \"value\": 1.0238458116873517e-06}, {\"wallTime\": 1647705874.4565077, \"step\": 4, \"value\": 1.0298955430698697e-06}, {\"wallTime\": 1647705874.7560742, \"step\": 10, \"value\": 1.0669522225725814e-06}, {\"wallTime\": 1647705875.0258338, \"step\": 14, \"value\": 1.092394541046815e-06}, {\"wallTime\": 1647705875.0718808, \"step\": 15, \"value\": 1.0988493386321352e-06}, {\"wallTime\": 1647705875.2411764, \"step\": 18, \"value\": 1.1184436061739689e-06}, {\"wallTime\": 1647705875.3170855, \"step\": 19, \"value\": 1.1250523357375641e-06}, {\"wallTime\": 1647705875.386799, \"step\": 20, \"value\": 1.131700059886498e-06}, {\"wallTime\": 1647705875.482664, \"step\": 22, \"value\": 1.145113742495596e-06}, {\"wallTime\": 1647705875.5235295, \"step\": 23, \"value\": 1.1518800420162734e-06}, {\"wallTime\": 1647705875.6471848, \"step\": 26, \"value\": 1.1724198429874377e-06}, {\"wallTime\": 1647705875.6894734, \"step\": 27, \"value\": 1.1793474641308421e-06}, {\"wallTime\": 1647705875.9540899, \"step\": 33, \"value\": 1.221781644744624e-06}, {\"wallTime\": 1647705876.082519, \"step\": 36, \"value\": 1.243567908204568e-06}, {\"wallTime\": 1647705876.1880631, \"step\": 38, \"value\": 1.2583075204020133e-06}, {\"wallTime\": 1647705876.2777667, \"step\": 40, \"value\": 1.273221755582199e-06}, {\"wallTime\": 1647705876.6285646, \"step\": 47, \"value\": 1.3268276006783708e-06}, {\"wallTime\": 1647705876.68258, \"step\": 48, \"value\": 1.3346676723813289e-06}, {\"wallTime\": 1647705876.7332036, \"step\": 49, \"value\": 1.3425540146272397e-06}, {\"wallTime\": 1647705876.8307054, \"step\": 51, \"value\": 1.358466874989972e-06}, {\"wallTime\": 1647705876.9781647, \"step\": 54, \"value\": 1.3826903568769922e-06}, {\"wallTime\": 1647705877.1403255, \"step\": 57, \"value\": 1.4073458487473545e-06}, {\"wallTime\": 1647705877.3378022, \"step\": 60, \"value\": 1.432441081306024e-06}, {\"wallTime\": 1647705877.4051878, \"step\": 61, \"value\": 1.440905180061236e-06}, {\"wallTime\": 1647705877.4706178, \"step\": 62, \"value\": 1.4494193010250456e-06}, {\"wallTime\": 1647705877.5298178, \"step\": 63, \"value\": 1.457983671571128e-06}, {\"wallTime\": 1647705877.6336486, \"step\": 65, \"value\": 1.4752646393390023e-06}, {\"wallTime\": 1647705877.676216, \"step\": 66, \"value\": 1.4839818049949827e-06}, {\"wallTime\": 1647705877.727788, \"step\": 67, \"value\": 1.492750470788451e-06}, {\"wallTime\": 1647705877.7862132, \"step\": 68, \"value\": 1.5015708640930825e-06}, {\"wallTime\": 1647705877.8951774, \"step\": 70, \"value\": 1.5193684248515638e-06}, {\"wallTime\": 1647705877.9581337, \"step\": 71, \"value\": 1.5283462744264398e-06}, {\"wallTime\": 1647705878.308596, \"step\": 77, \"value\": 1.5833377347007627e-06}, {\"wallTime\": 1647705878.4133391, \"step\": 79, \"value\": 1.6021044757508207e-06}, {\"wallTime\": 1647705878.4638433, \"step\": 80, \"value\": 1.611571065041062e-06}, {\"wallTime\": 1647705878.5622578, \"step\": 82, \"value\": 1.6306725001413724e-06}, {\"wallTime\": 1647705878.7062116, \"step\": 85, \"value\": 1.659749841564917e-06}, {\"wallTime\": 1647705878.905593, \"step\": 89, \"value\": 1.6993278677546186e-06}, {\"wallTime\": 1647705878.9658139, \"step\": 90, \"value\": 1.709369030322705e-06}, {\"wallTime\": 1647705879.5156658, \"step\": 99, \"value\": 1.8024512655756553e-06}, {\"wallTime\": 1647705879.6084137, \"step\": 100, \"value\": 1.8131017895939294e-06}, {\"wallTime\": 1647705879.8103142, \"step\": 103, \"value\": 1.8454321661920403e-06}, {\"wallTime\": 1647705879.9292932, \"step\": 106, \"value\": 1.8783390487442375e-06}, {\"wallTime\": 1647705879.9719415, \"step\": 107, \"value\": 1.8894379536504857e-06}, {\"wallTime\": 1647705880.0745661, \"step\": 109, \"value\": 1.911832669065916e-06}, {\"wallTime\": 1647705880.4532187, \"step\": 116, \"value\": 1.9923256786569254e-06}, {\"wallTime\": 1647705880.7394924, \"step\": 121, \"value\": 2.0518873498076573e-06}, {\"wallTime\": 1647705880.944799, \"step\": 125, \"value\": 2.100816118399962e-06}, {\"wallTime\": 1647705880.9956424, \"step\": 126, \"value\": 2.113229584210785e-06}, {\"wallTime\": 1647705881.0931375, \"step\": 128, \"value\": 2.1382770682976115e-06}, {\"wallTime\": 1647705881.1851144, \"step\": 130, \"value\": 2.1636212750308914e-06}, {\"wallTime\": 1647705881.2317493, \"step\": 131, \"value\": 2.176405814680038e-06}, {\"wallTime\": 1647705881.4917874, \"step\": 136, \"value\": 2.2414706108975224e-06}, {\"wallTime\": 1647705881.5592654, \"step\": 137, \"value\": 2.2547151274920907e-06}, {\"wallTime\": 1647705882.0082734, \"step\": 144, \"value\": 2.3496443191106664e-06}, {\"wallTime\": 1647705882.1412637, \"step\": 146, \"value\": 2.3774939563736552e-06}, {\"wallTime\": 1647705882.2081578, \"step\": 147, \"value\": 2.3915422389109153e-06}, {\"wallTime\": 1647705882.399702, \"step\": 150, \"value\": 2.4341870812349953e-06}, {\"wallTime\": 1647705882.7686837, \"step\": 157, \"value\": 2.5366723548359005e-06}, {\"wallTime\": 1647705882.8838468, \"step\": 159, \"value\": 2.5667386580607854e-06}, {\"wallTime\": 1647705882.9383519, \"step\": 160, \"value\": 2.5819051643338753e-06}, {\"wallTime\": 1647705883.0470328, \"step\": 162, \"value\": 2.6125076146854553e-06}, {\"wallTime\": 1647705883.1803973, \"step\": 164, \"value\": 2.6434727260493673e-06}, {\"wallTime\": 1647705883.510689, \"step\": 170, \"value\": 2.73858768196078e-06}, {\"wallTime\": 1647705883.5593982, \"step\": 171, \"value\": 2.7547696390683996e-06}, {\"wallTime\": 1647705883.6118937, \"step\": 172, \"value\": 2.771047093119705e-06}, {\"wallTime\": 1647705883.7660356, \"step\": 175, \"value\": 2.820459258146002e-06}, {\"wallTime\": 1647705883.8248005, \"step\": 176, \"value\": 2.8371250664349645e-06}, {\"wallTime\": 1647705883.8796515, \"step\": 177, \"value\": 2.8538891001517186e-06}, {\"wallTime\": 1647705883.9366555, \"step\": 178, \"value\": 2.8707524961646413e-06}, {\"wallTime\": 1647705884.0594625, \"step\": 180, \"value\": 2.90477851194737e-06}, {\"wallTime\": 1647705884.109931, \"step\": 181, \"value\": 2.9219422685855534e-06}, {\"wallTime\": 1647705884.2411795, \"step\": 184, \"value\": 2.9740451736870455e-06}, {\"wallTime\": 1647705884.2848835, \"step\": 185, \"value\": 2.9916182029410265e-06}, {\"wallTime\": 1647705884.328594, \"step\": 186, \"value\": 3.0092953693383606e-06}, {\"wallTime\": 1647705884.5261497, \"step\": 190, \"value\": 3.081054273934569e-06}, {\"wallTime\": 1647705884.5669887, \"step\": 191, \"value\": 3.0992598567536334e-06}, {\"wallTime\": 1647705884.609041, \"step\": 192, \"value\": 3.117572987321182e-06}, {\"wallTime\": 1647705884.735539, \"step\": 195, \"value\": 3.173164031977649e-06}, {\"wallTime\": 1647705884.8931704, \"step\": 199, \"value\": 3.248830580560025e-06}, {\"wallTime\": 1647705884.9339519, \"step\": 200, \"value\": 3.2680275126040215e-06}, {\"wallTime\": 1647705885.01503, \"step\": 202, \"value\": 3.3067624372051796e-06}, {\"wallTime\": 1647705885.0565836, \"step\": 203, \"value\": 3.3263015666307183e-06}, {\"wallTime\": 1647705885.1017296, \"step\": 204, \"value\": 3.345956201883382e-06}, {\"wallTime\": 1647705885.1487994, \"step\": 205, \"value\": 3.3657270250841975e-06}, {\"wallTime\": 1647705885.2384586, \"step\": 207, \"value\": 3.4056197364407126e-06}, {\"wallTime\": 1647705885.3293674, \"step\": 209, \"value\": 3.4459853850421496e-06}, {\"wallTime\": 1647705885.426468, \"step\": 211, \"value\": 3.486829427856719e-06}, {\"wallTime\": 1647705885.5161119, \"step\": 213, \"value\": 3.5281575492263073e-06}, {\"wallTime\": 1647705885.6096017, \"step\": 215, \"value\": 3.5699756608664757e-06}, {\"wallTime\": 1647705885.653908, \"step\": 216, \"value\": 3.591070026232046e-06}, {\"wallTime\": 1647705885.7821653, \"step\": 219, \"value\": 3.6551043649524217e-06}, {\"wallTime\": 1647705885.849834, \"step\": 220, \"value\": 3.676701908261748e-06}, {\"wallTime\": 1647705885.8878343, \"step\": 221, \"value\": 3.698427008202998e-06}, {\"wallTime\": 1647705885.9300992, \"step\": 222, \"value\": 3.7202805742708733e-06}, {\"wallTime\": 1647705886.007423, \"step\": 224, \"value\": 3.7643758332706057e-06}, {\"wallTime\": 1647705886.2595167, \"step\": 229, \"value\": 3.8769139791838825e-06}, {\"wallTime\": 1647705886.664859, \"step\": 237, \"value\": 4.0640143197379075e-06}, {\"wallTime\": 1647705886.7172399, \"step\": 238, \"value\": 4.088028163096169e-06}, {\"wallTime\": 1647705886.7610903, \"step\": 239, \"value\": 4.112183432880556e-06}, {\"wallTime\": 1647705886.9110065, \"step\": 241, \"value\": 4.160923708695918e-06}, {\"wallTime\": 1647705886.9510455, \"step\": 242, \"value\": 4.185510078968946e-06}, {\"wallTime\": 1647705887.0343661, \"step\": 244, \"value\": 4.235119376971852e-06}, {\"wallTime\": 1647705887.0744631, \"step\": 245, \"value\": 4.260144123691134e-06}, {\"wallTime\": 1647705887.1209342, \"step\": 246, \"value\": 4.285316663299454e-06}, {\"wallTime\": 1647705887.163007, \"step\": 247, \"value\": 4.310638360038865e-06}, {\"wallTime\": 1647705887.372803, \"step\": 252, \"value\": 4.439506938069826e-06}, {\"wallTime\": 1647705887.414551, \"step\": 253, \"value\": 4.4657394937530626e-06}, {\"wallTime\": 1647705887.4583685, \"step\": 254, \"value\": 4.492127118282951e-06}, {\"wallTime\": 1647705887.6558359, \"step\": 258, \"value\": 4.5992451305210125e-06}, {\"wallTime\": 1647705887.699476, \"step\": 259, \"value\": 4.626421741704689e-06}, {\"wallTime\": 1647705887.7439966, \"step\": 260, \"value\": 4.653758423955878e-06}, {\"wallTime\": 1647705887.8305204, \"step\": 262, \"value\": 4.708917913376354e-06}, {\"wallTime\": 1647705888.186258, \"step\": 270, \"value\": 4.936171080771601e-06}, {\"wallTime\": 1647705888.2308998, \"step\": 271, \"value\": 4.965338121110108e-06}, {\"wallTime\": 1647705888.3610878, \"step\": 274, \"value\": 5.053877885075053e-06}, {\"wallTime\": 1647705888.4390743, \"step\": 276, \"value\": 5.113779479870573e-06}, {\"wallTime\": 1647705888.5234458, \"step\": 278, \"value\": 5.174391390028177e-06}, {\"wallTime\": 1647705888.6022651, \"step\": 280, \"value\": 5.235721801000182e-06}, {\"wallTime\": 1647705888.6912863, \"step\": 282, \"value\": 5.297778898238903e-06}, {\"wallTime\": 1647705888.7356238, \"step\": 283, \"value\": 5.329082796379225e-06}, {\"wallTime\": 1647705888.8239782, \"step\": 285, \"value\": 5.392246293922653e-06}, {\"wallTime\": 1647705888.9127138, \"step\": 287, \"value\": 5.4561587603529915e-06}, {\"wallTime\": 1647705888.95708, \"step\": 288, \"value\": 5.488398528541438e-06}, {\"wallTime\": 1647705889.0484443, \"step\": 290, \"value\": 5.553450591833098e-06}, {\"wallTime\": 1647705889.2845416, \"step\": 295, \"value\": 5.719473847420886e-06}, {\"wallTime\": 1647705889.3288207, \"step\": 296, \"value\": 5.7532693062967155e-06}, {\"wallTime\": 1647705889.3752904, \"step\": 297, \"value\": 5.787264854006935e-06}, {\"wallTime\": 1647705889.4194005, \"step\": 298, \"value\": 5.821460945298895e-06}, {\"wallTime\": 1647705889.750547, \"step\": 306, \"value\": 6.102405677665956e-06}, {\"wallTime\": 1647705889.8329732, \"step\": 308, \"value\": 6.174735062813852e-06}, {\"wallTime\": 1647705889.8754528, \"step\": 309, \"value\": 6.211220807017526e-06}, {\"wallTime\": 1647705890.011034, \"step\": 312, \"value\": 6.3219763433153275e-06}, {\"wallTime\": 1647705890.188778, \"step\": 316, \"value\": 6.4727287281129975e-06}, {\"wallTime\": 1647705890.2905188, \"step\": 318, \"value\": 6.549447789439e-06}, {\"wallTime\": 1647705890.3401592, \"step\": 319, \"value\": 6.58814769849414e-06}, {\"wallTime\": 1647705890.4793658, \"step\": 322, \"value\": 6.705624400638044e-06}, {\"wallTime\": 1647705890.5706604, \"step\": 324, \"value\": 6.785103778383927e-06}, {\"wallTime\": 1647705890.776509, \"step\": 329, \"value\": 6.987948381720344e-06}, {\"wallTime\": 1647705890.8566737, \"step\": 331, \"value\": 7.07077379047405e-06}, {\"wallTime\": 1647705890.8967102, \"step\": 332, \"value\": 7.1125541580840945e-06}, {\"wallTime\": 1647705891.1235838, \"step\": 337, \"value\": 7.325187652895693e-06}, {\"wallTime\": 1647705891.1683586, \"step\": 338, \"value\": 7.368471415247768e-06}, {\"wallTime\": 1647705891.257031, \"step\": 340, \"value\": 7.455807008227566e-06}, {\"wallTime\": 1647705891.390421, \"step\": 343, \"value\": 7.58875557949068e-06}, {\"wallTime\": 1647705891.4796252, \"step\": 345, \"value\": 7.67870278650662e-06}, {\"wallTime\": 1647705891.52408, \"step\": 346, \"value\": 7.724074748693965e-06}, {\"wallTime\": 1647705891.6997437, \"step\": 350, \"value\": 7.908261977718212e-06}, {\"wallTime\": 1647705891.793296, \"step\": 352, \"value\": 8.001995411177631e-06}, {\"wallTime\": 1647705891.8375967, \"step\": 353, \"value\": 8.049278221733402e-06}, {\"wallTime\": 1647705891.87969, \"step\": 354, \"value\": 8.096840247162618e-06}, {\"wallTime\": 1647705892.0422356, \"step\": 358, \"value\": 8.289915967907291e-06}, {\"wallTime\": 1647705892.1954057, \"step\": 362, \"value\": 8.487594641337637e-06}, {\"wallTime\": 1647705892.2409475, \"step\": 363, \"value\": 8.537746907677501e-06}, {\"wallTime\": 1647705892.2815444, \"step\": 364, \"value\": 8.588195669290144e-06}, {\"wallTime\": 1647705892.323675, \"step\": 365, \"value\": 8.638941835670266e-06}, {\"wallTime\": 1647705892.3681974, \"step\": 366, \"value\": 8.689988135301974e-06}, {\"wallTime\": 1647705892.4128997, \"step\": 367, \"value\": 8.74133638717467e-06}, {\"wallTime\": 1647705892.7189105, \"step\": 374, \"value\": 9.109368875215296e-06}, {\"wallTime\": 1647705892.8628762, \"step\": 377, \"value\": 9.271802809962537e-06}, {\"wallTime\": 1647705892.9065087, \"step\": 378, \"value\": 9.326588042313233e-06}, {\"wallTime\": 1647705893.2520237, \"step\": 386, \"value\": 9.776691513252445e-06}, {\"wallTime\": 1647705893.416077, \"step\": 390, \"value\": 1.0009824109147303e-05}, {\"wallTime\": 1647705893.4542892, \"step\": 391, \"value\": 1.0068970368593e-05}, {\"wallTime\": 1647705893.4931448, \"step\": 392, \"value\": 1.012846678349888e-05}, {\"wallTime\": 1647705893.5338593, \"step\": 393, \"value\": 1.0188314263359644e-05}, {\"wallTime\": 1647705893.574664, \"step\": 394, \"value\": 1.0248515536659397e-05}, {\"wallTime\": 1647705893.693366, \"step\": 397, \"value\": 1.0431263035570737e-05}, {\"wallTime\": 1647705893.9073532, \"step\": 402, \"value\": 1.0743110578914639e-05}, {\"wallTime\": 1647705893.9928071, \"step\": 404, \"value\": 1.087044529413106e-05}, {\"wallTime\": 1647705894.1637762, \"step\": 408, \"value\": 1.112965946958866e-05}, {\"wallTime\": 1647705894.2063417, \"step\": 409, \"value\": 1.1195423212484457e-05}, {\"wallTime\": 1647705894.382894, \"step\": 413, \"value\": 1.1462386282801162e-05}, {\"wallTime\": 1647705894.4268565, \"step\": 414, \"value\": 1.1530116353242192e-05}, {\"wallTime\": 1647705894.47115, \"step\": 415, \"value\": 1.1598246601352002e-05}, {\"wallTime\": 1647705894.6043901, \"step\": 418, \"value\": 1.1805061149061657e-05}, {\"wallTime\": 1647705894.733266, \"step\": 421, \"value\": 1.2015563697787002e-05}, {\"wallTime\": 1647705894.775328, \"step\": 422, \"value\": 1.2086561582691502e-05}, {\"wallTime\": 1647705894.901789, \"step\": 425, \"value\": 1.2302083632675931e-05}, {\"wallTime\": 1647705894.9439774, \"step\": 426, \"value\": 1.2374774996715132e-05}, {\"wallTime\": 1647705895.1286879, \"step\": 430, \"value\": 1.266986146220006e-05}, {\"wallTime\": 1647705895.1723847, \"step\": 431, \"value\": 1.2744725609081797e-05}, {\"wallTime\": 1647705895.3505502, \"step\": 435, \"value\": 1.3048633263679221e-05}, {\"wallTime\": 1647705895.3949301, \"step\": 436, \"value\": 1.3125735677022021e-05}, {\"wallTime\": 1647705895.4395814, \"step\": 437, \"value\": 1.3203294656705111e-05}, {\"wallTime\": 1647705895.528598, \"step\": 439, \"value\": 1.3359787772060372e-05}, {\"wallTime\": 1647705895.5729234, \"step\": 440, \"value\": 1.3438729183690157e-05}, {\"wallTime\": 1647705895.6172595, \"step\": 441, \"value\": 1.3518137166101951e-05}, {\"wallTime\": 1647705895.7041273, \"step\": 443, \"value\": 1.3678362847713288e-05}, {\"wallTime\": 1647705895.7496953, \"step\": 444, \"value\": 1.3759186003881041e-05}, {\"wallTime\": 1647705895.7876472, \"step\": 445, \"value\": 1.3840487554261927e-05}, {\"wallTime\": 1647705895.831847, \"step\": 446, \"value\": 1.3922269317845348e-05}, {\"wallTime\": 1647705896.000089, \"step\": 450, \"value\": 1.425425671186531e-05}, {\"wallTime\": 1647705896.044384, \"step\": 451, \"value\": 1.4338483197207097e-05}, {\"wallTime\": 1647705896.086526, \"step\": 452, \"value\": 1.4423207176150754e-05}, {\"wallTime\": 1647705896.1285577, \"step\": 453, \"value\": 1.4508431377180386e-05}, {\"wallTime\": 1647705896.1680615, \"step\": 454, \"value\": 1.4594160347769503e-05}, {\"wallTime\": 1647705896.2562735, \"step\": 456, \"value\": 1.4767139873583801e-05}, {\"wallTime\": 1647705896.3451178, \"step\": 458, \"value\": 1.4942169400455896e-05}, {\"wallTime\": 1647705896.4329777, \"step\": 460, \"value\": 1.5119273484742735e-05}, {\"wallTime\": 1647705896.4772947, \"step\": 461, \"value\": 1.5208611330308486e-05}, {\"wallTime\": 1647705896.645689, \"step\": 465, \"value\": 1.557127143314574e-05}, {\"wallTime\": 1647705896.7276683, \"step\": 466, \"value\": 1.56632813741453e-05}, {\"wallTime\": 1647705896.8007288, \"step\": 468, \"value\": 1.5848931070649996e-05}, {\"wallTime\": 1647705901.0054665, \"step\": 470, \"value\": 1.6036783563322388e-05}, {\"wallTime\": 1647705901.184626, \"step\": 474, \"value\": 1.641919334360864e-05}, {\"wallTime\": 1647705901.2294903, \"step\": 475, \"value\": 1.6516212781425565e-05}, {\"wallTime\": 1647705901.3637815, \"step\": 478, \"value\": 1.6810721717774868e-05}, {\"wallTime\": 1647705901.4081771, \"step\": 479, \"value\": 1.69100530911237e-05}, {\"wallTime\": 1647705901.4526052, \"step\": 480, \"value\": 1.700997381703928e-05}, {\"wallTime\": 1647705901.4971852, \"step\": 481, \"value\": 1.7110482076532207e-05}, {\"wallTime\": 1647705901.586154, \"step\": 483, \"value\": 1.7313286662101746e-05}, {\"wallTime\": 1647705901.6304579, \"step\": 484, \"value\": 1.7415588445146568e-05}, {\"wallTime\": 1647705901.767596, \"step\": 487, \"value\": 1.7726135411066934e-05}, {\"wallTime\": 1647705901.8163657, \"step\": 488, \"value\": 1.7830876458901912e-05}, {\"wallTime\": 1647705901.8554614, \"step\": 489, \"value\": 1.79362377821235e-05}, {\"wallTime\": 1647705901.9438925, \"step\": 491, \"value\": 1.8148828530684114e-05}, {\"wallTime\": 1647705902.0829628, \"step\": 494, \"value\": 1.8472450392437167e-05}, {\"wallTime\": 1647705902.2525277, \"step\": 498, \"value\": 1.891294050437864e-05}, {\"wallTime\": 1647705902.4348724, \"step\": 502, \"value\": 1.9363935280125588e-05}, {\"wallTime\": 1647705902.479146, \"step\": 503, \"value\": 1.947835335158743e-05}, {\"wallTime\": 1647705902.6159875, \"step\": 506, \"value\": 1.9825682102236897e-05}, {\"wallTime\": 1647705902.7499995, \"step\": 509, \"value\": 2.0179204511805438e-05}, {\"wallTime\": 1647705902.7972548, \"step\": 510, \"value\": 2.0298441086197272e-05}, {\"wallTime\": 1647705902.8421488, \"step\": 511, \"value\": 2.041838160948828e-05}, {\"wallTime\": 1647705902.8920808, \"step\": 512, \"value\": 2.0539031538646668e-05}, {\"wallTime\": 1647705902.940838, \"step\": 513, \"value\": 2.0660394511651248e-05}, {\"wallTime\": 1647705902.998791, \"step\": 514, \"value\": 2.078247234749142e-05}, {\"wallTime\": 1647705903.1812968, \"step\": 517, \"value\": 2.115305687766522e-05}, {\"wallTime\": 1647705903.2384377, \"step\": 518, \"value\": 2.127804691554047e-05}, {\"wallTime\": 1647705903.2892163, \"step\": 519, \"value\": 2.1403777282102965e-05}, {\"wallTime\": 1647705903.338691, \"step\": 520, \"value\": 2.15302479773527e-05}, {\"wallTime\": 1647705903.4702203, \"step\": 523, \"value\": 2.1914165699854493e-05}, {\"wallTime\": 1647705903.866434, \"step\": 530, \"value\": 2.283680805703625e-05}, {\"wallTime\": 1647705904.017201, \"step\": 533, \"value\": 2.3244023395818658e-05}, {\"wallTime\": 1647705904.0705757, \"step\": 534, \"value\": 2.3381369828712195e-05}, {\"wallTime\": 1647705904.1904027, \"step\": 536, \"value\": 2.365850014030002e-05}, {\"wallTime\": 1647705904.2493982, \"step\": 537, \"value\": 2.379829493293073e-05}, {\"wallTime\": 1647705904.3107433, \"step\": 538, \"value\": 2.393891554675065e-05}, {\"wallTime\": 1647705904.354839, \"step\": 539, \"value\": 2.408036743872799e-05}, {\"wallTime\": 1647705904.4014559, \"step\": 540, \"value\": 2.422265606583096e-05}, {\"wallTime\": 1647705904.562369, \"step\": 542, \"value\": 2.4509758077329025e-05}, {\"wallTime\": 1647705904.6693466, \"step\": 544, \"value\": 2.4800263418001123e-05}, {\"wallTime\": 1647705904.779027, \"step\": 546, \"value\": 2.5094212105614133e-05}, {\"wallTime\": 1647705904.8334074, \"step\": 547, \"value\": 2.524249066482298e-05}, {\"wallTime\": 1647705904.9918885, \"step\": 550, \"value\": 2.569260323070921e-05}, {\"wallTime\": 1647705905.080141, \"step\": 552, \"value\": 2.5997127522714436e-05}, {\"wallTime\": 1647705905.2127616, \"step\": 555, \"value\": 2.6460696972208098e-05}, {\"wallTime\": 1647705905.2575955, \"step\": 556, \"value\": 2.6617050025379285e-05}, {\"wallTime\": 1647705905.542074, \"step\": 562, \"value\": 2.75747588602826e-05}, {\"wallTime\": 1647705905.5842216, \"step\": 563, \"value\": 2.773769483610522e-05}, {\"wallTime\": 1647705905.6264741, \"step\": 564, \"value\": 2.7901593057322316e-05}, {\"wallTime\": 1647705905.787061, \"step\": 568, \"value\": 2.856692844943609e-05}, {\"wallTime\": 1647705905.9190862, \"step\": 571, \"value\": 2.9076320060994476e-05}, {\"wallTime\": 1647705906.0140412, \"step\": 573, \"value\": 2.9420951250358485e-05}, {\"wallTime\": 1647705906.1578555, \"step\": 576, \"value\": 2.994557326019276e-05}, {\"wallTime\": 1647705906.3353286, \"step\": 580, \"value\": 3.0659648473374546e-05}, {\"wallTime\": 1647705906.5369263, \"step\": 584, \"value\": 3.1390751246362925e-05}, {\"wallTime\": 1647705906.5812976, \"step\": 585, \"value\": 3.1576233595842496e-05}, {\"wallTime\": 1647705906.6238122, \"step\": 586, \"value\": 3.176281461492181e-05}, {\"wallTime\": 1647705906.7118316, \"step\": 588, \"value\": 3.213928721379489e-05}, {\"wallTime\": 1647705906.794504, \"step\": 590, \"value\": 3.252022361266427e-05}, {\"wallTime\": 1647705906.8390813, \"step\": 591, \"value\": 3.271238165325485e-05}, {\"wallTime\": 1647705906.881423, \"step\": 592, \"value\": 3.290567474323325e-05}, {\"wallTime\": 1647705906.9615836, \"step\": 594, \"value\": 3.329569153720513e-05}, {\"wallTime\": 1647705907.044224, \"step\": 596, \"value\": 3.369033584021963e-05}, {\"wallTime\": 1647705907.0884736, \"step\": 597, \"value\": 3.388940604054369e-05}, {\"wallTime\": 1647705907.1295075, \"step\": 598, \"value\": 3.4089654946001247e-05}, {\"wallTime\": 1647705907.177741, \"step\": 599, \"value\": 3.429108619457111e-05}, {\"wallTime\": 1647705907.2648456, \"step\": 601, \"value\": 3.46975248248782e-05}, {\"wallTime\": 1647705907.3064013, \"step\": 602, \"value\": 3.490255039650947e-05}, {\"wallTime\": 1647705907.350817, \"step\": 603, \"value\": 3.510878377710469e-05}, {\"wallTime\": 1647705907.439606, \"step\": 605, \"value\": 3.5524913982953876e-05}, {\"wallTime\": 1647705907.577232, \"step\": 608, \"value\": 3.615838068071753e-05}, {\"wallTime\": 1647705907.6615071, \"step\": 610, \"value\": 3.658695277408697e-05}, {\"wallTime\": 1647705907.799701, \"step\": 613, \"value\": 3.723935515154153e-05}, {\"wallTime\": 1647705907.8658834, \"step\": 614, \"value\": 3.7459394661709666e-05}, {\"wallTime\": 1647705907.9571016, \"step\": 616, \"value\": 3.790338814724237e-05}, {\"wallTime\": 1647705908.0459273, \"step\": 618, \"value\": 3.835264578810893e-05}, {\"wallTime\": 1647705908.12761, \"step\": 620, \"value\": 3.880722579197027e-05}, {\"wallTime\": 1647705908.2144978, \"step\": 622, \"value\": 3.926719364244491e-05}, {\"wallTime\": 1647705908.2602549, \"step\": 623, \"value\": 3.9499216654803604e-05}, {\"wallTime\": 1647705908.3958614, \"step\": 626, \"value\": 4.0203547541750595e-05}, {\"wallTime\": 1647705908.4873376, \"step\": 628, \"value\": 4.06800681957975e-05}, {\"wallTime\": 1647705908.530671, \"step\": 629, \"value\": 4.0920440369518474e-05}, {\"wallTime\": 1647705908.712395, \"step\": 633, \"value\": 4.189621904515661e-05}, {\"wallTime\": 1647705908.9026089, \"step\": 637, \"value\": 4.289526623324491e-05}, {\"wallTime\": 1647705909.0265856, \"step\": 640, \"value\": 4.366015491541475e-05}, {\"wallTime\": 1647705909.070755, \"step\": 641, \"value\": 4.391813854454085e-05}, {\"wallTime\": 1647705909.1129546, \"step\": 642, \"value\": 4.4177646486787125e-05}, {\"wallTime\": 1647705909.1550612, \"step\": 643, \"value\": 4.4438686018111184e-05}, {\"wallTime\": 1647705909.1992826, \"step\": 644, \"value\": 4.470126805244945e-05}, {\"wallTime\": 1647705909.4273672, \"step\": 649, \"value\": 4.6037635911488906e-05}, {\"wallTime\": 1647705909.5137985, \"step\": 651, \"value\": 4.6583303628722206e-05}, {\"wallTime\": 1647705909.558347, \"step\": 652, \"value\": 4.685855674324557e-05}, {\"wallTime\": 1647705909.6029875, \"step\": 653, \"value\": 4.7135439672274515e-05}, {\"wallTime\": 1647705909.6467538, \"step\": 654, \"value\": 4.741395605378784e-05}, {\"wallTime\": 1647705909.6910884, \"step\": 655, \"value\": 4.7694116801721975e-05}, {\"wallTime\": 1647705909.8229196, \"step\": 658, \"value\": 4.8544578021392226e-05}, {\"wallTime\": 1647705909.912294, \"step\": 660, \"value\": 4.911996074952185e-05}, {\"wallTime\": 1647705910.2210815, \"step\": 667, \"value\": 5.1188031648052856e-05}, {\"wallTime\": 1647705910.3477423, \"step\": 670, \"value\": 5.210079325479455e-05}, {\"wallTime\": 1647705910.556211, \"step\": 675, \"value\": 5.3658375691156834e-05}, {\"wallTime\": 1647705910.6011488, \"step\": 676, \"value\": 5.39754364581313e-05}, {\"wallTime\": 1647705910.6452396, \"step\": 677, \"value\": 5.4294370784191415e-05}, {\"wallTime\": 1647705910.779659, \"step\": 680, \"value\": 5.526252061827108e-05}, {\"wallTime\": 1647705910.8697364, \"step\": 682, \"value\": 5.5917527788551524e-05}, {\"wallTime\": 1647705910.9385555, \"step\": 683, \"value\": 5.6247939937748015e-05}, {\"wallTime\": 1647705910.9828117, \"step\": 684, \"value\": 5.65802984056063e-05}, {\"wallTime\": 1647705911.117409, \"step\": 687, \"value\": 5.758921543019824e-05}, {\"wallTime\": 1647705911.3409123, \"step\": 692, \"value\": 5.931087434873916e-05}, {\"wallTime\": 1647705911.4290872, \"step\": 694, \"value\": 6.0013866459485143e-05}, {\"wallTime\": 1647705911.5161192, \"step\": 696, \"value\": 6.0725189541699365e-05}, {\"wallTime\": 1647705911.5629647, \"step\": 697, \"value\": 6.108400702942163e-05}, {\"wallTime\": 1647705911.6625617, \"step\": 699, \"value\": 6.180801574373618e-05}, {\"wallTime\": 1647705911.8241723, \"step\": 702, \"value\": 6.291014142334461e-05}, {\"wallTime\": 1647705911.8666778, \"step\": 703, \"value\": 6.328187009785324e-05}, {\"wallTime\": 1647705911.9727087, \"step\": 705, \"value\": 6.403192674042657e-05}, {\"wallTime\": 1647705912.1515944, \"step\": 709, \"value\": 6.555882282555103e-05}, {\"wallTime\": 1647705912.1942246, \"step\": 710, \"value\": 6.594620208488777e-05}, {\"wallTime\": 1647705912.2780874, \"step\": 712, \"value\": 6.672783638350666e-05}, {\"wallTime\": 1647705912.4168139, \"step\": 715, \"value\": 6.791769556002691e-05}, {\"wallTime\": 1647705912.504079, \"step\": 717, \"value\": 6.872270023450255e-05}, {\"wallTime\": 1647705912.6311913, \"step\": 720, \"value\": 6.994813156779855e-05}, {\"wallTime\": 1647705912.6786633, \"step\": 721, \"value\": 7.036144234007224e-05}, {\"wallTime\": 1647705912.7639143, \"step\": 723, \"value\": 7.119541260180995e-05}, {\"wallTime\": 1647705912.8509972, \"step\": 725, \"value\": 7.203927088994533e-05}, {\"wallTime\": 1647705912.9121637, \"step\": 726, \"value\": 7.24649362382479e-05}, {\"wallTime\": 1647705912.9930923, \"step\": 728, \"value\": 7.332384120672941e-05}, {\"wallTime\": 1647705913.0363255, \"step\": 729, \"value\": 7.375710265478119e-05}, {\"wallTime\": 1647705913.1231427, \"step\": 731, \"value\": 7.463131623808295e-05}, {\"wallTime\": 1647705913.1766303, \"step\": 732, \"value\": 7.507230475312099e-05}, {\"wallTime\": 1647705913.2487726, \"step\": 733, \"value\": 7.551589806098491e-05}, {\"wallTime\": 1647705913.4850779, \"step\": 738, \"value\": 7.777348218951374e-05}, {\"wallTime\": 1647705913.656392, \"step\": 742, \"value\": 7.962805102579296e-05}, {\"wallTime\": 1647705913.701705, \"step\": 743, \"value\": 8.009856537682936e-05}, {\"wallTime\": 1647705913.744095, \"step\": 744, \"value\": 8.057185914367437e-05}, {\"wallTime\": 1647705914.2063098, \"step\": 755, \"value\": 8.596632687840611e-05}, {\"wallTime\": 1647705914.2512212, \"step\": 756, \"value\": 8.647429058328271e-05}, {\"wallTime\": 1647705914.3442771, \"step\": 758, \"value\": 8.74992401804775e-05}, {\"wallTime\": 1647705914.56765, \"step\": 763, \"value\": 9.011507063405588e-05}, {\"wallTime\": 1647705914.6123507, \"step\": 764, \"value\": 9.064755431609228e-05}, {\"wallTime\": 1647705914.6559494, \"step\": 765, \"value\": 9.11831739358604e-05}, {\"wallTime\": 1647705914.7908828, \"step\": 768, \"value\": 9.280911035602912e-05}, {\"wallTime\": 1647705914.8352432, \"step\": 769, \"value\": 9.335750655736774e-05}, {\"wallTime\": 1647705914.993216, \"step\": 772, \"value\": 9.502221655566245e-05}, {\"wallTime\": 1647705915.1251464, \"step\": 775, \"value\": 9.671661246102303e-05}, {\"wallTime\": 1647705915.1696904, \"step\": 776, \"value\": 9.728809527587146e-05}, {\"wallTime\": 1647705915.252256, \"step\": 778, \"value\": 9.84412181423977e-05}, {\"wallTime\": 1647705915.3056417, \"step\": 779, \"value\": 9.90228945738636e-05}, {\"wallTime\": 1647705915.354363, \"step\": 780, \"value\": 9.960800525732338e-05}, {\"wallTime\": 1647705915.397142, \"step\": 781, \"value\": 0.00010019657202064991}, {\"wallTime\": 1647705915.4420066, \"step\": 782, \"value\": 0.00010078862396767363}, {\"wallTime\": 1647705915.7034485, \"step\": 788, \"value\": 0.00010441510676173493}, {\"wallTime\": 1647705915.839395, \"step\": 791, \"value\": 0.0001062769879354164}, {\"wallTime\": 1647705915.9292467, \"step\": 793, \"value\": 0.00010753665264928713}, {\"wallTime\": 1647705916.0241075, \"step\": 795, \"value\": 0.00010881124035222456}, {\"wallTime\": 1647705916.2089143, \"step\": 799, \"value\": 0.00011140593414893374}, {\"wallTime\": 1647705916.425648, \"step\": 804, \"value\": 0.00011473647464299574}, {\"wallTime\": 1647705916.46809, \"step\": 805, \"value\": 0.00011541443382157013}, {\"wallTime\": 1647705916.5097413, \"step\": 806, \"value\": 0.00011609640205278993}, {\"wallTime\": 1647705916.5560305, \"step\": 807, \"value\": 0.00011678240116452798}, {\"wallTime\": 1647705916.68577, \"step\": 810, \"value\": 0.00011886480933753774}, {\"wallTime\": 1647705917.039954, \"step\": 818, \"value\": 0.00012460123980417848}, {\"wallTime\": 1647705917.0810513, \"step\": 819, \"value\": 0.0001253374939551577}, {\"wallTime\": 1647705917.162604, \"step\": 821, \"value\": 0.00012682308442890644}, {\"wallTime\": 1647705917.2971435, \"step\": 823, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647705917.456894, \"step\": 826, \"value\": 0.0001306145277339965}, {\"wallTime\": 1647705917.4972076, \"step\": 827, \"value\": 0.00013138630311004817}, {\"wallTime\": 1647705917.5372279, \"step\": 828, \"value\": 0.00013216264778748155}, {\"wallTime\": 1647705917.695091, \"step\": 832, \"value\": 0.00013531417062040418}, {\"wallTime\": 1647705917.730234, \"step\": 833, \"value\": 0.0001361137256026268}, {\"wallTime\": 1647705917.8108685, \"step\": 835, \"value\": 0.00013772703823633492}, {\"wallTime\": 1647705917.8790705, \"step\": 836, \"value\": 0.0001385408395435661}, {\"wallTime\": 1647705917.9230435, \"step\": 837, \"value\": 0.00013935945753473788}, {\"wallTime\": 1647705918.0108948, \"step\": 839, \"value\": 0.0001410112454323098}, {\"wallTime\": 1647705918.0571468, \"step\": 840, \"value\": 0.00014184445899445564}, {\"wallTime\": 1647705918.1956646, \"step\": 843, \"value\": 0.00014437375648412853}, {\"wallTime\": 1647705918.2878308, \"step\": 845, \"value\": 0.0001460849744034931}, {\"wallTime\": 1647705918.5143752, \"step\": 850, \"value\": 0.0001504522660980001}, {\"wallTime\": 1647705918.556604, \"step\": 851, \"value\": 0.00015134125715121627}, {\"wallTime\": 1647705918.6802247, \"step\": 854, \"value\": 0.0001540399098303169}, {\"wallTime\": 1647705918.8088284, \"step\": 857, \"value\": 0.00015678668569307774}, {\"wallTime\": 1647705918.9294188, \"step\": 860, \"value\": 0.00015958242875058204}, {\"wallTime\": 1647705919.0164242, \"step\": 862, \"value\": 0.0001614739012438804}, {\"wallTime\": 1647705919.164281, \"step\": 865, \"value\": 0.00016435323050245643}, {\"wallTime\": 1647705919.2109873, \"step\": 866, \"value\": 0.00016532436711713672}, {\"wallTime\": 1647705919.4106596, \"step\": 870, \"value\": 0.00016926665557548404}, {\"wallTime\": 1647705919.4676511, \"step\": 871, \"value\": 0.00017026683781296015}, {\"wallTime\": 1647705920.1141486, \"step\": 884, \"value\": 0.0001838198077166453}, {\"wallTime\": 1647705920.162379, \"step\": 885, \"value\": 0.00018490597722120583}, {\"wallTime\": 1647705920.2009406, \"step\": 886, \"value\": 0.00018599856412038207}, {\"wallTime\": 1647705920.293053, \"step\": 888, \"value\": 0.00018820313562173396}, {\"wallTime\": 1647705920.382714, \"step\": 890, \"value\": 0.000190433842362836}, {\"wallTime\": 1647705920.4721224, \"step\": 892, \"value\": 0.00019269098993390799}, {\"wallTime\": 1647705920.6071823, \"step\": 895, \"value\": 0.00019612697360571474}, {\"wallTime\": 1647705920.6969492, \"step\": 897, \"value\": 0.00019845158385578543}, {\"wallTime\": 1647705920.7373228, \"step\": 898, \"value\": 0.00019962422084063292}, {\"wallTime\": 1647705920.8717911, \"step\": 901, \"value\": 0.00020318382303230464}, {\"wallTime\": 1647705920.9165766, \"step\": 902, \"value\": 0.00020438441424630582}, {\"wallTime\": 1647705921.0099356, \"step\": 904, \"value\": 0.0002068069006782025}, {\"wallTime\": 1647705921.1402688, \"step\": 907, \"value\": 0.00021049458882771432}, {\"wallTime\": 1647705921.182366, \"step\": 908, \"value\": 0.0002117383701261133}, {\"wallTime\": 1647705921.2731118, \"step\": 910, \"value\": 0.00021424803708214313}, {\"wallTime\": 1647705921.3173378, \"step\": 911, \"value\": 0.00021551399549935013}, {\"wallTime\": 1647705921.4300332, \"step\": 914, \"value\": 0.0002193569380324334}, {\"wallTime\": 1647705921.5981328, \"step\": 918, \"value\": 0.00022458768216893077}, {\"wallTime\": 1647705921.6433249, \"step\": 919, \"value\": 0.00022591474407818168}, {\"wallTime\": 1647705921.7322137, \"step\": 921, \"value\": 0.00022859242744743824}, {\"wallTime\": 1647705921.8188155, \"step\": 923, \"value\": 0.00023130184854380786}, {\"wallTime\": 1647705922.0074663, \"step\": 927, \"value\": 0.00023681741731707007}, {\"wallTime\": 1647705922.0635822, \"step\": 928, \"value\": 0.00023821674403734505}, {\"wallTime\": 1647705922.159212, \"step\": 930, \"value\": 0.00024104023759718984}, {\"wallTime\": 1647705922.2044246, \"step\": 931, \"value\": 0.00024246452085208148}, {\"wallTime\": 1647705922.254949, \"step\": 932, \"value\": 0.00024389720056205988}, {\"wallTime\": 1647705922.3014047, \"step\": 933, \"value\": 0.0002453383640386164}, {\"wallTime\": 1647705922.4713867, \"step\": 935, \"value\": 0.00024824627325870097}, {\"wallTime\": 1647705926.8956888, \"step\": 939, \"value\": 0.00025416590506210923}, {\"wallTime\": 1647705927.009692, \"step\": 941, \"value\": 0.00025717844255268574}, {\"wallTime\": 1647705927.1008942, \"step\": 942, \"value\": 0.00025869806995615363}, {\"wallTime\": 1647705927.2742362, \"step\": 945, \"value\": 0.0002633110561873764}, {\"wallTime\": 1647705927.4732594, \"step\": 949, \"value\": 0.0002695899165701121}, {\"wallTime\": 1647705927.6339655, \"step\": 952, \"value\": 0.00027439711266197264}, {\"wallTime\": 1647705927.7925355, \"step\": 955, \"value\": 0.00027929001953452826}, {\"wallTime\": 1647705927.8460171, \"step\": 956, \"value\": 0.0002809403231367469}, {\"wallTime\": 1647705928.0612805, \"step\": 960, \"value\": 0.0002876395592465997}, {\"wallTime\": 1647705928.1735404, \"step\": 962, \"value\": 0.0002910488401539624}, {\"wallTime\": 1647705928.2306151, \"step\": 963, \"value\": 0.0002927686145994812}, {\"wallTime\": 1647705928.333899, \"step\": 965, \"value\": 0.00029623869340866804}, {\"wallTime\": 1647705928.4349418, \"step\": 967, \"value\": 0.0002997498959302902}, {\"wallTime\": 1647705928.4917862, \"step\": 968, \"value\": 0.0003015210968442261}, {\"wallTime\": 1647705928.6443653, \"step\": 971, \"value\": 0.0003068976802751422}, {\"wallTime\": 1647705928.9095654, \"step\": 976, \"value\": 0.00031607254641130567}, {\"wallTime\": 1647705929.0212605, \"step\": 978, \"value\": 0.00031981884967535734}, {\"wallTime\": 1647705929.0794637, \"step\": 979, \"value\": 0.000321708619594574}, {\"wallTime\": 1647705929.188286, \"step\": 981, \"value\": 0.00032552171614952385}, {\"wallTime\": 1647705929.2417288, \"step\": 982, \"value\": 0.00032744515920057893}, {\"wallTime\": 1647705929.463756, \"step\": 986, \"value\": 0.0003352533676661551}, {\"wallTime\": 1647705929.6822212, \"step\": 990, \"value\": 0.00034324772423133254}, {\"wallTime\": 1647705929.7800972, \"step\": 992, \"value\": 0.0003473161195870489}, {\"wallTime\": 1647705929.8885968, \"step\": 994, \"value\": 0.00035143273998983204}, {\"wallTime\": 1647705930.0099237, \"step\": 996, \"value\": 0.0003555981384124607}, {\"wallTime\": 1647705930.1407053, \"step\": 998, \"value\": 0.0003598129260353744}, {\"wallTime\": 1647705930.205916, \"step\": 999, \"value\": 0.0003619390190578997}, {\"wallTime\": 1647705930.4064136, \"step\": 1002, \"value\": 0.0003683929389808327}, {\"wallTime\": 1647705930.4772573, \"step\": 1003, \"value\": 0.00037056973087601364}, {\"wallTime\": 1647705930.5432336, \"step\": 1004, \"value\": 0.000372759357560426}, {\"wallTime\": 1647705930.6838107, \"step\": 1006, \"value\": 0.0003771775518544018}, {\"wallTime\": 1647705930.9685845, \"step\": 1011, \"value\": 0.0003884534817188978}, {\"wallTime\": 1647705931.0628202, \"step\": 1013, \"value\": 0.00039305767859332263}, {\"wallTime\": 1647705931.1607788, \"step\": 1015, \"value\": 0.0003977164451498538}, {\"wallTime\": 1647705931.213817, \"step\": 1016, \"value\": 0.00040006652125157416}, {\"wallTime\": 1647705931.2880259, \"step\": 1017, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647705931.5506697, \"step\": 1022, \"value\": 0.00041446133400313556}, {\"wallTime\": 1647705931.7586484, \"step\": 1026, \"value\": 0.0004243444709572941}, {\"wallTime\": 1647705931.868504, \"step\": 1028, \"value\": 0.000429374078521505}, {\"wallTime\": 1647705931.9194367, \"step\": 1029, \"value\": 0.0004319111758377403}, {\"wallTime\": 1647705932.2254221, \"step\": 1035, \"value\": 0.0004474518063943833}, {\"wallTime\": 1647705932.2709346, \"step\": 1036, \"value\": 0.0004500957438722253}, {\"wallTime\": 1647705932.3410692, \"step\": 1037, \"value\": 0.0004527553101070225}, {\"wallTime\": 1647705932.3923957, \"step\": 1038, \"value\": 0.00045543056330643594}, {\"wallTime\": 1647705932.444632, \"step\": 1039, \"value\": 0.0004581216489896178}, {\"wallTime\": 1647705932.6559818, \"step\": 1043, \"value\": 0.0004690459172707051}, {\"wallTime\": 1647705932.7615573, \"step\": 1045, \"value\": 0.0004746053309645504}, {\"wallTime\": 1647705932.8138082, \"step\": 1046, \"value\": 0.0004774097178597003}, {\"wallTime\": 1647705933.1366787, \"step\": 1052, \"value\": 0.0004945874097757041}, {\"wallTime\": 1647705933.184853, \"step\": 1053, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647705933.331028, \"step\": 1056, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647705933.430559, \"step\": 1058, \"value\": 0.0005123831797391176}, {\"wallTime\": 1647705933.4762428, \"step\": 1059, \"value\": 0.0005154107930138707}, {\"wallTime\": 1647705933.524387, \"step\": 1060, \"value\": 0.0005184562760405242}, {\"wallTime\": 1647705933.6480138, \"step\": 1062, \"value\": 0.0005246013752184808}, {\"wallTime\": 1647705933.8035996, \"step\": 1065, \"value\": 0.0005339558119885623}, {\"wallTime\": 1647705933.9098132, \"step\": 1067, \"value\": 0.0005402846145443618}, {\"wallTime\": 1647705934.0161293, \"step\": 1069, \"value\": 0.0005466883885674179}, {\"wallTime\": 1647705934.069033, \"step\": 1070, \"value\": 0.0005499187391251326}, {\"wallTime\": 1647705934.1220603, \"step\": 1071, \"value\": 0.000553168123587966}, {\"wallTime\": 1647705934.1746247, \"step\": 1072, \"value\": 0.0005564367165789008}, {\"wallTime\": 1647705934.231181, \"step\": 1073, \"value\": 0.0005597246345132589}, {\"wallTime\": 1647705934.2820396, \"step\": 1074, \"value\": 0.0005630319355987012}, {\"wallTime\": 1647705934.4363225, \"step\": 1077, \"value\": 0.0005730717093683779}, {\"wallTime\": 1647705934.485144, \"step\": 1078, \"value\": 0.000576457881834358}, {\"wallTime\": 1647705934.57645, \"step\": 1080, \"value\": 0.0005832904716953635}, {\"wallTime\": 1647705934.6252148, \"step\": 1081, \"value\": 0.0005867370055057108}, {\"wallTime\": 1647705934.672048, \"step\": 1082, \"value\": 0.0005902039702050388}, {\"wallTime\": 1647705934.8152533, \"step\": 1085, \"value\": 0.0006007282063364983}, {\"wallTime\": 1647705934.8633983, \"step\": 1086, \"value\": 0.0006042778259143233}, {\"wallTime\": 1647705934.9144177, \"step\": 1087, \"value\": 0.0006078484584577382}, {\"wallTime\": 1647705935.151469, \"step\": 1091, \"value\": 0.0006223430391401052}, {\"wallTime\": 1647705935.5357609, \"step\": 1098, \"value\": 0.0006485452759079635}, {\"wallTime\": 1647705935.6523561, \"step\": 1100, \"value\": 0.0006562322378158569}, {\"wallTime\": 1647705935.76869, \"step\": 1102, \"value\": 0.0006640103529207408}, {\"wallTime\": 1647705935.825312, \"step\": 1103, \"value\": 0.000667933898512274}, {\"wallTime\": 1647705935.8941643, \"step\": 1104, \"value\": 0.0006718806107528508}, {\"wallTime\": 1647705936.1129673, \"step\": 1107, \"value\": 0.0006838612607680261}, {\"wallTime\": 1647705936.273259, \"step\": 1109, \"value\": 0.0006919668521732092}, {\"wallTime\": 1647705936.4253983, \"step\": 1111, \"value\": 0.0007001684862188995}, {\"wallTime\": 1647705936.5215356, \"step\": 1112, \"value\": 0.000704305712133646}, {\"wallTime\": 1647705936.668681, \"step\": 1114, \"value\": 0.0007126535638235509}, {\"wallTime\": 1647705937.0243585, \"step\": 1119, \"value\": 0.0007339587318710983}, {\"wallTime\": 1647705937.1600506, \"step\": 1121, \"value\": 0.0007426580996252596}, {\"wallTime\": 1647705937.2170322, \"step\": 1122, \"value\": 0.0007470463751815259}, {\"wallTime\": 1647705937.407097, \"step\": 1125, \"value\": 0.0007603673147968948}, {\"wallTime\": 1647705937.4722984, \"step\": 1126, \"value\": 0.0007648602477274835}, {\"wallTime\": 1647705937.6162817, \"step\": 1128, \"value\": 0.0007739258580841124}, {\"wallTime\": 1647705937.686242, \"step\": 1129, \"value\": 0.0007784988847561181}, {\"wallTime\": 1647705937.7585418, \"step\": 1130, \"value\": 0.0007830989197827876}, {\"wallTime\": 1647705937.8397968, \"step\": 1131, \"value\": 0.0007877261377871037}, {\"wallTime\": 1647705937.9180388, \"step\": 1132, \"value\": 0.0007923807133920491}, {\"wallTime\": 1647705938.0392833, \"step\": 1134, \"value\": 0.000801772519480437}, {\"wallTime\": 1647705938.0903208, \"step\": 1135, \"value\": 0.0008065100992098451}, {\"wallTime\": 1647705938.1536644, \"step\": 1136, \"value\": 0.0008112756768241525}, {\"wallTime\": 1647705938.3254, \"step\": 1139, \"value\": 0.0008257419685833156}, {\"wallTime\": 1647705938.5207713, \"step\": 1142, \"value\": 0.0008404661784879863}, {\"wallTime\": 1647705938.7389355, \"step\": 1145, \"value\": 0.0008554530213586986}, {\"wallTime\": 1647705938.8131762, \"step\": 1146, \"value\": 0.0008605077746324241}, {\"wallTime\": 1647705938.9620395, \"step\": 1148, \"value\": 0.0008707070373930037}, {\"wallTime\": 1647705939.120218, \"step\": 1150, \"value\": 0.0008810272556729615}, {\"wallTime\": 1647705939.187893, \"step\": 1151, \"value\": 0.0008862331160344183}, {\"wallTime\": 1647705939.2490032, \"step\": 1152, \"value\": 0.0008914697682484984}, {\"wallTime\": 1647705939.2975843, \"step\": 1153, \"value\": 0.0008967373287305236}, {\"wallTime\": 1647705939.7040544, \"step\": 1160, \"value\": 0.0009344922145828605}, {\"wallTime\": 1647705939.852088, \"step\": 1162, \"value\": 0.0009455684339627624}, {\"wallTime\": 1647705940.0149105, \"step\": 1164, \"value\": 0.0009567759116180241}, {\"wallTime\": 1647705940.163955, \"step\": 1166, \"value\": 0.0009681162191554904}, {\"wallTime\": 1647705940.2382708, \"step\": 1167, \"value\": 0.0009738366934470832}, {\"wallTime\": 1647705940.6570172, \"step\": 1173, \"value\": 0.0010088763665407896}, {\"wallTime\": 1647705940.7118824, \"step\": 1174, \"value\": 0.0010148376459255815}, {\"wallTime\": 1647705940.8239303, \"step\": 1176, \"value\": 0.0010268661426380277}, {\"wallTime\": 1647705940.89761, \"step\": 1177, \"value\": 0.0010329338256269693}, {\"wallTime\": 1647705940.977496, \"step\": 1178, \"value\": 0.0010390372481197119}, {\"wallTime\": 1647705941.250237, \"step\": 1182, \"value\": 0.0010638139210641384}, {\"wallTime\": 1647705941.3989425, \"step\": 1184, \"value\": 0.0010764229809865355}, {\"wallTime\": 1647705941.5566006, \"step\": 1186, \"value\": 0.0010891814017668366}, {\"wallTime\": 1647705941.6863096, \"step\": 1188, \"value\": 0.001102091046050191}, {\"wallTime\": 1647705941.749671, \"step\": 1189, \"value\": 0.0011086032027378678}, {\"wallTime\": 1647705941.8218594, \"step\": 1190, \"value\": 0.0011151537764817476}, {\"wallTime\": 1647705941.998912, \"step\": 1193, \"value\": 0.0011350386776030064}, {\"wallTime\": 1647705942.0730295, \"step\": 1194, \"value\": 0.001141745480708778}, {\"wallTime\": 1647705942.169273, \"step\": 1195, \"value\": 0.0011484918650239706}, {\"wallTime\": 1647705942.3172293, \"step\": 1197, \"value\": 0.0011621045414358377}, {\"wallTime\": 1647705942.3917432, \"step\": 1198, \"value\": 0.0011689712991937995}, {\"wallTime\": 1647705942.613966, \"step\": 1201, \"value\": 0.0011898158118128777}, {\"wallTime\": 1647705942.894985, \"step\": 1205, \"value\": 0.0012181878555566072}, {\"wallTime\": 1647705942.9626052, \"step\": 1206, \"value\": 0.0012253860477358103}, {\"wallTime\": 1647705943.0154967, \"step\": 1207, \"value\": 0.0012326266150921583}, {\"wallTime\": 1647705943.1446803, \"step\": 1209, \"value\": 0.001247236505150795}, {\"wallTime\": 1647705943.428216, \"step\": 1213, \"value\": 0.001276977825909853}, {\"wallTime\": 1647705943.5022352, \"step\": 1214, \"value\": 0.0012845234014093876}, {\"wallTime\": 1647705943.5766652, \"step\": 1215, \"value\": 0.00129211344756186}, {\"wallTime\": 1647705943.820087, \"step\": 1218, \"value\": 0.0013151537859812379}, {\"wallTime\": 1647705944.2288265, \"step\": 1223, \"value\": 0.001354471081867814}, {\"wallTime\": 1647705944.3545308, \"step\": 1225, \"value\": 0.0013705251039937139}, {\"wallTime\": 1647705944.6211364, \"step\": 1229, \"value\": 0.0014032063772901893}, {\"wallTime\": 1647705944.8351483, \"step\": 1232, \"value\": 0.0014282276388257742}, {\"wallTime\": 1647705944.9037478, \"step\": 1233, \"value\": 0.0014366668183356524}, {\"wallTime\": 1647705945.2537394, \"step\": 1238, \"value\": 0.001479616854339838}, {\"wallTime\": 1647705945.37275, \"step\": 1240, \"value\": 0.0014971541240811348}, {\"wallTime\": 1647705945.4383128, \"step\": 1241, \"value\": 0.0015060006408020854}, {\"wallTime\": 1647705945.5080998, \"step\": 1242, \"value\": 0.0015148994280025363}, {\"wallTime\": 1647705945.5712802, \"step\": 1243, \"value\": 0.0015238507185131311}, {\"wallTime\": 1647705945.6341887, \"step\": 1244, \"value\": 0.0015328549779951572}, {\"wallTime\": 1647705945.7714348, \"step\": 1246, \"value\": 0.0015510233351960778}, {\"wallTime\": 1647705945.9773595, \"step\": 1249, \"value\": 0.0015786804724484682}, {\"wallTime\": 1647705946.0463939, \"step\": 1250, \"value\": 0.0015880087157711387}, {\"wallTime\": 1647705946.1146293, \"step\": 1251, \"value\": 0.0015973920235410333}, {\"wallTime\": 1647705946.1880972, \"step\": 1252, \"value\": 0.0016068308614194393}, {\"wallTime\": 1647705946.2954948, \"step\": 1254, \"value\": 0.0016258759424090385}, {\"wallTime\": 1647705946.4032567, \"step\": 1256, \"value\": 0.0016451469855383039}, {\"wallTime\": 1647705946.4548998, \"step\": 1257, \"value\": 0.0016548678977414966}, {\"wallTime\": 1647705946.597472, \"step\": 1260, \"value\": 0.0016843767371028662}, {\"wallTime\": 1647705946.6483932, \"step\": 1261, \"value\": 0.0016943294322118163}, {\"wallTime\": 1647705946.9432096, \"step\": 1267, \"value\": 0.0017552932258695364}, {\"wallTime\": 1647705947.1542902, \"step\": 1271, \"value\": 0.001797149539925158}, {\"wallTime\": 1647705947.4169507, \"step\": 1276, \"value\": 0.0018508763751015067}, {\"wallTime\": 1647705947.4696457, \"step\": 1277, \"value\": 0.0018618128960952163}, {\"wallTime\": 1647705947.5222654, \"step\": 1278, \"value\": 0.0018728141440078616}, {\"wallTime\": 1647705947.7193358, \"step\": 1282, \"value\": 0.0019174728076905012}, {\"wallTime\": 1647705947.8865964, \"step\": 1285, \"value\": 0.0019516643369570374}, {\"wallTime\": 1647705948.119122, \"step\": 1290, \"value\": 0.002010010415688157}, {\"wallTime\": 1647705948.2770016, \"step\": 1293, \"value\": 0.0020458518993109465}, {\"wallTime\": 1647705948.5410264, \"step\": 1298, \"value\": 0.002107013715431094}, {\"wallTime\": 1647705948.5950336, \"step\": 1299, \"value\": 0.0021194638684391975}, {\"wallTime\": 1647705948.7495608, \"step\": 1302, \"value\": 0.0021572571713477373}, {\"wallTime\": 1647705948.9662564, \"step\": 1306, \"value\": 0.0022086985409259796}, {\"wallTime\": 1647705949.1754205, \"step\": 1310, \"value\": 0.002261366695165634}, {\"wallTime\": 1647705949.445014, \"step\": 1315, \"value\": 0.0023289716336876154}, {\"wallTime\": 1647705949.739519, \"step\": 1320, \"value\": 0.0023985973093658686}, {\"wallTime\": 1647705949.8633025, \"step\": 1322, \"value\": 0.0024270270951092243}, {\"wallTime\": 1647705950.0382438, \"step\": 1325, \"value\": 0.002470304723829031}, {\"wallTime\": 1647705950.0947788, \"step\": 1326, \"value\": 0.0024849013425409794}, {\"wallTime\": 1647705950.2084322, \"step\": 1328, \"value\": 0.0025143541861325502}, {\"wallTime\": 1647705950.5803156, \"step\": 1335, \"value\": 0.002620214829221368}, {\"wallTime\": 1647705951.1387815, \"step\": 1344, \"value\": 0.0027628964744508266}, {\"wallTime\": 1647705951.2139099, \"step\": 1345, \"value\": 0.0027792220935225487}, {\"wallTime\": 1647705951.3351514, \"step\": 1347, \"value\": 0.002812163205817342}, {\"wallTime\": 1647705951.392224, \"step\": 1348, \"value\": 0.002828779863193631}, {\"wallTime\": 1647705951.556407, \"step\": 1351, \"value\": 0.0028792214579880238}, {\"wallTime\": 1647705951.6072166, \"step\": 1352, \"value\": 0.0028962341602891684}, {\"wallTime\": 1647705951.7130623, \"step\": 1354, \"value\": 0.0029305622447282076}, {\"wallTime\": 1647705951.9200275, \"step\": 1358, \"value\": 0.0030004438012838364}, {\"wallTime\": 1647705952.0326698, \"step\": 1360, \"value\": 0.0030360070522874594}, {\"wallTime\": 1647705952.2619781, \"step\": 1364, \"value\": 0.0031084029469639063}, {\"wallTime\": 1647705952.3170748, \"step\": 1365, \"value\": 0.0031267700251191854}, {\"wallTime\": 1647705952.3740542, \"step\": 1366, \"value\": 0.003145245835185051}, {\"wallTime\": 1647705952.431319, \"step\": 1367, \"value\": 0.0031638306099921465}, {\"wallTime\": 1647705952.4950821, \"step\": 1368, \"value\": 0.0031825252808630466}, {\"wallTime\": 1647705952.7731397, \"step\": 1372, \"value\": 0.0032584150321781635}, {\"wallTime\": 1647705952.8406508, \"step\": 1373, \"value\": 0.003277668496593833}, {\"wallTime\": 1647705952.9574347, \"step\": 1375, \"value\": 0.003316517686471343}, {\"wallTime\": 1647705953.0081995, \"step\": 1376, \"value\": 0.0033361143432557583}, {\"wallTime\": 1647705953.2192914, \"step\": 1380, \"value\": 0.003415666753426194}, {\"wallTime\": 1647705953.5433345, \"step\": 1385, \"value\": 0.003517779754474759}, {\"wallTime\": 1647705953.600168, \"step\": 1386, \"value\": 0.003538565943017602}, {\"wallTime\": 1647705953.742143, \"step\": 1390, \"value\": 0.003622945863753557}, {\"wallTime\": 1647705953.872576, \"step\": 1393, \"value\": 0.003687548451125622}, {\"wallTime\": 1647705954.0820873, \"step\": 1397, \"value\": 0.0037754809018224478}, {\"wallTime\": 1647705954.3778715, \"step\": 1403, \"value\": 0.003911326639354229}, {\"wallTime\": 1647705959.143541, \"step\": 1416, \"value\": 0.004222662188112736}, {\"wallTime\": 1647705959.1894865, \"step\": 1417, \"value\": 0.004247613251209259}, {\"wallTime\": 1647705959.3715107, \"step\": 1421, \"value\": 0.004348901100456715}, {\"wallTime\": 1647705959.823909, \"step\": 1431, \"value\": 0.004612813238054514}, {\"wallTime\": 1647705959.8839812, \"step\": 1432, \"value\": 0.004640069790184498}, {\"wallTime\": 1647705960.111512, \"step\": 1436, \"value\": 0.004750716034322977}, {\"wallTime\": 1647705960.2199273, \"step\": 1438, \"value\": 0.004807024262845516}, {\"wallTime\": 1647705960.2753568, \"step\": 1439, \"value\": 0.004835428670048714}, {\"wallTime\": 1647705960.3298762, \"step\": 1440, \"value\": 0.004864000249654055}, {\"wallTime\": 1647705960.3852415, \"step\": 1441, \"value\": 0.004892741329967976}, {\"wallTime\": 1647705960.5560405, \"step\": 1444, \"value\": 0.004979986231774092}, {\"wallTime\": 1647705960.6674948, \"step\": 1446, \"value\": 0.005039012059569359}, {\"wallTime\": 1647705960.721094, \"step\": 1447, \"value\": 0.005068786907941103}, {\"wallTime\": 1647705960.835577, \"step\": 1449, \"value\": 0.005128865595906973}, {\"wallTime\": 1647705960.957747, \"step\": 1451, \"value\": 0.005189656279981136}, {\"wallTime\": 1647705961.0164578, \"step\": 1452, \"value\": 0.005220321007072926}, {\"wallTime\": 1647705961.1263049, \"step\": 1454, \"value\": 0.005282195750623941}, {\"wallTime\": 1647705961.1874897, \"step\": 1455, \"value\": 0.005313407629728317}, {\"wallTime\": 1647705961.2317233, \"step\": 1456, \"value\": 0.005344803910702467}, {\"wallTime\": 1647705961.2760184, \"step\": 1457, \"value\": 0.005376385524868965}, {\"wallTime\": 1647705961.3133016, \"step\": 1458, \"value\": 0.005408153869211674}, {\"wallTime\": 1647705961.3527892, \"step\": 1459, \"value\": 0.005440109875053167}, {\"wallTime\": 1647705961.393644, \"step\": 1460, \"value\": 0.005472254939377308}, {\"wallTime\": 1647705961.4416993, \"step\": 1461, \"value\": 0.005504589527845383}, {\"wallTime\": 1647705961.5297754, \"step\": 1463, \"value\": 0.00556983333081007}, {\"wallTime\": 1647705961.850991, \"step\": 1470, \"value\": 0.005804337561130524}, {\"wallTime\": 1647705961.9839842, \"step\": 1473, \"value\": 0.005907837767153978}, {\"wallTime\": 1647705962.0284424, \"step\": 1474, \"value\": 0.00594274653121829}, {\"wallTime\": 1647705962.1401186, \"step\": 1476, \"value\": 0.006013183854520321}, {\"wallTime\": 1647705962.4327066, \"step\": 1483, \"value\": 0.006266354117542505}, {\"wallTime\": 1647705962.5951293, \"step\": 1487, \"value\": 0.006415780168026686}, {\"wallTime\": 1647705962.6844733, \"step\": 1489, \"value\": 0.0064918240532279015}, {\"wallTime\": 1647705962.731895, \"step\": 1490, \"value\": 0.006530183367431164}, {\"wallTime\": 1647705962.8649354, \"step\": 1493, \"value\": 0.006646626628935337}, {\"wallTime\": 1647705962.913031, \"step\": 1494, \"value\": 0.006685900501906872}, {\"wallTime\": 1647705963.076864, \"step\": 1498, \"value\": 0.006845331285148859}, {\"wallTime\": 1647705963.121323, \"step\": 1499, \"value\": 0.0068857790902256966}, {\"wallTime\": 1647705963.1657164, \"step\": 1500, \"value\": 0.00692646624520421}, {\"wallTime\": 1647705963.2794182, \"step\": 1502, \"value\": 0.007008563261479139}, {\"wallTime\": 1647705963.5666087, \"step\": 1509, \"value\": 0.007303641643375158}, {\"wallTime\": 1647705963.6070201, \"step\": 1510, \"value\": 0.007346797734498978}, {\"wallTime\": 1647705963.6470606, \"step\": 1511, \"value\": 0.007390209008008242}, {\"wallTime\": 1647705963.7231832, \"step\": 1513, \"value\": 0.007477802224457264}, {\"wallTime\": 1647705963.806093, \"step\": 1515, \"value\": 0.00756643433123827}, {\"wallTime\": 1647705963.8508728, \"step\": 1516, \"value\": 0.0076111434027552605}, {\"wallTime\": 1647705964.1838274, \"step\": 1523, \"value\": 0.00793159194290638}, {\"wallTime\": 1647705964.4313068, \"step\": 1528, \"value\": 0.008168710395693779}, {\"wallTime\": 1647705964.7800555, \"step\": 1534, \"value\": 0.008462629280984402}, {\"wallTime\": 1647705964.9435246, \"step\": 1537, \"value\": 0.008613531477749348}, {\"wallTime\": 1647705964.9827802, \"step\": 1538, \"value\": 0.008664427325129509}, {\"wallTime\": 1647705965.1132953, \"step\": 1541, \"value\": 0.008818927221000195}, {\"wallTime\": 1647705965.431039, \"step\": 1548, \"value\": 0.009190226905047894}, {\"wallTime\": 1647705965.5639243, \"step\": 1551, \"value\": 0.009354102425277233}, {\"wallTime\": 1647705965.6082785, \"step\": 1552, \"value\": 0.009409374557435513}, {\"wallTime\": 1647705965.6525269, \"step\": 1553, \"value\": 0.009464973583817482}, {\"wallTime\": 1647705966.0523553, \"step\": 1562, \"value\": 0.009980381466448307}, {\"wallTime\": 1647705966.1668563, \"step\": 1565, \"value\": 0.010158346965909004}, {\"wallTime\": 1647705966.20791, \"step\": 1566, \"value\": 0.010218370705842972}, {\"wallTime\": 1647705966.2961726, \"step\": 1568, \"value\": 0.010339485481381416}, {\"wallTime\": 1647705966.3842335, \"step\": 1570, \"value\": 0.010462035425007343}, {\"wallTime\": 1647705966.4285133, \"step\": 1571, \"value\": 0.01052385475486517}, {\"wallTime\": 1647705966.472718, \"step\": 1572, \"value\": 0.01058603823184967}, {\"wallTime\": 1647705966.5211973, \"step\": 1573, \"value\": 0.010648590512573719}, {\"wallTime\": 1647705966.6565254, \"step\": 1576, \"value\": 0.010838471353054047}, {\"wallTime\": 1647705966.7395148, \"step\": 1578, \"value\": 0.010966935195028782}, {\"wallTime\": 1647705966.8340518, \"step\": 1580, \"value\": 0.011096922680735588}, {\"wallTime\": 1647705966.878266, \"step\": 1581, \"value\": 0.01116249244660139}, {\"wallTime\": 1647705966.926434, \"step\": 1582, \"value\": 0.011228450573980808}, {\"wallTime\": 1647705967.0463302, \"step\": 1585, \"value\": 0.011428670957684517}, {\"wallTime\": 1647705967.269279, \"step\": 1590, \"value\": 0.0117703378200531}, {\"wallTime\": 1647705967.4811666, \"step\": 1595, \"value\": 0.012122217565774918}, {\"wallTime\": 1647705967.5255504, \"step\": 1596, \"value\": 0.012193846516311169}, {\"wallTime\": 1647705967.5697863, \"step\": 1597, \"value\": 0.012265898287296295}, {\"wallTime\": 1647705967.7459826, \"step\": 1601, \"value\": 0.012558388523757458}, {\"wallTime\": 1647705967.790469, \"step\": 1602, \"value\": 0.012632593512535095}, {\"wallTime\": 1647705967.8343177, \"step\": 1603, \"value\": 0.012707238085567951}, {\"wallTime\": 1647705968.1884797, \"step\": 1611, \"value\": 0.013320491649210453}, {\"wallTime\": 1647705968.2704399, \"step\": 1613, \"value\": 0.013478375039994717}, {\"wallTime\": 1647705968.31681, \"step\": 1614, \"value\": 0.013558016158640385}, {\"wallTime\": 1647705968.4010913, \"step\": 1616, \"value\": 0.013718714937567711}, {\"wallTime\": 1647705968.652123, \"step\": 1622, \"value\": 0.014212328940629959}, {\"wallTime\": 1647705968.7374582, \"step\": 1624, \"value\": 0.014380782842636108}, {\"wallTime\": 1647705968.8471642, \"step\": 1626, \"value\": 0.014551232568919659}, {\"wallTime\": 1647705968.8913674, \"step\": 1627, \"value\": 0.014637214131653309}, {\"wallTime\": 1647705969.068256, \"step\": 1631, \"value\": 0.01498624961823225}, {\"wallTime\": 1647705969.2355986, \"step\": 1635, \"value\": 0.01534360833466053}, {\"wallTime\": 1647705969.2837393, \"step\": 1636, \"value\": 0.015434271655976772}, {\"wallTime\": 1647705969.3259757, \"step\": 1637, \"value\": 0.015525470487773418}, {\"wallTime\": 1647705969.4501328, \"step\": 1640, \"value\": 0.01580231450498104}, {\"wallTime\": 1647705969.4859984, \"step\": 1641, \"value\": 0.01589568704366684}, {\"wallTime\": 1647705969.6826625, \"step\": 1646, \"value\": 0.016370898112654686}, {\"wallTime\": 1647705969.7213678, \"step\": 1647, \"value\": 0.016467630863189697}, {\"wallTime\": 1647705969.8011496, \"step\": 1649, \"value\": 0.01666281558573246}, {\"wallTime\": 1647705969.8794193, \"step\": 1651, \"value\": 0.016860313713550568}, {\"wallTime\": 1647705969.9192545, \"step\": 1652, \"value\": 0.016959939152002335}, {\"wallTime\": 1647705969.957414, \"step\": 1653, \"value\": 0.01706015318632126}, {\"wallTime\": 1647705970.0019085, \"step\": 1654, \"value\": 0.017160959541797638}, {\"wallTime\": 1647705970.0801344, \"step\": 1656, \"value\": 0.017364362254738808}, {\"wallTime\": 1647705970.1575482, \"step\": 1658, \"value\": 0.01757017709314823}, {\"wallTime\": 1647705970.3122072, \"step\": 1662, \"value\": 0.017989151179790497}, {\"wallTime\": 1647705970.3898232, \"step\": 1664, \"value\": 0.018202370032668114}, {\"wallTime\": 1647705970.4664845, \"step\": 1666, \"value\": 0.018418116495013237}, {\"wallTime\": 1647705970.6034977, \"step\": 1669, \"value\": 0.01874653995037079}, {\"wallTime\": 1647705970.64247, \"step\": 1670, \"value\": 0.018857309594750404}, {\"wallTime\": 1647705970.7924564, \"step\": 1674, \"value\": 0.019306978210806847}, {\"wallTime\": 1647705970.9094994, \"step\": 1677, \"value\": 0.019651250913739204}, {\"wallTime\": 1647705970.9851446, \"step\": 1679, \"value\": 0.019884169101715088}, {\"wallTime\": 1647705971.0238185, \"step\": 1680, \"value\": 0.020001662895083427}, {\"wallTime\": 1647705971.1018481, \"step\": 1682, \"value\": 0.020238734781742096}, {\"wallTime\": 1647705971.2175791, \"step\": 1685, \"value\": 0.020599622279405594}, {\"wallTime\": 1647705971.2582064, \"step\": 1686, \"value\": 0.020721344277262688}, {\"wallTime\": 1647705971.3020108, \"step\": 1687, \"value\": 0.020843783393502235}, {\"wallTime\": 1647705971.3420546, \"step\": 1688, \"value\": 0.020966947078704834}, {\"wallTime\": 1647705971.5366151, \"step\": 1693, \"value\": 0.021593764424324036}, {\"wallTime\": 1647705971.5749097, \"step\": 1694, \"value\": 0.021721359342336655}, {\"wallTime\": 1647705971.613171, \"step\": 1695, \"value\": 0.021849706768989563}, {\"wallTime\": 1647705971.6900997, \"step\": 1697, \"value\": 0.022108685225248337}, {\"wallTime\": 1647705971.7710588, \"step\": 1699, \"value\": 0.022370731458067894}, {\"wallTime\": 1647705971.801592, \"step\": 1700, \"value\": 0.022502915933728218}, {\"wallTime\": 1647705971.95356, \"step\": 1702, \"value\": 0.022769635543227196}, {\"wallTime\": 1647705972.0267005, \"step\": 1704, \"value\": 0.02303951606154442}, {\"wallTime\": 1647705972.189125, \"step\": 1707, \"value\": 0.023450346663594246}, {\"wallTime\": 1647705972.2970996, \"step\": 1709, \"value\": 0.023728294298052788}, {\"wallTime\": 1647705972.3311493, \"step\": 1710, \"value\": 0.02386850118637085}, {\"wallTime\": 1647705972.3664258, \"step\": 1711, \"value\": 0.02400953695178032}, {\"wallTime\": 1647705972.430382, \"step\": 1712, \"value\": 0.024151407182216644}, {\"wallTime\": 1647705972.6869218, \"step\": 1718, \"value\": 0.025020400062203407}, {\"wallTime\": 1647705972.7279367, \"step\": 1719, \"value\": 0.025168241932988167}, {\"wallTime\": 1647705972.8599918, \"step\": 1722, \"value\": 0.025617031380534172}, {\"wallTime\": 1647705972.8989377, \"step\": 1723, \"value\": 0.025768397375941277}, {\"wallTime\": 1647705972.9370265, \"step\": 1724, \"value\": 0.02592065930366516}, {\"wallTime\": 1647705972.976247, \"step\": 1725, \"value\": 0.026073820888996124}, {\"wallTime\": 1647705973.1723864, \"step\": 1730, \"value\": 0.02685331180691719}, {\"wallTime\": 1647705973.4921172, \"step\": 1738, \"value\": 0.028149258345365524}, {\"wallTime\": 1647705973.5323613, \"step\": 1739, \"value\": 0.02831558883190155}, {\"wallTime\": 1647705973.6871533, \"step\": 1743, \"value\": 0.028990795835852623}, {\"wallTime\": 1647705973.779334, \"step\": 1745, \"value\": 0.02933441288769245}, {\"wallTime\": 1647705973.9103162, \"step\": 1748, \"value\": 0.029857490211725235}, {\"wallTime\": 1647705973.9547546, \"step\": 1749, \"value\": 0.030033914372324944}, {\"wallTime\": 1647705973.998469, \"step\": 1750, \"value\": 0.03021138161420822}, {\"wallTime\": 1647705974.0423985, \"step\": 1751, \"value\": 0.030389895662665367}, {\"wallTime\": 1647705974.1310487, \"step\": 1753, \"value\": 0.0307500958442688}, {\"wallTime\": 1647705974.173828, \"step\": 1754, \"value\": 0.03093179501593113}, {\"wallTime\": 1647705974.314573, \"step\": 1757, \"value\": 0.03148335590958595}, {\"wallTime\": 1647705974.5308557, \"step\": 1762, \"value\": 0.03242456912994385}, {\"wallTime\": 1647705974.5732734, \"step\": 1763, \"value\": 0.032616160809993744}, {\"wallTime\": 1647705974.6581407, \"step\": 1765, \"value\": 0.03300274908542633}, {\"wallTime\": 1647705974.777898, \"step\": 1768, \"value\": 0.03359123691916466}, {\"wallTime\": 1647705975.0854032, \"step\": 1775, \"value\": 0.035005513578653336}, {\"wallTime\": 1647705975.1297705, \"step\": 1776, \"value\": 0.035212356597185135}, {\"wallTime\": 1647705975.1741836, \"step\": 1777, \"value\": 0.03542042151093483}, {\"wallTime\": 1647705975.330528, \"step\": 1780, \"value\": 0.036052022129297256}, {\"wallTime\": 1647705975.5096698, \"step\": 1784, \"value\": 0.03691171109676361}, {\"wallTime\": 1647705975.5597408, \"step\": 1785, \"value\": 0.03712981566786766}, {\"wallTime\": 1647705975.602156, \"step\": 1786, \"value\": 0.037349212914705276}, {\"wallTime\": 1647705975.7309108, \"step\": 1789, \"value\": 0.038015205413103104}, {\"wallTime\": 1647705975.7752883, \"step\": 1790, \"value\": 0.03823983296751976}, {\"wallTime\": 1647705975.8622215, \"step\": 1792, \"value\": 0.038693077862262726}, {\"wallTime\": 1647705975.9431515, \"step\": 1794, \"value\": 0.039151690900325775}, {\"wallTime\": 1647705976.024785, \"step\": 1796, \"value\": 0.03961574286222458}, {\"wallTime\": 1647705976.743306, \"step\": 1800, \"value\": 0.04056040942668915}, {\"wallTime\": 1647705976.781314, \"step\": 1802, \"value\": 0.04104115813970566}, {\"wallTime\": 1647705976.8550684, \"step\": 1803, \"value\": 0.04128366708755493}, {\"wallTime\": 1647705977.121002, \"step\": 1808, \"value\": 0.04251786321401596}, {\"wallTime\": 1647705977.270365, \"step\": 1810, \"value\": 0.04302181303501129}, {\"wallTime\": 1647705977.468353, \"step\": 1814, \"value\": 0.044047702103853226}, {\"wallTime\": 1647705977.644053, \"step\": 1818, \"value\": 0.04509805142879486}, {\"wallTime\": 1647705977.684019, \"step\": 1819, \"value\": 0.04536452889442444}, {\"wallTime\": 1647705977.8527904, \"step\": 1823, \"value\": 0.04644628241658211}, {\"wallTime\": 1647705979.1813605, \"step\": 1826, \"value\": 0.04727449268102646}, {\"wallTime\": 1647705979.2196503, \"step\": 1827, \"value\": 0.04755382984876633}, {\"wallTime\": 1647705979.3021672, \"step\": 1829, \"value\": 0.04811746999621391}, {\"wallTime\": 1647705979.3684733, \"step\": 1830, \"value\": 0.048401787877082825}, {\"wallTime\": 1647705979.4467788, \"step\": 1832, \"value\": 0.04897547885775566}, {\"wallTime\": 1647705979.487158, \"step\": 1833, \"value\": 0.04926486685872078}, {\"wallTime\": 1647705979.5295575, \"step\": 1834, \"value\": 0.04955596476793289}, {\"wallTime\": 1647705979.607233, \"step\": 1836, \"value\": 0.05014333501458168}, {\"wallTime\": 1647705979.6464612, \"step\": 1837, \"value\": 0.05043962597846985}, {\"wallTime\": 1647705979.685749, \"step\": 1838, \"value\": 0.050737667828798294}, {\"wallTime\": 1647705979.970377, \"step\": 1844, \"value\": 0.05256326124072075}, {\"wallTime\": 1647705980.0141017, \"step\": 1845, \"value\": 0.052873849868774414}, {\"wallTime\": 1647705980.0579233, \"step\": 1846, \"value\": 0.05318627506494522}, {\"wallTime\": 1647705980.1018445, \"step\": 1847, \"value\": 0.053500544279813766}, {\"wallTime\": 1647705980.1455054, \"step\": 1848, \"value\": 0.053816672414541245}, {\"wallTime\": 1647705980.2778082, \"step\": 1851, \"value\": 0.054776307195425034}, {\"wallTime\": 1647705980.3660345, \"step\": 1853, \"value\": 0.055425550788640976}, {\"wallTime\": 1647705980.6746688, \"step\": 1860, \"value\": 0.057759106159210205}, {\"wallTime\": 1647705980.8384292, \"step\": 1864, \"value\": 0.059136416763067245}, {\"wallTime\": 1647705980.889721, \"step\": 1865, \"value\": 0.059485845267772675}, {\"wallTime\": 1647705980.9277232, \"step\": 1866, \"value\": 0.05983734130859375}, {\"wallTime\": 1647705980.9638543, \"step\": 1867, \"value\": 0.06019091233611107}, {\"wallTime\": 1647705981.1795251, \"step\": 1871, \"value\": 0.06162621080875397}, {\"wallTime\": 1647705981.2231853, \"step\": 1872, \"value\": 0.06199035048484802}, {\"wallTime\": 1647705981.3156354, \"step\": 1874, \"value\": 0.06272509694099426}, {\"wallTime\": 1647705981.3228986, \"step\": 1875, \"value\": 0.06309573352336884}, {\"wallTime\": 1647705985.3977027, \"step\": 1877, \"value\": 0.06384358555078506}, {\"wallTime\": 1647705985.5253174, \"step\": 1880, \"value\": 0.06498201191425323}, {\"wallTime\": 1647705985.6548364, \"step\": 1883, \"value\": 0.06614074856042862}, {\"wallTime\": 1647705985.6936145, \"step\": 1884, \"value\": 0.06653156131505966}, {\"wallTime\": 1647705985.773615, \"step\": 1886, \"value\": 0.06732013821601868}, {\"wallTime\": 1647705985.8598762, \"step\": 1888, \"value\": 0.06811805814504623}, {\"wallTime\": 1647705985.9527922, \"step\": 1890, \"value\": 0.06892544031143188}, {\"wallTime\": 1647705986.1487727, \"step\": 1895, \"value\": 0.07098600268363953}, {\"wallTime\": 1647705986.3447852, \"step\": 1899, \"value\": 0.07267871499061584}, {\"wallTime\": 1647705986.4822638, \"step\": 1902, \"value\": 0.07397469133138657}, {\"wallTime\": 1647705986.6572664, \"step\": 1906, \"value\": 0.07573867589235306}, {\"wallTime\": 1647705986.7480786, \"step\": 1908, \"value\": 0.07663637399673462}, {\"wallTime\": 1647705986.7946208, \"step\": 1909, \"value\": 0.07708921283483505}, {\"wallTime\": 1647705986.837612, \"step\": 1910, \"value\": 0.07754471898078918}, {\"wallTime\": 1647705986.9919758, \"step\": 1913, \"value\": 0.07892746478319168}, {\"wallTime\": 1647705987.246131, \"step\": 1918, \"value\": 0.08128704130649567}, {\"wallTime\": 1647705987.5185475, \"step\": 1924, \"value\": 0.08421183377504349}, {\"wallTime\": 1647705987.5628102, \"step\": 1925, \"value\": 0.08470943570137024}, {\"wallTime\": 1647705987.6091359, \"step\": 1926, \"value\": 0.08520996570587158}, {\"wallTime\": 1647705987.7465746, \"step\": 1929, \"value\": 0.08672939240932465}, {\"wallTime\": 1647705987.8746521, \"step\": 1932, \"value\": 0.08827590942382812}, {\"wallTime\": 1647705988.0077107, \"step\": 1935, \"value\": 0.08985000848770142}, {\"wallTime\": 1647705988.0497394, \"step\": 1936, \"value\": 0.09038092195987701}, {\"wallTime\": 1647705988.2099133, \"step\": 1940, \"value\": 0.09253612160682678}, {\"wallTime\": 1647705988.2568939, \"step\": 1941, \"value\": 0.09308290481567383}, {\"wallTime\": 1647705988.3001366, \"step\": 1942, \"value\": 0.09363292157649994}, {\"wallTime\": 1647705988.4364257, \"step\": 1945, \"value\": 0.0953025370836258}, {\"wallTime\": 1647705988.5323038, \"step\": 1947, \"value\": 0.09643212705850601}, {\"wallTime\": 1647705988.6629026, \"step\": 1950, \"value\": 0.09815166145563126}, {\"wallTime\": 1647705988.706573, \"step\": 1951, \"value\": 0.098731629550457}, {\"wallTime\": 1647705988.8264139, \"step\": 1953, \"value\": 0.09990185499191284}, {\"wallTime\": 1647705988.9646463, \"step\": 1956, \"value\": 0.10168325901031494}, {\"wallTime\": 1647705989.150037, \"step\": 1960, \"value\": 0.10410797595977783}, {\"wallTime\": 1647705989.188224, \"step\": 1961, \"value\": 0.10472314059734344}, {\"wallTime\": 1647705989.2306547, \"step\": 1962, \"value\": 0.10534193366765976}, {\"wallTime\": 1647705989.279706, \"step\": 1963, \"value\": 0.10596438497304916}, {\"wallTime\": 1647705989.3108141, \"step\": 1964, \"value\": 0.10659050941467285}, {\"wallTime\": 1647705989.3894815, \"step\": 1966, \"value\": 0.10785388946533203}, {\"wallTime\": 1647705989.4539886, \"step\": 1967, \"value\": 0.10849118232727051}, {\"wallTime\": 1647705989.496755, \"step\": 1968, \"value\": 0.10913224518299103}, {\"wallTime\": 1647705989.539421, \"step\": 1969, \"value\": 0.10977709293365479}, {\"wallTime\": 1647705989.8031552, \"step\": 1975, \"value\": 0.11372698843479156}, {\"wallTime\": 1647705989.891803, \"step\": 1977, \"value\": 0.11507495492696762}, {\"wallTime\": 1647705989.9807982, \"step\": 1979, \"value\": 0.11643889546394348}, {\"wallTime\": 1647705990.025385, \"step\": 1980, \"value\": 0.11712691932916641}, {\"wallTime\": 1647705990.0690978, \"step\": 1981, \"value\": 0.11781900376081467}, {\"wallTime\": 1647705990.121553, \"step\": 1982, \"value\": 0.11851517856121063}, {\"wallTime\": 1647705990.1658776, \"step\": 1983, \"value\": 0.1192154735326767}, {\"wallTime\": 1647705990.2505603, \"step\": 1985, \"value\": 0.1206284910440445}, {\"wallTime\": 1647705990.3732293, \"step\": 1987, \"value\": 0.12205825746059418}, {\"wallTime\": 1647705990.4141414, \"step\": 1988, \"value\": 0.122779481112957}, {\"wallTime\": 1647705990.548817, \"step\": 1991, \"value\": 0.12496883422136307}, {\"wallTime\": 1647705990.5887778, \"step\": 1992, \"value\": 0.1257072538137436}, {\"wallTime\": 1647705990.7392814, \"step\": 1995, \"value\": 0.1279488056898117}, {\"wallTime\": 1647705991.0433571, \"step\": 2002, \"value\": 0.13333578407764435}, {\"wallTime\": 1647705991.6608136, \"step\": 2016, \"value\": 0.14479967951774597}, {\"wallTime\": 1647705991.6986494, \"step\": 2017, \"value\": 0.14565527439117432}, {\"wallTime\": 1647705991.875774, \"step\": 2021, \"value\": 0.14912854135036469}, {\"wallTime\": 1647705991.929259, \"step\": 2022, \"value\": 0.15000972151756287}, {\"wallTime\": 1647705991.9820924, \"step\": 2023, \"value\": 0.1508961021900177}, {\"wallTime\": 1647705992.1085901, \"step\": 2025, \"value\": 0.15268462896347046}, {\"wallTime\": 1647705992.1616719, \"step\": 2026, \"value\": 0.15358681976795197}, {\"wallTime\": 1647705992.2681704, \"step\": 2028, \"value\": 0.15540723502635956}, {\"wallTime\": 1647705992.4274125, \"step\": 2031, \"value\": 0.15817837417125702}, {\"wallTime\": 1647705992.4805617, \"step\": 2032, \"value\": 0.15911303460597992}, {\"wallTime\": 1647705992.5903912, \"step\": 2034, \"value\": 0.16099894046783447}, {\"wallTime\": 1647705992.6472635, \"step\": 2035, \"value\": 0.1619502604007721}, {\"wallTime\": 1647705992.6953342, \"step\": 2036, \"value\": 0.162907212972641}, {\"wallTime\": 1647705992.86691, \"step\": 2040, \"value\": 0.1667918562889099}, {\"wallTime\": 1647705992.9072738, \"step\": 2041, \"value\": 0.1677774041891098}, {\"wallTime\": 1647705992.9897738, \"step\": 2043, \"value\": 0.16976600885391235}, {\"wallTime\": 1647705993.0292614, \"step\": 2044, \"value\": 0.17076914012432098}, {\"wallTime\": 1647705993.1646624, \"step\": 2047, \"value\": 0.17381420731544495}, {\"wallTime\": 1647705993.2081945, \"step\": 2048, \"value\": 0.1748412549495697}, {\"wallTime\": 1647705993.2518039, \"step\": 2049, \"value\": 0.17587436735630035}, {\"wallTime\": 1647705993.4626756, \"step\": 2054, \"value\": 0.1811322271823883}, {\"wallTime\": 1647705993.5043457, \"step\": 2055, \"value\": 0.1822025179862976}, {\"wallTime\": 1647705993.5664587, \"step\": 2056, \"value\": 0.1832791268825531}, {\"wallTime\": 1647705993.6058774, \"step\": 2057, \"value\": 0.18436209857463837}, {\"wallTime\": 1647705994.0187044, \"step\": 2067, \"value\": 0.1955500841140747}, {\"wallTime\": 1647705994.058918, \"step\": 2068, \"value\": 0.19670556485652924}, {\"wallTime\": 1647705994.1414843, \"step\": 2070, \"value\": 0.19903704524040222}, {\"wallTime\": 1647705994.3065546, \"step\": 2074, \"value\": 0.20378322899341583}, {\"wallTime\": 1647705994.4876804, \"step\": 2078, \"value\": 0.2086426019668579}, {\"wallTime\": 1647705994.527695, \"step\": 2079, \"value\": 0.2098754346370697}, {\"wallTime\": 1647705994.7502635, \"step\": 2084, \"value\": 0.21614977717399597}, {\"wallTime\": 1647705994.8303974, \"step\": 2086, \"value\": 0.218711718916893}, {\"wallTime\": 1647705994.870813, \"step\": 2087, \"value\": 0.22000406682491302}, {\"wallTime\": 1647705994.9549012, \"step\": 2089, \"value\": 0.2226116955280304}, {\"wallTime\": 1647705994.9931996, \"step\": 2090, \"value\": 0.2239270806312561}, {\"wallTime\": 1647705995.0407605, \"step\": 2091, \"value\": 0.2252502292394638}, {\"wallTime\": 1647705995.2140193, \"step\": 2095, \"value\": 0.23062150180339813}, {\"wallTime\": 1647705995.2582085, \"step\": 2096, \"value\": 0.2319842129945755}, {\"wallTime\": 1647705995.300227, \"step\": 2097, \"value\": 0.23335497081279755}, {\"wallTime\": 1647705995.3467648, \"step\": 2098, \"value\": 0.23473383486270905}, {\"wallTime\": 1647705995.4254391, \"step\": 2100, \"value\": 0.23751604557037354}, {\"wallTime\": 1647705995.5506518, \"step\": 2103, \"value\": 0.24175132811069489}, {\"wallTime\": 1647705995.5943792, \"step\": 2104, \"value\": 0.2431797981262207}, {\"wallTime\": 1647705995.6381378, \"step\": 2105, \"value\": 0.24461671710014343}, {\"wallTime\": 1647705995.6823225, \"step\": 2106, \"value\": 0.24606212973594666}, {\"wallTime\": 1647705995.813184, \"step\": 2109, \"value\": 0.2504498064517975}, {\"wallTime\": 1647705995.8570888, \"step\": 2110, \"value\": 0.2519296705722809}, {\"wallTime\": 1647705996.039377, \"step\": 2114, \"value\": 0.25793713331222534}, {\"wallTime\": 1647705996.083664, \"step\": 2115, \"value\": 0.25946125388145447}, {\"wallTime\": 1647705996.2758098, \"step\": 2119, \"value\": 0.2656483054161072}, {\"wallTime\": 1647705996.3351622, \"step\": 2120, \"value\": 0.2672179639339447}, {\"wallTime\": 1647705996.4606473, \"step\": 2122, \"value\": 0.270385205745697}, {\"wallTime\": 1647705996.5199006, \"step\": 2123, \"value\": 0.271982878446579}, {\"wallTime\": 1647705996.5791662, \"step\": 2124, \"value\": 0.27358999848365784}, {\"wallTime\": 1647705996.6922889, \"step\": 2126, \"value\": 0.2768327593803406}, {\"wallTime\": 1647705996.7396464, \"step\": 2127, \"value\": 0.278468519449234}, {\"wallTime\": 1647705997.0641606, \"step\": 2134, \"value\": 0.29019275307655334}, {\"wallTime\": 1647705997.1011858, \"step\": 2135, \"value\": 0.2919074594974518}, {\"wallTime\": 1647705997.1456678, \"step\": 2136, \"value\": 0.29363229870796204}, {\"wallTime\": 1647705997.2702286, \"step\": 2139, \"value\": 0.29886823892593384}, {\"wallTime\": 1647705997.4461234, \"step\": 2143, \"value\": 0.3059949576854706}, {\"wallTime\": 1647705997.704817, \"step\": 2149, \"value\": 0.3170049786567688}, {\"wallTime\": 1647705997.7450354, \"step\": 2150, \"value\": 0.3188781440258026}, {\"wallTime\": 1647705997.9725685, \"step\": 2154, \"value\": 0.32648202776908875}, {\"wallTime\": 1647705998.0338535, \"step\": 2155, \"value\": 0.32841116189956665}, {\"wallTime\": 1647705998.2557483, \"step\": 2159, \"value\": 0.3362423777580261}, {\"wallTime\": 1647705998.3099995, \"step\": 2160, \"value\": 0.3382291793823242}, {\"wallTime\": 1647705998.3647137, \"step\": 2161, \"value\": 0.34022775292396545}, {\"wallTime\": 1647705998.421171, \"step\": 2162, \"value\": 0.34223809838294983}, {\"wallTime\": 1647705998.732289, \"step\": 2169, \"value\": 0.35664719343185425}, {\"wallTime\": 1647705998.9037602, \"step\": 2173, \"value\": 0.36515170335769653}, {\"wallTime\": 1647705998.98605, \"step\": 2175, \"value\": 0.3694797158241272}, {\"wallTime\": 1647705999.0282125, \"step\": 2176, \"value\": 0.3716629445552826}, {\"wallTime\": 1647705999.3511624, \"step\": 2183, \"value\": 0.3873108923435211}, {\"wallTime\": 1647705999.44865, \"step\": 2185, \"value\": 0.39190155267715454}, {\"wallTime\": 1647705999.5501616, \"step\": 2187, \"value\": 0.3965466022491455}, {\"wallTime\": 1647705999.6407197, \"step\": 2189, \"value\": 0.40124672651290894}, {\"wallTime\": 1647705999.8684294, \"step\": 2194, \"value\": 0.4132422208786011}, {\"wallTime\": 1647706000.0988953, \"step\": 2199, \"value\": 0.42559632658958435}, {\"wallTime\": 1647706000.186605, \"step\": 2201, \"value\": 0.4306407570838928}, {\"wallTime\": 1647706000.230858, \"step\": 2202, \"value\": 0.4331853687763214}, {\"wallTime\": 1647706000.2818062, \"step\": 2203, \"value\": 0.4357450008392334}, {\"wallTime\": 1647706000.4092069, \"step\": 2206, \"value\": 0.44351500272750854}, {\"wallTime\": 1647706000.537623, \"step\": 2209, \"value\": 0.4514235556125641}, {\"wallTime\": 1647706000.6289442, \"step\": 2211, \"value\": 0.45677411556243896}, {\"wallTime\": 1647706000.674865, \"step\": 2212, \"value\": 0.4594731330871582}, {\"wallTime\": 1647706000.7626672, \"step\": 2214, \"value\": 0.4649191200733185}, {\"wallTime\": 1647706000.8086712, \"step\": 2215, \"value\": 0.46766626834869385}, {\"wallTime\": 1647706000.8795435, \"step\": 2216, \"value\": 0.4704296290874481}, {\"wallTime\": 1647706001.1696181, \"step\": 2221, \"value\": 0.4844933748245239}, {\"wallTime\": 1647706001.2187495, \"step\": 2222, \"value\": 0.48735618591308594}, {\"wallTime\": 1647706001.2650433, \"step\": 2223, \"value\": 0.4902358949184418}, {\"wallTime\": 1647706001.3528328, \"step\": 2225, \"value\": 0.4960464835166931}, {\"wallTime\": 1647706001.441828, \"step\": 2227, \"value\": 0.5019259452819824}, {\"wallTime\": 1647706001.7223737, \"step\": 2233, \"value\": 0.5199857950210571}, {\"wallTime\": 1647706001.857367, \"step\": 2236, \"value\": 0.5292579531669617}, {\"wallTime\": 1647706001.9916086, \"step\": 2239, \"value\": 0.5386953949928284}, {\"wallTime\": 1647706002.1297233, \"step\": 2242, \"value\": 0.5483012199401855}, {\"wallTime\": 1647706002.22189, \"step\": 2244, \"value\": 0.5548000335693359}, {\"wallTime\": 1647706002.3586102, \"step\": 2247, \"value\": 0.5646929740905762}, {\"wallTime\": 1647706002.7491229, \"step\": 2254, \"value\": 0.5884679555892944}, {\"wallTime\": 1647706002.9191532, \"step\": 2257, \"value\": 0.5989612340927124}, {\"wallTime\": 1647706002.9764042, \"step\": 2258, \"value\": 0.6025004386901855}, {\"wallTime\": 1647706003.2826667, \"step\": 2264, \"value\": 0.6241790056228638}, {\"wallTime\": 1647706003.372681, \"step\": 2266, \"value\": 0.63157719373703}, {\"wallTime\": 1647706003.4173396, \"step\": 2267, \"value\": 0.635309100151062}, {\"wallTime\": 1647706003.7341652, \"step\": 2274, \"value\": 0.6620572209358215}, {\"wallTime\": 1647706003.8162818, \"step\": 2276, \"value\": 0.669904351234436}, {\"wallTime\": 1647706003.986849, \"step\": 2280, \"value\": 0.6858787536621094}, {\"wallTime\": 1647706004.0288346, \"step\": 2281, \"value\": 0.6899315118789673}, {\"wallTime\": 1647706004.14922, \"step\": 2284, \"value\": 0.7022340297698975}, {\"wallTime\": 1647706004.1938791, \"step\": 2285, \"value\": 0.706383466720581}, {\"wallTime\": 1647706004.4709263, \"step\": 2291, \"value\": 0.731799840927124}, {\"wallTime\": 1647706004.5148528, \"step\": 2292, \"value\": 0.7361239790916443}, {\"wallTime\": 1647706004.5597281, \"step\": 2293, \"value\": 0.7404736280441284}, {\"wallTime\": 1647706004.8652802, \"step\": 2300, \"value\": 0.7716494202613831}, {\"wallTime\": 1647706005.083571, \"step\": 2305, \"value\": 0.794718325138092}, {\"wallTime\": 1647706005.1285846, \"step\": 2306, \"value\": 0.7994142174720764}, {\"wallTime\": 1647706005.1684208, \"step\": 2307, \"value\": 0.8041378259658813}, {\"wallTime\": 1647706005.253285, \"step\": 2309, \"value\": 0.813668966293335}, {\"wallTime\": 1647706005.3352184, \"step\": 2311, \"value\": 0.8233131170272827}, {\"wallTime\": 1647706005.4915252, \"step\": 2315, \"value\": 0.8429456353187561}, {\"wallTime\": 1647706005.5318754, \"step\": 2316, \"value\": 0.8479264974594116}, {\"wallTime\": 1647706005.663064, \"step\": 2319, \"value\": 0.8630463480949402}, {\"wallTime\": 1647706005.879348, \"step\": 2324, \"value\": 0.8888475894927979}, {\"wallTime\": 1647706006.1404, \"step\": 2330, \"value\": 0.9208292365074158}, {\"wallTime\": 1647706006.2324207, \"step\": 2332, \"value\": 0.9317435026168823}, {\"wallTime\": 1647706006.3585916, \"step\": 2335, \"value\": 0.9483579397201538}, {\"wallTime\": 1647706006.56829, \"step\": 2340, \"value\": 0.9767096042633057}, {\"wallTime\": 1647706006.719648, \"step\": 2342, \"value\": 0.9882861971855164}, {\"wallTime\": 1647706006.7282186, \"step\": 2343, \"value\": 0.9941258430480957}, {\"wallTime\": 1647706006.7360327, \"step\": 2344, \"value\": 1.0}], \"tb_logs/OneCycleLR015052-Adam\": [{\"wallTime\": 1647712111.116276, \"step\": 3, \"value\": 2.0294139176257886e-05}, {\"wallTime\": 1647712111.2071767, \"step\": 4, \"value\": 2.0316012523835525e-05}, {\"wallTime\": 1647712111.6047897, \"step\": 10, \"value\": 2.0549283362925053e-05}, {\"wallTime\": 1647712111.8334494, \"step\": 14, \"value\": 2.0801910068257712e-05}, {\"wallTime\": 1647712111.894746, \"step\": 15, \"value\": 2.0877194401691668e-05}, {\"wallTime\": 1647712112.0427735, \"step\": 18, \"value\": 2.1132134861545637e-05}, {\"wallTime\": 1647712112.0815265, \"step\": 19, \"value\": 2.122680416505318e-05}, {\"wallTime\": 1647712112.1249278, \"step\": 20, \"value\": 2.1326315618352965e-05}, {\"wallTime\": 1647712112.2175708, \"step\": 22, \"value\": 2.1539854060392827e-05}, {\"wallTime\": 1647712112.2614975, \"step\": 23, \"value\": 2.16538774111541e-05}, {\"wallTime\": 1647712112.4385052, \"step\": 26, \"value\": 2.2024936697562225e-05}, {\"wallTime\": 1647712112.4783466, \"step\": 27, \"value\": 2.2158277715789154e-05}, {\"wallTime\": 1647712112.7723906, \"step\": 33, \"value\": 2.3059503291733563e-05}, {\"wallTime\": 1647712112.9207697, \"step\": 36, \"value\": 2.3575024897581898e-05}, {\"wallTime\": 1647712113.0121248, \"step\": 38, \"value\": 2.3942684492794797e-05}, {\"wallTime\": 1647712113.1200325, \"step\": 40, \"value\": 2.4329492589458823e-05}, {\"wallTime\": 1647712113.5159023, \"step\": 47, \"value\": 2.5833658582996577e-05}, {\"wallTime\": 1647712113.5791228, \"step\": 48, \"value\": 2.606757334433496e-05}, {\"wallTime\": 1647712113.638919, \"step\": 49, \"value\": 2.630623203003779e-05}, {\"wallTime\": 1647712113.7531512, \"step\": 51, \"value\": 2.6797766622621566e-05}, {\"wallTime\": 1647712113.9145577, \"step\": 54, \"value\": 2.7570529709919356e-05}, {\"wallTime\": 1647712114.0629644, \"step\": 57, \"value\": 2.838572436303366e-05}, {\"wallTime\": 1647712114.1976655, \"step\": 60, \"value\": 2.9243205062812194e-05}, {\"wallTime\": 1647712114.2535696, \"step\": 61, \"value\": 2.9538401577156037e-05}, {\"wallTime\": 1647712114.296087, \"step\": 62, \"value\": 2.9838274713256396e-05}, {\"wallTime\": 1647712114.3363633, \"step\": 63, \"value\": 3.0142815376166254e-05}, {\"wallTime\": 1647712114.4230983, \"step\": 65, \"value\": 3.076588109252043e-05}, {\"wallTime\": 1647712114.4846582, \"step\": 66, \"value\": 3.1084393413038924e-05}, {\"wallTime\": 1647712114.5249574, \"step\": 67, \"value\": 3.1407551432494074e-05}, {\"wallTime\": 1647712114.5802824, \"step\": 68, \"value\": 3.1735347874928266e-05}, {\"wallTime\": 1647712114.6466982, \"step\": 70, \"value\": 3.240482328692451e-05}, {\"wallTime\": 1647712114.6893997, \"step\": 71, \"value\": 3.274649498052895e-05}, {\"wallTime\": 1647712114.965599, \"step\": 77, \"value\": 3.4893098927568644e-05}, {\"wallTime\": 1647712115.0691297, \"step\": 79, \"value\": 3.564525832189247e-05}, {\"wallTime\": 1647712115.1229534, \"step\": 80, \"value\": 3.60281701432541e-05}, {\"wallTime\": 1647712115.2280672, \"step\": 82, \"value\": 3.6807625292567536e-05}, {\"wallTime\": 1647712115.3598404, \"step\": 85, \"value\": 3.801076309173368e-05}, {\"wallTime\": 1647712115.560267, \"step\": 89, \"value\": 3.967798693338409e-05}, {\"wallTime\": 1647712115.602357, \"step\": 90, \"value\": 4.010599514003843e-05}, {\"wallTime\": 1647712116.010334, \"step\": 99, \"value\": 4.415789953782223e-05}, {\"wallTime\": 1647712116.0508072, \"step\": 100, \"value\": 4.4630149204749614e-05}, {\"wallTime\": 1647712116.179625, \"step\": 103, \"value\": 4.6073098928900436e-05}, {\"wallTime\": 1647712116.3020885, \"step\": 106, \"value\": 4.7555153287248686e-05}, {\"wallTime\": 1647712116.3442113, \"step\": 107, \"value\": 4.805781281902455e-05}, {\"wallTime\": 1647712116.462929, \"step\": 109, \"value\": 4.907603943138383e-05}, {\"wallTime\": 1647712116.752821, \"step\": 116, \"value\": 5.277424497762695e-05}, {\"wallTime\": 1647712116.9675577, \"step\": 121, \"value\": 5.554235394811258e-05}, {\"wallTime\": 1647712117.133712, \"step\": 125, \"value\": 5.783169763162732e-05}, {\"wallTime\": 1647712117.1782014, \"step\": 126, \"value\": 5.8414338127477095e-05}, {\"wallTime\": 1647712117.2682478, \"step\": 128, \"value\": 5.9591897297650576e-05}, {\"wallTime\": 1647712117.3606608, \"step\": 130, \"value\": 6.078575461287983e-05}, {\"wallTime\": 1647712117.4060018, \"step\": 131, \"value\": 6.13887605140917e-05}, {\"wallTime\": 1647712117.635857, \"step\": 136, \"value\": 6.446414772653952e-05}, {\"wallTime\": 1647712117.679904, \"step\": 137, \"value\": 6.509120430564508e-05}, {\"wallTime\": 1647712118.008066, \"step\": 144, \"value\": 6.959088932489976e-05}, {\"wallTime\": 1647712118.0967546, \"step\": 146, \"value\": 7.091157749528065e-05}, {\"wallTime\": 1647712118.1409574, \"step\": 147, \"value\": 7.157769869081676e-05}, {\"wallTime\": 1647712118.317193, \"step\": 150, \"value\": 7.359901792369783e-05}, {\"wallTime\": 1647712118.6257474, \"step\": 157, \"value\": 7.844758511055261e-05}, {\"wallTime\": 1647712118.7101316, \"step\": 159, \"value\": 7.986638229340315e-05}, {\"wallTime\": 1647712118.7564251, \"step\": 160, \"value\": 8.058128150878474e-05}, {\"wallTime\": 1647712118.8679366, \"step\": 162, \"value\": 8.20220448076725e-05}, {\"wallTime\": 1647712118.936702, \"step\": 164, \"value\": 8.347730909008533e-05}, {\"wallTime\": 1647712119.2055218, \"step\": 170, \"value\": 8.792894368525594e-05}, {\"wallTime\": 1647712119.2518423, \"step\": 171, \"value\": 8.868324948707595e-05}, {\"wallTime\": 1647712119.2939296, \"step\": 172, \"value\": 8.944104774855077e-05}, {\"wallTime\": 1647712119.4241693, \"step\": 175, \"value\": 9.173523721983656e-05}, {\"wallTime\": 1647712119.470482, \"step\": 176, \"value\": 9.25068452488631e-05}, {\"wallTime\": 1647712119.5180073, \"step\": 177, \"value\": 9.328188025392592e-05}, {\"wallTime\": 1647712119.5635622, \"step\": 178, \"value\": 9.406030585523695e-05}, {\"wallTime\": 1647712119.6581452, \"step\": 180, \"value\": 9.562730701873079e-05}, {\"wallTime\": 1647712119.7130516, \"step\": 181, \"value\": 9.641584620112553e-05}, {\"wallTime\": 1647712119.8548133, \"step\": 184, \"value\": 9.880142170004547e-05}, {\"wallTime\": 1647712119.9027028, \"step\": 185, \"value\": 9.960321767721325e-05}, {\"wallTime\": 1647712119.9505193, \"step\": 186, \"value\": 0.00010040828783530742}, {\"wallTime\": 1647712120.1870284, \"step\": 190, \"value\": 0.00010366097558289766}, {\"wallTime\": 1647712120.2294285, \"step\": 191, \"value\": 0.00010448217653902248}, {\"wallTime\": 1647712120.2742822, \"step\": 192, \"value\": 0.00010530654981266707}, {\"wallTime\": 1647712120.4232833, \"step\": 195, \"value\": 0.00010779855801956728}, {\"wallTime\": 1647712120.616032, \"step\": 199, \"value\": 0.0001111647070501931}, {\"wallTime\": 1647712120.660073, \"step\": 200, \"value\": 0.00011201389133930206}, {\"wallTime\": 1647712120.7539108, \"step\": 202, \"value\": 0.00011372132576070726}, {\"wallTime\": 1647712120.7989633, \"step\": 203, \"value\": 0.00011457953951321542}, {\"wallTime\": 1647712120.8455963, \"step\": 204, \"value\": 0.00011544072913238779}, {\"wallTime\": 1647712120.8920743, \"step\": 205, \"value\": 0.00011630487279035151}, {\"wallTime\": 1647712120.9835753, \"step\": 207, \"value\": 0.00011804196401499212}, {\"wallTime\": 1647712121.0742183, \"step\": 209, \"value\": 0.00011979068221990019}, {\"wallTime\": 1647712121.170297, \"step\": 211, \"value\": 0.00012155087460996583}, {\"wallTime\": 1647712121.2634456, \"step\": 213, \"value\": 0.0001233224174939096}, {\"wallTime\": 1647712121.3624256, \"step\": 215, \"value\": 0.00012510514352470636}, {\"wallTime\": 1647712121.4089518, \"step\": 216, \"value\": 0.00012600066838786006}, {\"wallTime\": 1647712121.5430775, \"step\": 219, \"value\": 0.00012870364298578352}, {\"wallTime\": 1647712121.5834446, \"step\": 220, \"value\": 0.0001296100381296128}, {\"wallTime\": 1647712121.6234858, \"step\": 221, \"value\": 0.0001305191108258441}, {\"wallTime\": 1647712121.6740267, \"step\": 222, \"value\": 0.0001314308465225622}, {\"wallTime\": 1647712121.7647893, \"step\": 224, \"value\": 0.00013326220505405217}, {\"wallTime\": 1647712121.9755363, \"step\": 229, \"value\": 0.00013788578507956117}, {\"wallTime\": 1647712122.370921, \"step\": 237, \"value\": 0.00014541296695824713}, {\"wallTime\": 1647712122.417816, \"step\": 238, \"value\": 0.00014636467676609755}, {\"wallTime\": 1647712122.4756255, \"step\": 239, \"value\": 0.00014731872943229973}, {\"wallTime\": 1647712122.562821, \"step\": 241, \"value\": 0.0001492337614763528}, {\"wallTime\": 1647712122.609603, \"step\": 242, \"value\": 0.00015019471175037324}, {\"wallTime\": 1647712122.697412, \"step\": 244, \"value\": 0.0001521233789389953}, {\"wallTime\": 1647712122.7419152, \"step\": 245, \"value\": 0.00015309105219785124}, {\"wallTime\": 1647712122.7842205, \"step\": 246, \"value\": 0.0001540609373478219}, {\"wallTime\": 1647712122.8263674, \"step\": 247, \"value\": 0.0001550330052850768}, {\"wallTime\": 1647712123.0511127, \"step\": 252, \"value\": 0.00015992543194442987}, {\"wallTime\": 1647712123.0984857, \"step\": 253, \"value\": 0.00016091020370367914}, {\"wallTime\": 1647712123.1454227, \"step\": 254, \"value\": 0.00016189702728297561}, {\"wallTime\": 1647712123.376865, \"step\": 258, \"value\": 0.00016586437413934618}, {\"wallTime\": 1647712123.4355705, \"step\": 259, \"value\": 0.00016686113667674363}, {\"wallTime\": 1647712123.4950283, \"step\": 260, \"value\": 0.00016785982006695122}, {\"wallTime\": 1647712123.6108828, \"step\": 262, \"value\": 0.00016986290575005114}, {\"wallTime\": 1647712124.0159528, \"step\": 270, \"value\": 0.00017794840096030384}, {\"wallTime\": 1647712124.060228, \"step\": 271, \"value\": 0.0001789669768186286}, {\"wallTime\": 1647712124.1849654, \"step\": 274, \"value\": 0.0001820327597670257}, {\"wallTime\": 1647712124.2724428, \"step\": 276, \"value\": 0.00018408478354103863}, {\"wallTime\": 1647712124.40039, \"step\": 278, \"value\": 0.0001861431373981759}, {\"wallTime\": 1647712124.4626932, \"step\": 280, \"value\": 0.00018820767581928521}, {\"wallTime\": 1647712124.5564282, \"step\": 282, \"value\": 0.00019027820962946862}, {\"wallTime\": 1647712124.5952563, \"step\": 283, \"value\": 0.00019131568842567503}, {\"wallTime\": 1647712124.6856558, \"step\": 285, \"value\": 0.000193394924281165}, {\"wallTime\": 1647712124.7743685, \"step\": 287, \"value\": 0.0001954797626240179}, {\"wallTime\": 1647712124.8126118, \"step\": 288, \"value\": 0.00019652422633953393}, {\"wallTime\": 1647712124.8961506, \"step\": 290, \"value\": 0.00019861714099533856}, {\"wallTime\": 1647712125.1121383, \"step\": 295, \"value\": 0.00020387169206514955}, {\"wallTime\": 1647712125.1531663, \"step\": 296, \"value\": 0.00020492625480983406}, {\"wallTime\": 1647712125.1806583, \"step\": 297, \"value\": 0.00020598198170773685}, {\"wallTime\": 1647712125.2185514, \"step\": 298, \"value\": 0.00020703885820694268}, {\"wallTime\": 1647712125.5587575, \"step\": 306, \"value\": 0.00021553262195084244}, {\"wallTime\": 1647712125.6486723, \"step\": 308, \"value\": 0.00021766603458672762}, {\"wallTime\": 1647712125.6935403, \"step\": 309, \"value\": 0.00021873413061257452}, {\"wallTime\": 1647712125.8316462, \"step\": 312, \"value\": 0.00022194367193151265}, {\"wallTime\": 1647712126.012809, \"step\": 316, \"value\": 0.00022623453696724027}, {\"wallTime\": 1647712126.1027691, \"step\": 318, \"value\": 0.0002283844951307401}, {\"wallTime\": 1647712126.1483672, \"step\": 319, \"value\": 0.0002294605365023017}, {\"wallTime\": 1647712126.29108, \"step\": 322, \"value\": 0.00023269264784175903}, {\"wallTime\": 1647712126.374784, \"step\": 324, \"value\": 0.0002348504785913974}, {\"wallTime\": 1647712126.5621114, \"step\": 329, \"value\": 0.00024025465245358646}, {\"wallTime\": 1647712126.6453588, \"step\": 331, \"value\": 0.0002424197009531781}, {\"wallTime\": 1647712126.6902006, \"step\": 332, \"value\": 0.0002435028727632016}, {\"wallTime\": 1647712126.9562552, \"step\": 337, \"value\": 0.00024892418878152966}, {\"wallTime\": 1647712127.0018685, \"step\": 338, \"value\": 0.00025000941241160035}, {\"wallTime\": 1647712127.09177, \"step\": 340, \"value\": 0.0002521806163713336}, {\"wallTime\": 1647712127.227922, \"step\": 343, \"value\": 0.0002554390230216086}, {\"wallTime\": 1647712127.3174129, \"step\": 345, \"value\": 0.000257612147834152}, {\"wallTime\": 1647712127.3620827, \"step\": 346, \"value\": 0.0002586988848634064}, {\"wallTime\": 1647712127.535303, \"step\": 350, \"value\": 0.00026304653147235513}, {\"wallTime\": 1647712127.6194484, \"step\": 352, \"value\": 0.0002652204711921513}, {\"wallTime\": 1647712127.6615996, \"step\": 353, \"value\": 0.00026630741194821894}, {\"wallTime\": 1647712127.7036936, \"step\": 354, \"value\": 0.0002673942653927952}, {\"wallTime\": 1647712127.8338025, \"step\": 358, \"value\": 0.00027174068964086473}, {\"wallTime\": 1647712128.0139515, \"step\": 362, \"value\": 0.00027608443633653224}, {\"wallTime\": 1647712128.0596466, \"step\": 363, \"value\": 0.0002771698054857552}, {\"wallTime\": 1647712128.1023073, \"step\": 364, \"value\": 0.00027825485449284315}, {\"wallTime\": 1647712128.1413927, \"step\": 365, \"value\": 0.000279339641565457}, {\"wallTime\": 1647712128.1819663, \"step\": 366, \"value\": 0.0002804241084959358}, {\"wallTime\": 1647712128.2297177, \"step\": 367, \"value\": 0.00028150819707661867}, {\"wallTime\": 1647712128.512625, \"step\": 374, \"value\": 0.0002890855830628425}, {\"wallTime\": 1647712128.6563594, \"step\": 377, \"value\": 0.0002923257416114211}, {\"wallTime\": 1647712128.70308, \"step\": 378, \"value\": 0.00029340467881411314}, {\"wallTime\": 1647712129.055241, \"step\": 386, \"value\": 0.000302012573229149}, {\"wallTime\": 1647712129.2417464, \"step\": 390, \"value\": 0.00030629863613285124}, {\"wallTime\": 1647712129.2899942, \"step\": 391, \"value\": 0.00030736802727915347}, {\"wallTime\": 1647712129.377573, \"step\": 392, \"value\": 0.00030843657441437244}, {\"wallTime\": 1647712129.4380026, \"step\": 393, \"value\": 0.00030950421933084726}, {\"wallTime\": 1647712129.496562, \"step\": 394, \"value\": 0.00031057093292474747}, {\"wallTime\": 1647712129.6717963, \"step\": 397, \"value\": 0.00031376531114801764}, {\"wallTime\": 1647712129.9175882, \"step\": 402, \"value\": 0.00031906881486065686}, {\"wallTime\": 1647712130.0017984, \"step\": 404, \"value\": 0.0003211825678590685}, {\"wallTime\": 1647712130.1632848, \"step\": 408, \"value\": 0.0003253960167057812}, {\"wallTime\": 1647712130.2048228, \"step\": 409, \"value\": 0.00032644631573930383}, {\"wallTime\": 1647712130.383511, \"step\": 413, \"value\": 0.00033063473529182374}, {\"wallTime\": 1647712130.4298296, \"step\": 414, \"value\": 0.00033167851506732404}, {\"wallTime\": 1647712130.4762857, \"step\": 415, \"value\": 0.0003327209269627929}, {\"wallTime\": 1647712130.6170394, \"step\": 418, \"value\": 0.00033583978074602783}, {\"wallTime\": 1647712130.7604513, \"step\": 421, \"value\": 0.00033894559601321816}, {\"wallTime\": 1647712130.80795, \"step\": 422, \"value\": 0.0003399778506718576}, {\"wallTime\": 1647712130.9539595, \"step\": 425, \"value\": 0.0003430653887335211}, {\"wallTime\": 1647712131.0003343, \"step\": 426, \"value\": 0.00034409138606861234}, {\"wallTime\": 1647712131.1762004, \"step\": 430, \"value\": 0.0003481790772639215}, {\"wallTime\": 1647712131.22251, \"step\": 431, \"value\": 0.000349196809111163}, {\"wallTime\": 1647712131.3937287, \"step\": 435, \"value\": 0.00035325036151334643}, {\"wallTime\": 1647712131.4394157, \"step\": 436, \"value\": 0.00035425930400379}, {\"wallTime\": 1647712131.486852, \"step\": 437, \"value\": 0.00035526641295291483}, {\"wallTime\": 1647712131.5770698, \"step\": 439, \"value\": 0.00035727513022720814}, {\"wallTime\": 1647712131.6210864, \"step\": 440, \"value\": 0.0003582766803447157}, {\"wallTime\": 1647712131.664921, \"step\": 441, \"value\": 0.00035927630960941315}, {\"wallTime\": 1647712131.755181, \"step\": 443, \"value\": 0.00036126983468420804}, {\"wallTime\": 1647712131.8023376, \"step\": 444, \"value\": 0.0003622636722866446}, {\"wallTime\": 1647712131.850163, \"step\": 445, \"value\": 0.0003632555017247796}, {\"wallTime\": 1647712131.8981392, \"step\": 446, \"value\": 0.0003642453521024436}, {\"wallTime\": 1647712132.0742753, \"step\": 450, \"value\": 0.00036818438093177974}, {\"wallTime\": 1647712132.124249, \"step\": 451, \"value\": 0.0003691639576572925}, {\"wallTime\": 1647712132.1685476, \"step\": 452, \"value\": 0.00037014138069935143}, {\"wallTime\": 1647712132.212713, \"step\": 453, \"value\": 0.0003711167082656175}, {\"wallTime\": 1647712132.254863, \"step\": 454, \"value\": 0.0003720898530445993}, {\"wallTime\": 1647712132.3810406, \"step\": 456, \"value\": 0.0003740296233445406}, {\"wallTime\": 1647712132.4715571, \"step\": 458, \"value\": 0.0003759605169761926}, {\"wallTime\": 1647712132.5537446, \"step\": 460, \"value\": 0.00037788241752423346}, {\"wallTime\": 1647712132.6028728, \"step\": 461, \"value\": 0.00037883993354626}, {\"wallTime\": 1647712132.7930675, \"step\": 465, \"value\": 0.00038264671457000077}, {\"wallTime\": 1647712132.878281, \"step\": 466, \"value\": 0.00038359250174835324}, {\"wallTime\": 1647712132.9301538, \"step\": 468, \"value\": 0.00038547682925127447}, {\"wallTime\": 1647712137.2819538, \"step\": 470, \"value\": 0.00038735137786716223}, {\"wallTime\": 1647712137.501815, \"step\": 474, \"value\": 0.00039107055636122823}, {\"wallTime\": 1647712137.5551507, \"step\": 475, \"value\": 0.00039199399179778993}, {\"wallTime\": 1647712137.7092671, \"step\": 478, \"value\": 0.0003947488439735025}, {\"wallTime\": 1647712137.7633147, \"step\": 479, \"value\": 0.00039566188934259117}, {\"wallTime\": 1647712137.8184404, \"step\": 480, \"value\": 0.0003965723153669387}, {\"wallTime\": 1647712137.8773813, \"step\": 481, \"value\": 0.0003974800347350538}, {\"wallTime\": 1647712137.9986522, \"step\": 483, \"value\": 0.00039928744081407785}, {\"wallTime\": 1647712138.061379, \"step\": 484, \"value\": 0.0004001870984211564}, {\"wallTime\": 1647712138.2134256, \"step\": 487, \"value\": 0.0004028695111628622}, {\"wallTime\": 1647712138.2576714, \"step\": 488, \"value\": 0.0004037580802105367}, {\"wallTime\": 1647712138.3040435, \"step\": 489, \"value\": 0.0004046438552904874}, {\"wallTime\": 1647712138.3878312, \"step\": 491, \"value\": 0.0004064069071318954}, {\"wallTime\": 1647712138.5220897, \"step\": 494, \"value\": 0.00040902994805946946}, {\"wallTime\": 1647712138.7263186, \"step\": 498, \"value\": 0.0004124864935874939}, {\"wallTime\": 1647712138.913726, \"step\": 502, \"value\": 0.0004158953088335693}, {\"wallTime\": 1647712138.9640958, \"step\": 503, \"value\": 0.0004167399019934237}, {\"wallTime\": 1647712139.1012478, \"step\": 506, \"value\": 0.0004192552878521383}, {\"wallTime\": 1647712139.246135, \"step\": 509, \"value\": 0.0004217425885144621}, {\"wallTime\": 1647712139.2968295, \"step\": 510, \"value\": 0.00042256538290530443}, {\"wallTime\": 1647712139.360267, \"step\": 511, \"value\": 0.0004233849758747965}, {\"wallTime\": 1647712139.397999, \"step\": 512, \"value\": 0.00042420136742293835}, {\"wallTime\": 1647712139.4360473, \"step\": 513, \"value\": 0.00042501455754972994}, {\"wallTime\": 1647712139.4844427, \"step\": 514, \"value\": 0.00042582451715134084}, {\"wallTime\": 1647712139.6376555, \"step\": 517, \"value\": 0.0004282347799744457}, {\"wallTime\": 1647712139.686241, \"step\": 518, \"value\": 0.00042903164285235107}, {\"wallTime\": 1647712139.7374883, \"step\": 519, \"value\": 0.00042982518789358437}, {\"wallTime\": 1647712139.786671, \"step\": 520, \"value\": 0.00043061538599431515}, {\"wallTime\": 1647712139.923554, \"step\": 523, \"value\": 0.0004329658695496619}, {\"wallTime\": 1647712140.2587543, \"step\": 530, \"value\": 0.0004383308987598866}, {\"wallTime\": 1647712140.500089, \"step\": 533, \"value\": 0.0004405779764056206}, {\"wallTime\": 1647712140.544275, \"step\": 534, \"value\": 0.00044131994945928454}, {\"wallTime\": 1647712140.6326175, \"step\": 536, \"value\": 0.0004427931853570044}, {\"wallTime\": 1647712140.68093, \"step\": 537, \"value\": 0.00044352441909722984}, {\"wallTime\": 1647712140.7453477, \"step\": 538, \"value\": 0.00044425204396247864}, {\"wallTime\": 1647712140.776714, \"step\": 539, \"value\": 0.0004449760599527508}, {\"wallTime\": 1647712140.8255603, \"step\": 540, \"value\": 0.0004456964379642159}, {\"wallTime\": 1647712140.9135616, \"step\": 542, \"value\": 0.0004471262509468943}, {\"wallTime\": 1647712141.010646, \"step\": 544, \"value\": 0.00044854136649519205}, {\"wallTime\": 1647712141.101178, \"step\": 546, \"value\": 0.0004499416390899569}, {\"wallTime\": 1647712141.1443903, \"step\": 547, \"value\": 0.00045063620200380683}, {\"wallTime\": 1647712141.2983458, \"step\": 550, \"value\": 0.00045269730617292225}, {\"wallTime\": 1647712141.3944225, \"step\": 552, \"value\": 0.0004540524969343096}, {\"wallTime\": 1647712141.5354102, \"step\": 555, \"value\": 0.0004560565866995603}, {\"wallTime\": 1647712141.5796876, \"step\": 556, \"value\": 0.00045671695261262357}, {\"wallTime\": 1647712141.84609, \"step\": 562, \"value\": 0.0004605973372235894}, {\"wallTime\": 1647712141.8896594, \"step\": 563, \"value\": 0.0004612303455360234}, {\"wallTime\": 1647712141.9313645, \"step\": 564, \"value\": 0.00046185936662368476}, {\"wallTime\": 1647712142.1252553, \"step\": 568, \"value\": 0.0004643356951419264}, {\"wallTime\": 1647712142.3022482, \"step\": 571, \"value\": 0.00046615078463219106}, {\"wallTime\": 1647712142.398839, \"step\": 573, \"value\": 0.0004673405783250928}, {\"wallTime\": 1647712142.5434246, \"step\": 576, \"value\": 0.0004690946370828897}, {\"wallTime\": 1647712142.7319417, \"step\": 580, \"value\": 0.0004713757080025971}, {\"wallTime\": 1647712142.9083588, \"step\": 584, \"value\": 0.00047359021846204996}, {\"wallTime\": 1647712142.9547312, \"step\": 585, \"value\": 0.0004741333541460335}, {\"wallTime\": 1647712142.9968526, \"step\": 586, \"value\": 0.00047467226977460086}, {\"wallTime\": 1647712143.0790455, \"step\": 588, \"value\": 0.00047573744086548686}, {\"wallTime\": 1647712143.172396, \"step\": 590, \"value\": 0.00047678558621555567}, {\"wallTime\": 1647712143.2176318, \"step\": 591, \"value\": 0.00047730328515172005}, {\"wallTime\": 1647712143.2623816, \"step\": 592, \"value\": 0.00047781667672097683}, {\"wallTime\": 1647712143.354687, \"step\": 594, \"value\": 0.0004788305959664285}, {\"wallTime\": 1647712143.443991, \"step\": 596, \"value\": 0.0004798272857442498}, {\"wallTime\": 1647712143.4868453, \"step\": 597, \"value\": 0.0004803191404789686}, {\"wallTime\": 1647712143.537287, \"step\": 598, \"value\": 0.00048080665874294937}, {\"wallTime\": 1647712143.5821788, \"step\": 599, \"value\": 0.00048128984053619206}, {\"wallTime\": 1647712143.6678686, \"step\": 601, \"value\": 0.00048224307829514146}, {\"wallTime\": 1647712143.720051, \"step\": 602, \"value\": 0.00048271313426084816}, {\"wallTime\": 1647712143.7671363, \"step\": 603, \"value\": 0.0004831787955481559}, {\"wallTime\": 1647712143.8621588, \"step\": 605, \"value\": 0.0004840969340875745}, {\"wallTime\": 1647712144.0084038, \"step\": 608, \"value\": 0.00048544100718572736}, {\"wallTime\": 1647712144.13062, \"step\": 610, \"value\": 0.00048631487879902124}, {\"wallTime\": 1647712144.3104148, \"step\": 613, \"value\": 0.00048759218771010637}, {\"wallTime\": 1647712144.3561044, \"step\": 614, \"value\": 0.0004880090127699077}, {\"wallTime\": 1647712144.4459682, \"step\": 616, \"value\": 0.0004888291587121785}, {\"wallTime\": 1647712144.547103, \"step\": 618, \"value\": 0.0004896312020719051}, {\"wallTime\": 1647712144.660904, \"step\": 620, \"value\": 0.0004904152010567486}, {\"wallTime\": 1647712144.7773962, \"step\": 622, \"value\": 0.0004911810392513871}, {\"wallTime\": 1647712144.8349233, \"step\": 623, \"value\": 0.000491557118948549}, {\"wallTime\": 1647712144.9877176, \"step\": 626, \"value\": 0.0004926579422317445}, {\"wallTime\": 1647712145.0789373, \"step\": 628, \"value\": 0.0004933688906021416}, {\"wallTime\": 1647712145.1244414, \"step\": 629, \"value\": 0.0004937174962833524}, {\"wallTime\": 1647712145.3050563, \"step\": 633, \"value\": 0.0004950657021254301}, {\"wallTime\": 1647712145.492914, \"step\": 637, \"value\": 0.0004963396931998432}, {\"wallTime\": 1647712145.6252584, \"step\": 640, \"value\": 0.0004972463357262313}, {\"wallTime\": 1647712145.671138, \"step\": 641, \"value\": 0.000497539178468287}, {\"wallTime\": 1647712145.727969, \"step\": 642, \"value\": 0.0004978273645974696}, {\"wallTime\": 1647712145.77403, \"step\": 643, \"value\": 0.0004981108359061182}, {\"wallTime\": 1647712145.8221402, \"step\": 644, \"value\": 0.0004983896506018937}, {\"wallTime\": 1647712146.103966, \"step\": 649, \"value\": 0.0004997129435651004}, {\"wallTime\": 1647712146.19496, \"step\": 651, \"value\": 0.0005002092220820487}, {\"wallTime\": 1647712146.242906, \"step\": 652, \"value\": 0.0005004502600058913}, {\"wallTime\": 1647712146.2921202, \"step\": 653, \"value\": 0.0005006865249015391}, {\"wallTime\": 1647712146.3406699, \"step\": 654, \"value\": 0.0005009180749766529}, {\"wallTime\": 1647712146.3935804, \"step\": 655, \"value\": 0.0005011448520235717}, {\"wallTime\": 1647712146.5674, \"step\": 658, \"value\": 0.0005017966614104807}, {\"wallTime\": 1647712146.689516, \"step\": 660, \"value\": 0.0005022073746658862}, {\"wallTime\": 1647712147.0126367, \"step\": 667, \"value\": 0.0005034941132180393}, {\"wallTime\": 1647712147.1317332, \"step\": 670, \"value\": 0.0005039736279286444}, {\"wallTime\": 1647712147.3515391, \"step\": 675, \"value\": 0.0005046764854341745}, {\"wallTime\": 1647712147.3955715, \"step\": 676, \"value\": 0.0005048025632277131}, {\"wallTime\": 1647712147.4273078, \"step\": 677, \"value\": 0.0005049238679930568}, {\"wallTime\": 1647712147.5263188, \"step\": 680, \"value\": 0.000505258678458631}, {\"wallTime\": 1647712147.6090672, \"step\": 682, \"value\": 0.0005054576904512942}, {\"wallTime\": 1647712147.6592453, \"step\": 683, \"value\": 0.000505549949593842}, {\"wallTime\": 1647712147.7013571, \"step\": 684, \"value\": 0.0005056373192928731}, {\"wallTime\": 1647712147.8465, \"step\": 687, \"value\": 0.0005058704409748316}, {\"wallTime\": 1647712148.073383, \"step\": 692, \"value\": 0.0005061620031483471}, {\"wallTime\": 1647712148.1580982, \"step\": 694, \"value\": 0.0005062445998191833}, {\"wallTime\": 1647712148.2445588, \"step\": 696, \"value\": 0.0005063077551312745}, {\"wallTime\": 1647712148.3257723, \"step\": 697, \"value\": 0.0005063320859335363}, {\"wallTime\": 1647712148.4187367, \"step\": 699, \"value\": 0.0005063661374151707}, {\"wallTime\": 1647712148.5479236, \"step\": 702, \"value\": 0.0005063811549916863}, {\"wallTime\": 1647712148.5892897, \"step\": 703, \"value\": 0.0005063802818767726}, {\"wallTime\": 1647712148.678132, \"step\": 705, \"value\": 0.0005063756252638996}, {\"wallTime\": 1647712148.8218255, \"step\": 709, \"value\": 0.0005063551943749189}, {\"wallTime\": 1647712148.8555746, \"step\": 710, \"value\": 0.0005063478020019829}, {\"wallTime\": 1647712148.9238427, \"step\": 712, \"value\": 0.0005063301650807261}, {\"wallTime\": 1647712149.0672379, \"step\": 715, \"value\": 0.0005062968120910227}, {\"wallTime\": 1647712149.1713858, \"step\": 717, \"value\": 0.0005062699201516807}, {\"wallTime\": 1647712149.3317745, \"step\": 720, \"value\": 0.0005062225973233581}, {\"wallTime\": 1647712149.3846903, \"step\": 721, \"value\": 0.0005062050186097622}, {\"wallTime\": 1647712149.49631, \"step\": 723, \"value\": 0.0005061670090071857}, {\"wallTime\": 1647712149.6270962, \"step\": 725, \"value\": 0.0005061252741143107}, {\"wallTime\": 1647712149.6908398, \"step\": 726, \"value\": 0.0005061030387878418}, {\"wallTime\": 1647712149.811083, \"step\": 728, \"value\": 0.0005060557159595191}, {\"wallTime\": 1647712149.871347, \"step\": 729, \"value\": 0.0005060306866653264}, {\"wallTime\": 1647712149.9743378, \"step\": 731, \"value\": 0.0005059778923168778}, {\"wallTime\": 1647712150.027444, \"step\": 732, \"value\": 0.0005059500690549612}, {\"wallTime\": 1647712150.068889, \"step\": 733, \"value\": 0.00050592131447047}, {\"wallTime\": 1647712150.3299236, \"step\": 738, \"value\": 0.0005057638045400381}, {\"wallTime\": 1647712150.5171967, \"step\": 742, \"value\": 0.0005056210793554783}, {\"wallTime\": 1647712150.596603, \"step\": 743, \"value\": 0.0005055831279605627}, {\"wallTime\": 1647712150.6442766, \"step\": 744, \"value\": 0.0005055441870354116}, {\"wallTime\": 1647712151.1316133, \"step\": 755, \"value\": 0.0005050552426837385}, {\"wallTime\": 1647712151.1839526, \"step\": 756, \"value\": 0.0005050052423030138}, {\"wallTime\": 1647712151.2722151, \"step\": 758, \"value\": 0.0005049025057815015}, {\"wallTime\": 1647712151.4890702, \"step\": 763, \"value\": 0.0005046295118518174}, {\"wallTime\": 1647712151.5343025, \"step\": 764, \"value\": 0.0005045721190981567}, {\"wallTime\": 1647712151.5607336, \"step\": 765, \"value\": 0.0005045138532295823}, {\"wallTime\": 1647712151.6872785, \"step\": 768, \"value\": 0.0005043334676884115}, {\"wallTime\": 1647712151.7326999, \"step\": 769, \"value\": 0.0005042715347371995}, {\"wallTime\": 1647712151.8702636, \"step\": 772, \"value\": 0.0005040800897404552}, {\"wallTime\": 1647712152.0141952, \"step\": 775, \"value\": 0.000503880437463522}, {\"wallTime\": 1647712152.0607076, \"step\": 776, \"value\": 0.0005038120434619486}, {\"wallTime\": 1647712152.157348, \"step\": 778, \"value\": 0.0005036724614910781}, {\"wallTime\": 1647712152.1993308, \"step\": 779, \"value\": 0.0005036013317294419}, {\"wallTime\": 1647712152.2438025, \"step\": 780, \"value\": 0.000503529270645231}, {\"wallTime\": 1647712152.2841008, \"step\": 781, \"value\": 0.0005034562782384455}, {\"wallTime\": 1647712152.328406, \"step\": 782, \"value\": 0.0005033823545090854}, {\"wallTime\": 1647712152.657706, \"step\": 788, \"value\": 0.0005029197200201452}, {\"wallTime\": 1647712152.7954338, \"step\": 791, \"value\": 0.0005026760627515614}, {\"wallTime\": 1647712152.8890753, \"step\": 793, \"value\": 0.0005025090067647398}, {\"wallTime\": 1647712153.0200799, \"step\": 795, \"value\": 0.0005023383419029415}, {\"wallTime\": 1647712153.1588986, \"step\": 799, \"value\": 0.0005019860691390932}, {\"wallTime\": 1647712153.3841338, \"step\": 804, \"value\": 0.0005015251808799803}, {\"wallTime\": 1647712153.4262345, \"step\": 805, \"value\": 0.0005014303023926914}, {\"wallTime\": 1647712153.484344, \"step\": 806, \"value\": 0.0005013344925828278}, {\"wallTime\": 1647712153.5560546, \"step\": 807, \"value\": 0.0005012377514503896}, {\"wallTime\": 1647712153.7095637, \"step\": 810, \"value\": 0.0005009421147406101}, {\"wallTime\": 1647712154.0858312, \"step\": 818, \"value\": 0.0005001139361411333}, {\"wallTime\": 1647712154.133278, \"step\": 819, \"value\": 0.0005000063101761043}, {\"wallTime\": 1647712154.230414, \"step\": 821, \"value\": 0.0004997883806936443}, {\"wallTime\": 1647712154.3252738, \"step\": 823, \"value\": 0.0004995669005438685}, {\"wallTime\": 1647712154.4687247, \"step\": 826, \"value\": 0.0004992278409190476}, {\"wallTime\": 1647712154.5158057, \"step\": 827, \"value\": 0.0004991129972040653}, {\"wallTime\": 1647712154.5662537, \"step\": 828, \"value\": 0.0004989972803741693}, {\"wallTime\": 1647712154.7495413, \"step\": 832, \"value\": 0.0004985253908671439}, {\"wallTime\": 1647712154.795937, \"step\": 833, \"value\": 0.0004984051920473576}, {\"wallTime\": 1647712154.882014, \"step\": 835, \"value\": 0.000498162058647722}, {\"wallTime\": 1647712154.9255962, \"step\": 836, \"value\": 0.0004980391240678728}, {\"wallTime\": 1647712154.971611, \"step\": 837, \"value\": 0.0004979153163731098}, {\"wallTime\": 1647712155.088811, \"step\": 839, \"value\": 0.0004976650234311819}, {\"wallTime\": 1647712155.1466408, \"step\": 840, \"value\": 0.0004975385381840169}, {\"wallTime\": 1647712155.3152077, \"step\": 843, \"value\": 0.0004971536691300571}, {\"wallTime\": 1647712155.4294848, \"step\": 845, \"value\": 0.0004968926077708602}, {\"wallTime\": 1647712155.6928513, \"step\": 850, \"value\": 0.0004962243838235736}, {\"wallTime\": 1647712155.737083, \"step\": 851, \"value\": 0.0004960880614817142}, {\"wallTime\": 1647712155.865047, \"step\": 854, \"value\": 0.0004956737975589931}, {\"wallTime\": 1647712155.9996696, \"step\": 857, \"value\": 0.0004952515009790659}, {\"wallTime\": 1647712156.1277497, \"step\": 860, \"value\": 0.0004948212299495935}, {\"wallTime\": 1647712156.219526, \"step\": 862, \"value\": 0.0004945299588143826}, {\"wallTime\": 1647712156.3514166, \"step\": 865, \"value\": 0.0004940864746458828}, {\"wallTime\": 1647712156.3981524, \"step\": 866, \"value\": 0.0004939368809573352}, {\"wallTime\": 1647712156.5885406, \"step\": 870, \"value\": 0.000493329600431025}, {\"wallTime\": 1647712156.6172736, \"step\": 871, \"value\": 0.000493175582960248}, {\"wallTime\": 1647712157.1469734, \"step\": 884, \"value\": 0.000491093669552356}, {\"wallTime\": 1647712157.168933, \"step\": 885, \"value\": 0.0004909274284727871}, {\"wallTime\": 1647712157.1974418, \"step\": 886, \"value\": 0.0004907602560706437}, {\"wallTime\": 1647712157.2606852, \"step\": 888, \"value\": 0.0004904234083369374}, {\"wallTime\": 1647712157.336524, \"step\": 890, \"value\": 0.0004900830681435764}, {\"wallTime\": 1647712157.4160554, \"step\": 892, \"value\": 0.0004897392354905605}, {\"wallTime\": 1647712157.5300128, \"step\": 895, \"value\": 0.0004892169963568449}, {\"wallTime\": 1647712157.625058, \"step\": 897, \"value\": 0.0004888644907623529}, {\"wallTime\": 1647712157.6720438, \"step\": 898, \"value\": 0.0004886869573965669}, {\"wallTime\": 1647712157.819729, \"step\": 901, \"value\": 0.00048814917681738734}, {\"wallTime\": 1647712157.8638797, \"step\": 902, \"value\": 0.0004879681800957769}, {\"wallTime\": 1647712157.9781086, \"step\": 904, \"value\": 0.0004876036546193063}, {\"wallTime\": 1647712158.1106074, \"step\": 907, \"value\": 0.0004870503908023238}, {\"wallTime\": 1647712158.1811435, \"step\": 908, \"value\": 0.000486864271806553}, {\"wallTime\": 1647712158.2740252, \"step\": 910, \"value\": 0.00048648944357410073}, {\"wallTime\": 1647712158.3182707, \"step\": 911, \"value\": 0.00048630073433741927}, {\"wallTime\": 1647712158.5208309, \"step\": 914, \"value\": 0.00048572951345704496}, {\"wallTime\": 1647712158.723769, \"step\": 918, \"value\": 0.0004849559918511659}, {\"wallTime\": 1647712158.7717984, \"step\": 919, \"value\": 0.00048476047231815755}, {\"wallTime\": 1647712158.8654132, \"step\": 921, \"value\": 0.00048436690121889114}, {\"wallTime\": 1647712158.9606864, \"step\": 923, \"value\": 0.00048396995407529175}, {\"wallTime\": 1647712159.152832, \"step\": 927, \"value\": 0.00048316593165509403}, {\"wallTime\": 1647712159.196991, \"step\": 928, \"value\": 0.0004829628160223365}, {\"wallTime\": 1647712159.2870295, \"step\": 930, \"value\": 0.00048255405272357166}, {\"wallTime\": 1647712159.3459136, \"step\": 931, \"value\": 0.0004823484050575644}, {\"wallTime\": 1647712159.3877356, \"step\": 932, \"value\": 0.0004821419424843043}, {\"wallTime\": 1647712159.4532485, \"step\": 933, \"value\": 0.00048193460679613054}, {\"wallTime\": 1647712159.5973523, \"step\": 935, \"value\": 0.0004815174615941942}, {\"wallTime\": 1647712164.0637138, \"step\": 939, \"value\": 0.00048067315947264433}, {\"wallTime\": 1647712164.1582353, \"step\": 941, \"value\": 0.0004802459734492004}, {\"wallTime\": 1647712164.1961958, \"step\": 942, \"value\": 0.00048003115807659924}, {\"wallTime\": 1647712164.361894, \"step\": 945, \"value\": 0.00047938167699612677}, {\"wallTime\": 1647712164.5240295, \"step\": 949, \"value\": 0.0004785041091963649}, {\"wallTime\": 1647712164.6677523, \"step\": 952, \"value\": 0.0004778372822329402}, {\"wallTime\": 1647712164.812696, \"step\": 955, \"value\": 0.00047716303379274905}, {\"wallTime\": 1647712164.8619785, \"step\": 956, \"value\": 0.00047693666419945657}, {\"wallTime\": 1647712165.048153, \"step\": 960, \"value\": 0.00047602292033843696}, {\"wallTime\": 1647712165.152622, \"step\": 962, \"value\": 0.00047556112986057997}, {\"wallTime\": 1647712165.1974664, \"step\": 963, \"value\": 0.0004753290268126875}, {\"wallTime\": 1647712165.2906117, \"step\": 965, \"value\": 0.00047486237599514425}, {\"wallTime\": 1647712165.3730664, \"step\": 967, \"value\": 0.0004743924655485898}, {\"wallTime\": 1647712165.4193614, \"step\": 968, \"value\": 0.00047415628796443343}, {\"wallTime\": 1647712165.5548975, \"step\": 971, \"value\": 0.0004734429530799389}, {\"wallTime\": 1647712165.799525, \"step\": 976, \"value\": 0.00047223787987604737}, {\"wallTime\": 1647712165.9080904, \"step\": 978, \"value\": 0.0004717502451967448}, {\"wallTime\": 1647712165.965577, \"step\": 979, \"value\": 0.00047150522004812956}, {\"wallTime\": 1647712166.0706074, \"step\": 981, \"value\": 0.0004710127832368016}, {\"wallTime\": 1647712166.122924, \"step\": 982, \"value\": 0.00047076537157408893}, {\"wallTime\": 1647712166.3328729, \"step\": 986, \"value\": 0.00046976772136986256}, {\"wallTime\": 1647712166.5306818, \"step\": 990, \"value\": 0.00046875738189555705}, {\"wallTime\": 1647712166.6571887, \"step\": 992, \"value\": 0.00046824748278595507}, {\"wallTime\": 1647712166.769465, \"step\": 994, \"value\": 0.00046773444046266377}, {\"wallTime\": 1647712166.873442, \"step\": 996, \"value\": 0.0004672182258218527}, {\"wallTime\": 1647712166.9812624, \"step\": 998, \"value\": 0.00046669889707118273}, {\"wallTime\": 1647712167.034824, \"step\": 999, \"value\": 0.000466438039438799}, {\"wallTime\": 1647712167.1951718, \"step\": 1002, \"value\": 0.0004656508390326053}, {\"wallTime\": 1647712167.2472324, \"step\": 1003, \"value\": 0.00046538689639419317}, {\"wallTime\": 1647712167.3074288, \"step\": 1004, \"value\": 0.00046512213884852827}, {\"wallTime\": 1647712167.4039335, \"step\": 1006, \"value\": 0.00046459035365842283}, {\"wallTime\": 1647712167.6354153, \"step\": 1011, \"value\": 0.00046324729919433594}, {\"wallTime\": 1647712167.7216961, \"step\": 1013, \"value\": 0.0004627046873793006}, {\"wallTime\": 1647712167.8107653, \"step\": 1015, \"value\": 0.0004621590196620673}, {\"wallTime\": 1647712167.8589835, \"step\": 1016, \"value\": 0.0004618850362021476}, {\"wallTime\": 1647712167.9161294, \"step\": 1017, \"value\": 0.0004616102669388056}, {\"wallTime\": 1647712168.183387, \"step\": 1022, \"value\": 0.0004602250992320478}, {\"wallTime\": 1647712168.4063604, \"step\": 1026, \"value\": 0.000459103292087093}, {\"wallTime\": 1647712168.4972231, \"step\": 1028, \"value\": 0.0004585378337651491}, {\"wallTime\": 1647712168.54252, \"step\": 1029, \"value\": 0.00045825401321053505}, {\"wallTime\": 1647712168.8089767, \"step\": 1035, \"value\": 0.00045653519919142127}, {\"wallTime\": 1647712168.8491077, \"step\": 1036, \"value\": 0.00045624611084349453}, {\"wallTime\": 1647712168.8937178, \"step\": 1037, \"value\": 0.0004559562948998064}, {\"wallTime\": 1647712168.9368997, \"step\": 1038, \"value\": 0.00045566572225652635}, {\"wallTime\": 1647712168.9828815, \"step\": 1039, \"value\": 0.00045537439291365445}, {\"wallTime\": 1647712169.141827, \"step\": 1043, \"value\": 0.0004542017704807222}, {\"wallTime\": 1647712169.2274373, \"step\": 1045, \"value\": 0.0004536110209301114}, {\"wallTime\": 1647712169.2752078, \"step\": 1046, \"value\": 0.0004533145693130791}, {\"wallTime\": 1647712169.5609329, \"step\": 1052, \"value\": 0.0004515203763730824}, {\"wallTime\": 1647712169.612118, \"step\": 1053, \"value\": 0.0004512188024818897}, {\"wallTime\": 1647712169.754438, \"step\": 1056, \"value\": 0.0004503097152337432}, {\"wallTime\": 1647712169.8585985, \"step\": 1058, \"value\": 0.00044970004819333553}, {\"wallTime\": 1647712169.9065495, \"step\": 1059, \"value\": 0.0004493941378314048}, {\"wallTime\": 1647712169.9539354, \"step\": 1060, \"value\": 0.00044908749987371266}, {\"wallTime\": 1647712170.051205, \"step\": 1062, \"value\": 0.00044847207027487457}, {\"wallTime\": 1647712170.2180173, \"step\": 1065, \"value\": 0.00044754359987564385}, {\"wallTime\": 1647712170.3022404, \"step\": 1067, \"value\": 0.00044692103983834386}, {\"wallTime\": 1647712170.3840604, \"step\": 1069, \"value\": 0.00044629565672948956}, {\"wallTime\": 1647712170.4242914, \"step\": 1070, \"value\": 0.0004459818883333355}, {\"wallTime\": 1647712170.4677203, \"step\": 1071, \"value\": 0.0004456674214452505}, {\"wallTime\": 1647712170.507853, \"step\": 1072, \"value\": 0.00044535225606523454}, {\"wallTime\": 1647712170.551669, \"step\": 1073, \"value\": 0.0004450363921932876}, {\"wallTime\": 1647712170.5953722, \"step\": 1074, \"value\": 0.00044471980072557926}, {\"wallTime\": 1647712170.7350454, \"step\": 1077, \"value\": 0.0004437658644746989}, {\"wallTime\": 1647712170.7824485, \"step\": 1078, \"value\": 0.00044344650814309716}, {\"wallTime\": 1647712170.8783667, \"step\": 1080, \"value\": 0.00044280567090027034}, {\"wallTime\": 1647712170.9255, \"step\": 1081, \"value\": 0.00044248418998904526}, {\"wallTime\": 1647712170.9734654, \"step\": 1082, \"value\": 0.0004421620396897197}, {\"wallTime\": 1647712171.1185904, \"step\": 1085, \"value\": 0.0004411914269439876}, {\"wallTime\": 1647712171.1668973, \"step\": 1086, \"value\": 0.00044086651178076863}, {\"wallTime\": 1647712171.2155612, \"step\": 1087, \"value\": 0.00044054092722944915}, {\"wallTime\": 1647712171.4063292, \"step\": 1091, \"value\": 0.00043923166231252253}, {\"wallTime\": 1647712171.717656, \"step\": 1098, \"value\": 0.00043691424070857465}, {\"wallTime\": 1647712171.8092763, \"step\": 1100, \"value\": 0.0004362460458651185}, {\"wallTime\": 1647712171.9001546, \"step\": 1102, \"value\": 0.00043557517346926033}, {\"wallTime\": 1647712171.9467492, \"step\": 1103, \"value\": 0.0004352387331891805}, {\"wallTime\": 1647712172.0271003, \"step\": 1104, \"value\": 0.00043490162352100015}, {\"wallTime\": 1647712172.1658208, \"step\": 1107, \"value\": 0.000433886336395517}, {\"wallTime\": 1647712172.2726967, \"step\": 1109, \"value\": 0.00043320615077391267}, {\"wallTime\": 1647712172.3879929, \"step\": 1111, \"value\": 0.00043252334580756724}, {\"wallTime\": 1647712172.4494233, \"step\": 1112, \"value\": 0.00043218093924224377}, {\"wallTime\": 1647712172.5391574, \"step\": 1114, \"value\": 0.0004314941761549562}, {\"wallTime\": 1647712172.7424877, \"step\": 1119, \"value\": 0.00042976587428711355}, {\"wallTime\": 1647712172.8231437, \"step\": 1121, \"value\": 0.0004290700308047235}, {\"wallTime\": 1647712172.8651297, \"step\": 1122, \"value\": 0.0004287211340852082}, {\"wallTime\": 1647712172.9996471, \"step\": 1125, \"value\": 0.0004276706022210419}, {\"wallTime\": 1647712173.0461214, \"step\": 1126, \"value\": 0.0004273191443644464}, {\"wallTime\": 1647712173.1385882, \"step\": 1128, \"value\": 0.0004266143077984452}, {\"wallTime\": 1647712173.182292, \"step\": 1129, \"value\": 0.00042626092908903956}, {\"wallTime\": 1647712173.2280157, \"step\": 1130, \"value\": 0.0004259069391991943}, {\"wallTime\": 1647712173.273804, \"step\": 1131, \"value\": 0.000425552309025079}, {\"wallTime\": 1647712173.3249521, \"step\": 1132, \"value\": 0.00042519703856669366}, {\"wallTime\": 1647712173.4173896, \"step\": 1134, \"value\": 0.0004244846059009433}, {\"wallTime\": 1647712173.4631298, \"step\": 1135, \"value\": 0.0004241274727974087}, {\"wallTime\": 1647712173.5092247, \"step\": 1136, \"value\": 0.0004237696703057736}, {\"wallTime\": 1647712173.6513557, \"step\": 1139, \"value\": 0.0004226925957482308}, {\"wallTime\": 1647712173.77519, \"step\": 1142, \"value\": 0.0004216099332552403}, {\"wallTime\": 1647712173.8975997, \"step\": 1145, \"value\": 0.0004205217119306326}, {\"wallTime\": 1647712173.9736118, \"step\": 1146, \"value\": 0.0004201577394269407}, {\"wallTime\": 1647712174.0714033, \"step\": 1148, \"value\": 0.00041942798998206854}, {\"wallTime\": 1647712174.1955752, \"step\": 1150, \"value\": 0.00041869579581543803}, {\"wallTime\": 1647712174.2402754, \"step\": 1151, \"value\": 0.00041832876740954816}, {\"wallTime\": 1647712174.2859058, \"step\": 1152, \"value\": 0.00041796115692704916}, {\"wallTime\": 1647712174.331456, \"step\": 1153, \"value\": 0.00041759293526411057}, {\"wallTime\": 1647712174.6685889, \"step\": 1160, \"value\": 0.0004149986198171973}, {\"wallTime\": 1647712174.7636392, \"step\": 1162, \"value\": 0.00041425201925449073}, {\"wallTime\": 1647712174.853725, \"step\": 1164, \"value\": 0.00041350306128151715}, {\"wallTime\": 1647712174.938768, \"step\": 1166, \"value\": 0.000412751775002107}, {\"wallTime\": 1647712174.9808815, \"step\": 1167, \"value\": 0.00041237525874748826}, {\"wallTime\": 1647712175.2290268, \"step\": 1173, \"value\": 0.00041010387940332294}, {\"wallTime\": 1647712175.2741446, \"step\": 1174, \"value\": 0.0004097233177162707}, {\"wallTime\": 1647712175.373691, \"step\": 1176, \"value\": 0.0004089604481123388}, {\"wallTime\": 1647712175.4158757, \"step\": 1177, \"value\": 0.00040857814019545913}, {\"wallTime\": 1647712175.4629202, \"step\": 1178, \"value\": 0.0004081952793058008}, {\"wallTime\": 1647712175.6549737, \"step\": 1182, \"value\": 0.0004066581605002284}, {\"wallTime\": 1647712175.7570274, \"step\": 1184, \"value\": 0.000405886210501194}, {\"wallTime\": 1647712175.8412018, \"step\": 1186, \"value\": 0.0004051120486110449}, {\"wallTime\": 1647712175.9613125, \"step\": 1188, \"value\": 0.0004043356457259506}, {\"wallTime\": 1647712176.0365117, \"step\": 1189, \"value\": 0.00040394661482423544}, {\"wallTime\": 1647712176.1140926, \"step\": 1190, \"value\": 0.0004035570309497416}, {\"wallTime\": 1647712176.2533476, \"step\": 1193, \"value\": 0.000402384961489588}, {\"wallTime\": 1647712176.3353865, \"step\": 1194, \"value\": 0.00040199319482780993}, {\"wallTime\": 1647712176.3889017, \"step\": 1195, \"value\": 0.00040160087519325316}, {\"wallTime\": 1647712176.487644, \"step\": 1197, \"value\": 0.00040081460610963404}, {\"wallTime\": 1647712176.5384762, \"step\": 1198, \"value\": 0.0004004206566605717}, {\"wallTime\": 1647712176.7710056, \"step\": 1201, \"value\": 0.00039923557778820395}, {\"wallTime\": 1647712176.9638832, \"step\": 1205, \"value\": 0.00039764796383678913}, {\"wallTime\": 1647712177.0090532, \"step\": 1206, \"value\": 0.0003972497652284801}, {\"wallTime\": 1647712177.0495667, \"step\": 1207, \"value\": 0.0003968510136473924}, {\"wallTime\": 1647712177.1295154, \"step\": 1209, \"value\": 0.00039605190977454185}, {\"wallTime\": 1647712177.3035843, \"step\": 1213, \"value\": 0.0003944475029129535}, {\"wallTime\": 1647712177.3415265, \"step\": 1214, \"value\": 0.00039404508424922824}, {\"wallTime\": 1647712177.3842752, \"step\": 1215, \"value\": 0.0003936421708203852}, {\"wallTime\": 1647712177.5156827, \"step\": 1218, \"value\": 0.00039243034552782774}, {\"wallTime\": 1647712177.7528024, \"step\": 1223, \"value\": 0.0003904004115611315}, {\"wallTime\": 1647712177.870252, \"step\": 1225, \"value\": 0.0003895849222317338}, {\"wallTime\": 1647712178.0388944, \"step\": 1229, \"value\": 0.00038794794818386436}, {\"wallTime\": 1647712178.175494, \"step\": 1232, \"value\": 0.0003867150517180562}, {\"wallTime\": 1647712178.2404416, \"step\": 1233, \"value\": 0.00038630308699794114}, {\"wallTime\": 1647712178.501372, \"step\": 1238, \"value\": 0.00038423604564741254}, {\"wallTime\": 1647712178.5946805, \"step\": 1240, \"value\": 0.0003834058588836342}, {\"wallTime\": 1647712178.6369002, \"step\": 1241, \"value\": 0.00038299005245789886}, {\"wallTime\": 1647712178.6817753, \"step\": 1242, \"value\": 0.00038257375126704574}, {\"wallTime\": 1647712178.7617545, \"step\": 1243, \"value\": 0.0003821569844149053}, {\"wallTime\": 1647712178.8062854, \"step\": 1244, \"value\": 0.0003817397519014776}, {\"wallTime\": 1647712178.8949137, \"step\": 1246, \"value\": 0.0003809038898907602}, {\"wallTime\": 1647712179.0094588, \"step\": 1249, \"value\": 0.00037964657531119883}, {\"wallTime\": 1647712179.0522656, \"step\": 1250, \"value\": 0.00037922654883004725}, {\"wallTime\": 1647712179.0962834, \"step\": 1251, \"value\": 0.00037880605668760836}, {\"wallTime\": 1647712179.1383512, \"step\": 1252, \"value\": 0.00037838509888388216}, {\"wallTime\": 1647712179.2315714, \"step\": 1254, \"value\": 0.0003775418153963983}, {\"wallTime\": 1647712179.3185396, \"step\": 1256, \"value\": 0.00037669669836759567}, {\"wallTime\": 1647712179.3646083, \"step\": 1257, \"value\": 0.00037627347046509385}, {\"wallTime\": 1647712179.4906375, \"step\": 1260, \"value\": 0.00037500105099752545}, {\"wallTime\": 1647712179.5335872, \"step\": 1261, \"value\": 0.00037457604776136577}, {\"wallTime\": 1647712179.782194, \"step\": 1267, \"value\": 0.0003720165987033397}, {\"wallTime\": 1647712179.928063, \"step\": 1271, \"value\": 0.0003703015681821853}, {\"wallTime\": 1647712180.1030781, \"step\": 1276, \"value\": 0.0003681481466628611}, {\"wallTime\": 1647712180.136743, \"step\": 1277, \"value\": 0.00036771618761122227}, {\"wallTime\": 1647712180.1723251, \"step\": 1278, \"value\": 0.00036728382110595703}, {\"wallTime\": 1647712180.3425407, \"step\": 1282, \"value\": 0.0003655501641333103}, {\"wallTime\": 1647712180.4785671, \"step\": 1285, \"value\": 0.0003642456140369177}, {\"wallTime\": 1647712180.7107978, \"step\": 1290, \"value\": 0.0003620632051024586}, {\"wallTime\": 1647712180.8468373, \"step\": 1293, \"value\": 0.00036074896343052387}, {\"wallTime\": 1647712181.0721087, \"step\": 1298, \"value\": 0.0003585507220122963}, {\"wallTime\": 1647712181.1134462, \"step\": 1299, \"value\": 0.00035810991539619863}, {\"wallTime\": 1647712181.278601, \"step\": 1302, \"value\": 0.000356785167241469}, {\"wallTime\": 1647712181.4510956, \"step\": 1306, \"value\": 0.00035501355887390673}, {\"wallTime\": 1647712181.6377013, \"step\": 1310, \"value\": 0.00035323595511727035}, {\"wallTime\": 1647712181.875134, \"step\": 1315, \"value\": 0.00035100572858937085}, {\"wallTime\": 1647712182.1054485, \"step\": 1320, \"value\": 0.00034876653808169067}, {\"wallTime\": 1647712182.1990905, \"step\": 1322, \"value\": 0.0003478684229776263}, {\"wallTime\": 1647712182.3290625, \"step\": 1325, \"value\": 0.00034651861642487347}, {\"wallTime\": 1647712182.3712306, \"step\": 1326, \"value\": 0.00034606800181791186}, {\"wallTime\": 1647712182.4575367, \"step\": 1328, \"value\": 0.00034516575396992266}, {\"wallTime\": 1647712182.7289639, \"step\": 1335, \"value\": 0.0003419973363634199}, {\"wallTime\": 1647712183.220848, \"step\": 1344, \"value\": 0.0003379003028385341}, {\"wallTime\": 1647712183.2670429, \"step\": 1345, \"value\": 0.0003374434891156852}, {\"wallTime\": 1647712183.3663416, \"step\": 1347, \"value\": 0.00033652898855507374}, {\"wallTime\": 1647712183.41205, \"step\": 1348, \"value\": 0.0003360712726134807}, {\"wallTime\": 1647712183.5472596, \"step\": 1351, \"value\": 0.00033469629124738276}, {\"wallTime\": 1647712183.5879805, \"step\": 1352, \"value\": 0.0003342373529449105}, {\"wallTime\": 1647712183.676417, \"step\": 1354, \"value\": 0.0003333186323288828}, {\"wallTime\": 1647712183.8329942, \"step\": 1358, \"value\": 0.00033147764042951167}, {\"wallTime\": 1647712183.9026077, \"step\": 1360, \"value\": 0.00033055542735382915}, {\"wallTime\": 1647712184.1188462, \"step\": 1364, \"value\": 0.00032870759605430067}, {\"wallTime\": 1647712184.146035, \"step\": 1365, \"value\": 0.0003282449615653604}, {\"wallTime\": 1647712184.1722348, \"step\": 1366, \"value\": 0.0003277820360381156}, {\"wallTime\": 1647712184.2106261, \"step\": 1367, \"value\": 0.00032731881947256625}, {\"wallTime\": 1647712184.2557855, \"step\": 1368, \"value\": 0.0003268553700763732}, {\"wallTime\": 1647712184.438987, \"step\": 1372, \"value\": 0.0003249988076277077}, {\"wallTime\": 1647712184.4860208, \"step\": 1373, \"value\": 0.0003245339903514832}, {\"wallTime\": 1647712184.5816505, \"step\": 1375, \"value\": 0.00032360359909944236}, {\"wallTime\": 1647712184.630799, \"step\": 1376, \"value\": 0.000323138025123626}, {\"wallTime\": 1647712184.7760236, \"step\": 1380, \"value\": 0.00032127313897944987}, {\"wallTime\": 1647712184.9906833, \"step\": 1385, \"value\": 0.00031893645063973963}, {\"wallTime\": 1647712185.0257728, \"step\": 1386, \"value\": 0.00031846840283833444}, {\"wallTime\": 1647712185.203683, \"step\": 1390, \"value\": 0.0003165937669109553}, {\"wallTime\": 1647712185.3367648, \"step\": 1393, \"value\": 0.00031518531613983214}, {\"wallTime\": 1647712185.518466, \"step\": 1397, \"value\": 0.00031330424826592207}, {\"wallTime\": 1647712185.7947536, \"step\": 1403, \"value\": 0.00031047608354128897}, {\"wallTime\": 1647712192.220408, \"step\": 1416, \"value\": 0.00030432295170612633}, {\"wallTime\": 1647712192.2671275, \"step\": 1417, \"value\": 0.000303848268231377}, {\"wallTime\": 1647712192.4624481, \"step\": 1421, \"value\": 0.0003019477298948914}, {\"wallTime\": 1647712192.9370744, \"step\": 1431, \"value\": 0.0002971841022372246}, {\"wallTime\": 1647712192.984129, \"step\": 1432, \"value\": 0.0002967068285215646}, {\"wallTime\": 1647712193.1840796, \"step\": 1436, \"value\": 0.0002947961329482496}, {\"wallTime\": 1647712193.2783, \"step\": 1438, \"value\": 0.0002938398683909327}, {\"wallTime\": 1647712193.3200295, \"step\": 1439, \"value\": 0.0002933615178335458}, {\"wallTime\": 1647712193.3529937, \"step\": 1440, \"value\": 0.0002928829926531762}, {\"wallTime\": 1647712193.404047, \"step\": 1441, \"value\": 0.00029240435105748475}, {\"wallTime\": 1647712193.6526902, \"step\": 1444, \"value\": 0.0002909675531554967}, {\"wallTime\": 1647712193.7502198, \"step\": 1446, \"value\": 0.00029000898939557374}, {\"wallTime\": 1647712193.796726, \"step\": 1447, \"value\": 0.00028952950378879905}, {\"wallTime\": 1647712193.8898606, \"step\": 1449, \"value\": 0.0002885701251216233}, {\"wallTime\": 1647712193.9834793, \"step\": 1451, \"value\": 0.00028761025168932974}, {\"wallTime\": 1647712194.0366273, \"step\": 1452, \"value\": 0.000287130125798285}, {\"wallTime\": 1647712194.1518252, \"step\": 1454, \"value\": 0.00028616946656256914}, {\"wallTime\": 1647712194.177253, \"step\": 1455, \"value\": 0.0002856889914255589}, {\"wallTime\": 1647712194.2242491, \"step\": 1456, \"value\": 0.0002852083707693964}, {\"wallTime\": 1647712194.2757726, \"step\": 1457, \"value\": 0.0002847276336979121}, {\"wallTime\": 1647712194.3293233, \"step\": 1458, \"value\": 0.00028424678021110594}, {\"wallTime\": 1647712194.3707628, \"step\": 1459, \"value\": 0.00028376581030897796}, {\"wallTime\": 1647712194.4204688, \"step\": 1460, \"value\": 0.00028328472399152815}, {\"wallTime\": 1647712194.4581351, \"step\": 1461, \"value\": 0.000282803550362587}, {\"wallTime\": 1647712194.5511017, \"step\": 1463, \"value\": 0.0002818408247549087}, {\"wallTime\": 1647712194.8666186, \"step\": 1470, \"value\": 0.000278468185570091}, {\"wallTime\": 1647712195.0176384, \"step\": 1473, \"value\": 0.00027702131774276495}, {\"wallTime\": 1647712195.0671926, \"step\": 1474, \"value\": 0.0002765388635452837}, {\"wallTime\": 1647712195.1597228, \"step\": 1476, \"value\": 0.000275573693215847}, {\"wallTime\": 1647712195.5527732, \"step\": 1483, \"value\": 0.0002721930795814842}, {\"wallTime\": 1647712195.7357056, \"step\": 1487, \"value\": 0.00027025974122807384}, {\"wallTime\": 1647712195.8549242, \"step\": 1489, \"value\": 0.0002692926791496575}, {\"wallTime\": 1647712195.8973706, \"step\": 1490, \"value\": 0.00026880906079895794}, {\"wallTime\": 1647712196.0221422, \"step\": 1493, \"value\": 0.0002673578856047243}, {\"wallTime\": 1647712196.0662858, \"step\": 1494, \"value\": 0.0002668740344233811}, {\"wallTime\": 1647712196.2444007, \"step\": 1498, \"value\": 0.0002649382222443819}, {\"wallTime\": 1647712196.2758586, \"step\": 1499, \"value\": 0.0002644541673362255}, {\"wallTime\": 1647712196.3218517, \"step\": 1500, \"value\": 0.0002639700542204082}, {\"wallTime\": 1647712196.4122882, \"step\": 1502, \"value\": 0.00026300171157345176}, {\"wallTime\": 1647712196.735029, \"step\": 1509, \"value\": 0.0002596114936750382}, {\"wallTime\": 1647712196.7821987, \"step\": 1510, \"value\": 0.00025912708952091634}, {\"wallTime\": 1647712196.8329833, \"step\": 1511, \"value\": 0.00025864262715913355}, {\"wallTime\": 1647712196.9229915, \"step\": 1513, \"value\": 0.0002576736733317375}, {\"wallTime\": 1647712197.006824, \"step\": 1515, \"value\": 0.00025670466129668057}, {\"wallTime\": 1647712197.0531394, \"step\": 1516, \"value\": 0.00025622014072723687}, {\"wallTime\": 1647712197.3718405, \"step\": 1523, \"value\": 0.00025282823480665684}, {\"wallTime\": 1647712197.6387532, \"step\": 1528, \"value\": 0.0002504054573364556}, {\"wallTime\": 1647712197.9008713, \"step\": 1534, \"value\": 0.00024749847943894565}, {\"wallTime\": 1647712198.0327852, \"step\": 1537, \"value\": 0.00024604523787274957}, {\"wallTime\": 1647712198.085678, \"step\": 1538, \"value\": 0.00024556086282245815}, {\"wallTime\": 1647712198.2383332, \"step\": 1541, \"value\": 0.00024410795595031232}, {\"wallTime\": 1647712198.5983949, \"step\": 1548, \"value\": 0.0002407190768280998}, {\"wallTime\": 1647712198.757167, \"step\": 1551, \"value\": 0.00023926734866108745}, {\"wallTime\": 1647712198.814021, \"step\": 1552, \"value\": 0.00023878354113548994}, {\"wallTime\": 1647712198.8683352, \"step\": 1553, \"value\": 0.00023829979181755334}, {\"wallTime\": 1647712199.3160245, \"step\": 1562, \"value\": 0.00023394865274894983}, {\"wallTime\": 1647712199.486655, \"step\": 1565, \"value\": 0.00023249947116710246}, {\"wallTime\": 1647712199.5321894, \"step\": 1566, \"value\": 0.0002320165658602491}, {\"wallTime\": 1647712199.624642, \"step\": 1568, \"value\": 0.00023105098807718605}, {\"wallTime\": 1647712199.706, \"step\": 1570, \"value\": 0.00023008573043625802}, {\"wallTime\": 1647712199.7439399, \"step\": 1571, \"value\": 0.00022960321803111583}, {\"wallTime\": 1647712199.7864592, \"step\": 1572, \"value\": 0.00022912080748938024}, {\"wallTime\": 1647712199.8286421, \"step\": 1573, \"value\": 0.0002286384697072208}, {\"wallTime\": 1647712199.9752688, \"step\": 1576, \"value\": 0.00022719203843735158}, {\"wallTime\": 1647712200.0639884, \"step\": 1578, \"value\": 0.00022622820688411593}, {\"wallTime\": 1647712200.1515548, \"step\": 1580, \"value\": 0.00022526478278450668}, {\"wallTime\": 1647712200.1954625, \"step\": 1581, \"value\": 0.00022478323080576956}, {\"wallTime\": 1647712200.2428558, \"step\": 1582, \"value\": 0.00022430176613852382}, {\"wallTime\": 1647712200.381364, \"step\": 1585, \"value\": 0.00022285804152488708}, {\"wallTime\": 1647712200.620382, \"step\": 1590, \"value\": 0.0002204540796810761}, {\"wallTime\": 1647712200.8623703, \"step\": 1595, \"value\": 0.00021805311553180218}, {\"wallTime\": 1647712200.9064822, \"step\": 1596, \"value\": 0.00021757329523097724}, {\"wallTime\": 1647712200.9511623, \"step\": 1597, \"value\": 0.00021709362044930458}, {\"wallTime\": 1647712201.1831586, \"step\": 1601, \"value\": 0.00021517621644306928}, {\"wallTime\": 1647712201.2341077, \"step\": 1602, \"value\": 0.00021469721104949713}, {\"wallTime\": 1647712201.2894297, \"step\": 1603, \"value\": 0.00021421835117507726}, {\"wallTime\": 1647712201.7126057, \"step\": 1611, \"value\": 0.00021039272542111576}, {\"wallTime\": 1647712201.8003457, \"step\": 1613, \"value\": 0.00020943785784766078}, {\"wallTime\": 1647712201.845198, \"step\": 1614, \"value\": 0.00020896065689157695}, {\"wallTime\": 1647712201.932342, \"step\": 1616, \"value\": 0.00020800674974452704}, {\"wallTime\": 1647712202.1215327, \"step\": 1622, \"value\": 0.0002051490591838956}, {\"wallTime\": 1647712202.170906, \"step\": 1624, \"value\": 0.0002041978732449934}, {\"wallTime\": 1647712202.2208848, \"step\": 1626, \"value\": 0.0002032474149018526}, {\"wallTime\": 1647712202.2487562, \"step\": 1627, \"value\": 0.00020277246949262917}, {\"wallTime\": 1647712202.3357415, \"step\": 1631, \"value\": 0.00020087450684513897}, {\"wallTime\": 1647712202.4374888, \"step\": 1635, \"value\": 0.00019897961465176195}, {\"wallTime\": 1647712202.46276, \"step\": 1636, \"value\": 0.00019850638636853546}, {\"wallTime\": 1647712202.485135, \"step\": 1637, \"value\": 0.00019803336181212217}, {\"wallTime\": 1647712202.5669522, \"step\": 1640, \"value\": 0.00019661548139993101}, {\"wallTime\": 1647712202.6106668, \"step\": 1641, \"value\": 0.0001961432717507705}, {\"wallTime\": 1647712202.852322, \"step\": 1646, \"value\": 0.00019378538127057254}, {\"wallTime\": 1647712202.8971674, \"step\": 1647, \"value\": 0.00019331445218995214}, {\"wallTime\": 1647712202.9893296, \"step\": 1649, \"value\": 0.0001923732488648966}, {\"wallTime\": 1647712203.0825498, \"step\": 1651, \"value\": 0.00019143293320666999}, {\"wallTime\": 1647712203.1292994, \"step\": 1652, \"value\": 0.00019096311007160693}, {\"wallTime\": 1647712203.1753764, \"step\": 1653, \"value\": 0.00019049351976718754}, {\"wallTime\": 1647712203.2571416, \"step\": 1654, \"value\": 0.0001900241622934118}, {\"wallTime\": 1647712203.3550658, \"step\": 1656, \"value\": 0.00018908613128587604}, {\"wallTime\": 1647712203.445191, \"step\": 1658, \"value\": 0.00018814904615283012}, {\"wallTime\": 1647712203.626962, \"step\": 1662, \"value\": 0.00018627775716595352}, {\"wallTime\": 1647712203.7177298, \"step\": 1664, \"value\": 0.00018534356786403805}, {\"wallTime\": 1647712203.803456, \"step\": 1666, \"value\": 0.0001844103680923581}, {\"wallTime\": 1647712203.9429073, \"step\": 1669, \"value\": 0.00018301248201169074}, {\"wallTime\": 1647712203.98978, \"step\": 1670, \"value\": 0.0001825470244511962}, {\"wallTime\": 1647712204.2237537, \"step\": 1674, \"value\": 0.00018068781355395913}, {\"wallTime\": 1647712204.4364355, \"step\": 1677, \"value\": 0.00017929619934875518}, {\"wallTime\": 1647712204.578891, \"step\": 1679, \"value\": 0.0001783697953214869}, {\"wallTime\": 1647712204.6397839, \"step\": 1680, \"value\": 0.00017790701531339437}, {\"wallTime\": 1647712204.7383292, \"step\": 1682, \"value\": 0.00017698225565254688}, {\"wallTime\": 1647712204.936872, \"step\": 1685, \"value\": 0.00017559723346494138}, {\"wallTime\": 1647712204.99499, \"step\": 1686, \"value\": 0.00017513612692710012}, {\"wallTime\": 1647712205.0631588, \"step\": 1687, \"value\": 0.0001746752968756482}, {\"wallTime\": 1647712205.1372283, \"step\": 1688, \"value\": 0.00017421477241441607}, {\"wallTime\": 1647712205.4456465, \"step\": 1693, \"value\": 0.00017191645747516304}, {\"wallTime\": 1647712205.5558987, \"step\": 1694, \"value\": 0.00017145769379567355}, {\"wallTime\": 1647712205.6317832, \"step\": 1695, \"value\": 0.0001709992066025734}, {\"wallTime\": 1647712205.7681844, \"step\": 1697, \"value\": 0.0001700831635389477}, {\"wallTime\": 1647712205.9035187, \"step\": 1699, \"value\": 0.0001691683428362012}, {\"wallTime\": 1647712205.9607306, \"step\": 1700, \"value\": 0.00016871138359420002}, {\"wallTime\": 1647712206.0778558, \"step\": 1702, \"value\": 0.0001677984109846875}, {\"wallTime\": 1647712206.200247, \"step\": 1704, \"value\": 0.00016688668983988464}, {\"wallTime\": 1647712206.3701057, \"step\": 1707, \"value\": 0.00016552147280890495}, {\"wallTime\": 1647712206.506822, \"step\": 1709, \"value\": 0.0001646129385335371}, {\"wallTime\": 1647712206.5721076, \"step\": 1710, \"value\": 0.0001641591516090557}, {\"wallTime\": 1647712206.6399758, \"step\": 1711, \"value\": 0.00016370569937862456}, {\"wallTime\": 1647712206.7023013, \"step\": 1712, \"value\": 0.00016325256729032844}, {\"wallTime\": 1647712207.102168, \"step\": 1718, \"value\": 0.00016054075967986137}, {\"wallTime\": 1647712207.1666589, \"step\": 1719, \"value\": 0.00016008997044991702}, {\"wallTime\": 1647712207.3236125, \"step\": 1722, \"value\": 0.00015873965458013117}, {\"wallTime\": 1647712207.3867638, \"step\": 1723, \"value\": 0.00015829024778213352}, {\"wallTime\": 1647712207.4288278, \"step\": 1724, \"value\": 0.00015784117567818612}, {\"wallTime\": 1647712207.4760265, \"step\": 1725, \"value\": 0.00015739246737211943}, {\"wallTime\": 1647712207.768359, \"step\": 1730, \"value\": 0.00015515416453126818}, {\"wallTime\": 1647712208.141984, \"step\": 1738, \"value\": 0.00015159165195655078}, {\"wallTime\": 1647712208.1888053, \"step\": 1739, \"value\": 0.00015114799316506833}, {\"wallTime\": 1647712208.3343182, \"step\": 1743, \"value\": 0.00014937712694518268}, {\"wallTime\": 1647712208.417018, \"step\": 1745, \"value\": 0.0001484939712099731}, {\"wallTime\": 1647712208.5452912, \"step\": 1748, \"value\": 0.0001471721043344587}, {\"wallTime\": 1647712208.5873907, \"step\": 1749, \"value\": 0.0001467322581447661}, {\"wallTime\": 1647712208.6226192, \"step\": 1750, \"value\": 0.00014629280485678464}, {\"wallTime\": 1647712208.6635344, \"step\": 1751, \"value\": 0.00014585374447051436}, {\"wallTime\": 1647712208.757297, \"step\": 1753, \"value\": 0.00014497678785119206}, {\"wallTime\": 1647712208.8016324, \"step\": 1754, \"value\": 0.00014453890617005527}, {\"wallTime\": 1647712208.9376369, \"step\": 1757, \"value\": 0.0001432276621926576}, {\"wallTime\": 1647712209.1629255, \"step\": 1762, \"value\": 0.0001410503318766132}, {\"wallTime\": 1647712209.217973, \"step\": 1763, \"value\": 0.0001406160881742835}, {\"wallTime\": 1647712209.3164544, \"step\": 1765, \"value\": 0.00013974885223433375}, {\"wallTime\": 1647712209.4459057, \"step\": 1768, \"value\": 0.00013845109788235277}, {\"wallTime\": 1647712209.7485852, \"step\": 1775, \"value\": 0.00013543781824409962}, {\"wallTime\": 1647712209.786107, \"step\": 1776, \"value\": 0.00013500906061381102}, {\"wallTime\": 1647712209.828309, \"step\": 1777, \"value\": 0.00013458073954097927}, {\"wallTime\": 1647712209.9276037, \"step\": 1780, \"value\": 0.0001332983811153099}, {\"wallTime\": 1647712210.1088417, \"step\": 1784, \"value\": 0.00013159471563994884}, {\"wallTime\": 1647712210.1538334, \"step\": 1785, \"value\": 0.00013116991613060236}, {\"wallTime\": 1647712210.1992097, \"step\": 1786, \"value\": 0.00013074556773062795}, {\"wallTime\": 1647712210.372885, \"step\": 1789, \"value\": 0.00012947518553119153}, {\"wallTime\": 1647712210.4178135, \"step\": 1790, \"value\": 0.0001290526270167902}, {\"wallTime\": 1647712210.5079072, \"step\": 1792, \"value\": 0.00012820889241993427}, {\"wallTime\": 1647712210.601288, \"step\": 1794, \"value\": 0.00012736697681248188}, {\"wallTime\": 1647712210.6843789, \"step\": 1796, \"value\": 0.0001265269092982635}, {\"wallTime\": 1647712210.8564787, \"step\": 1800, \"value\": 0.00012485234765335917}, {\"wallTime\": 1647712210.940862, \"step\": 1802, \"value\": 0.0001240178826265037}, {\"wallTime\": 1647712210.9792123, \"step\": 1803, \"value\": 0.00012360136315692216}, {\"wallTime\": 1647712211.1474855, \"step\": 1808, \"value\": 0.00012152590352343395}, {\"wallTime\": 1647712211.2387826, \"step\": 1810, \"value\": 0.00012069907825207338}, {\"wallTime\": 1647712211.4198658, \"step\": 1814, \"value\": 0.00011905127757927403}, {\"wallTime\": 1647712211.6025705, \"step\": 1818, \"value\": 0.000117411334940698}, {\"wallTime\": 1647712211.646867, \"step\": 1819, \"value\": 0.0001170025861938484}, {\"wallTime\": 1647712211.834335, \"step\": 1823, \"value\": 0.00011537260434124619}, {\"wallTime\": 1647712211.966932, \"step\": 1826, \"value\": 0.00011415541666792706}, {\"wallTime\": 1647712212.009553, \"step\": 1827, \"value\": 0.00011375069880159572}, {\"wallTime\": 1647712212.0959132, \"step\": 1829, \"value\": 0.00011294280557194725}, {\"wallTime\": 1647712212.1423278, \"step\": 1830, \"value\": 0.00011253963020863011}, {\"wallTime\": 1647712212.2281818, \"step\": 1832, \"value\": 0.00011173482198501006}, {\"wallTime\": 1647712212.2697163, \"step\": 1833, \"value\": 0.00011133319640066475}, {\"wallTime\": 1647712212.310385, \"step\": 1834, \"value\": 0.00011093208740931004}, {\"wallTime\": 1647712212.395521, \"step\": 1836, \"value\": 0.00011013143375748768}, {\"wallTime\": 1647712212.434221, \"step\": 1837, \"value\": 0.00010973189637297764}, {\"wallTime\": 1647712212.472462, \"step\": 1838, \"value\": 0.00010933288285741583}, {\"wallTime\": 1647712212.7154965, \"step\": 1844, \"value\": 0.00010694991215132177}, {\"wallTime\": 1647712212.7561948, \"step\": 1845, \"value\": 0.0001065546166501008}, {\"wallTime\": 1647712212.7959783, \"step\": 1846, \"value\": 0.00010615985956974328}, {\"wallTime\": 1647712212.8369088, \"step\": 1847, \"value\": 0.00010576563363429159}, {\"wallTime\": 1647712212.877325, \"step\": 1848, \"value\": 0.00010537196067161858}, {\"wallTime\": 1647712212.984766, \"step\": 1851, \"value\": 0.00010419417230878025}, {\"wallTime\": 1647712213.0543835, \"step\": 1853, \"value\": 0.00010341170855099335}, {\"wallTime\": 1647712213.4009082, \"step\": 1860, \"value\": 0.00010069044219562784}, {\"wallTime\": 1647712213.5733502, \"step\": 1864, \"value\": 9.914769179886207e-05}, {\"wallTime\": 1647712213.6202593, \"step\": 1865, \"value\": 9.876341209746897e-05}, {\"wallTime\": 1647712213.664108, \"step\": 1866, \"value\": 9.837969264481217e-05}, {\"wallTime\": 1647712213.7088969, \"step\": 1867, \"value\": 9.799654799280688e-05}, {\"wallTime\": 1647712213.889889, \"step\": 1871, \"value\": 9.646965190768242e-05}, {\"wallTime\": 1647712213.935158, \"step\": 1872, \"value\": 9.60893594310619e-05}, {\"wallTime\": 1647712214.0542395, \"step\": 1874, \"value\": 9.533050615573302e-05}, {\"wallTime\": 1647712214.083949, \"step\": 1875, \"value\": 9.495194535702467e-05}, {\"wallTime\": 1647712218.5233388, \"step\": 1877, \"value\": 9.419656271347776e-05}, {\"wallTime\": 1647712218.672443, \"step\": 1880, \"value\": 9.306785796070471e-05}, {\"wallTime\": 1647712218.8247757, \"step\": 1883, \"value\": 9.194443555315956e-05}, {\"wallTime\": 1647712218.8711581, \"step\": 1884, \"value\": 9.157114254776388e-05}, {\"wallTime\": 1647712218.97586, \"step\": 1886, \"value\": 9.082632459467277e-05}, {\"wallTime\": 1647712219.0614233, \"step\": 1888, \"value\": 9.00838931556791e-05}, {\"wallTime\": 1647712219.152034, \"step\": 1890, \"value\": 8.93438482307829e-05}, {\"wallTime\": 1647712219.3803754, \"step\": 1895, \"value\": 8.750426059123129e-05}, {\"wallTime\": 1647712219.5614579, \"step\": 1899, \"value\": 8.604351023677737e-05}, {\"wallTime\": 1647712219.6918206, \"step\": 1902, \"value\": 8.495437214151025e-05}, {\"wallTime\": 1647712219.8780496, \"step\": 1906, \"value\": 8.351081487489864e-05}, {\"wallTime\": 1647712219.9731538, \"step\": 1908, \"value\": 8.279276516987011e-05}, {\"wallTime\": 1647712220.0236928, \"step\": 1909, \"value\": 8.243467163993046e-05}, {\"wallTime\": 1647712220.0726743, \"step\": 1910, \"value\": 8.207721111830324e-05}, {\"wallTime\": 1647712220.2124546, \"step\": 1913, \"value\": 8.100857667159289e-05}, {\"wallTime\": 1647712220.4347036, \"step\": 1918, \"value\": 7.924015517346561e-05}, {\"wallTime\": 1647712220.708121, \"step\": 1924, \"value\": 7.713909144513309e-05}, {\"wallTime\": 1647712220.7538407, \"step\": 1925, \"value\": 7.679116242798045e-05}, {\"wallTime\": 1647712220.7994726, \"step\": 1926, \"value\": 7.644388097105548e-05}, {\"wallTime\": 1647712220.9431221, \"step\": 1929, \"value\": 7.540592923760414e-05}, {\"wallTime\": 1647712221.0850062, \"step\": 1932, \"value\": 7.437383465003222e-05}, {\"wallTime\": 1647712221.2255118, \"step\": 1935, \"value\": 7.334763358812779e-05}, {\"wallTime\": 1647712221.2716396, \"step\": 1936, \"value\": 7.300687866518274e-05}, {\"wallTime\": 1647712221.4646587, \"step\": 1940, \"value\": 7.165048737078905e-05}, {\"wallTime\": 1647712221.5110009, \"step\": 1941, \"value\": 7.131305028451607e-05}, {\"wallTime\": 1647712221.5572522, \"step\": 1942, \"value\": 7.097628258634359e-05}, {\"wallTime\": 1647712221.7027452, \"step\": 1945, \"value\": 6.996997399255633e-05}, {\"wallTime\": 1647712221.7937405, \"step\": 1947, \"value\": 6.93024558131583e-05}, {\"wallTime\": 1647712221.9382288, \"step\": 1950, \"value\": 6.830623169662431e-05}, {\"wallTime\": 1647712221.9844306, \"step\": 1951, \"value\": 6.797551031922922e-05}, {\"wallTime\": 1647712222.077389, \"step\": 1953, \"value\": 6.7316104832571e-05}, {\"wallTime\": 1647712222.2292845, \"step\": 1956, \"value\": 6.633210432482883e-05}, {\"wallTime\": 1647712222.4178126, \"step\": 1960, \"value\": 6.502969335997477e-05}, {\"wallTime\": 1647712222.4599478, \"step\": 1961, \"value\": 6.47058041067794e-05}, {\"wallTime\": 1647712222.505017, \"step\": 1962, \"value\": 6.438261334551498e-05}, {\"wallTime\": 1647712222.5538025, \"step\": 1963, \"value\": 6.406011380022392e-05}, {\"wallTime\": 1647712222.598351, \"step\": 1964, \"value\": 6.37383054709062e-05}, {\"wallTime\": 1647712222.6935701, \"step\": 1966, \"value\": 6.309676973614842e-05}, {\"wallTime\": 1647712222.7358685, \"step\": 1967, \"value\": 6.277704960666597e-05}, {\"wallTime\": 1647712222.7832515, \"step\": 1968, \"value\": 6.245802069315687e-05}, {\"wallTime\": 1647712222.831669, \"step\": 1969, \"value\": 6.213969754753634e-05}, {\"wallTime\": 1647712223.1523457, \"step\": 1975, \"value\": 6.024447066010907e-05}, {\"wallTime\": 1647712223.2497547, \"step\": 1977, \"value\": 5.961837086942978e-05}, {\"wallTime\": 1647712223.3502386, \"step\": 1979, \"value\": 5.8995105064241216e-05}, {\"wallTime\": 1647712223.4001963, \"step\": 1980, \"value\": 5.868453808943741e-05}, {\"wallTime\": 1647712223.4503372, \"step\": 1981, \"value\": 5.83746877964586e-05}, {\"wallTime\": 1647712223.4999993, \"step\": 1982, \"value\": 5.8065546909347177e-05}, {\"wallTime\": 1647712223.5502863, \"step\": 1983, \"value\": 5.775712270406075e-05}, {\"wallTime\": 1647712223.6474085, \"step\": 1985, \"value\": 5.7142420700984076e-05}, {\"wallTime\": 1647712223.7343967, \"step\": 1987, \"value\": 5.6530592701165006e-05}, {\"wallTime\": 1647712223.7810287, \"step\": 1988, \"value\": 5.622575554298237e-05}, {\"wallTime\": 1647712223.9207718, \"step\": 1991, \"value\": 5.531558781513013e-05}, {\"wallTime\": 1647712223.967268, \"step\": 1992, \"value\": 5.501364648807794e-05}, {\"wallTime\": 1647712224.0981698, \"step\": 1995, \"value\": 5.4112177167553455e-05}, {\"wallTime\": 1647712224.4426358, \"step\": 2002, \"value\": 5.2034331019967794e-05}, {\"wallTime\": 1647712225.2156126, \"step\": 2016, \"value\": 4.798730878974311e-05}, {\"wallTime\": 1647712225.260074, \"step\": 2017, \"value\": 4.770384111907333e-05}, {\"wallTime\": 1647712225.4482627, \"step\": 2021, \"value\": 4.657749741454609e-05}, {\"wallTime\": 1647712225.494905, \"step\": 2022, \"value\": 4.629780232789926e-05}, {\"wallTime\": 1647712225.543201, \"step\": 2023, \"value\": 4.601886394084431e-05}, {\"wallTime\": 1647712225.6352968, \"step\": 2025, \"value\": 4.546326454146765e-05}, {\"wallTime\": 1647712225.675943, \"step\": 2026, \"value\": 4.518660352914594e-05}, {\"wallTime\": 1647712225.7686617, \"step\": 2028, \"value\": 4.463557343115099e-05}, {\"wallTime\": 1647712225.9103765, \"step\": 2031, \"value\": 4.381475810077973e-05}, {\"wallTime\": 1647712225.9583242, \"step\": 2032, \"value\": 4.3542688217712566e-05}, {\"wallTime\": 1647712226.0540788, \"step\": 2034, \"value\": 4.3000847654184327e-05}, {\"wallTime\": 1647712226.1021771, \"step\": 2035, \"value\": 4.2731080611702055e-05}, {\"wallTime\": 1647712226.1579883, \"step\": 2036, \"value\": 4.2462088458705693e-05}, {\"wallTime\": 1647712226.3435607, \"step\": 2040, \"value\": 4.139383599977009e-05}, {\"wallTime\": 1647712226.4005365, \"step\": 2041, \"value\": 4.112871101824567e-05}, {\"wallTime\": 1647712226.4854076, \"step\": 2043, \"value\": 4.060078936163336e-05}, {\"wallTime\": 1647712226.5225275, \"step\": 2044, \"value\": 4.033799996250309e-05}, {\"wallTime\": 1647712226.653915, \"step\": 2047, \"value\": 3.9554302929900587e-05}, {\"wallTime\": 1647712226.6992738, \"step\": 2048, \"value\": 3.92946349165868e-05}, {\"wallTime\": 1647712226.7817616, \"step\": 2049, \"value\": 3.903574906871654e-05}, {\"wallTime\": 1647712227.0127223, \"step\": 2054, \"value\": 3.775311415665783e-05}, {\"wallTime\": 1647712227.0604746, \"step\": 2055, \"value\": 3.7498950405279174e-05}, {\"wallTime\": 1647712227.106598, \"step\": 2056, \"value\": 3.724557609530166e-05}, {\"wallTime\": 1647712227.1553087, \"step\": 2057, \"value\": 3.699299122672528e-05}, {\"wallTime\": 1647712227.6123724, \"step\": 2067, \"value\": 3.451086740824394e-05}, {\"wallTime\": 1647712227.6698093, \"step\": 2068, \"value\": 3.4267046430613846e-05}, {\"wallTime\": 1647712227.7482584, \"step\": 2070, \"value\": 3.3781809179345146e-05}, {\"wallTime\": 1647712227.9506447, \"step\": 2074, \"value\": 3.282098623458296e-05}, {\"wallTime\": 1647712228.1813374, \"step\": 2078, \"value\": 3.187307811458595e-05}, {\"wallTime\": 1647712228.2376456, \"step\": 2079, \"value\": 3.163812652928755e-05}, {\"wallTime\": 1647712228.5305245, \"step\": 2084, \"value\": 3.0475552193820477e-05}, {\"wallTime\": 1647712228.6243727, \"step\": 2086, \"value\": 3.001622826559469e-05}, {\"wallTime\": 1647712228.6686912, \"step\": 2087, \"value\": 2.9787790481350385e-05}, {\"wallTime\": 1647712228.7493417, \"step\": 2089, \"value\": 2.9333374186535366e-05}, {\"wallTime\": 1647712228.7917192, \"step\": 2090, \"value\": 2.910739385697525e-05}, {\"wallTime\": 1647712228.840205, \"step\": 2091, \"value\": 2.8882235710625537e-05}, {\"wallTime\": 1647712229.042068, \"step\": 2095, \"value\": 2.7989826776320115e-05}, {\"wallTime\": 1647712229.0804284, \"step\": 2096, \"value\": 2.7768783184001222e-05}, {\"wallTime\": 1647712229.1210978, \"step\": 2097, \"value\": 2.7548567231860943e-05}, {\"wallTime\": 1647712229.1487305, \"step\": 2098, \"value\": 2.7329177100909874e-05}, {\"wallTime\": 1647712229.2100286, \"step\": 2100, \"value\": 2.6892879759543575e-05}, {\"wallTime\": 1647712231.7360613, \"step\": 2103, \"value\": 2.624465196277015e-05}, {\"wallTime\": 1647712231.7442453, \"step\": 2104, \"value\": 2.603023858682718e-05}, {\"wallTime\": 1647712231.8052545, \"step\": 2105, \"value\": 2.5816656489041634e-05}, {\"wallTime\": 1647712231.888838, \"step\": 2106, \"value\": 2.560390748840291e-05}, {\"wallTime\": 1647712232.1382535, \"step\": 2109, \"value\": 2.497066270734649e-05}, {\"wallTime\": 1647712232.2092142, \"step\": 2110, \"value\": 2.476125337125268e-05}, {\"wallTime\": 1647712232.398652, \"step\": 2114, \"value\": 2.3931987016112544e-05}, {\"wallTime\": 1647712232.440788, \"step\": 2115, \"value\": 2.3726766812615097e-05}, {\"wallTime\": 1647712232.6383424, \"step\": 2119, \"value\": 2.2914302462595515e-05}, {\"wallTime\": 1647712232.6821246, \"step\": 2120, \"value\": 2.2713293219567277e-05}, {\"wallTime\": 1647712232.7767975, \"step\": 2122, \"value\": 2.231380858574994e-05}, {\"wallTime\": 1647712232.823966, \"step\": 2123, \"value\": 2.2115335013950244e-05}, {\"wallTime\": 1647712232.8789287, \"step\": 2124, \"value\": 2.1917705453233793e-05}, {\"wallTime\": 1647712232.9734652, \"step\": 2126, \"value\": 2.1524992916965857e-05}, {\"wallTime\": 1647712233.0215662, \"step\": 2127, \"value\": 2.1329908122424968e-05}, {\"wallTime\": 1647712233.3438962, \"step\": 2134, \"value\": 1.9988136045867577e-05}, {\"wallTime\": 1647712233.3844614, \"step\": 2135, \"value\": 1.979986518563237e-05}, {\"wallTime\": 1647712233.4273255, \"step\": 2136, \"value\": 1.961244925041683e-05}, {\"wallTime\": 1647712233.5692081, \"step\": 2139, \"value\": 1.9055338270845823e-05}, {\"wallTime\": 1647712233.8092341, \"step\": 2143, \"value\": 1.8324531993130222e-05}, {\"wallTime\": 1647712234.1403322, \"step\": 2149, \"value\": 1.725414585962426e-05}, {\"wallTime\": 1647712234.1949515, \"step\": 2150, \"value\": 1.707876981527079e-05}, {\"wallTime\": 1647712234.4161897, \"step\": 2154, \"value\": 1.6385916751460172e-05}, {\"wallTime\": 1647712234.4723678, \"step\": 2155, \"value\": 1.6214871720876545e-05}, {\"wallTime\": 1647712234.7066336, \"step\": 2159, \"value\": 1.5539371815975755e-05}, {\"wallTime\": 1647712234.7595658, \"step\": 2160, \"value\": 1.53726723510772e-05}, {\"wallTime\": 1647712234.8037624, \"step\": 2161, \"value\": 1.520684327260824e-05}, {\"wallTime\": 1647712234.848039, \"step\": 2162, \"value\": 1.504188639955828e-05}, {\"wallTime\": 1647712239.8044572, \"step\": 2169, \"value\": 1.3911643691244535e-05}, {\"wallTime\": 1647712240.0450768, \"step\": 2173, \"value\": 1.3285060049383901e-05}, {\"wallTime\": 1647712240.132787, \"step\": 2175, \"value\": 1.2977037840755656e-05}, {\"wallTime\": 1647712240.1730266, \"step\": 2176, \"value\": 1.2824346413253807e-05}, {\"wallTime\": 1647712240.497961, \"step\": 2183, \"value\": 1.1780190106946975e-05}, {\"wallTime\": 1647712240.5816746, \"step\": 2185, \"value\": 1.148980936704902e-05}, {\"wallTime\": 1647712240.6690104, \"step\": 2187, \"value\": 1.1202970199519768e-05}, {\"wallTime\": 1647712240.7536871, \"step\": 2189, \"value\": 1.0919676242338028e-05}, {\"wallTime\": 1647712240.9983318, \"step\": 2194, \"value\": 1.0226980521110818e-05}, {\"wallTime\": 1647712241.2327552, \"step\": 2199, \"value\": 9.556533768773079e-06}, {\"wallTime\": 1647712241.3263724, \"step\": 2201, \"value\": 9.294597475673072e-06}, {\"wallTime\": 1647712241.3741062, \"step\": 2202, \"value\": 9.164969924313482e-06}, {\"wallTime\": 1647712241.4220147, \"step\": 2203, \"value\": 9.036235496751033e-06}, {\"wallTime\": 1647712241.5643651, \"step\": 2206, \"value\": 8.655400961288251e-06}, {\"wallTime\": 1647712241.705509, \"step\": 2209, \"value\": 8.282627277367283e-06}, {\"wallTime\": 1647712241.796272, \"step\": 2211, \"value\": 8.03859620646108e-06}, {\"wallTime\": 1647712241.838479, \"step\": 2212, \"value\": 7.917927177913953e-06}, {\"wallTime\": 1647712241.929321, \"step\": 2214, \"value\": 7.679284863115754e-06}, {\"wallTime\": 1647712241.9757607, \"step\": 2215, \"value\": 7.561312941106735e-06}, {\"wallTime\": 1647712242.0369287, \"step\": 2216, \"value\": 7.444240054610418e-06}, {\"wallTime\": 1647712242.3175962, \"step\": 2221, \"value\": 6.8723870754183736e-06}, {\"wallTime\": 1647712242.3706946, \"step\": 2222, \"value\": 6.760721589671448e-06}, {\"wallTime\": 1647712242.4266243, \"step\": 2223, \"value\": 6.649958777416032e-06}, {\"wallTime\": 1647712242.5352986, \"step\": 2225, \"value\": 6.431142537621781e-06}, {\"wallTime\": 1647712242.648977, \"step\": 2227, \"value\": 6.215941539267078e-06}, {\"wallTime\": 1647712243.0123096, \"step\": 2233, \"value\": 5.592062279902166e-06}, {\"wallTime\": 1647712243.1961963, \"step\": 2236, \"value\": 5.292361038300442e-06}, {\"wallTime\": 1647712243.2824605, \"step\": 2239, \"value\": 5.000832061341498e-06}, {\"wallTime\": 1647712243.4199169, \"step\": 2242, \"value\": 4.717484443972353e-06}, {\"wallTime\": 1647712243.5007806, \"step\": 2244, \"value\": 4.533136234385893e-06}, {\"wallTime\": 1647712243.6225045, \"step\": 2247, \"value\": 4.26344558945857e-06}, {\"wallTime\": 1647712243.9465475, \"step\": 2254, \"value\": 3.6660944715549704e-06}, {\"wallTime\": 1647712244.0394762, \"step\": 2257, \"value\": 3.4237903037137585e-06}, {\"wallTime\": 1647712244.0712705, \"step\": 2258, \"value\": 3.344851620568079e-06}, {\"wallTime\": 1647712244.261381, \"step\": 2264, \"value\": 2.8904471491841832e-06}, {\"wallTime\": 1647712244.3264503, \"step\": 2266, \"value\": 2.746310656220885e-06}, {\"wallTime\": 1647712244.37332, \"step\": 2267, \"value\": 2.6756183615361806e-06}, {\"wallTime\": 1647712244.6748729, \"step\": 2274, \"value\": 2.2064787117415108e-06}, {\"wallTime\": 1647712244.7635868, \"step\": 2276, \"value\": 2.080709009533166e-06}, {\"wallTime\": 1647712244.9541326, \"step\": 2280, \"value\": 1.840208710746083e-06}, {\"wallTime\": 1647712244.996392, \"step\": 2281, \"value\": 1.782384742909926e-06}, {\"wallTime\": 1647712245.1043422, \"step\": 2284, \"value\": 1.6144390428962652e-06}, {\"wallTime\": 1647712245.1384044, \"step\": 2285, \"value\": 1.5602997791575035e-06}, {\"wallTime\": 1647712245.384413, \"step\": 2291, \"value\": 1.2548265431178152e-06}, {\"wallTime\": 1647712245.432829, \"step\": 2292, \"value\": 1.2071431001459132e-06}, {\"wallTime\": 1647712245.4827607, \"step\": 2293, \"value\": 1.160382680609473e-06}, {\"wallTime\": 1647712245.8362355, \"step\": 2300, \"value\": 8.589167350692151e-07}, {\"wallTime\": 1647712246.062901, \"step\": 2305, \"value\": 6.713083280374121e-07}, {\"wallTime\": 1647712246.1113057, \"step\": 2306, \"value\": 6.365609124259208e-07}, {\"wallTime\": 1647712246.1595297, \"step\": 2307, \"value\": 6.027386234563892e-07}, {\"wallTime\": 1647712246.2559187, \"step\": 2309, \"value\": 5.378696528168803e-07}, {\"wallTime\": 1647712246.3881905, \"step\": 2311, \"value\": 4.767024393004249e-07}, {\"wallTime\": 1647712246.561081, \"step\": 2315, \"value\": 3.6547666582009697e-07}, {\"wallTime\": 1647712246.605215, \"step\": 2316, \"value\": 3.399851209451299e-07}, {\"wallTime\": 1647712246.736393, \"step\": 2319, \"value\": 2.69067811586865e-07}, {\"wallTime\": 1647712246.9693599, \"step\": 2324, \"value\": 1.694015452358144e-07}, {\"wallTime\": 1647712247.2587004, \"step\": 2330, \"value\": 8.038620791239737e-08}, {\"wallTime\": 1647712247.3557208, \"step\": 2332, \"value\": 5.81307411096077e-08}, {\"wallTime\": 1647712247.5008607, \"step\": 2335, \"value\": 3.1701528513394805e-08}, {\"wallTime\": 1647712247.7330003, \"step\": 2340, \"value\": 6.198783264466101e-09}, {\"wallTime\": 1647712247.865807, \"step\": 2342, \"value\": 2.4892217176386566e-09}, {\"wallTime\": 1647712247.9270897, \"step\": 2343, \"value\": 2.025525303039899e-09}, {\"wallTime\": 1647712247.9641345, \"step\": 2344, \"value\": 2.4892217176386566e-09}], \"tb_logs/MultiStepLR013420-SGD\": [{\"wallTime\": 1647711124.1173944, \"step\": 3, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711124.1861055, \"step\": 4, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711124.5360377, \"step\": 10, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711124.7175403, \"step\": 14, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711124.7570496, \"step\": 15, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711124.8787355, \"step\": 18, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711124.9201944, \"step\": 19, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711124.9615414, \"step\": 20, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711125.0483172, \"step\": 22, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711125.0902753, \"step\": 23, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711125.214268, \"step\": 26, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711125.2538834, \"step\": 27, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711125.5105116, \"step\": 33, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711125.6533024, \"step\": 36, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711125.739894, \"step\": 38, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711125.8260238, \"step\": 40, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711126.1497777, \"step\": 47, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711126.187769, \"step\": 48, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711126.257269, \"step\": 49, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711126.3272939, \"step\": 51, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711126.4477663, \"step\": 54, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711126.5814931, \"step\": 57, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711126.7039487, \"step\": 60, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711126.7531722, \"step\": 61, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711126.7953115, \"step\": 62, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711126.836365, \"step\": 63, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711126.9173627, \"step\": 65, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711126.9574072, \"step\": 66, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711127.0036044, \"step\": 67, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711127.0457022, \"step\": 68, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711127.1254096, \"step\": 70, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711127.1611483, \"step\": 71, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711127.407674, \"step\": 77, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711127.4956753, \"step\": 79, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711127.5440662, \"step\": 80, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711127.6432424, \"step\": 82, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711127.8274999, \"step\": 85, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711128.058494, \"step\": 89, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711128.136187, \"step\": 90, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711128.6358528, \"step\": 99, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711128.716022, \"step\": 100, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711128.8500745, \"step\": 103, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711129.0753007, \"step\": 106, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711129.1194181, \"step\": 107, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711129.204356, \"step\": 109, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711129.5721369, \"step\": 116, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711129.8246858, \"step\": 121, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711130.032734, \"step\": 125, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711130.0859323, \"step\": 126, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711130.1907413, \"step\": 128, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711130.2996645, \"step\": 130, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711130.356411, \"step\": 131, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711130.572378, \"step\": 136, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711130.6164715, \"step\": 137, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711130.9253755, \"step\": 144, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711131.0060732, \"step\": 146, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711131.0516224, \"step\": 147, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711131.1777728, \"step\": 150, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711131.495311, \"step\": 157, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711131.593338, \"step\": 159, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711131.6374693, \"step\": 160, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711131.724547, \"step\": 162, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711131.8243058, \"step\": 164, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711132.0803072, \"step\": 170, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711132.1211252, \"step\": 171, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711132.1874807, \"step\": 172, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711132.3257082, \"step\": 175, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711132.371773, \"step\": 176, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711132.417692, \"step\": 177, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711132.4637632, \"step\": 178, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711132.5448172, \"step\": 180, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711132.5900035, \"step\": 181, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711132.726857, \"step\": 184, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711132.7726178, \"step\": 185, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711132.822547, \"step\": 186, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711132.9993148, \"step\": 190, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711133.0455623, \"step\": 191, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711133.0813038, \"step\": 192, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711133.2029593, \"step\": 195, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711133.3879228, \"step\": 199, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711133.4303865, \"step\": 200, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711133.5185745, \"step\": 202, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711133.5633948, \"step\": 203, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711133.632064, \"step\": 204, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711133.678529, \"step\": 205, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711133.772573, \"step\": 207, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711133.8671823, \"step\": 209, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711133.9613779, \"step\": 211, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711134.0599852, \"step\": 213, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711134.1469665, \"step\": 215, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711134.1935246, \"step\": 216, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711134.3136082, \"step\": 219, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711134.3556411, \"step\": 220, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711134.3935285, \"step\": 221, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711134.437556, \"step\": 222, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711134.5245612, \"step\": 224, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711134.7501447, \"step\": 229, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711135.1292734, \"step\": 237, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711135.1762722, \"step\": 238, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711135.223284, \"step\": 239, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711135.3199966, \"step\": 241, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711135.383622, \"step\": 242, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711135.4676073, \"step\": 244, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711135.5116677, \"step\": 245, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711135.5516493, \"step\": 246, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711135.597952, \"step\": 247, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711135.8181727, \"step\": 252, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711135.8883257, \"step\": 253, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711135.9389794, \"step\": 254, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711136.1422951, \"step\": 258, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711136.1951425, \"step\": 259, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711136.2668872, \"step\": 260, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711136.382542, \"step\": 262, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711136.765341, \"step\": 270, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711136.8053272, \"step\": 271, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711136.9326615, \"step\": 274, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711137.0212889, \"step\": 276, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711137.110301, \"step\": 278, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711137.1989844, \"step\": 280, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711137.287491, \"step\": 282, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711137.332458, \"step\": 283, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711137.4225724, \"step\": 285, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711137.5353324, \"step\": 287, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711137.5786, \"step\": 288, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711137.6715403, \"step\": 290, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711137.9220228, \"step\": 295, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711137.9622808, \"step\": 296, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711138.0130744, \"step\": 297, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711138.053501, \"step\": 298, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711138.4142935, \"step\": 306, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711138.5051422, \"step\": 308, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711138.5505872, \"step\": 309, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711138.683683, \"step\": 312, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711138.8681967, \"step\": 316, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711138.9571257, \"step\": 318, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711138.9974027, \"step\": 319, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711139.13254, \"step\": 322, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711139.217369, \"step\": 324, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711139.423871, \"step\": 329, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711139.514094, \"step\": 331, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711139.5566263, \"step\": 332, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711139.8019361, \"step\": 337, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711139.8465047, \"step\": 338, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711139.93778, \"step\": 340, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711140.0741682, \"step\": 343, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711140.1687562, \"step\": 345, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711140.213367, \"step\": 346, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711140.3857749, \"step\": 350, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711140.4723878, \"step\": 352, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711140.5142336, \"step\": 353, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711140.5522962, \"step\": 354, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711140.7329688, \"step\": 358, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711140.9168906, \"step\": 362, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711140.9617925, \"step\": 363, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711141.007391, \"step\": 364, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711141.0529943, \"step\": 365, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711141.0981865, \"step\": 366, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711141.1438177, \"step\": 367, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711141.4745119, \"step\": 374, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711141.595838, \"step\": 377, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711141.638151, \"step\": 378, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711142.0070744, \"step\": 386, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711142.1881807, \"step\": 390, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711142.255766, \"step\": 391, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711142.300836, \"step\": 392, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711142.3465095, \"step\": 393, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711142.393279, \"step\": 394, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711142.5280561, \"step\": 397, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711142.7461085, \"step\": 402, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711142.8373117, \"step\": 404, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711142.999229, \"step\": 408, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711143.0383778, \"step\": 409, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711143.2180943, \"step\": 413, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711143.2617633, \"step\": 414, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711143.3066127, \"step\": 415, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711143.4392672, \"step\": 418, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711143.5561347, \"step\": 421, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711143.5950239, \"step\": 422, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711143.7221727, \"step\": 425, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711143.7708797, \"step\": 426, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711143.9415963, \"step\": 430, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711143.9816797, \"step\": 431, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711144.1595032, \"step\": 435, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711144.1965945, \"step\": 436, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711144.2376661, \"step\": 437, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711144.3253183, \"step\": 439, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711144.3659213, \"step\": 440, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711144.4109242, \"step\": 441, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711144.502114, \"step\": 443, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711144.5470488, \"step\": 444, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711144.5917418, \"step\": 445, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711144.6402094, \"step\": 446, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711144.8187973, \"step\": 450, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711144.8626103, \"step\": 451, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711144.9075186, \"step\": 452, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711144.9541895, \"step\": 453, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711145.0238569, \"step\": 454, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711145.109715, \"step\": 456, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711145.1921859, \"step\": 458, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711145.2746553, \"step\": 460, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711145.316903, \"step\": 461, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711145.4772263, \"step\": 465, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711145.5765173, \"step\": 466, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711145.6421127, \"step\": 468, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711150.131698, \"step\": 470, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711150.321763, \"step\": 474, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711150.394449, \"step\": 475, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711150.5659244, \"step\": 478, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711150.5979645, \"step\": 479, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711150.642129, \"step\": 480, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711150.686894, \"step\": 481, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711150.7755466, \"step\": 483, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711150.8190923, \"step\": 484, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711150.952807, \"step\": 487, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711151.0020278, \"step\": 488, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711151.0422342, \"step\": 489, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711151.1241665, \"step\": 491, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711151.2566662, \"step\": 494, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711151.4219973, \"step\": 498, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711151.6001613, \"step\": 502, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711151.6551027, \"step\": 503, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711151.7875302, \"step\": 506, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711151.930077, \"step\": 509, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711151.9757297, \"step\": 510, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711152.0216136, \"step\": 511, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711152.0673876, \"step\": 512, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711152.1133006, \"step\": 513, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711152.189141, \"step\": 514, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711152.3960834, \"step\": 517, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711152.4318151, \"step\": 518, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711152.4699223, \"step\": 519, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711152.5143735, \"step\": 520, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711152.6866193, \"step\": 523, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711153.0786543, \"step\": 530, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711153.2135806, \"step\": 533, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711153.2584987, \"step\": 534, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711153.3423412, \"step\": 536, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711153.3869784, \"step\": 537, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711153.4317877, \"step\": 538, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711153.481268, \"step\": 539, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711153.5282302, \"step\": 540, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711153.620603, \"step\": 542, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711153.6985493, \"step\": 544, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711153.7803576, \"step\": 546, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711153.8246253, \"step\": 547, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711153.9670553, \"step\": 550, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711154.0546045, \"step\": 552, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711154.1870093, \"step\": 555, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711154.2278206, \"step\": 556, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711154.4975843, \"step\": 562, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711154.5425732, \"step\": 563, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711154.6055293, \"step\": 564, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711154.7760775, \"step\": 568, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711154.8794339, \"step\": 571, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711154.9909282, \"step\": 573, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711155.1590943, \"step\": 576, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711155.4211776, \"step\": 580, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711155.6826456, \"step\": 584, \"value\": 0.12350499629974365}, {\"wallTime\": 1647711155.743128, \"step\": 585, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711155.7985008, \"step\": 586, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711155.9132, \"step\": 588, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711156.02209, \"step\": 590, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711156.0752664, \"step\": 591, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711156.1278532, \"step\": 592, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711156.2394176, \"step\": 594, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711156.3364048, \"step\": 596, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711156.389757, \"step\": 597, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711156.4596786, \"step\": 598, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711156.5140555, \"step\": 599, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711156.625391, \"step\": 601, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711156.6558993, \"step\": 602, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711156.7106788, \"step\": 603, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711156.8211355, \"step\": 605, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711156.994606, \"step\": 608, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711157.1092563, \"step\": 610, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711157.2645688, \"step\": 613, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711157.3150096, \"step\": 614, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711157.4284444, \"step\": 616, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711157.5245137, \"step\": 618, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711157.6317704, \"step\": 620, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711157.7589276, \"step\": 622, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711157.8137054, \"step\": 623, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711157.9749193, \"step\": 626, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711158.0920799, \"step\": 628, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711158.1404295, \"step\": 629, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711158.3683438, \"step\": 633, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711158.5731258, \"step\": 637, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711158.7210112, \"step\": 640, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711158.7768447, \"step\": 641, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711158.8302958, \"step\": 642, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711158.8840284, \"step\": 643, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711158.913203, \"step\": 644, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711159.1843255, \"step\": 649, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711159.29044, \"step\": 651, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711159.343985, \"step\": 652, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711159.3968503, \"step\": 653, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711159.4501703, \"step\": 654, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711159.5100873, \"step\": 655, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711159.6573427, \"step\": 658, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711159.764602, \"step\": 660, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711160.1350372, \"step\": 667, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711160.3017464, \"step\": 670, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711160.6442196, \"step\": 675, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711160.7625227, \"step\": 676, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711160.8534765, \"step\": 677, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711161.019746, \"step\": 680, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711161.0998216, \"step\": 682, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711161.1397688, \"step\": 683, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711161.181076, \"step\": 684, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711161.3106246, \"step\": 687, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711161.544678, \"step\": 692, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711161.6309643, \"step\": 694, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711161.7192838, \"step\": 696, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711161.7636192, \"step\": 697, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711161.855458, \"step\": 699, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711161.9785447, \"step\": 702, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711162.02099, \"step\": 703, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711162.1142387, \"step\": 705, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711162.279058, \"step\": 709, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711162.3142602, \"step\": 710, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711162.394056, \"step\": 712, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711162.53818, \"step\": 715, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711162.622511, \"step\": 717, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711162.7554536, \"step\": 720, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711162.7999153, \"step\": 721, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711162.8895056, \"step\": 723, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711162.97812, \"step\": 725, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711163.0224845, \"step\": 726, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711163.111511, \"step\": 728, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711163.1558914, \"step\": 729, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711163.2559774, \"step\": 731, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711163.2979832, \"step\": 732, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711163.3407452, \"step\": 733, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711163.5543113, \"step\": 738, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711163.7217574, \"step\": 742, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711163.7660327, \"step\": 743, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711163.8149688, \"step\": 744, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711164.3796504, \"step\": 755, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711164.430038, \"step\": 756, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711164.5219555, \"step\": 758, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711164.7276652, \"step\": 763, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711164.7700272, \"step\": 764, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711164.8092027, \"step\": 765, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711164.9334571, \"step\": 768, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711164.9778807, \"step\": 769, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711165.1111338, \"step\": 772, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711165.250987, \"step\": 775, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711165.2951987, \"step\": 776, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711165.384013, \"step\": 778, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711165.4282005, \"step\": 779, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711165.472437, \"step\": 780, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711165.5163527, \"step\": 781, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711165.5602586, \"step\": 782, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711165.823231, \"step\": 788, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711165.9481838, \"step\": 791, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711166.030878, \"step\": 793, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711166.1021276, \"step\": 795, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711166.262051, \"step\": 799, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711166.539901, \"step\": 804, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711166.5934849, \"step\": 805, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711166.65385, \"step\": 806, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711166.6975522, \"step\": 807, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711166.8310788, \"step\": 810, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711167.1833293, \"step\": 818, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711167.227498, \"step\": 819, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711167.3070223, \"step\": 821, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711167.3917341, \"step\": 823, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711167.532116, \"step\": 826, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711167.575066, \"step\": 827, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711167.6200511, \"step\": 828, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711167.7990303, \"step\": 832, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711167.8445733, \"step\": 833, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711167.9278314, \"step\": 835, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711167.9714222, \"step\": 836, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711168.0153022, \"step\": 837, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711168.1074178, \"step\": 839, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711168.1506948, \"step\": 840, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711168.281973, \"step\": 843, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711168.372264, \"step\": 845, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711168.5875916, \"step\": 850, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711168.6325195, \"step\": 851, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711168.755921, \"step\": 854, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711168.9036677, \"step\": 857, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711169.033034, \"step\": 860, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711169.1323943, \"step\": 862, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711169.2741163, \"step\": 865, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711169.323349, \"step\": 866, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711169.494856, \"step\": 870, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711169.539307, \"step\": 871, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711170.1183255, \"step\": 884, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711170.1635258, \"step\": 885, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711170.209114, \"step\": 886, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711170.3003733, \"step\": 888, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711170.3912737, \"step\": 890, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711170.4870517, \"step\": 892, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711170.6246648, \"step\": 895, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711170.7113733, \"step\": 897, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711170.7557304, \"step\": 898, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711170.8832848, \"step\": 901, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711170.926042, \"step\": 902, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711171.0160398, \"step\": 904, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711171.1442041, \"step\": 907, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711171.1901805, \"step\": 908, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711171.2807262, \"step\": 910, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711171.3261273, \"step\": 911, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711171.4628298, \"step\": 914, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711171.6437829, \"step\": 918, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711171.6956923, \"step\": 919, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711171.786183, \"step\": 921, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711171.8713539, \"step\": 923, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711172.0572598, \"step\": 927, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711172.0955086, \"step\": 928, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711172.1811478, \"step\": 930, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711172.224885, \"step\": 931, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711172.2693264, \"step\": 932, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711172.3102336, \"step\": 933, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711172.4525018, \"step\": 935, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711177.4220638, \"step\": 939, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711177.5422502, \"step\": 941, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711177.594044, \"step\": 942, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711177.7525678, \"step\": 945, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711178.0096545, \"step\": 949, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711178.1908386, \"step\": 952, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711178.3505173, \"step\": 955, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711178.4093707, \"step\": 956, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711178.616449, \"step\": 960, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711178.712973, \"step\": 962, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711178.760529, \"step\": 963, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711178.8587027, \"step\": 965, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711178.9584768, \"step\": 967, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711179.0113952, \"step\": 968, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711179.1708462, \"step\": 971, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711179.428631, \"step\": 976, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711179.5305984, \"step\": 978, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711179.5843422, \"step\": 979, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711179.6958582, \"step\": 981, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711179.7493558, \"step\": 982, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711179.9715085, \"step\": 986, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711180.1923702, \"step\": 990, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711180.3001986, \"step\": 992, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711180.4084089, \"step\": 994, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711180.5806344, \"step\": 996, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711180.6877956, \"step\": 998, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711180.737133, \"step\": 999, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711180.9160414, \"step\": 1002, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711180.9732344, \"step\": 1003, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711181.0307183, \"step\": 1004, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711181.1502006, \"step\": 1006, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711181.4423063, \"step\": 1011, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711181.5552197, \"step\": 1013, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711181.659189, \"step\": 1015, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711181.7140062, \"step\": 1016, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711181.7684088, \"step\": 1017, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711182.0379777, \"step\": 1022, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711182.2668748, \"step\": 1026, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711182.3759224, \"step\": 1028, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711182.429894, \"step\": 1029, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711182.7698998, \"step\": 1035, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711182.82422, \"step\": 1036, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711182.8857348, \"step\": 1037, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711182.9403222, \"step\": 1038, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711182.9927826, \"step\": 1039, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711183.2045214, \"step\": 1043, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711183.3094132, \"step\": 1045, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711183.3601289, \"step\": 1046, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711183.692137, \"step\": 1052, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711183.752947, \"step\": 1053, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711183.9161797, \"step\": 1056, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711184.0287683, \"step\": 1058, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711184.0827785, \"step\": 1059, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711184.1439142, \"step\": 1060, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711184.248906, \"step\": 1062, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711184.4013739, \"step\": 1065, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711184.5755243, \"step\": 1067, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711184.697763, \"step\": 1069, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711184.750522, \"step\": 1070, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711184.798643, \"step\": 1071, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711184.8506901, \"step\": 1072, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711184.9040146, \"step\": 1073, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711184.962066, \"step\": 1074, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711185.1180604, \"step\": 1077, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711185.1678784, \"step\": 1078, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711185.2640002, \"step\": 1080, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711185.3131137, \"step\": 1081, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711185.3635595, \"step\": 1082, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711185.5252209, \"step\": 1085, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711185.5707061, \"step\": 1086, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711185.6187983, \"step\": 1087, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711185.826543, \"step\": 1091, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711186.2486606, \"step\": 1098, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711186.388748, \"step\": 1100, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711186.5265, \"step\": 1102, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711186.591788, \"step\": 1103, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711186.6626565, \"step\": 1104, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711186.8596017, \"step\": 1107, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711186.986799, \"step\": 1109, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711187.1137657, \"step\": 1111, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711187.177537, \"step\": 1112, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711187.308365, \"step\": 1114, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711187.6338785, \"step\": 1119, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711187.7505012, \"step\": 1121, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711187.803033, \"step\": 1122, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711187.953931, \"step\": 1125, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711188.001109, \"step\": 1126, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711188.1148098, \"step\": 1128, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711188.1701024, \"step\": 1129, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711188.2259612, \"step\": 1130, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711188.2818248, \"step\": 1131, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711188.3373907, \"step\": 1132, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711188.4494576, \"step\": 1134, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711188.5051203, \"step\": 1135, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711188.5605319, \"step\": 1136, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711188.7367005, \"step\": 1139, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711188.8954291, \"step\": 1142, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711189.0507674, \"step\": 1145, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711189.1096108, \"step\": 1146, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711189.2049143, \"step\": 1148, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711189.314912, \"step\": 1150, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711189.3700142, \"step\": 1151, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711189.4244664, \"step\": 1152, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711189.475672, \"step\": 1153, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711189.9143171, \"step\": 1160, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711190.0145993, \"step\": 1162, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711190.1200712, \"step\": 1164, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711190.2269876, \"step\": 1166, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711190.2794814, \"step\": 1167, \"value\": 0.08065102994441986}, {\"wallTime\": 1647711190.6008584, \"step\": 1173, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711190.656568, \"step\": 1174, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711190.7672296, \"step\": 1176, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711190.8228178, \"step\": 1177, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711190.8780363, \"step\": 1178, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711191.109278, \"step\": 1182, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711191.2206907, \"step\": 1184, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711191.3236988, \"step\": 1186, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711191.4309025, \"step\": 1188, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711191.4916794, \"step\": 1189, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711191.5352, \"step\": 1190, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711191.6966393, \"step\": 1193, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711191.7522247, \"step\": 1194, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711191.8078594, \"step\": 1195, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711191.918269, \"step\": 1197, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711191.9737406, \"step\": 1198, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711192.1396062, \"step\": 1201, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711192.364846, \"step\": 1205, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711192.419285, \"step\": 1206, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711192.4721603, \"step\": 1207, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711192.5811596, \"step\": 1209, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711192.7822225, \"step\": 1213, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711192.8349733, \"step\": 1214, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711192.8901112, \"step\": 1215, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711193.0556707, \"step\": 1218, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711193.3395913, \"step\": 1223, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711193.4505334, \"step\": 1225, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711193.6683574, \"step\": 1229, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711193.8268816, \"step\": 1232, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711193.8772378, \"step\": 1233, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711194.133961, \"step\": 1238, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711194.242072, \"step\": 1240, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711194.2962668, \"step\": 1241, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711194.3572724, \"step\": 1242, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711194.4123914, \"step\": 1243, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711194.4620566, \"step\": 1244, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711194.5587049, \"step\": 1246, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711194.717069, \"step\": 1249, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711194.774361, \"step\": 1250, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711194.8252022, \"step\": 1251, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711194.8846147, \"step\": 1252, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711195.02321, \"step\": 1254, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711195.1275353, \"step\": 1256, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711195.1766331, \"step\": 1257, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711195.3435612, \"step\": 1260, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711195.3999758, \"step\": 1261, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711195.7378695, \"step\": 1267, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711195.9607668, \"step\": 1271, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711196.2313058, \"step\": 1276, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711196.292236, \"step\": 1277, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711196.346583, \"step\": 1278, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711196.6793242, \"step\": 1282, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711196.8550794, \"step\": 1285, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711197.084217, \"step\": 1290, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711197.2354944, \"step\": 1293, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711197.46847, \"step\": 1298, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711197.5129128, \"step\": 1299, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711197.6400983, \"step\": 1302, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711197.8234575, \"step\": 1306, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711198.0085995, \"step\": 1310, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711198.24822, \"step\": 1315, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711198.4739966, \"step\": 1320, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711198.5608833, \"step\": 1322, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711198.6919506, \"step\": 1325, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711198.7274234, \"step\": 1326, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711198.8098202, \"step\": 1328, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711199.1162217, \"step\": 1335, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711199.5353239, \"step\": 1344, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711199.5796425, \"step\": 1345, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711199.6618063, \"step\": 1347, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711199.7040493, \"step\": 1348, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711199.828793, \"step\": 1351, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711199.8710034, \"step\": 1352, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711199.951268, \"step\": 1354, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711200.138991, \"step\": 1358, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711200.2306936, \"step\": 1360, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711200.4153638, \"step\": 1364, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711200.460876, \"step\": 1365, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711200.5067701, \"step\": 1366, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711200.5528882, \"step\": 1367, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711200.5981646, \"step\": 1368, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711200.784394, \"step\": 1372, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711200.8245506, \"step\": 1373, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711200.9195633, \"step\": 1375, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711200.9619389, \"step\": 1376, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711201.1270487, \"step\": 1380, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711201.3512821, \"step\": 1385, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711201.4004436, \"step\": 1386, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711201.5801184, \"step\": 1390, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711201.7190304, \"step\": 1393, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711201.9116595, \"step\": 1397, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711202.198092, \"step\": 1403, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711207.785067, \"step\": 1416, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711207.8668787, \"step\": 1417, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711208.1638525, \"step\": 1421, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711208.829443, \"step\": 1431, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711208.8965323, \"step\": 1432, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711209.167837, \"step\": 1436, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711209.289717, \"step\": 1438, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711209.3482924, \"step\": 1439, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711209.409056, \"step\": 1440, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711209.4764342, \"step\": 1441, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711209.6754093, \"step\": 1444, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711209.8138137, \"step\": 1446, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711209.8843722, \"step\": 1447, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711210.0249302, \"step\": 1449, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711210.1408415, \"step\": 1451, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711210.1885946, \"step\": 1452, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711210.2839975, \"step\": 1454, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711210.3323405, \"step\": 1455, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711210.3759704, \"step\": 1456, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711210.4210432, \"step\": 1457, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711210.4652221, \"step\": 1458, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711210.518361, \"step\": 1459, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711210.5617802, \"step\": 1460, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711210.6060376, \"step\": 1461, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711210.6863816, \"step\": 1463, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711211.0143652, \"step\": 1470, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711211.1530116, \"step\": 1473, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711211.19907, \"step\": 1474, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711211.297552, \"step\": 1476, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711211.7084963, \"step\": 1483, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711211.873679, \"step\": 1487, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711211.955781, \"step\": 1489, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711211.9968557, \"step\": 1490, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711212.1281679, \"step\": 1493, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711212.1730573, \"step\": 1494, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711212.347439, \"step\": 1498, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711212.3973396, \"step\": 1499, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711212.4397743, \"step\": 1500, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711212.5240626, \"step\": 1502, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711212.8390641, \"step\": 1509, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711212.9172282, \"step\": 1510, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711212.9850755, \"step\": 1511, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711213.132604, \"step\": 1513, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711213.2866867, \"step\": 1515, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711213.329588, \"step\": 1516, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711213.7196991, \"step\": 1523, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711213.9983656, \"step\": 1528, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711214.3141952, \"step\": 1534, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711214.472619, \"step\": 1537, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711214.531913, \"step\": 1538, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711214.705926, \"step\": 1541, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711215.1259775, \"step\": 1548, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711215.294868, \"step\": 1551, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711215.3394203, \"step\": 1552, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711215.3911762, \"step\": 1553, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711215.8216352, \"step\": 1562, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711215.9567099, \"step\": 1565, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711216.0007112, \"step\": 1566, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711216.086641, \"step\": 1568, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711216.1805675, \"step\": 1570, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711216.2246404, \"step\": 1571, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711216.2689326, \"step\": 1572, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711216.3131359, \"step\": 1573, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711216.456877, \"step\": 1576, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711216.5432692, \"step\": 1578, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711216.6193762, \"step\": 1580, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711216.6658382, \"step\": 1581, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711216.7058935, \"step\": 1582, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711216.8372004, \"step\": 1585, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711217.0667722, \"step\": 1590, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711217.2724023, \"step\": 1595, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711217.3135016, \"step\": 1596, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711217.3580303, \"step\": 1597, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711217.5306518, \"step\": 1601, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711217.5747137, \"step\": 1602, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711217.6185086, \"step\": 1603, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711217.9735446, \"step\": 1611, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711218.06577, \"step\": 1613, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711218.1247673, \"step\": 1614, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711218.2113805, \"step\": 1616, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711218.4529638, \"step\": 1622, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711218.5306098, \"step\": 1624, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711218.6089964, \"step\": 1626, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711218.6501184, \"step\": 1627, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711218.8182218, \"step\": 1631, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711218.983054, \"step\": 1635, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711219.023231, \"step\": 1636, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711219.0640855, \"step\": 1637, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711219.1972136, \"step\": 1640, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711219.240456, \"step\": 1641, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711219.449693, \"step\": 1646, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711219.4877903, \"step\": 1647, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711219.5657275, \"step\": 1649, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711219.6429458, \"step\": 1651, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711219.6831763, \"step\": 1652, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711219.724907, \"step\": 1653, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711219.76396, \"step\": 1654, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711219.8480332, \"step\": 1656, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711219.9326472, \"step\": 1658, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711220.1303136, \"step\": 1662, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711220.2409925, \"step\": 1664, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711220.3361452, \"step\": 1666, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711220.4963162, \"step\": 1669, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711220.5468469, \"step\": 1670, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711220.7496145, \"step\": 1674, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711220.9078722, \"step\": 1677, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711221.019364, \"step\": 1679, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711221.078049, \"step\": 1680, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711221.2086668, \"step\": 1682, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711221.341263, \"step\": 1685, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711221.3859296, \"step\": 1686, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711221.4300175, \"step\": 1687, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711221.4756684, \"step\": 1688, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711221.7065265, \"step\": 1693, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711221.7507896, \"step\": 1694, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711221.7954302, \"step\": 1695, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711221.884173, \"step\": 1697, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711221.9685688, \"step\": 1699, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711222.0120277, \"step\": 1700, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711222.099911, \"step\": 1702, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711222.1864817, \"step\": 1704, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711222.3192444, \"step\": 1707, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711222.4081922, \"step\": 1709, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711222.4547474, \"step\": 1710, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711222.507459, \"step\": 1711, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711222.5516546, \"step\": 1712, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711222.8214996, \"step\": 1718, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711222.8628132, \"step\": 1719, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711223.0023603, \"step\": 1722, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711223.0489268, \"step\": 1723, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711223.0906565, \"step\": 1724, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711223.1280737, \"step\": 1725, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711223.3510277, \"step\": 1730, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711223.7148569, \"step\": 1738, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711223.7590895, \"step\": 1739, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711223.9428165, \"step\": 1743, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711224.0288508, \"step\": 1745, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711224.163994, \"step\": 1748, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711224.206354, \"step\": 1749, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711224.250806, \"step\": 1750, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711224.2870126, \"step\": 1751, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711224.3796997, \"step\": 1753, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711224.4174483, \"step\": 1754, \"value\": 0.05266660079360008}, {\"wallTime\": 1647711224.5475736, \"step\": 1757, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711224.772303, \"step\": 1762, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711224.8234358, \"step\": 1763, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711224.9129658, \"step\": 1765, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711225.0489552, \"step\": 1768, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711225.3564787, \"step\": 1775, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711225.398543, \"step\": 1776, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711225.440561, \"step\": 1777, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711225.5701463, \"step\": 1780, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711225.747639, \"step\": 1784, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711225.7979038, \"step\": 1785, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711225.8360043, \"step\": 1786, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711225.9643843, \"step\": 1789, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711226.0093286, \"step\": 1790, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711226.0983574, \"step\": 1792, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711226.1891015, \"step\": 1794, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711226.2835288, \"step\": 1796, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711226.4541643, \"step\": 1800, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711226.5388865, \"step\": 1802, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711226.5896885, \"step\": 1803, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711226.8043015, \"step\": 1808, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711226.8867276, \"step\": 1810, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711227.0765405, \"step\": 1814, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711227.260643, \"step\": 1818, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711227.3061297, \"step\": 1819, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711227.496203, \"step\": 1823, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711227.6355765, \"step\": 1826, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711227.676807, \"step\": 1827, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711227.7658622, \"step\": 1829, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711227.8102114, \"step\": 1830, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711227.8990188, \"step\": 1832, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711227.9391384, \"step\": 1833, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711227.986945, \"step\": 1834, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711228.078269, \"step\": 1836, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711228.1233947, \"step\": 1837, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711228.16918, \"step\": 1838, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711228.446363, \"step\": 1844, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711228.4914272, \"step\": 1845, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711228.5371583, \"step\": 1846, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711228.5823464, \"step\": 1847, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711228.6276853, \"step\": 1848, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711228.766753, \"step\": 1851, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711228.868832, \"step\": 1853, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711229.1667373, \"step\": 1860, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711229.3488798, \"step\": 1864, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711229.3947916, \"step\": 1865, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711229.4397938, \"step\": 1866, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711229.48574, \"step\": 1867, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711229.6705008, \"step\": 1871, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711229.7209103, \"step\": 1872, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711229.8139973, \"step\": 1874, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711229.8282619, \"step\": 1875, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711233.9976587, \"step\": 1877, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711234.133438, \"step\": 1880, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711234.2941303, \"step\": 1883, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711234.3477511, \"step\": 1884, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711234.4556363, \"step\": 1886, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711234.5520575, \"step\": 1888, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711234.6361804, \"step\": 1890, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711234.9166157, \"step\": 1895, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711235.0822175, \"step\": 1899, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711235.209153, \"step\": 1902, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711235.3671024, \"step\": 1906, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711235.4552977, \"step\": 1908, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711235.4977825, \"step\": 1909, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711235.5407739, \"step\": 1910, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711235.6831691, \"step\": 1913, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711235.9888067, \"step\": 1918, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711236.32477, \"step\": 1924, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711236.3860223, \"step\": 1925, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711236.4150856, \"step\": 1926, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711236.64525, \"step\": 1929, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711236.7753458, \"step\": 1932, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711236.8979874, \"step\": 1935, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711236.9426703, \"step\": 1936, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711237.1334639, \"step\": 1940, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711237.1823585, \"step\": 1941, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711237.2247193, \"step\": 1942, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711237.345447, \"step\": 1945, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711237.427236, \"step\": 1947, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711237.5517182, \"step\": 1950, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711237.5988314, \"step\": 1951, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711237.6821141, \"step\": 1953, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711237.818122, \"step\": 1956, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711238.0025854, \"step\": 1960, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711238.044825, \"step\": 1961, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711238.0901558, \"step\": 1962, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711238.134648, \"step\": 1963, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711238.1797247, \"step\": 1964, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711238.2716281, \"step\": 1966, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711238.3249798, \"step\": 1967, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711238.37444, \"step\": 1968, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711238.4207406, \"step\": 1969, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711238.689547, \"step\": 1975, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711238.7737417, \"step\": 1977, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711238.8578148, \"step\": 1979, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711238.9039183, \"step\": 1980, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711238.949801, \"step\": 1981, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711238.9957583, \"step\": 1982, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711239.0449317, \"step\": 1983, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711239.137312, \"step\": 1985, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711239.225746, \"step\": 1987, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711239.2704763, \"step\": 1988, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711239.4091434, \"step\": 1991, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711239.4565895, \"step\": 1992, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711239.6009736, \"step\": 1995, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711239.9077067, \"step\": 2002, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711240.5552974, \"step\": 2016, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711240.6058197, \"step\": 2017, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711240.788869, \"step\": 2021, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711240.8351605, \"step\": 2022, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711240.8852196, \"step\": 2023, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711240.9719424, \"step\": 2025, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711241.0164073, \"step\": 2026, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711241.1071985, \"step\": 2028, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711241.2272873, \"step\": 2031, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711241.2654412, \"step\": 2032, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711241.3691733, \"step\": 2034, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711241.423652, \"step\": 2035, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711241.4777985, \"step\": 2036, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711241.6957552, \"step\": 2040, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711241.7498522, \"step\": 2041, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711241.870291, \"step\": 2043, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711241.9251926, \"step\": 2044, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711242.0928216, \"step\": 2047, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711242.1486316, \"step\": 2048, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711242.1915855, \"step\": 2049, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711242.4064486, \"step\": 2054, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711242.4442582, \"step\": 2055, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711242.487973, \"step\": 2056, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711242.5301921, \"step\": 2057, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711242.945359, \"step\": 2067, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711242.9904754, \"step\": 2068, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711243.0809255, \"step\": 2070, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711243.2674038, \"step\": 2074, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711243.4329956, \"step\": 2078, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711243.4750092, \"step\": 2079, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711243.6832526, \"step\": 2084, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711243.7677517, \"step\": 2086, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711243.8128643, \"step\": 2087, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711243.9031878, \"step\": 2089, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711243.9468892, \"step\": 2090, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711243.99442, \"step\": 2091, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711244.2314794, \"step\": 2095, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711244.276354, \"step\": 2096, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711244.320628, \"step\": 2097, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711244.3764539, \"step\": 2098, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711244.4879875, \"step\": 2100, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711244.6201828, \"step\": 2103, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711244.6600957, \"step\": 2104, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711244.7042923, \"step\": 2105, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711244.7535686, \"step\": 2106, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711244.8846169, \"step\": 2109, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711244.9361432, \"step\": 2110, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711245.1495564, \"step\": 2114, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711245.2047546, \"step\": 2115, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711245.3758702, \"step\": 2119, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711245.4199274, \"step\": 2120, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711245.508258, \"step\": 2122, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711245.5524464, \"step\": 2123, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711245.5974991, \"step\": 2124, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711245.6891785, \"step\": 2126, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711245.7324758, \"step\": 2127, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711246.0347784, \"step\": 2134, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711246.0767074, \"step\": 2135, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711246.1208363, \"step\": 2136, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711246.2646472, \"step\": 2139, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711246.436422, \"step\": 2143, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711246.704681, \"step\": 2149, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711246.7492023, \"step\": 2150, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711246.9264455, \"step\": 2154, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711246.9723754, \"step\": 2155, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711247.1524065, \"step\": 2159, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711247.1947055, \"step\": 2160, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711247.2322505, \"step\": 2161, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711247.2715747, \"step\": 2162, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711247.5831025, \"step\": 2169, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711247.7729564, \"step\": 2173, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711247.8649883, \"step\": 2175, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711247.9136634, \"step\": 2176, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711248.3085215, \"step\": 2183, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711248.3946774, \"step\": 2185, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711248.481871, \"step\": 2187, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711248.5640478, \"step\": 2189, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711248.797211, \"step\": 2194, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711249.0223815, \"step\": 2199, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711249.1088264, \"step\": 2201, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711249.15404, \"step\": 2202, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711249.2092147, \"step\": 2203, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711249.3487394, \"step\": 2206, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711249.4727473, \"step\": 2209, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711249.5578513, \"step\": 2211, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711249.6050978, \"step\": 2212, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711249.6879516, \"step\": 2214, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711249.7233396, \"step\": 2215, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711249.76519, \"step\": 2216, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711249.9928625, \"step\": 2221, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711250.0434184, \"step\": 2222, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711250.0886679, \"step\": 2223, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711250.1792688, \"step\": 2225, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711250.270056, \"step\": 2227, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711250.5600889, \"step\": 2233, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711250.6914945, \"step\": 2236, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711250.8201797, \"step\": 2239, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711250.949754, \"step\": 2242, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711251.0369112, \"step\": 2244, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711251.1775773, \"step\": 2247, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711251.504838, \"step\": 2254, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711251.6411977, \"step\": 2257, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711251.684341, \"step\": 2258, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711251.966291, \"step\": 2264, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711252.0634427, \"step\": 2266, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711252.099657, \"step\": 2267, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711252.4070075, \"step\": 2274, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711252.4988601, \"step\": 2276, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711252.6828609, \"step\": 2280, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711252.7297037, \"step\": 2281, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711252.8696008, \"step\": 2284, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711252.9201615, \"step\": 2285, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711253.1732082, \"step\": 2291, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711253.217287, \"step\": 2292, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711253.255582, \"step\": 2293, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711253.5733685, \"step\": 2300, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711253.822659, \"step\": 2305, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711253.8643785, \"step\": 2306, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711253.9075735, \"step\": 2307, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711253.993519, \"step\": 2309, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711254.0800958, \"step\": 2311, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711254.2546175, \"step\": 2315, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711254.3031929, \"step\": 2316, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711254.4360933, \"step\": 2319, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711254.6567533, \"step\": 2324, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711254.9407797, \"step\": 2330, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711255.0423875, \"step\": 2332, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711255.185539, \"step\": 2335, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711255.4418325, \"step\": 2340, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711255.5598748, \"step\": 2342, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711255.603877, \"step\": 2343, \"value\": 0.034392256289720535}, {\"wallTime\": 1647711255.6394715, \"step\": 2344, \"value\": 0.034392256289720535}], \"tb_logs/MultiStepLR014532-RAdam\": [{\"wallTime\": 1647711774.55234, \"step\": 3, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711774.6035821, \"step\": 4, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711774.9163983, \"step\": 10, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711775.0890353, \"step\": 14, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711775.1386287, \"step\": 15, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711775.3530858, \"step\": 18, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711775.4108086, \"step\": 19, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711775.4667456, \"step\": 20, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711775.5729594, \"step\": 22, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711775.6529927, \"step\": 23, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711775.8633196, \"step\": 26, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711775.9256127, \"step\": 27, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711776.289928, \"step\": 33, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711776.4475968, \"step\": 36, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711776.6027927, \"step\": 38, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711776.723194, \"step\": 40, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711777.175536, \"step\": 47, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711777.2410734, \"step\": 48, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711777.328893, \"step\": 49, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711777.472648, \"step\": 51, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711777.669678, \"step\": 54, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711777.8794649, \"step\": 57, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711778.1248796, \"step\": 60, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711778.1976504, \"step\": 61, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711778.2589624, \"step\": 62, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711778.3264658, \"step\": 63, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711778.4450932, \"step\": 65, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711778.4945369, \"step\": 66, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711778.5486047, \"step\": 67, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711778.6050692, \"step\": 68, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711778.7206314, \"step\": 70, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711778.8159235, \"step\": 71, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711779.1505249, \"step\": 77, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711779.2519653, \"step\": 79, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711779.3031943, \"step\": 80, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711779.4074926, \"step\": 82, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711779.5533197, \"step\": 85, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711779.772466, \"step\": 89, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711779.8258483, \"step\": 90, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711780.391166, \"step\": 99, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711780.4948254, \"step\": 100, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711780.6856382, \"step\": 103, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711780.862375, \"step\": 106, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711780.9383135, \"step\": 107, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711781.06033, \"step\": 109, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711781.4215593, \"step\": 116, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711781.7183104, \"step\": 121, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711782.0403953, \"step\": 125, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711782.1010902, \"step\": 126, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711782.2163079, \"step\": 128, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711782.3668668, \"step\": 130, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711782.428219, \"step\": 131, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711782.7430806, \"step\": 136, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711782.8087833, \"step\": 137, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711783.4467318, \"step\": 144, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711783.5972514, \"step\": 146, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711783.6647518, \"step\": 147, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711783.8702548, \"step\": 150, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711784.5119026, \"step\": 157, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711784.707618, \"step\": 159, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711784.8090882, \"step\": 160, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711784.9793403, \"step\": 162, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711785.168662, \"step\": 164, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711785.6839738, \"step\": 170, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711785.7609742, \"step\": 171, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711785.822451, \"step\": 172, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711786.0546482, \"step\": 175, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711786.1452212, \"step\": 176, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711786.2559311, \"step\": 177, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711786.3427124, \"step\": 178, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711786.464626, \"step\": 180, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711786.5199726, \"step\": 181, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711786.6853588, \"step\": 184, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711786.7740111, \"step\": 185, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711786.8455844, \"step\": 186, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711787.0840044, \"step\": 190, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711787.1423585, \"step\": 191, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711787.2031975, \"step\": 192, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711787.406673, \"step\": 195, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711787.6509504, \"step\": 199, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711787.74756, \"step\": 200, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711787.904497, \"step\": 202, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711787.9823446, \"step\": 203, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711788.0513668, \"step\": 204, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711788.1150908, \"step\": 205, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711788.2468934, \"step\": 207, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711788.3692343, \"step\": 209, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711788.4867318, \"step\": 211, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711788.6141737, \"step\": 213, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711788.792428, \"step\": 215, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711788.8922648, \"step\": 216, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711789.197448, \"step\": 219, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711789.2597432, \"step\": 220, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711789.3204925, \"step\": 221, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711789.3842225, \"step\": 222, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711789.5096655, \"step\": 224, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711789.8421478, \"step\": 229, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711792.5726507, \"step\": 237, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711792.6370137, \"step\": 238, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711792.7078404, \"step\": 239, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711792.8595467, \"step\": 241, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711792.930141, \"step\": 242, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711793.0666466, \"step\": 244, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711793.12917, \"step\": 245, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711793.1866322, \"step\": 246, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711793.243936, \"step\": 247, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711793.5731804, \"step\": 252, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711793.6340423, \"step\": 253, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711793.757138, \"step\": 254, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711794.1312041, \"step\": 258, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711794.2061582, \"step\": 259, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711794.2721183, \"step\": 260, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711794.4734921, \"step\": 262, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711795.0013409, \"step\": 270, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711795.0524008, \"step\": 271, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711795.2111063, \"step\": 274, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711795.3180413, \"step\": 276, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711795.4345663, \"step\": 278, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711795.5296001, \"step\": 280, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711795.6370132, \"step\": 282, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711795.6934147, \"step\": 283, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711795.7986867, \"step\": 285, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711795.909832, \"step\": 287, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711795.9663818, \"step\": 288, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711796.083197, \"step\": 290, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711796.335541, \"step\": 295, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711796.5270183, \"step\": 296, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711796.5391603, \"step\": 297, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711796.576454, \"step\": 298, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711797.0571594, \"step\": 306, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711797.1678722, \"step\": 308, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711797.2210321, \"step\": 309, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711797.3839881, \"step\": 312, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711797.6013062, \"step\": 316, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711797.6934764, \"step\": 318, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711797.738003, \"step\": 319, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711797.8908014, \"step\": 322, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711798.1737218, \"step\": 324, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711798.5104709, \"step\": 329, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711798.605564, \"step\": 331, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711798.6650798, \"step\": 332, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711799.0368938, \"step\": 337, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711799.086076, \"step\": 338, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711799.1798258, \"step\": 340, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711799.3304672, \"step\": 343, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711799.427498, \"step\": 345, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711799.4759, \"step\": 346, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711799.6659544, \"step\": 350, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711799.7585306, \"step\": 352, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711799.8048437, \"step\": 353, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711799.8493848, \"step\": 354, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711799.9959383, \"step\": 358, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711800.0949898, \"step\": 362, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711800.129831, \"step\": 363, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711800.1498103, \"step\": 364, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711800.1671937, \"step\": 365, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711800.189193, \"step\": 366, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711800.2110672, \"step\": 367, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711800.3541272, \"step\": 374, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711800.4233491, \"step\": 377, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711800.4724784, \"step\": 378, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711801.4021585, \"step\": 386, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711801.636957, \"step\": 390, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711801.6782298, \"step\": 391, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711801.7419515, \"step\": 392, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711801.8052173, \"step\": 393, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711801.8577216, \"step\": 394, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711802.0392022, \"step\": 397, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711802.3702924, \"step\": 402, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711802.4998085, \"step\": 404, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711802.7428133, \"step\": 408, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711802.8063126, \"step\": 409, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711803.0286562, \"step\": 413, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711803.0970714, \"step\": 414, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711803.1495752, \"step\": 415, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711803.3662827, \"step\": 418, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711804.175848, \"step\": 421, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711804.200626, \"step\": 422, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711804.463476, \"step\": 425, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711804.5291457, \"step\": 426, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711804.8148918, \"step\": 430, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711804.878665, \"step\": 431, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711805.145289, \"step\": 435, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711805.2118886, \"step\": 436, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711805.2778506, \"step\": 437, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711805.4136918, \"step\": 439, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711805.4819498, \"step\": 440, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711805.5311391, \"step\": 441, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711805.6623356, \"step\": 443, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711805.7287028, \"step\": 444, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711805.7732809, \"step\": 445, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711805.8179424, \"step\": 446, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711806.027716, \"step\": 450, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711806.080019, \"step\": 451, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711806.146749, \"step\": 452, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711806.2184045, \"step\": 453, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711806.2980058, \"step\": 454, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711806.5863159, \"step\": 456, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711806.6744723, \"step\": 458, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711806.8211467, \"step\": 460, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711806.8940437, \"step\": 461, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711807.24154, \"step\": 465, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711807.3691196, \"step\": 466, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711807.5587785, \"step\": 468, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711814.3771071, \"step\": 470, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711814.6013253, \"step\": 474, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711814.6545262, \"step\": 475, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711814.8444016, \"step\": 478, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711814.9251456, \"step\": 479, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711814.9851923, \"step\": 480, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711815.0432422, \"step\": 481, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711815.159759, \"step\": 483, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711815.2171865, \"step\": 484, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711815.3920991, \"step\": 487, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711815.4744074, \"step\": 488, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711815.5343, \"step\": 489, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711815.6608403, \"step\": 491, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711816.260074, \"step\": 494, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711816.4511168, \"step\": 498, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711816.7181196, \"step\": 502, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711816.7892027, \"step\": 503, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711816.9964385, \"step\": 506, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711817.2421072, \"step\": 509, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711817.298517, \"step\": 510, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711817.3629446, \"step\": 511, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711817.4312747, \"step\": 512, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711817.4949017, \"step\": 513, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711817.5562618, \"step\": 514, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711817.7436128, \"step\": 517, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711817.8191159, \"step\": 518, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711817.8781846, \"step\": 519, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711817.9521568, \"step\": 520, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711818.1473067, \"step\": 523, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711818.7095156, \"step\": 530, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711818.9188368, \"step\": 533, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711818.982304, \"step\": 534, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711819.0885084, \"step\": 536, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711819.135345, \"step\": 537, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711819.19667, \"step\": 538, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711819.243228, \"step\": 539, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711819.277345, \"step\": 540, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711819.396788, \"step\": 542, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711819.517378, \"step\": 544, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711819.6513782, \"step\": 546, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711819.719009, \"step\": 547, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711819.938932, \"step\": 550, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711820.0604794, \"step\": 552, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711820.2453177, \"step\": 555, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711820.3194563, \"step\": 556, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711820.7917013, \"step\": 562, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711820.8618305, \"step\": 563, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711821.2286897, \"step\": 564, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711821.4760883, \"step\": 568, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711821.637786, \"step\": 571, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711821.7307494, \"step\": 573, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711821.8949044, \"step\": 576, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711822.109216, \"step\": 580, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711822.3578038, \"step\": 584, \"value\": 0.0007126536220312119}, {\"wallTime\": 1647711822.4187338, \"step\": 585, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711822.4842649, \"step\": 586, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711822.6463206, \"step\": 588, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711822.8155832, \"step\": 590, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711822.931323, \"step\": 591, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711823.0201235, \"step\": 592, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711823.1644518, \"step\": 594, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711823.2840385, \"step\": 596, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711823.3644605, \"step\": 597, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711823.4314995, \"step\": 598, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711823.5075495, \"step\": 599, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711823.621228, \"step\": 601, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711823.6957965, \"step\": 602, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711824.0281157, \"step\": 603, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711824.1142378, \"step\": 605, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711824.29549, \"step\": 608, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711824.4192271, \"step\": 610, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711824.6200762, \"step\": 613, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711824.6876707, \"step\": 614, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711824.8499866, \"step\": 616, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711824.9751377, \"step\": 618, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711825.0725565, \"step\": 620, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711825.1779873, \"step\": 622, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711825.2482445, \"step\": 623, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711825.3702142, \"step\": 626, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711825.4885223, \"step\": 628, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711825.5640395, \"step\": 629, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711825.8400233, \"step\": 633, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711826.1037283, \"step\": 637, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711826.290617, \"step\": 640, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711826.3652267, \"step\": 641, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711826.4084368, \"step\": 642, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711826.4615476, \"step\": 643, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711826.5220642, \"step\": 644, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711827.0503073, \"step\": 649, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711827.0953286, \"step\": 651, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711827.1173835, \"step\": 652, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711827.1390731, \"step\": 653, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711827.161667, \"step\": 654, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711827.1829066, \"step\": 655, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711827.2482767, \"step\": 658, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711827.2905915, \"step\": 660, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711827.4445844, \"step\": 667, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711827.6179109, \"step\": 670, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711827.7201023, \"step\": 675, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711827.7373815, \"step\": 676, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711827.7637367, \"step\": 677, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711827.825984, \"step\": 680, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711827.874174, \"step\": 682, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711827.9328535, \"step\": 683, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711828.029935, \"step\": 684, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711828.2539797, \"step\": 687, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711828.5400093, \"step\": 692, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711828.7633228, \"step\": 694, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711828.9374676, \"step\": 696, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711829.0263667, \"step\": 697, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711829.2051826, \"step\": 699, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711829.4043303, \"step\": 702, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711829.4579914, \"step\": 703, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711829.5814817, \"step\": 705, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711829.8808494, \"step\": 709, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711829.940047, \"step\": 710, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711830.075836, \"step\": 712, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711830.2711232, \"step\": 715, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711830.3995404, \"step\": 717, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711830.5783827, \"step\": 720, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711830.636362, \"step\": 721, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711830.766405, \"step\": 723, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711830.864562, \"step\": 725, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711830.913525, \"step\": 726, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711830.990379, \"step\": 728, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711831.0181875, \"step\": 729, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711831.0767884, \"step\": 731, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711831.0984988, \"step\": 732, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711831.1181905, \"step\": 733, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711831.2295935, \"step\": 738, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711831.3165462, \"step\": 742, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711831.3361938, \"step\": 743, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711831.3579726, \"step\": 744, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711831.5759501, \"step\": 755, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711831.5959778, \"step\": 756, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711832.0848927, \"step\": 758, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711832.2302108, \"step\": 763, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711832.2765512, \"step\": 764, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711832.310641, \"step\": 765, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711832.4425657, \"step\": 768, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711832.4883387, \"step\": 769, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711832.5787048, \"step\": 772, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711832.6381614, \"step\": 775, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711832.6582663, \"step\": 776, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711832.701136, \"step\": 778, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711832.7199678, \"step\": 779, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711832.897918, \"step\": 780, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711832.9099278, \"step\": 781, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711832.9386597, \"step\": 782, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711833.0722806, \"step\": 788, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711833.1332405, \"step\": 791, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711833.1745636, \"step\": 793, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711833.2161982, \"step\": 795, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711833.299179, \"step\": 799, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711833.3983967, \"step\": 804, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711833.421166, \"step\": 805, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711833.4422634, \"step\": 806, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711833.6203613, \"step\": 807, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711833.6786325, \"step\": 810, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711833.860849, \"step\": 818, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711833.9012454, \"step\": 819, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711833.9847245, \"step\": 821, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711834.0707672, \"step\": 823, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711834.2025719, \"step\": 826, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711834.2449713, \"step\": 827, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711834.2816803, \"step\": 828, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711834.4585655, \"step\": 832, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711834.5036423, \"step\": 833, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711834.5945046, \"step\": 835, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711834.6397831, \"step\": 836, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711834.6853456, \"step\": 837, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711834.7758293, \"step\": 839, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711834.8215394, \"step\": 840, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711834.975496, \"step\": 843, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711835.0625002, \"step\": 845, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711835.2828488, \"step\": 850, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711835.327376, \"step\": 851, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711835.8578992, \"step\": 854, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711835.9663298, \"step\": 857, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711836.111246, \"step\": 860, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711836.215466, \"step\": 862, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711836.3849254, \"step\": 865, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711836.4359093, \"step\": 866, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711836.6105914, \"step\": 870, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711836.6550493, \"step\": 871, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711837.2457101, \"step\": 884, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711837.285139, \"step\": 885, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711837.327469, \"step\": 886, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711837.4224076, \"step\": 888, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711837.5262654, \"step\": 890, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711837.6216574, \"step\": 892, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711837.7493074, \"step\": 895, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711837.8328776, \"step\": 897, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711837.8907268, \"step\": 898, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711837.9929585, \"step\": 901, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711838.0358746, \"step\": 902, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711838.1554637, \"step\": 904, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711838.30596, \"step\": 907, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711838.3940775, \"step\": 908, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711838.5474586, \"step\": 910, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711838.6076283, \"step\": 911, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711838.774844, \"step\": 914, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711838.986109, \"step\": 918, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711839.0265338, \"step\": 919, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711839.107313, \"step\": 921, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711839.5705156, \"step\": 923, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711839.7483253, \"step\": 927, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711839.8009067, \"step\": 928, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711839.9122748, \"step\": 930, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711839.9640548, \"step\": 931, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711840.023497, \"step\": 932, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711840.0827754, \"step\": 933, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711840.2306526, \"step\": 935, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711844.2951958, \"step\": 939, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711844.3910055, \"step\": 941, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711844.4382758, \"step\": 942, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711844.5763412, \"step\": 945, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711844.7594292, \"step\": 949, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711844.963393, \"step\": 952, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711845.1227155, \"step\": 955, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711845.1643496, \"step\": 956, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711845.3458817, \"step\": 960, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711845.4371505, \"step\": 962, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711845.4762547, \"step\": 963, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711845.5656166, \"step\": 965, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711845.649317, \"step\": 967, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711845.703315, \"step\": 968, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711845.8867552, \"step\": 971, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711846.1234174, \"step\": 976, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711846.2096574, \"step\": 978, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711846.2572114, \"step\": 979, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711846.3554552, \"step\": 981, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711846.3937826, \"step\": 982, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711846.562808, \"step\": 986, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711846.7201037, \"step\": 990, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711846.8118188, \"step\": 992, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711846.9000003, \"step\": 994, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711846.9903486, \"step\": 996, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711847.0811777, \"step\": 998, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711847.1265368, \"step\": 999, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711847.262224, \"step\": 1002, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711847.3018348, \"step\": 1003, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711847.3439229, \"step\": 1004, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711847.4339533, \"step\": 1006, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711847.6675255, \"step\": 1011, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711847.884823, \"step\": 1013, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711848.0005496, \"step\": 1015, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711848.0776033, \"step\": 1016, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711848.1529183, \"step\": 1017, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711848.4196258, \"step\": 1022, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711848.6278515, \"step\": 1026, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711848.7774622, \"step\": 1028, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711848.8441207, \"step\": 1029, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711849.1798024, \"step\": 1035, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711849.2461069, \"step\": 1036, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711849.3035777, \"step\": 1037, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711849.3681488, \"step\": 1038, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711849.4333425, \"step\": 1039, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711849.704404, \"step\": 1043, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711849.8419702, \"step\": 1045, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711849.9075334, \"step\": 1046, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711850.293704, \"step\": 1052, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711850.3632116, \"step\": 1053, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711850.5283408, \"step\": 1056, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711850.6159134, \"step\": 1058, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711850.681928, \"step\": 1059, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711850.7200754, \"step\": 1060, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711850.8066635, \"step\": 1062, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711850.9327352, \"step\": 1065, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711851.020299, \"step\": 1067, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711851.1106489, \"step\": 1069, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711851.1598892, \"step\": 1070, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711851.204618, \"step\": 1071, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711851.2559392, \"step\": 1072, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711851.2985463, \"step\": 1073, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711851.345526, \"step\": 1074, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711851.4730465, \"step\": 1077, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711851.5220742, \"step\": 1078, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711851.594943, \"step\": 1080, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711851.6365793, \"step\": 1081, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711851.6808465, \"step\": 1082, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711851.8207378, \"step\": 1085, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711851.857949, \"step\": 1086, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711851.902478, \"step\": 1087, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711852.0811665, \"step\": 1091, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711852.4128616, \"step\": 1098, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711852.4946237, \"step\": 1100, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711852.5841322, \"step\": 1102, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711852.62663, \"step\": 1103, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711852.6692142, \"step\": 1104, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711852.793411, \"step\": 1107, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711852.885594, \"step\": 1109, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711852.984856, \"step\": 1111, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711853.0325017, \"step\": 1112, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711853.1233692, \"step\": 1114, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711853.3569639, \"step\": 1119, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711853.4491713, \"step\": 1121, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711853.495193, \"step\": 1122, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711853.643183, \"step\": 1125, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711853.6875978, \"step\": 1126, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711853.7736733, \"step\": 1128, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711853.8140583, \"step\": 1129, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711853.856477, \"step\": 1130, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711853.8990707, \"step\": 1131, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711853.9520614, \"step\": 1132, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711854.053941, \"step\": 1134, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711854.103363, \"step\": 1135, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711854.175399, \"step\": 1136, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711854.3385725, \"step\": 1139, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711854.5026398, \"step\": 1142, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711854.6653094, \"step\": 1145, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711854.8668969, \"step\": 1146, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711854.9242508, \"step\": 1148, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711855.0672646, \"step\": 1150, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711855.114955, \"step\": 1151, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711855.1512816, \"step\": 1152, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711855.196243, \"step\": 1153, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711855.4899704, \"step\": 1160, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711855.581957, \"step\": 1162, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711855.669609, \"step\": 1164, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711855.7573252, \"step\": 1166, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711855.8009248, \"step\": 1167, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647711856.1465943, \"step\": 1173, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711856.2210078, \"step\": 1174, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711856.2956526, \"step\": 1176, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711856.3397489, \"step\": 1177, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711856.3826544, \"step\": 1178, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711856.624051, \"step\": 1182, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711856.7080455, \"step\": 1184, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711856.7943592, \"step\": 1186, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711856.8859022, \"step\": 1188, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711856.950052, \"step\": 1189, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711856.9962926, \"step\": 1190, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711857.1333127, \"step\": 1193, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711857.1792214, \"step\": 1194, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711857.2200575, \"step\": 1195, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711857.3028595, \"step\": 1197, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711857.3477137, \"step\": 1198, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711857.4889069, \"step\": 1201, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711857.6689982, \"step\": 1205, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711857.7240384, \"step\": 1206, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711858.1365304, \"step\": 1207, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711858.169446, \"step\": 1209, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711858.3539803, \"step\": 1213, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711858.3995717, \"step\": 1214, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711858.4454024, \"step\": 1215, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711858.5825388, \"step\": 1218, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711858.8163614, \"step\": 1223, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711858.9019449, \"step\": 1225, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711859.0739927, \"step\": 1229, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711859.208948, \"step\": 1232, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711859.2561631, \"step\": 1233, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711859.7522402, \"step\": 1238, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711859.8428173, \"step\": 1240, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711859.8937914, \"step\": 1241, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711859.9531255, \"step\": 1242, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711860.0166368, \"step\": 1243, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711860.073567, \"step\": 1244, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711860.1564279, \"step\": 1246, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711860.2945793, \"step\": 1249, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711860.3339012, \"step\": 1250, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711860.3757071, \"step\": 1251, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711860.4199321, \"step\": 1252, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711860.503164, \"step\": 1254, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711860.5915792, \"step\": 1256, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711860.6362894, \"step\": 1257, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711860.770526, \"step\": 1260, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711860.8156931, \"step\": 1261, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711861.2895846, \"step\": 1267, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711861.5409715, \"step\": 1271, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711861.7745864, \"step\": 1276, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711861.8173702, \"step\": 1277, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711861.858246, \"step\": 1278, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711862.0527582, \"step\": 1282, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711862.1856623, \"step\": 1285, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711862.743243, \"step\": 1290, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711862.8119125, \"step\": 1293, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711863.0513875, \"step\": 1298, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711863.0908446, \"step\": 1299, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711863.2292829, \"step\": 1302, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711863.4126637, \"step\": 1306, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711863.6033385, \"step\": 1310, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711863.8351727, \"step\": 1315, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711864.0416763, \"step\": 1320, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711864.1309292, \"step\": 1322, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711864.270232, \"step\": 1325, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711864.3143988, \"step\": 1326, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711864.407371, \"step\": 1328, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711864.7218266, \"step\": 1335, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711865.2282603, \"step\": 1344, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711865.2724345, \"step\": 1345, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711865.3638167, \"step\": 1347, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711865.4147618, \"step\": 1348, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711865.5521328, \"step\": 1351, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711865.5959482, \"step\": 1352, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711865.6891575, \"step\": 1354, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711865.872538, \"step\": 1358, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711865.9659705, \"step\": 1360, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711866.1468906, \"step\": 1364, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711866.2059784, \"step\": 1365, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711866.2691743, \"step\": 1366, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711866.3262038, \"step\": 1367, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711866.3805795, \"step\": 1368, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711866.7998097, \"step\": 1372, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711866.8404536, \"step\": 1373, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711867.0187085, \"step\": 1375, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711867.1063733, \"step\": 1376, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711867.3806918, \"step\": 1380, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711867.7042809, \"step\": 1385, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711867.7706032, \"step\": 1386, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711868.030032, \"step\": 1390, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711868.2333417, \"step\": 1393, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711868.4967256, \"step\": 1397, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711868.8566098, \"step\": 1403, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711874.441889, \"step\": 1416, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711874.496875, \"step\": 1417, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711874.698694, \"step\": 1421, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711875.179377, \"step\": 1431, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711875.2289722, \"step\": 1432, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711875.4393609, \"step\": 1436, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711875.987118, \"step\": 1438, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711876.0064979, \"step\": 1439, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711876.0640562, \"step\": 1440, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711876.1258144, \"step\": 1441, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711876.282881, \"step\": 1444, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711876.3892028, \"step\": 1446, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711876.442042, \"step\": 1447, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711876.5511904, \"step\": 1449, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711876.6577725, \"step\": 1451, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711876.7107642, \"step\": 1452, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711876.8227856, \"step\": 1454, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711876.877636, \"step\": 1455, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711876.9327888, \"step\": 1456, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711876.9878714, \"step\": 1457, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711877.1692498, \"step\": 1458, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711877.1863031, \"step\": 1459, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711877.2342503, \"step\": 1460, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711877.3128214, \"step\": 1461, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711877.4194164, \"step\": 1463, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711877.7029912, \"step\": 1470, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711877.839151, \"step\": 1473, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711877.8793333, \"step\": 1474, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711878.0729976, \"step\": 1476, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711878.42589, \"step\": 1483, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711878.592069, \"step\": 1487, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711878.7244668, \"step\": 1489, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711878.7667253, \"step\": 1490, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711878.887474, \"step\": 1493, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711878.930248, \"step\": 1494, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711879.1160595, \"step\": 1498, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711879.1602335, \"step\": 1499, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711879.2061157, \"step\": 1500, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711879.3008637, \"step\": 1502, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711879.6223612, \"step\": 1509, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711879.675897, \"step\": 1510, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711879.7188182, \"step\": 1511, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711879.817247, \"step\": 1513, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711879.9062953, \"step\": 1515, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711879.951248, \"step\": 1516, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711880.263298, \"step\": 1523, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711880.4862208, \"step\": 1528, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711880.7650373, \"step\": 1534, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711880.9078019, \"step\": 1537, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711880.9506648, \"step\": 1538, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711881.0839765, \"step\": 1541, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711881.3877406, \"step\": 1548, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711881.513071, \"step\": 1551, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711881.5572357, \"step\": 1552, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711881.6016347, \"step\": 1553, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711882.016705, \"step\": 1562, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711882.154502, \"step\": 1565, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711882.1969676, \"step\": 1566, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711882.281618, \"step\": 1568, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711882.3672347, \"step\": 1570, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711882.4100778, \"step\": 1571, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711882.457068, \"step\": 1572, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711882.497114, \"step\": 1573, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711882.6234617, \"step\": 1576, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711882.7346249, \"step\": 1578, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711882.8600159, \"step\": 1580, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711882.9216905, \"step\": 1581, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711882.9822066, \"step\": 1582, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711883.35608, \"step\": 1585, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711883.568038, \"step\": 1590, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711883.78963, \"step\": 1595, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711883.830104, \"step\": 1596, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711883.8735125, \"step\": 1597, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711884.0470934, \"step\": 1601, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711884.0907166, \"step\": 1602, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711884.1340754, \"step\": 1603, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711884.4925861, \"step\": 1611, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711884.7568173, \"step\": 1613, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711884.775257, \"step\": 1614, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711884.8737578, \"step\": 1616, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711885.1341305, \"step\": 1622, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711885.2274907, \"step\": 1624, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711885.3164487, \"step\": 1626, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711885.361537, \"step\": 1627, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711885.549792, \"step\": 1631, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711885.7341526, \"step\": 1635, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711885.7770095, \"step\": 1636, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711885.8216975, \"step\": 1637, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711885.953833, \"step\": 1640, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711885.9964917, \"step\": 1641, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711886.2174382, \"step\": 1646, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711886.2621305, \"step\": 1647, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711886.3508582, \"step\": 1649, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711886.440304, \"step\": 1651, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711886.485261, \"step\": 1652, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711886.529836, \"step\": 1653, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711886.574671, \"step\": 1654, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711886.667603, \"step\": 1656, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711886.7547836, \"step\": 1658, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711886.9358785, \"step\": 1662, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711887.0315144, \"step\": 1664, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711887.1180048, \"step\": 1666, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711887.2587912, \"step\": 1669, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711887.3036327, \"step\": 1670, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711887.4691079, \"step\": 1674, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711887.6011941, \"step\": 1677, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711887.6919382, \"step\": 1679, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711887.7358491, \"step\": 1680, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711887.823683, \"step\": 1682, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711887.9552197, \"step\": 1685, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711888.0025716, \"step\": 1686, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711888.0422997, \"step\": 1687, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711888.0931985, \"step\": 1688, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711888.2895246, \"step\": 1693, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711888.330374, \"step\": 1694, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711888.548537, \"step\": 1695, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711888.6071684, \"step\": 1697, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711888.7088437, \"step\": 1699, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711888.753622, \"step\": 1700, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711888.8633325, \"step\": 1702, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711888.955419, \"step\": 1704, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711889.0910394, \"step\": 1707, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711889.1766195, \"step\": 1709, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711889.221323, \"step\": 1710, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711889.2637174, \"step\": 1711, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711889.3094935, \"step\": 1712, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711889.5729558, \"step\": 1718, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711889.6156023, \"step\": 1719, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711889.7501152, \"step\": 1722, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711889.79886, \"step\": 1723, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711889.8378327, \"step\": 1724, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711889.879671, \"step\": 1725, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711890.1017122, \"step\": 1730, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711890.4636874, \"step\": 1738, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711890.5086389, \"step\": 1739, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711890.693654, \"step\": 1743, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711890.7802637, \"step\": 1745, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711890.9229755, \"step\": 1748, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711890.9657521, \"step\": 1749, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711891.0050159, \"step\": 1750, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711891.0502262, \"step\": 1751, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711891.1349115, \"step\": 1753, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711891.1804667, \"step\": 1754, \"value\": 0.00022724963491782546}, {\"wallTime\": 1647711891.3160706, \"step\": 1757, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711891.6496303, \"step\": 1762, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711891.7078612, \"step\": 1763, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711891.822152, \"step\": 1765, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711892.0012817, \"step\": 1768, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711892.3937893, \"step\": 1775, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711892.4383416, \"step\": 1776, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711892.4834476, \"step\": 1777, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711892.617858, \"step\": 1780, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711892.8977563, \"step\": 1784, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711892.9063752, \"step\": 1785, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711892.9593625, \"step\": 1786, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711893.2048352, \"step\": 1789, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711893.2725158, \"step\": 1790, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711893.4012144, \"step\": 1792, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711893.483349, \"step\": 1794, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711893.5660732, \"step\": 1796, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711893.7441952, \"step\": 1800, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711893.8364267, \"step\": 1802, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711893.8787127, \"step\": 1803, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711894.105214, \"step\": 1808, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711894.1969807, \"step\": 1810, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711894.3950496, \"step\": 1814, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711894.5544667, \"step\": 1818, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711894.592758, \"step\": 1819, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711894.7548728, \"step\": 1823, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711894.8810682, \"step\": 1826, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711894.9281018, \"step\": 1827, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711895.038217, \"step\": 1829, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711895.544949, \"step\": 1830, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711895.6025603, \"step\": 1832, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711895.6445687, \"step\": 1833, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711895.6846159, \"step\": 1834, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711895.7712622, \"step\": 1836, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711895.811792, \"step\": 1837, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711895.8543875, \"step\": 1838, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711896.1200871, \"step\": 1844, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711896.1684403, \"step\": 1845, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711896.2168033, \"step\": 1846, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711896.26495, \"step\": 1847, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711896.9410326, \"step\": 1848, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711897.029955, \"step\": 1851, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711897.1135473, \"step\": 1853, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711897.4136078, \"step\": 1860, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711897.5758462, \"step\": 1864, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711897.619543, \"step\": 1865, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711897.6662428, \"step\": 1866, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711897.7100563, \"step\": 1867, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711897.8837397, \"step\": 1871, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711897.927637, \"step\": 1872, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711898.0830433, \"step\": 1874, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711898.098336, \"step\": 1875, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711902.2692697, \"step\": 1877, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711902.4076393, \"step\": 1880, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711902.5482898, \"step\": 1883, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711902.5943398, \"step\": 1884, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711902.6864007, \"step\": 1886, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711902.7800033, \"step\": 1888, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711902.871205, \"step\": 1890, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711903.093876, \"step\": 1895, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711903.2640135, \"step\": 1899, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711903.3848197, \"step\": 1902, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711903.5765622, \"step\": 1906, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711903.6710913, \"step\": 1908, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711903.7166626, \"step\": 1909, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711903.762292, \"step\": 1910, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711903.906902, \"step\": 1913, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711904.1511137, \"step\": 1918, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711904.416541, \"step\": 1924, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711904.4591224, \"step\": 1925, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711904.5055015, \"step\": 1926, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711904.8963034, \"step\": 1929, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711905.009898, \"step\": 1932, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711905.1869035, \"step\": 1935, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711905.2454655, \"step\": 1936, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711905.4608512, \"step\": 1940, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711905.5054185, \"step\": 1941, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711905.5518663, \"step\": 1942, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711905.7066042, \"step\": 1945, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711905.8132443, \"step\": 1947, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711906.0012548, \"step\": 1950, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711906.089059, \"step\": 1951, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711906.2172382, \"step\": 1953, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711906.4306653, \"step\": 1956, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711906.6949077, \"step\": 1960, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711906.7413943, \"step\": 1961, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711906.7943687, \"step\": 1962, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711906.8452885, \"step\": 1963, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711906.892241, \"step\": 1964, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711906.98683, \"step\": 1966, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711907.0425823, \"step\": 1967, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711907.096075, \"step\": 1968, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711907.1523683, \"step\": 1969, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711907.4708502, \"step\": 1975, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711907.5811093, \"step\": 1977, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711907.7502625, \"step\": 1979, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711907.78084, \"step\": 1980, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711907.839995, \"step\": 1981, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711907.8969796, \"step\": 1982, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711907.9478924, \"step\": 1983, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711908.0474823, \"step\": 1985, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711908.1411872, \"step\": 1987, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711908.1932232, \"step\": 1988, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711908.3763115, \"step\": 1991, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711908.4320724, \"step\": 1992, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711908.6005526, \"step\": 1995, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711908.9999719, \"step\": 2002, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711909.9581087, \"step\": 2016, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711910.0031595, \"step\": 2017, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711910.1848023, \"step\": 2021, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711910.246389, \"step\": 2022, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711910.290807, \"step\": 2023, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711910.380063, \"step\": 2025, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711910.4245148, \"step\": 2026, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711910.5097373, \"step\": 2028, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711910.6316285, \"step\": 2031, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711910.676822, \"step\": 2032, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711910.76701, \"step\": 2034, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711910.8121243, \"step\": 2035, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711910.8576007, \"step\": 2036, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711911.0457764, \"step\": 2040, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711911.092208, \"step\": 2041, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711911.1846795, \"step\": 2043, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711911.230221, \"step\": 2044, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711911.4540157, \"step\": 2047, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711911.5028381, \"step\": 2048, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711911.5579114, \"step\": 2049, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711911.843463, \"step\": 2054, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711911.8959658, \"step\": 2055, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711912.3797143, \"step\": 2056, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711912.3908079, \"step\": 2057, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711912.945011, \"step\": 2067, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711912.999789, \"step\": 2068, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711913.1020007, \"step\": 2070, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711913.3144805, \"step\": 2074, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711913.67371, \"step\": 2078, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711913.7554133, \"step\": 2079, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711914.0552576, \"step\": 2084, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711914.155042, \"step\": 2086, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711914.2083158, \"step\": 2087, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711914.315361, \"step\": 2089, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711914.3664749, \"step\": 2090, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711914.4201715, \"step\": 2091, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711914.7922244, \"step\": 2095, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711914.8030968, \"step\": 2096, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711914.8457804, \"step\": 2097, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711914.9055586, \"step\": 2098, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711915.0115778, \"step\": 2100, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711915.1705287, \"step\": 2103, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711915.2402647, \"step\": 2104, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711915.287746, \"step\": 2105, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711915.3389223, \"step\": 2106, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711915.5037029, \"step\": 2109, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711915.5592172, \"step\": 2110, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711915.781614, \"step\": 2114, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711915.8373039, \"step\": 2115, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711916.0667799, \"step\": 2119, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711916.1253362, \"step\": 2120, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711916.233716, \"step\": 2122, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711916.2859035, \"step\": 2123, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711916.3368232, \"step\": 2124, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711916.4446874, \"step\": 2126, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711916.4934738, \"step\": 2127, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711916.852003, \"step\": 2134, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711916.911883, \"step\": 2135, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711916.9650457, \"step\": 2136, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711917.11888, \"step\": 2139, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711917.3407614, \"step\": 2143, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711917.6964273, \"step\": 2149, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711917.9696121, \"step\": 2150, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711918.1380355, \"step\": 2154, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711918.2045066, \"step\": 2155, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711918.4750812, \"step\": 2159, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711918.5663316, \"step\": 2160, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711918.642263, \"step\": 2161, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711918.6954472, \"step\": 2162, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711919.060228, \"step\": 2169, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711919.278419, \"step\": 2173, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711919.3899274, \"step\": 2175, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711919.44527, \"step\": 2176, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711919.827309, \"step\": 2183, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711919.9433892, \"step\": 2185, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711920.053855, \"step\": 2187, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711920.1553938, \"step\": 2189, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711920.4045844, \"step\": 2194, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711920.6893113, \"step\": 2199, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711920.7965693, \"step\": 2201, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711920.8453298, \"step\": 2202, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711920.8992646, \"step\": 2203, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711921.0604222, \"step\": 2206, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711921.2169595, \"step\": 2209, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711921.3192108, \"step\": 2211, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711921.3631632, \"step\": 2212, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711921.4680722, \"step\": 2214, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711921.5217516, \"step\": 2215, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711921.5752943, \"step\": 2216, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711921.8436222, \"step\": 2221, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711921.8975284, \"step\": 2222, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711921.9624968, \"step\": 2223, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711922.1378849, \"step\": 2225, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711922.3088815, \"step\": 2227, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711922.7193165, \"step\": 2233, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711922.9081993, \"step\": 2236, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711923.0389605, \"step\": 2239, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711923.170112, \"step\": 2242, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711923.256143, \"step\": 2244, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711923.382814, \"step\": 2247, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711923.7431495, \"step\": 2254, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711923.9146628, \"step\": 2257, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711923.9701765, \"step\": 2258, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711924.301273, \"step\": 2264, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711924.3911672, \"step\": 2266, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711924.435405, \"step\": 2267, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711924.911354, \"step\": 2274, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711925.0112414, \"step\": 2276, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711925.177225, \"step\": 2280, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711925.2205126, \"step\": 2281, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711925.3539543, \"step\": 2284, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711925.3994703, \"step\": 2285, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711925.665517, \"step\": 2291, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711925.706408, \"step\": 2292, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711925.7471218, \"step\": 2293, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711926.061638, \"step\": 2300, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711926.2791598, \"step\": 2305, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711926.3235157, \"step\": 2306, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711926.3621032, \"step\": 2307, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711926.4443285, \"step\": 2309, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711926.5557559, \"step\": 2311, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711926.835204, \"step\": 2315, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711926.9020526, \"step\": 2316, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711927.074994, \"step\": 2319, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711927.260352, \"step\": 2324, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711927.5191033, \"step\": 2330, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711927.6091502, \"step\": 2332, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711927.7412057, \"step\": 2335, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711927.962779, \"step\": 2340, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711928.105074, \"step\": 2342, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711928.122944, \"step\": 2343, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647711928.1314495, \"step\": 2344, \"value\": 0.00012832626816816628}], \"tb_logs/exp000926-RAdam\": [{\"wallTime\": 1647706027.4144647, \"step\": 3, \"value\": 1.0238458116873517e-06}, {\"wallTime\": 1647706027.5055392, \"step\": 4, \"value\": 1.0298955430698697e-06}, {\"wallTime\": 1647706027.8152902, \"step\": 10, \"value\": 1.0669522225725814e-06}, {\"wallTime\": 1647706028.1358256, \"step\": 14, \"value\": 1.092394541046815e-06}, {\"wallTime\": 1647706028.2141023, \"step\": 15, \"value\": 1.0988493386321352e-06}, {\"wallTime\": 1647706028.3811307, \"step\": 18, \"value\": 1.1184436061739689e-06}, {\"wallTime\": 1647706028.438457, \"step\": 19, \"value\": 1.1250523357375641e-06}, {\"wallTime\": 1647706028.493026, \"step\": 20, \"value\": 1.131700059886498e-06}, {\"wallTime\": 1647706028.5961812, \"step\": 22, \"value\": 1.145113742495596e-06}, {\"wallTime\": 1647706028.6470814, \"step\": 23, \"value\": 1.1518800420162734e-06}, {\"wallTime\": 1647706028.8107035, \"step\": 26, \"value\": 1.1724198429874377e-06}, {\"wallTime\": 1647706028.866321, \"step\": 27, \"value\": 1.1793474641308421e-06}, {\"wallTime\": 1647706029.2057543, \"step\": 33, \"value\": 1.221781644744624e-06}, {\"wallTime\": 1647706029.3655283, \"step\": 36, \"value\": 1.243567908204568e-06}, {\"wallTime\": 1647706029.4805439, \"step\": 38, \"value\": 1.2583075204020133e-06}, {\"wallTime\": 1647706029.6649616, \"step\": 40, \"value\": 1.273221755582199e-06}, {\"wallTime\": 1647706030.1143754, \"step\": 47, \"value\": 1.3268276006783708e-06}, {\"wallTime\": 1647706030.1785824, \"step\": 48, \"value\": 1.3346676723813289e-06}, {\"wallTime\": 1647706030.241997, \"step\": 49, \"value\": 1.3425540146272397e-06}, {\"wallTime\": 1647706030.3800678, \"step\": 51, \"value\": 1.358466874989972e-06}, {\"wallTime\": 1647706030.5574834, \"step\": 54, \"value\": 1.3826903568769922e-06}, {\"wallTime\": 1647706030.671533, \"step\": 57, \"value\": 1.4073458487473545e-06}, {\"wallTime\": 1647706030.795259, \"step\": 60, \"value\": 1.432441081306024e-06}, {\"wallTime\": 1647706030.837464, \"step\": 61, \"value\": 1.440905180061236e-06}, {\"wallTime\": 1647706030.8836877, \"step\": 62, \"value\": 1.4494193010250456e-06}, {\"wallTime\": 1647706030.927437, \"step\": 63, \"value\": 1.457983671571128e-06}, {\"wallTime\": 1647706031.0171804, \"step\": 65, \"value\": 1.4752646393390023e-06}, {\"wallTime\": 1647706031.060808, \"step\": 66, \"value\": 1.4839818049949827e-06}, {\"wallTime\": 1647706031.105054, \"step\": 67, \"value\": 1.492750470788451e-06}, {\"wallTime\": 1647706031.1524124, \"step\": 68, \"value\": 1.5015708640930825e-06}, {\"wallTime\": 1647706031.234177, \"step\": 70, \"value\": 1.5193684248515638e-06}, {\"wallTime\": 1647706031.2697473, \"step\": 71, \"value\": 1.5283462744264398e-06}, {\"wallTime\": 1647706031.548104, \"step\": 77, \"value\": 1.5833377347007627e-06}, {\"wallTime\": 1647706031.6314049, \"step\": 79, \"value\": 1.6021044757508207e-06}, {\"wallTime\": 1647706031.6846926, \"step\": 80, \"value\": 1.611571065041062e-06}, {\"wallTime\": 1647706031.7640076, \"step\": 82, \"value\": 1.6306725001413724e-06}, {\"wallTime\": 1647706031.8766682, \"step\": 85, \"value\": 1.659749841564917e-06}, {\"wallTime\": 1647706032.0384035, \"step\": 89, \"value\": 1.6993278677546186e-06}, {\"wallTime\": 1647706032.0899498, \"step\": 90, \"value\": 1.709369030322705e-06}, {\"wallTime\": 1647706032.467525, \"step\": 99, \"value\": 1.8024512655756553e-06}, {\"wallTime\": 1647706032.5094497, \"step\": 100, \"value\": 1.8131017895939294e-06}, {\"wallTime\": 1647706032.6437829, \"step\": 103, \"value\": 1.8454321661920403e-06}, {\"wallTime\": 1647706032.7726293, \"step\": 106, \"value\": 1.8783390487442375e-06}, {\"wallTime\": 1647706032.8189375, \"step\": 107, \"value\": 1.8894379536504857e-06}, {\"wallTime\": 1647706032.927068, \"step\": 109, \"value\": 1.911832669065916e-06}, {\"wallTime\": 1647706033.2175965, \"step\": 116, \"value\": 1.9923256786569254e-06}, {\"wallTime\": 1647706033.4313774, \"step\": 121, \"value\": 2.0518873498076573e-06}, {\"wallTime\": 1647706033.6125145, \"step\": 125, \"value\": 2.100816118399962e-06}, {\"wallTime\": 1647706033.6570425, \"step\": 126, \"value\": 2.113229584210785e-06}, {\"wallTime\": 1647706033.7505167, \"step\": 128, \"value\": 2.1382770682976115e-06}, {\"wallTime\": 1647706033.8326457, \"step\": 130, \"value\": 2.1636212750308914e-06}, {\"wallTime\": 1647706033.8860972, \"step\": 131, \"value\": 2.176405814680038e-06}, {\"wallTime\": 1647706034.1358855, \"step\": 136, \"value\": 2.2414706108975224e-06}, {\"wallTime\": 1647706034.1784415, \"step\": 137, \"value\": 2.2547151274920907e-06}, {\"wallTime\": 1647706034.4705892, \"step\": 144, \"value\": 2.3496443191106664e-06}, {\"wallTime\": 1647706034.550056, \"step\": 146, \"value\": 2.3774939563736552e-06}, {\"wallTime\": 1647706034.5904243, \"step\": 147, \"value\": 2.3915422389109153e-06}, {\"wallTime\": 1647706034.7192705, \"step\": 150, \"value\": 2.4341870812349953e-06}, {\"wallTime\": 1647706035.025094, \"step\": 157, \"value\": 2.5366723548359005e-06}, {\"wallTime\": 1647706035.1064458, \"step\": 159, \"value\": 2.5667386580607854e-06}, {\"wallTime\": 1647706035.1565962, \"step\": 160, \"value\": 2.5819051643338753e-06}, {\"wallTime\": 1647706035.2440119, \"step\": 162, \"value\": 2.6125076146854553e-06}, {\"wallTime\": 1647706035.331835, \"step\": 164, \"value\": 2.6434727260493673e-06}, {\"wallTime\": 1647706035.605574, \"step\": 170, \"value\": 2.73858768196078e-06}, {\"wallTime\": 1647706035.6458907, \"step\": 171, \"value\": 2.7547696390683996e-06}, {\"wallTime\": 1647706035.6861985, \"step\": 172, \"value\": 2.771047093119705e-06}, {\"wallTime\": 1647706035.802627, \"step\": 175, \"value\": 2.820459258146002e-06}, {\"wallTime\": 1647706035.8481245, \"step\": 176, \"value\": 2.8371250664349645e-06}, {\"wallTime\": 1647706035.8852475, \"step\": 177, \"value\": 2.8538891001517186e-06}, {\"wallTime\": 1647706035.929235, \"step\": 178, \"value\": 2.8707524961646413e-06}, {\"wallTime\": 1647706036.0175235, \"step\": 180, \"value\": 2.90477851194737e-06}, {\"wallTime\": 1647706036.0616713, \"step\": 181, \"value\": 2.9219422685855534e-06}, {\"wallTime\": 1647706036.1865237, \"step\": 184, \"value\": 2.9740451736870455e-06}, {\"wallTime\": 1647706036.226579, \"step\": 185, \"value\": 2.9916182029410265e-06}, {\"wallTime\": 1647706036.266759, \"step\": 186, \"value\": 3.0092953693383606e-06}, {\"wallTime\": 1647706036.4219973, \"step\": 190, \"value\": 3.081054273934569e-06}, {\"wallTime\": 1647706036.4617386, \"step\": 191, \"value\": 3.0992598567536334e-06}, {\"wallTime\": 1647706036.5007875, \"step\": 192, \"value\": 3.117572987321182e-06}, {\"wallTime\": 1647706036.6340966, \"step\": 195, \"value\": 3.173164031977649e-06}, {\"wallTime\": 1647706036.8133564, \"step\": 199, \"value\": 3.248830580560025e-06}, {\"wallTime\": 1647706036.8563008, \"step\": 200, \"value\": 3.2680275126040215e-06}, {\"wallTime\": 1647706036.9350007, \"step\": 202, \"value\": 3.3067624372051796e-06}, {\"wallTime\": 1647706036.9754164, \"step\": 203, \"value\": 3.3263015666307183e-06}, {\"wallTime\": 1647706037.0136933, \"step\": 204, \"value\": 3.345956201883382e-06}, {\"wallTime\": 1647706037.0520656, \"step\": 205, \"value\": 3.3657270250841975e-06}, {\"wallTime\": 1647706037.1253836, \"step\": 207, \"value\": 3.4056197364407126e-06}, {\"wallTime\": 1647706037.2039065, \"step\": 209, \"value\": 3.4459853850421496e-06}, {\"wallTime\": 1647706037.2843046, \"step\": 211, \"value\": 3.486829427856719e-06}, {\"wallTime\": 1647706037.3712597, \"step\": 213, \"value\": 3.5281575492263073e-06}, {\"wallTime\": 1647706037.4580433, \"step\": 215, \"value\": 3.5699756608664757e-06}, {\"wallTime\": 1647706037.5022037, \"step\": 216, \"value\": 3.591070026232046e-06}, {\"wallTime\": 1647706037.6356626, \"step\": 219, \"value\": 3.6551043649524217e-06}, {\"wallTime\": 1647706037.6784637, \"step\": 220, \"value\": 3.676701908261748e-06}, {\"wallTime\": 1647706037.7256944, \"step\": 221, \"value\": 3.698427008202998e-06}, {\"wallTime\": 1647706037.7777488, \"step\": 222, \"value\": 3.7202805742708733e-06}, {\"wallTime\": 1647706037.8643343, \"step\": 224, \"value\": 3.7643758332706057e-06}, {\"wallTime\": 1647706038.0903213, \"step\": 229, \"value\": 3.8769139791838825e-06}, {\"wallTime\": 1647706038.4507856, \"step\": 237, \"value\": 4.0640143197379075e-06}, {\"wallTime\": 1647706038.4960902, \"step\": 238, \"value\": 4.088028163096169e-06}, {\"wallTime\": 1647706038.5423663, \"step\": 239, \"value\": 4.112183432880556e-06}, {\"wallTime\": 1647706038.6315656, \"step\": 241, \"value\": 4.160923708695918e-06}, {\"wallTime\": 1647706038.6727538, \"step\": 242, \"value\": 4.185510078968946e-06}, {\"wallTime\": 1647706038.7556536, \"step\": 244, \"value\": 4.235119376971852e-06}, {\"wallTime\": 1647706038.7921386, \"step\": 245, \"value\": 4.260144123691134e-06}, {\"wallTime\": 1647706038.8369, \"step\": 246, \"value\": 4.285316663299454e-06}, {\"wallTime\": 1647706038.8827145, \"step\": 247, \"value\": 4.310638360038865e-06}, {\"wallTime\": 1647706039.0973482, \"step\": 252, \"value\": 4.439506938069826e-06}, {\"wallTime\": 1647706039.1419919, \"step\": 253, \"value\": 4.4657394937530626e-06}, {\"wallTime\": 1647706039.1845868, \"step\": 254, \"value\": 4.492127118282951e-06}, {\"wallTime\": 1647706039.364918, \"step\": 258, \"value\": 4.5992451305210125e-06}, {\"wallTime\": 1647706039.405468, \"step\": 259, \"value\": 4.626421741704689e-06}, {\"wallTime\": 1647706039.4478571, \"step\": 260, \"value\": 4.653758423955878e-06}, {\"wallTime\": 1647706039.5283396, \"step\": 262, \"value\": 4.708917913376354e-06}, {\"wallTime\": 1647706039.8774085, \"step\": 270, \"value\": 4.936171080771601e-06}, {\"wallTime\": 1647706039.921792, \"step\": 271, \"value\": 4.965338121110108e-06}, {\"wallTime\": 1647706040.0523133, \"step\": 274, \"value\": 5.053877885075053e-06}, {\"wallTime\": 1647706040.1390002, \"step\": 276, \"value\": 5.113779479870573e-06}, {\"wallTime\": 1647706040.230201, \"step\": 278, \"value\": 5.174391390028177e-06}, {\"wallTime\": 1647706040.3431265, \"step\": 280, \"value\": 5.235721801000182e-06}, {\"wallTime\": 1647706040.4322648, \"step\": 282, \"value\": 5.297778898238903e-06}, {\"wallTime\": 1647706040.4804459, \"step\": 283, \"value\": 5.329082796379225e-06}, {\"wallTime\": 1647706040.5571082, \"step\": 285, \"value\": 5.392246293922653e-06}, {\"wallTime\": 1647706040.633761, \"step\": 287, \"value\": 5.4561587603529915e-06}, {\"wallTime\": 1647706040.672068, \"step\": 288, \"value\": 5.488398528541438e-06}, {\"wallTime\": 1647706040.7469616, \"step\": 290, \"value\": 5.553450591833098e-06}, {\"wallTime\": 1647706040.9503877, \"step\": 295, \"value\": 5.719473847420886e-06}, {\"wallTime\": 1647706040.990359, \"step\": 296, \"value\": 5.7532693062967155e-06}, {\"wallTime\": 1647706041.0311873, \"step\": 297, \"value\": 5.787264854006935e-06}, {\"wallTime\": 1647706041.0731473, \"step\": 298, \"value\": 5.821460945298895e-06}, {\"wallTime\": 1647706041.4196615, \"step\": 306, \"value\": 6.102405677665956e-06}, {\"wallTime\": 1647706041.5071993, \"step\": 308, \"value\": 6.174735062813852e-06}, {\"wallTime\": 1647706041.5560167, \"step\": 309, \"value\": 6.211220807017526e-06}, {\"wallTime\": 1647706041.690537, \"step\": 312, \"value\": 6.3219763433153275e-06}, {\"wallTime\": 1647706041.857359, \"step\": 316, \"value\": 6.4727287281129975e-06}, {\"wallTime\": 1647706041.9402897, \"step\": 318, \"value\": 6.549447789439e-06}, {\"wallTime\": 1647706041.9780462, \"step\": 319, \"value\": 6.58814769849414e-06}, {\"wallTime\": 1647706042.1044936, \"step\": 322, \"value\": 6.705624400638044e-06}, {\"wallTime\": 1647706042.1911094, \"step\": 324, \"value\": 6.785103778383927e-06}, {\"wallTime\": 1647706042.4291656, \"step\": 329, \"value\": 6.987948381720344e-06}, {\"wallTime\": 1647706042.515821, \"step\": 331, \"value\": 7.07077379047405e-06}, {\"wallTime\": 1647706042.5591638, \"step\": 332, \"value\": 7.1125541580840945e-06}, {\"wallTime\": 1647706042.7785757, \"step\": 337, \"value\": 7.325187652895693e-06}, {\"wallTime\": 1647706042.819418, \"step\": 338, \"value\": 7.368471415247768e-06}, {\"wallTime\": 1647706042.8990247, \"step\": 340, \"value\": 7.455807008227566e-06}, {\"wallTime\": 1647706043.0209844, \"step\": 343, \"value\": 7.58875557949068e-06}, {\"wallTime\": 1647706043.106482, \"step\": 345, \"value\": 7.67870278650662e-06}, {\"wallTime\": 1647706043.1405332, \"step\": 346, \"value\": 7.724074748693965e-06}, {\"wallTime\": 1647706043.3145912, \"step\": 350, \"value\": 7.908261977718212e-06}, {\"wallTime\": 1647706043.395989, \"step\": 352, \"value\": 8.001995411177631e-06}, {\"wallTime\": 1647706043.4398732, \"step\": 353, \"value\": 8.049278221733402e-06}, {\"wallTime\": 1647706043.4791148, \"step\": 354, \"value\": 8.096840247162618e-06}, {\"wallTime\": 1647706043.638664, \"step\": 358, \"value\": 8.289915967907291e-06}, {\"wallTime\": 1647706043.8025038, \"step\": 362, \"value\": 8.487594641337637e-06}, {\"wallTime\": 1647706043.8410232, \"step\": 363, \"value\": 8.537746907677501e-06}, {\"wallTime\": 1647706043.884158, \"step\": 364, \"value\": 8.588195669290144e-06}, {\"wallTime\": 1647706043.9235134, \"step\": 365, \"value\": 8.638941835670266e-06}, {\"wallTime\": 1647706043.966091, \"step\": 366, \"value\": 8.689988135301974e-06}, {\"wallTime\": 1647706044.0187407, \"step\": 367, \"value\": 8.74133638717467e-06}, {\"wallTime\": 1647706044.3055089, \"step\": 374, \"value\": 9.109368875215296e-06}, {\"wallTime\": 1647706044.411129, \"step\": 377, \"value\": 9.271802809962537e-06}, {\"wallTime\": 1647706044.455786, \"step\": 378, \"value\": 9.326588042313233e-06}, {\"wallTime\": 1647706044.8274167, \"step\": 386, \"value\": 9.776691513252445e-06}, {\"wallTime\": 1647706045.0030792, \"step\": 390, \"value\": 1.0009824109147303e-05}, {\"wallTime\": 1647706045.0469053, \"step\": 391, \"value\": 1.0068970368593e-05}, {\"wallTime\": 1647706045.0910428, \"step\": 392, \"value\": 1.012846678349888e-05}, {\"wallTime\": 1647706045.139872, \"step\": 393, \"value\": 1.0188314263359644e-05}, {\"wallTime\": 1647706045.1832411, \"step\": 394, \"value\": 1.0248515536659397e-05}, {\"wallTime\": 1647706045.310157, \"step\": 397, \"value\": 1.0431263035570737e-05}, {\"wallTime\": 1647706045.5214655, \"step\": 402, \"value\": 1.0743110578914639e-05}, {\"wallTime\": 1647706045.599686, \"step\": 404, \"value\": 1.087044529413106e-05}, {\"wallTime\": 1647706045.7752154, \"step\": 408, \"value\": 1.112965946958866e-05}, {\"wallTime\": 1647706045.816388, \"step\": 409, \"value\": 1.1195423212484457e-05}, {\"wallTime\": 1647706045.9781141, \"step\": 413, \"value\": 1.1462386282801162e-05}, {\"wallTime\": 1647706046.0184748, \"step\": 414, \"value\": 1.1530116353242192e-05}, {\"wallTime\": 1647706046.0619745, \"step\": 415, \"value\": 1.1598246601352002e-05}, {\"wallTime\": 1647706046.1933885, \"step\": 418, \"value\": 1.1805061149061657e-05}, {\"wallTime\": 1647706046.3250957, \"step\": 421, \"value\": 1.2015563697787002e-05}, {\"wallTime\": 1647706046.3680027, \"step\": 422, \"value\": 1.2086561582691502e-05}, {\"wallTime\": 1647706046.4940605, \"step\": 425, \"value\": 1.2302083632675931e-05}, {\"wallTime\": 1647706046.53836, \"step\": 426, \"value\": 1.2374774996715132e-05}, {\"wallTime\": 1647706046.7120416, \"step\": 430, \"value\": 1.266986146220006e-05}, {\"wallTime\": 1647706046.7512748, \"step\": 431, \"value\": 1.2744725609081797e-05}, {\"wallTime\": 1647706046.9209864, \"step\": 435, \"value\": 1.3048633263679221e-05}, {\"wallTime\": 1647706046.9657168, \"step\": 436, \"value\": 1.3125735677022021e-05}, {\"wallTime\": 1647706047.0131314, \"step\": 437, \"value\": 1.3203294656705111e-05}, {\"wallTime\": 1647706047.0990286, \"step\": 439, \"value\": 1.3359787772060372e-05}, {\"wallTime\": 1647706047.1431057, \"step\": 440, \"value\": 1.3438729183690157e-05}, {\"wallTime\": 1647706047.1873662, \"step\": 441, \"value\": 1.3518137166101951e-05}, {\"wallTime\": 1647706047.2761927, \"step\": 443, \"value\": 1.3678362847713288e-05}, {\"wallTime\": 1647706047.320453, \"step\": 444, \"value\": 1.3759186003881041e-05}, {\"wallTime\": 1647706047.3717964, \"step\": 445, \"value\": 1.3840487554261927e-05}, {\"wallTime\": 1647706047.4617548, \"step\": 446, \"value\": 1.3922269317845348e-05}, {\"wallTime\": 1647706047.6648722, \"step\": 450, \"value\": 1.425425671186531e-05}, {\"wallTime\": 1647706047.7096796, \"step\": 451, \"value\": 1.4338483197207097e-05}, {\"wallTime\": 1647706047.7608185, \"step\": 452, \"value\": 1.4423207176150754e-05}, {\"wallTime\": 1647706047.807803, \"step\": 453, \"value\": 1.4508431377180386e-05}, {\"wallTime\": 1647706047.852683, \"step\": 454, \"value\": 1.4594160347769503e-05}, {\"wallTime\": 1647706047.957929, \"step\": 456, \"value\": 1.4767139873583801e-05}, {\"wallTime\": 1647706048.064459, \"step\": 458, \"value\": 1.4942169400455896e-05}, {\"wallTime\": 1647706048.1951058, \"step\": 460, \"value\": 1.5119273484742735e-05}, {\"wallTime\": 1647706048.2594059, \"step\": 461, \"value\": 1.5208611330308486e-05}, {\"wallTime\": 1647706048.5171013, \"step\": 465, \"value\": 1.557127143314574e-05}, {\"wallTime\": 1647706048.6804051, \"step\": 466, \"value\": 1.56632813741453e-05}, {\"wallTime\": 1647706048.8410969, \"step\": 468, \"value\": 1.5848931070649996e-05}, {\"wallTime\": 1647706053.0535693, \"step\": 470, \"value\": 1.6036783563322388e-05}, {\"wallTime\": 1647706053.2624917, \"step\": 474, \"value\": 1.641919334360864e-05}, {\"wallTime\": 1647706053.3159692, \"step\": 475, \"value\": 1.6516212781425565e-05}, {\"wallTime\": 1647706053.4864507, \"step\": 478, \"value\": 1.6810721717774868e-05}, {\"wallTime\": 1647706053.5420554, \"step\": 479, \"value\": 1.69100530911237e-05}, {\"wallTime\": 1647706053.5830822, \"step\": 480, \"value\": 1.700997381703928e-05}, {\"wallTime\": 1647706053.6214776, \"step\": 481, \"value\": 1.7110482076532207e-05}, {\"wallTime\": 1647706053.700177, \"step\": 483, \"value\": 1.7313286662101746e-05}, {\"wallTime\": 1647706053.7428205, \"step\": 484, \"value\": 1.7415588445146568e-05}, {\"wallTime\": 1647706053.8576121, \"step\": 487, \"value\": 1.7726135411066934e-05}, {\"wallTime\": 1647706053.9024982, \"step\": 488, \"value\": 1.7830876458901912e-05}, {\"wallTime\": 1647706053.9487019, \"step\": 489, \"value\": 1.79362377821235e-05}, {\"wallTime\": 1647706054.0394127, \"step\": 491, \"value\": 1.8148828530684114e-05}, {\"wallTime\": 1647706054.1653762, \"step\": 494, \"value\": 1.8472450392437167e-05}, {\"wallTime\": 1647706054.3441336, \"step\": 498, \"value\": 1.891294050437864e-05}, {\"wallTime\": 1647706054.5261447, \"step\": 502, \"value\": 1.9363935280125588e-05}, {\"wallTime\": 1647706054.5735793, \"step\": 503, \"value\": 1.947835335158743e-05}, {\"wallTime\": 1647706054.7131436, \"step\": 506, \"value\": 1.9825682102236897e-05}, {\"wallTime\": 1647706054.850519, \"step\": 509, \"value\": 2.0179204511805438e-05}, {\"wallTime\": 1647706054.898322, \"step\": 510, \"value\": 2.0298441086197272e-05}, {\"wallTime\": 1647706054.9383628, \"step\": 511, \"value\": 2.041838160948828e-05}, {\"wallTime\": 1647706054.9769237, \"step\": 512, \"value\": 2.0539031538646668e-05}, {\"wallTime\": 1647706055.018298, \"step\": 513, \"value\": 2.0660394511651248e-05}, {\"wallTime\": 1647706055.0629323, \"step\": 514, \"value\": 2.078247234749142e-05}, {\"wallTime\": 1647706055.182016, \"step\": 517, \"value\": 2.115305687766522e-05}, {\"wallTime\": 1647706055.2226014, \"step\": 518, \"value\": 2.127804691554047e-05}, {\"wallTime\": 1647706055.2650707, \"step\": 519, \"value\": 2.1403777282102965e-05}, {\"wallTime\": 1647706055.3011267, \"step\": 520, \"value\": 2.15302479773527e-05}, {\"wallTime\": 1647706055.4366858, \"step\": 523, \"value\": 2.1914165699854493e-05}, {\"wallTime\": 1647706055.7427285, \"step\": 530, \"value\": 2.283680805703625e-05}, {\"wallTime\": 1647706055.9835181, \"step\": 533, \"value\": 2.3244023395818658e-05}, {\"wallTime\": 1647706056.0143597, \"step\": 534, \"value\": 2.3381369828712195e-05}, {\"wallTime\": 1647706056.1044497, \"step\": 536, \"value\": 2.365850014030002e-05}, {\"wallTime\": 1647706056.151175, \"step\": 537, \"value\": 2.379829493293073e-05}, {\"wallTime\": 1647706056.1901498, \"step\": 538, \"value\": 2.393891554675065e-05}, {\"wallTime\": 1647706056.2291546, \"step\": 539, \"value\": 2.408036743872799e-05}, {\"wallTime\": 1647706056.2696505, \"step\": 540, \"value\": 2.422265606583096e-05}, {\"wallTime\": 1647706056.3504016, \"step\": 542, \"value\": 2.4509758077329025e-05}, {\"wallTime\": 1647706056.4352725, \"step\": 544, \"value\": 2.4800263418001123e-05}, {\"wallTime\": 1647706056.5162976, \"step\": 546, \"value\": 2.5094212105614133e-05}, {\"wallTime\": 1647706056.5651064, \"step\": 547, \"value\": 2.524249066482298e-05}, {\"wallTime\": 1647706056.710145, \"step\": 550, \"value\": 2.569260323070921e-05}, {\"wallTime\": 1647706056.7990127, \"step\": 552, \"value\": 2.5997127522714436e-05}, {\"wallTime\": 1647706056.935079, \"step\": 555, \"value\": 2.6460696972208098e-05}, {\"wallTime\": 1647706056.9805474, \"step\": 556, \"value\": 2.6617050025379285e-05}, {\"wallTime\": 1647706057.2626686, \"step\": 562, \"value\": 2.75747588602826e-05}, {\"wallTime\": 1647706057.311949, \"step\": 563, \"value\": 2.773769483610522e-05}, {\"wallTime\": 1647706057.3619916, \"step\": 564, \"value\": 2.7901593057322316e-05}, {\"wallTime\": 1647706057.5386305, \"step\": 568, \"value\": 2.856692844943609e-05}, {\"wallTime\": 1647706057.665894, \"step\": 571, \"value\": 2.9076320060994476e-05}, {\"wallTime\": 1647706057.7457645, \"step\": 573, \"value\": 2.9420951250358485e-05}, {\"wallTime\": 1647706057.875673, \"step\": 576, \"value\": 2.994557326019276e-05}, {\"wallTime\": 1647706058.0572972, \"step\": 580, \"value\": 3.0659648473374546e-05}, {\"wallTime\": 1647706058.246962, \"step\": 584, \"value\": 3.1390751246362925e-05}, {\"wallTime\": 1647706058.2902648, \"step\": 585, \"value\": 3.1576233595842496e-05}, {\"wallTime\": 1647706058.3306904, \"step\": 586, \"value\": 3.176281461492181e-05}, {\"wallTime\": 1647706058.4113045, \"step\": 588, \"value\": 3.213928721379489e-05}, {\"wallTime\": 1647706058.5130887, \"step\": 590, \"value\": 3.252022361266427e-05}, {\"wallTime\": 1647706058.5531213, \"step\": 591, \"value\": 3.271238165325485e-05}, {\"wallTime\": 1647706058.5947666, \"step\": 592, \"value\": 3.290567474323325e-05}, {\"wallTime\": 1647706058.678767, \"step\": 594, \"value\": 3.329569153720513e-05}, {\"wallTime\": 1647706058.7751553, \"step\": 596, \"value\": 3.369033584021963e-05}, {\"wallTime\": 1647706058.815595, \"step\": 597, \"value\": 3.388940604054369e-05}, {\"wallTime\": 1647706058.857664, \"step\": 598, \"value\": 3.4089654946001247e-05}, {\"wallTime\": 1647706058.9008667, \"step\": 599, \"value\": 3.429108619457111e-05}, {\"wallTime\": 1647706058.9796886, \"step\": 601, \"value\": 3.46975248248782e-05}, {\"wallTime\": 1647706059.0222704, \"step\": 602, \"value\": 3.490255039650947e-05}, {\"wallTime\": 1647706059.0628066, \"step\": 603, \"value\": 3.510878377710469e-05}, {\"wallTime\": 1647706059.1462355, \"step\": 605, \"value\": 3.5524913982953876e-05}, {\"wallTime\": 1647706059.2777975, \"step\": 608, \"value\": 3.615838068071753e-05}, {\"wallTime\": 1647706059.3650427, \"step\": 610, \"value\": 3.658695277408697e-05}, {\"wallTime\": 1647706059.492721, \"step\": 613, \"value\": 3.723935515154153e-05}, {\"wallTime\": 1647706059.5407894, \"step\": 614, \"value\": 3.7459394661709666e-05}, {\"wallTime\": 1647706059.6482208, \"step\": 616, \"value\": 3.790338814724237e-05}, {\"wallTime\": 1647706059.755607, \"step\": 618, \"value\": 3.835264578810893e-05}, {\"wallTime\": 1647706059.861101, \"step\": 620, \"value\": 3.880722579197027e-05}, {\"wallTime\": 1647706059.9676585, \"step\": 622, \"value\": 3.926719364244491e-05}, {\"wallTime\": 1647706060.0394619, \"step\": 623, \"value\": 3.9499216654803604e-05}, {\"wallTime\": 1647706060.1501052, \"step\": 626, \"value\": 4.0203547541750595e-05}, {\"wallTime\": 1647706060.2308905, \"step\": 628, \"value\": 4.06800681957975e-05}, {\"wallTime\": 1647706060.2734973, \"step\": 629, \"value\": 4.0920440369518474e-05}, {\"wallTime\": 1647706060.4188862, \"step\": 633, \"value\": 4.189621904515661e-05}, {\"wallTime\": 1647706060.6255727, \"step\": 637, \"value\": 4.289526623324491e-05}, {\"wallTime\": 1647706060.8213174, \"step\": 640, \"value\": 4.366015491541475e-05}, {\"wallTime\": 1647706060.885522, \"step\": 641, \"value\": 4.391813854454085e-05}, {\"wallTime\": 1647706060.9500432, \"step\": 642, \"value\": 4.4177646486787125e-05}, {\"wallTime\": 1647706061.0164325, \"step\": 643, \"value\": 4.4438686018111184e-05}, {\"wallTime\": 1647706061.0747914, \"step\": 644, \"value\": 4.470126805244945e-05}, {\"wallTime\": 1647706061.3818417, \"step\": 649, \"value\": 4.6037635911488906e-05}, {\"wallTime\": 1647706061.4794416, \"step\": 651, \"value\": 4.6583303628722206e-05}, {\"wallTime\": 1647706061.5199134, \"step\": 652, \"value\": 4.685855674324557e-05}, {\"wallTime\": 1647706061.564607, \"step\": 653, \"value\": 4.7135439672274515e-05}, {\"wallTime\": 1647706061.6028652, \"step\": 654, \"value\": 4.741395605378784e-05}, {\"wallTime\": 1647706061.6535141, \"step\": 655, \"value\": 4.7694116801721975e-05}, {\"wallTime\": 1647706061.807472, \"step\": 658, \"value\": 4.8544578021392226e-05}, {\"wallTime\": 1647706061.931696, \"step\": 660, \"value\": 4.911996074952185e-05}, {\"wallTime\": 1647706062.3652573, \"step\": 667, \"value\": 5.1188031648052856e-05}, {\"wallTime\": 1647706062.4999824, \"step\": 670, \"value\": 5.210079325479455e-05}, {\"wallTime\": 1647706064.6243598, \"step\": 675, \"value\": 5.3658375691156834e-05}, {\"wallTime\": 1647706064.6973307, \"step\": 676, \"value\": 5.39754364581313e-05}, {\"wallTime\": 1647706064.7564752, \"step\": 677, \"value\": 5.4294370784191415e-05}, {\"wallTime\": 1647706064.8781414, \"step\": 680, \"value\": 5.526252061827108e-05}, {\"wallTime\": 1647706065.0010438, \"step\": 682, \"value\": 5.5917527788551524e-05}, {\"wallTime\": 1647706065.0518122, \"step\": 683, \"value\": 5.6247939937748015e-05}, {\"wallTime\": 1647706065.0943656, \"step\": 684, \"value\": 5.65802984056063e-05}, {\"wallTime\": 1647706065.2139237, \"step\": 687, \"value\": 5.758921543019824e-05}, {\"wallTime\": 1647706065.4312859, \"step\": 692, \"value\": 5.931087434873916e-05}, {\"wallTime\": 1647706065.5191271, \"step\": 694, \"value\": 6.0013866459485143e-05}, {\"wallTime\": 1647706065.6213167, \"step\": 696, \"value\": 6.0725189541699365e-05}, {\"wallTime\": 1647706065.6676292, \"step\": 697, \"value\": 6.108400702942163e-05}, {\"wallTime\": 1647706065.7569013, \"step\": 699, \"value\": 6.180801574373618e-05}, {\"wallTime\": 1647706065.8811092, \"step\": 702, \"value\": 6.291014142334461e-05}, {\"wallTime\": 1647706065.926588, \"step\": 703, \"value\": 6.328187009785324e-05}, {\"wallTime\": 1647706066.0123553, \"step\": 705, \"value\": 6.403192674042657e-05}, {\"wallTime\": 1647706066.1755261, \"step\": 709, \"value\": 6.555882282555103e-05}, {\"wallTime\": 1647706066.218259, \"step\": 710, \"value\": 6.594620208488777e-05}, {\"wallTime\": 1647706066.3018909, \"step\": 712, \"value\": 6.672783638350666e-05}, {\"wallTime\": 1647706066.4191873, \"step\": 715, \"value\": 6.791769556002691e-05}, {\"wallTime\": 1647706066.5425177, \"step\": 717, \"value\": 6.872270023450255e-05}, {\"wallTime\": 1647706066.662516, \"step\": 720, \"value\": 6.994813156779855e-05}, {\"wallTime\": 1647706066.6980543, \"step\": 721, \"value\": 7.036144234007224e-05}, {\"wallTime\": 1647706066.7849424, \"step\": 723, \"value\": 7.119541260180995e-05}, {\"wallTime\": 1647706066.8694901, \"step\": 725, \"value\": 7.203927088994533e-05}, {\"wallTime\": 1647706066.9464896, \"step\": 726, \"value\": 7.24649362382479e-05}, {\"wallTime\": 1647706067.0816958, \"step\": 728, \"value\": 7.332384120672941e-05}, {\"wallTime\": 1647706067.1255577, \"step\": 729, \"value\": 7.375710265478119e-05}, {\"wallTime\": 1647706067.2022293, \"step\": 731, \"value\": 7.463131623808295e-05}, {\"wallTime\": 1647706067.2613378, \"step\": 732, \"value\": 7.507230475312099e-05}, {\"wallTime\": 1647706067.2996595, \"step\": 733, \"value\": 7.551589806098491e-05}, {\"wallTime\": 1647706067.551522, \"step\": 738, \"value\": 7.777348218951374e-05}, {\"wallTime\": 1647706067.7500253, \"step\": 742, \"value\": 7.962805102579296e-05}, {\"wallTime\": 1647706067.7926724, \"step\": 743, \"value\": 8.009856537682936e-05}, {\"wallTime\": 1647706067.8341084, \"step\": 744, \"value\": 8.057185914367437e-05}, {\"wallTime\": 1647706068.3122196, \"step\": 755, \"value\": 8.596632687840611e-05}, {\"wallTime\": 1647706068.3548517, \"step\": 756, \"value\": 8.647429058328271e-05}, {\"wallTime\": 1647706068.442115, \"step\": 758, \"value\": 8.74992401804775e-05}, {\"wallTime\": 1647706068.6510296, \"step\": 763, \"value\": 9.011507063405588e-05}, {\"wallTime\": 1647706068.6850793, \"step\": 764, \"value\": 9.064755431609228e-05}, {\"wallTime\": 1647706068.7276864, \"step\": 765, \"value\": 9.11831739358604e-05}, {\"wallTime\": 1647706068.8545191, \"step\": 768, \"value\": 9.280911035602912e-05}, {\"wallTime\": 1647706068.8979342, \"step\": 769, \"value\": 9.335750655736774e-05}, {\"wallTime\": 1647706069.0222445, \"step\": 772, \"value\": 9.502221655566245e-05}, {\"wallTime\": 1647706069.1531281, \"step\": 775, \"value\": 9.671661246102303e-05}, {\"wallTime\": 1647706069.1970484, \"step\": 776, \"value\": 9.728809527587146e-05}, {\"wallTime\": 1647706069.2917728, \"step\": 778, \"value\": 9.84412181423977e-05}, {\"wallTime\": 1647706069.334851, \"step\": 779, \"value\": 9.90228945738636e-05}, {\"wallTime\": 1647706069.3788378, \"step\": 780, \"value\": 9.960800525732338e-05}, {\"wallTime\": 1647706069.4231143, \"step\": 781, \"value\": 0.00010019657202064991}, {\"wallTime\": 1647706069.466603, \"step\": 782, \"value\": 0.00010078862396767363}, {\"wallTime\": 1647706069.717342, \"step\": 788, \"value\": 0.00010441510676173493}, {\"wallTime\": 1647706069.8455412, \"step\": 791, \"value\": 0.0001062769879354164}, {\"wallTime\": 1647706069.9515975, \"step\": 793, \"value\": 0.00010753665264928713}, {\"wallTime\": 1647706070.0367577, \"step\": 795, \"value\": 0.00010881124035222456}, {\"wallTime\": 1647706070.2153556, \"step\": 799, \"value\": 0.00011140593414893374}, {\"wallTime\": 1647706070.4273763, \"step\": 804, \"value\": 0.00011473647464299574}, {\"wallTime\": 1647706070.4700518, \"step\": 805, \"value\": 0.00011541443382157013}, {\"wallTime\": 1647706070.5114377, \"step\": 806, \"value\": 0.00011609640205278993}, {\"wallTime\": 1647706070.5528145, \"step\": 807, \"value\": 0.00011678240116452798}, {\"wallTime\": 1647706070.6925106, \"step\": 810, \"value\": 0.00011886480933753774}, {\"wallTime\": 1647706071.0417843, \"step\": 818, \"value\": 0.00012460123980417848}, {\"wallTime\": 1647706071.07921, \"step\": 819, \"value\": 0.0001253374939551577}, {\"wallTime\": 1647706071.15885, \"step\": 821, \"value\": 0.00012682308442890644}, {\"wallTime\": 1647706071.2399662, \"step\": 823, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647706071.362069, \"step\": 826, \"value\": 0.0001306145277339965}, {\"wallTime\": 1647706071.406089, \"step\": 827, \"value\": 0.00013138630311004817}, {\"wallTime\": 1647706071.451205, \"step\": 828, \"value\": 0.00013216264778748155}, {\"wallTime\": 1647706071.6595047, \"step\": 832, \"value\": 0.00013531417062040418}, {\"wallTime\": 1647706071.705971, \"step\": 833, \"value\": 0.0001361137256026268}, {\"wallTime\": 1647706071.8025815, \"step\": 835, \"value\": 0.00013772703823633492}, {\"wallTime\": 1647706071.848451, \"step\": 836, \"value\": 0.0001385408395435661}, {\"wallTime\": 1647706071.898346, \"step\": 837, \"value\": 0.00013935945753473788}, {\"wallTime\": 1647706071.989796, \"step\": 839, \"value\": 0.0001410112454323098}, {\"wallTime\": 1647706072.0462482, \"step\": 840, \"value\": 0.00014184445899445564}, {\"wallTime\": 1647706072.21607, \"step\": 843, \"value\": 0.00014437375648412853}, {\"wallTime\": 1647706072.3215446, \"step\": 845, \"value\": 0.0001460849744034931}, {\"wallTime\": 1647706072.6093595, \"step\": 850, \"value\": 0.0001504522660980001}, {\"wallTime\": 1647706072.657772, \"step\": 851, \"value\": 0.00015134125715121627}, {\"wallTime\": 1647706072.8009431, \"step\": 854, \"value\": 0.0001540399098303169}, {\"wallTime\": 1647706072.9385245, \"step\": 857, \"value\": 0.00015678668569307774}, {\"wallTime\": 1647706073.082029, \"step\": 860, \"value\": 0.00015958242875058204}, {\"wallTime\": 1647706073.193974, \"step\": 862, \"value\": 0.0001614739012438804}, {\"wallTime\": 1647706073.3780534, \"step\": 865, \"value\": 0.00016435323050245643}, {\"wallTime\": 1647706073.420624, \"step\": 866, \"value\": 0.00016532436711713672}, {\"wallTime\": 1647706073.584738, \"step\": 870, \"value\": 0.00016926665557548404}, {\"wallTime\": 1647706073.6229253, \"step\": 871, \"value\": 0.00017026683781296015}, {\"wallTime\": 1647706074.2157202, \"step\": 884, \"value\": 0.0001838198077166453}, {\"wallTime\": 1647706074.259659, \"step\": 885, \"value\": 0.00018490597722120583}, {\"wallTime\": 1647706074.303513, \"step\": 886, \"value\": 0.00018599856412038207}, {\"wallTime\": 1647706074.3976932, \"step\": 888, \"value\": 0.00018820313562173396}, {\"wallTime\": 1647706074.4847436, \"step\": 890, \"value\": 0.000190433842362836}, {\"wallTime\": 1647706074.5671217, \"step\": 892, \"value\": 0.00019269098993390799}, {\"wallTime\": 1647706074.6990552, \"step\": 895, \"value\": 0.00019612697360571474}, {\"wallTime\": 1647706074.7716508, \"step\": 897, \"value\": 0.00019845158385578543}, {\"wallTime\": 1647706074.8104289, \"step\": 898, \"value\": 0.00019962422084063292}, {\"wallTime\": 1647706074.9593134, \"step\": 901, \"value\": 0.00020318382303230464}, {\"wallTime\": 1647706075.0034306, \"step\": 902, \"value\": 0.00020438441424630582}, {\"wallTime\": 1647706075.0918486, \"step\": 904, \"value\": 0.0002068069006782025}, {\"wallTime\": 1647706075.2249506, \"step\": 907, \"value\": 0.00021049458882771432}, {\"wallTime\": 1647706075.2694526, \"step\": 908, \"value\": 0.0002117383701261133}, {\"wallTime\": 1647706075.3578615, \"step\": 910, \"value\": 0.00021424803708214313}, {\"wallTime\": 1647706075.4017825, \"step\": 911, \"value\": 0.00021551399549935013}, {\"wallTime\": 1647706075.535475, \"step\": 914, \"value\": 0.0002193569380324334}, {\"wallTime\": 1647706075.7127712, \"step\": 918, \"value\": 0.00022458768216893077}, {\"wallTime\": 1647706075.7537794, \"step\": 919, \"value\": 0.00022591474407818168}, {\"wallTime\": 1647706075.843554, \"step\": 921, \"value\": 0.00022859242744743824}, {\"wallTime\": 1647706075.9014862, \"step\": 923, \"value\": 0.00023130184854380786}, {\"wallTime\": 1647706076.0492353, \"step\": 927, \"value\": 0.00023681741731707007}, {\"wallTime\": 1647706076.1106873, \"step\": 928, \"value\": 0.00023821674403734505}, {\"wallTime\": 1647706076.1994662, \"step\": 930, \"value\": 0.00024104023759718984}, {\"wallTime\": 1647706076.2448606, \"step\": 931, \"value\": 0.00024246452085208148}, {\"wallTime\": 1647706076.290004, \"step\": 932, \"value\": 0.00024389720056205988}, {\"wallTime\": 1647706076.3351572, \"step\": 933, \"value\": 0.0002453383640386164}, {\"wallTime\": 1647706076.4723296, \"step\": 935, \"value\": 0.00024824627325870097}, {\"wallTime\": 1647706081.6747818, \"step\": 939, \"value\": 0.00025416590506210923}, {\"wallTime\": 1647706081.8107207, \"step\": 941, \"value\": 0.00025717844255268574}, {\"wallTime\": 1647706081.9061902, \"step\": 942, \"value\": 0.00025869806995615363}, {\"wallTime\": 1647706082.065157, \"step\": 945, \"value\": 0.0002633110561873764}, {\"wallTime\": 1647706082.310146, \"step\": 949, \"value\": 0.0002695899165701121}, {\"wallTime\": 1647706082.469525, \"step\": 952, \"value\": 0.00027439711266197264}, {\"wallTime\": 1647706082.645962, \"step\": 955, \"value\": 0.00027929001953452826}, {\"wallTime\": 1647706082.7152338, \"step\": 956, \"value\": 0.0002809403231367469}, {\"wallTime\": 1647706082.919811, \"step\": 960, \"value\": 0.0002876395592465997}, {\"wallTime\": 1647706083.0298476, \"step\": 962, \"value\": 0.0002910488401539624}, {\"wallTime\": 1647706083.0804374, \"step\": 963, \"value\": 0.0002927686145994812}, {\"wallTime\": 1647706083.2365575, \"step\": 965, \"value\": 0.00029623869340866804}, {\"wallTime\": 1647706083.3509898, \"step\": 967, \"value\": 0.0002997498959302902}, {\"wallTime\": 1647706083.3872957, \"step\": 968, \"value\": 0.0003015210968442261}, {\"wallTime\": 1647706083.5468998, \"step\": 971, \"value\": 0.0003068976802751422}, {\"wallTime\": 1647706083.8149755, \"step\": 976, \"value\": 0.00031607254641130567}, {\"wallTime\": 1647706083.9018753, \"step\": 978, \"value\": 0.00031981884967535734}, {\"wallTime\": 1647706083.9483, \"step\": 979, \"value\": 0.000321708619594574}, {\"wallTime\": 1647706084.0359435, \"step\": 981, \"value\": 0.00032552171614952385}, {\"wallTime\": 1647706084.086837, \"step\": 982, \"value\": 0.00032744515920057893}, {\"wallTime\": 1647706084.2688143, \"step\": 986, \"value\": 0.0003352533676661551}, {\"wallTime\": 1647706084.444939, \"step\": 990, \"value\": 0.00034324772423133254}, {\"wallTime\": 1647706084.5342155, \"step\": 992, \"value\": 0.0003473161195870489}, {\"wallTime\": 1647706084.6223722, \"step\": 994, \"value\": 0.00035143273998983204}, {\"wallTime\": 1647706084.711853, \"step\": 996, \"value\": 0.0003555981384124607}, {\"wallTime\": 1647706084.7960298, \"step\": 998, \"value\": 0.0003598129260353744}, {\"wallTime\": 1647706084.8400874, \"step\": 999, \"value\": 0.0003619390190578997}, {\"wallTime\": 1647706084.957689, \"step\": 1002, \"value\": 0.0003683929389808327}, {\"wallTime\": 1647706084.9978752, \"step\": 1003, \"value\": 0.00037056973087601364}, {\"wallTime\": 1647706085.0402696, \"step\": 1004, \"value\": 0.000372759357560426}, {\"wallTime\": 1647706085.1255176, \"step\": 1006, \"value\": 0.0003771775518544018}, {\"wallTime\": 1647706085.3698077, \"step\": 1011, \"value\": 0.0003884534817188978}, {\"wallTime\": 1647706085.4934804, \"step\": 1013, \"value\": 0.00039305767859332263}, {\"wallTime\": 1647706085.5755062, \"step\": 1015, \"value\": 0.0003977164451498538}, {\"wallTime\": 1647706085.618269, \"step\": 1016, \"value\": 0.00040006652125157416}, {\"wallTime\": 1647706085.6609893, \"step\": 1017, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647706085.8709004, \"step\": 1022, \"value\": 0.00041446133400313556}, {\"wallTime\": 1647706086.0443656, \"step\": 1026, \"value\": 0.0004243444709572941}, {\"wallTime\": 1647706086.1305768, \"step\": 1028, \"value\": 0.000429374078521505}, {\"wallTime\": 1647706086.1959891, \"step\": 1029, \"value\": 0.0004319111758377403}, {\"wallTime\": 1647706086.4543493, \"step\": 1035, \"value\": 0.0004474518063943833}, {\"wallTime\": 1647706086.4970813, \"step\": 1036, \"value\": 0.0004500957438722253}, {\"wallTime\": 1647706086.542871, \"step\": 1037, \"value\": 0.0004527553101070225}, {\"wallTime\": 1647706086.593829, \"step\": 1038, \"value\": 0.00045543056330643594}, {\"wallTime\": 1647706086.6673727, \"step\": 1039, \"value\": 0.0004581216489896178}, {\"wallTime\": 1647706086.8973513, \"step\": 1043, \"value\": 0.0004690459172707051}, {\"wallTime\": 1647706086.9978352, \"step\": 1045, \"value\": 0.0004746053309645504}, {\"wallTime\": 1647706087.054579, \"step\": 1046, \"value\": 0.0004774097178597003}, {\"wallTime\": 1647706087.4456332, \"step\": 1052, \"value\": 0.0004945874097757041}, {\"wallTime\": 1647706087.4885025, \"step\": 1053, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647706087.660009, \"step\": 1056, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647706087.7900302, \"step\": 1058, \"value\": 0.0005123831797391176}, {\"wallTime\": 1647706087.8432074, \"step\": 1059, \"value\": 0.0005154107930138707}, {\"wallTime\": 1647706087.9024086, \"step\": 1060, \"value\": 0.0005184562760405242}, {\"wallTime\": 1647706088.0274417, \"step\": 1062, \"value\": 0.0005246013752184808}, {\"wallTime\": 1647706088.2123256, \"step\": 1065, \"value\": 0.0005339558119885623}, {\"wallTime\": 1647706088.2993267, \"step\": 1067, \"value\": 0.0005402846145443618}, {\"wallTime\": 1647706088.3873107, \"step\": 1069, \"value\": 0.0005466883885674179}, {\"wallTime\": 1647706088.4403238, \"step\": 1070, \"value\": 0.0005499187391251326}, {\"wallTime\": 1647706088.4863355, \"step\": 1071, \"value\": 0.000553168123587966}, {\"wallTime\": 1647706088.5318825, \"step\": 1072, \"value\": 0.0005564367165789008}, {\"wallTime\": 1647706088.5755978, \"step\": 1073, \"value\": 0.0005597246345132589}, {\"wallTime\": 1647706088.622652, \"step\": 1074, \"value\": 0.0005630319355987012}, {\"wallTime\": 1647706088.771566, \"step\": 1077, \"value\": 0.0005730717093683779}, {\"wallTime\": 1647706088.8187473, \"step\": 1078, \"value\": 0.000576457881834358}, {\"wallTime\": 1647706088.9158258, \"step\": 1080, \"value\": 0.0005832904716953635}, {\"wallTime\": 1647706088.9731557, \"step\": 1081, \"value\": 0.0005867370055057108}, {\"wallTime\": 1647706089.0274072, \"step\": 1082, \"value\": 0.0005902039702050388}, {\"wallTime\": 1647706089.1828861, \"step\": 1085, \"value\": 0.0006007282063364983}, {\"wallTime\": 1647706089.2259302, \"step\": 1086, \"value\": 0.0006042778259143233}, {\"wallTime\": 1647706089.2895162, \"step\": 1087, \"value\": 0.0006078484584577382}, {\"wallTime\": 1647706089.4574776, \"step\": 1091, \"value\": 0.0006223430391401052}, {\"wallTime\": 1647706089.7534256, \"step\": 1098, \"value\": 0.0006485452759079635}, {\"wallTime\": 1647706089.8390675, \"step\": 1100, \"value\": 0.0006562322378158569}, {\"wallTime\": 1647706089.9209743, \"step\": 1102, \"value\": 0.0006640103529207408}, {\"wallTime\": 1647706089.964319, \"step\": 1103, \"value\": 0.000667933898512274}, {\"wallTime\": 1647706090.007303, \"step\": 1104, \"value\": 0.0006718806107528508}, {\"wallTime\": 1647706090.1329365, \"step\": 1107, \"value\": 0.0006838612607680261}, {\"wallTime\": 1647706090.219534, \"step\": 1109, \"value\": 0.0006919668521732092}, {\"wallTime\": 1647706090.3042736, \"step\": 1111, \"value\": 0.0007001684862188995}, {\"wallTime\": 1647706090.3447359, \"step\": 1112, \"value\": 0.000704305712133646}, {\"wallTime\": 1647706090.4277487, \"step\": 1114, \"value\": 0.0007126535638235509}, {\"wallTime\": 1647706090.6498182, \"step\": 1119, \"value\": 0.0007339587318710983}, {\"wallTime\": 1647706090.79159, \"step\": 1121, \"value\": 0.0007426580996252596}, {\"wallTime\": 1647706090.8326607, \"step\": 1122, \"value\": 0.0007470463751815259}, {\"wallTime\": 1647706090.9620693, \"step\": 1125, \"value\": 0.0007603673147968948}, {\"wallTime\": 1647706091.0050523, \"step\": 1126, \"value\": 0.0007648602477274835}, {\"wallTime\": 1647706091.0917778, \"step\": 1128, \"value\": 0.0007739258580841124}, {\"wallTime\": 1647706091.128899, \"step\": 1129, \"value\": 0.0007784988847561181}, {\"wallTime\": 1647706091.1714087, \"step\": 1130, \"value\": 0.0007830989197827876}, {\"wallTime\": 1647706091.2383087, \"step\": 1131, \"value\": 0.0007877261377871037}, {\"wallTime\": 1647706091.280665, \"step\": 1132, \"value\": 0.0007923807133920491}, {\"wallTime\": 1647706091.3668134, \"step\": 1134, \"value\": 0.000801772519480437}, {\"wallTime\": 1647706091.4106402, \"step\": 1135, \"value\": 0.0008065100992098451}, {\"wallTime\": 1647706091.4650507, \"step\": 1136, \"value\": 0.0008112756768241525}, {\"wallTime\": 1647706091.5837755, \"step\": 1139, \"value\": 0.0008257419685833156}, {\"wallTime\": 1647706091.7080836, \"step\": 1142, \"value\": 0.0008404661784879863}, {\"wallTime\": 1647706091.8240397, \"step\": 1145, \"value\": 0.0008554530213586986}, {\"wallTime\": 1647706091.8625386, \"step\": 1146, \"value\": 0.0008605077746324241}, {\"wallTime\": 1647706092.0282667, \"step\": 1148, \"value\": 0.0008707070373930037}, {\"wallTime\": 1647706092.0962255, \"step\": 1150, \"value\": 0.0008810272556729615}, {\"wallTime\": 1647706092.1312551, \"step\": 1151, \"value\": 0.0008862331160344183}, {\"wallTime\": 1647706092.165457, \"step\": 1152, \"value\": 0.0008914697682484984}, {\"wallTime\": 1647706092.188287, \"step\": 1153, \"value\": 0.0008967373287305236}, {\"wallTime\": 1647706092.431795, \"step\": 1160, \"value\": 0.0009344922145828605}, {\"wallTime\": 1647706092.6394796, \"step\": 1162, \"value\": 0.0009455684339627624}, {\"wallTime\": 1647706092.7540588, \"step\": 1164, \"value\": 0.0009567759116180241}, {\"wallTime\": 1647706092.8773286, \"step\": 1166, \"value\": 0.0009681162191554904}, {\"wallTime\": 1647706092.93035, \"step\": 1167, \"value\": 0.0009738366934470832}, {\"wallTime\": 1647706093.2578385, \"step\": 1173, \"value\": 0.0010088763665407896}, {\"wallTime\": 1647706093.3077228, \"step\": 1174, \"value\": 0.0010148376459255815}, {\"wallTime\": 1647706093.4146528, \"step\": 1176, \"value\": 0.0010268661426380277}, {\"wallTime\": 1647706093.4636993, \"step\": 1177, \"value\": 0.0010329338256269693}, {\"wallTime\": 1647706093.517762, \"step\": 1178, \"value\": 0.0010390372481197119}, {\"wallTime\": 1647706093.7492616, \"step\": 1182, \"value\": 0.0010638139210641384}, {\"wallTime\": 1647706093.8551457, \"step\": 1184, \"value\": 0.0010764229809865355}, {\"wallTime\": 1647706093.9620085, \"step\": 1186, \"value\": 0.0010891814017668366}, {\"wallTime\": 1647706094.0940316, \"step\": 1188, \"value\": 0.001102091046050191}, {\"wallTime\": 1647706094.1805172, \"step\": 1189, \"value\": 0.0011086032027378678}, {\"wallTime\": 1647706094.2468343, \"step\": 1190, \"value\": 0.0011151537764817476}, {\"wallTime\": 1647706094.4564033, \"step\": 1193, \"value\": 0.0011350386776030064}, {\"wallTime\": 1647706094.5218012, \"step\": 1194, \"value\": 0.001141745480708778}, {\"wallTime\": 1647706094.5738204, \"step\": 1195, \"value\": 0.0011484918650239706}, {\"wallTime\": 1647706095.0875325, \"step\": 1197, \"value\": 0.0011621045414358377}, {\"wallTime\": 1647706095.1050227, \"step\": 1198, \"value\": 0.0011689712991937995}, {\"wallTime\": 1647706095.325026, \"step\": 1201, \"value\": 0.0011898158118128777}, {\"wallTime\": 1647706095.5501947, \"step\": 1205, \"value\": 0.0012181878555566072}, {\"wallTime\": 1647706096.2925084, \"step\": 1206, \"value\": 0.0012253860477358103}, {\"wallTime\": 1647706096.3310082, \"step\": 1207, \"value\": 0.0012326266150921583}, {\"wallTime\": 1647706096.416089, \"step\": 1209, \"value\": 0.001247236505150795}, {\"wallTime\": 1647706096.6168823, \"step\": 1213, \"value\": 0.001276977825909853}, {\"wallTime\": 1647706096.6581247, \"step\": 1214, \"value\": 0.0012845234014093876}, {\"wallTime\": 1647706096.692939, \"step\": 1215, \"value\": 0.00129211344756186}, {\"wallTime\": 1647706096.8123238, \"step\": 1218, \"value\": 0.0013151537859812379}, {\"wallTime\": 1647706096.9916325, \"step\": 1223, \"value\": 0.001354471081867814}, {\"wallTime\": 1647706097.0750196, \"step\": 1225, \"value\": 0.0013705251039937139}, {\"wallTime\": 1647706097.2585444, \"step\": 1229, \"value\": 0.0014032063772901893}, {\"wallTime\": 1647706097.3989744, \"step\": 1232, \"value\": 0.0014282276388257742}, {\"wallTime\": 1647706097.4491408, \"step\": 1233, \"value\": 0.0014366668183356524}, {\"wallTime\": 1647706097.6805568, \"step\": 1238, \"value\": 0.001479616854339838}, {\"wallTime\": 1647706097.7699225, \"step\": 1240, \"value\": 0.0014971541240811348}, {\"wallTime\": 1647706097.8143337, \"step\": 1241, \"value\": 0.0015060006408020854}, {\"wallTime\": 1647706097.8486695, \"step\": 1242, \"value\": 0.0015148994280025363}, {\"wallTime\": 1647706097.8897665, \"step\": 1243, \"value\": 0.0015238507185131311}, {\"wallTime\": 1647706097.9328778, \"step\": 1244, \"value\": 0.0015328549779951572}, {\"wallTime\": 1647706098.0216231, \"step\": 1246, \"value\": 0.0015510233351960778}, {\"wallTime\": 1647706098.158706, \"step\": 1249, \"value\": 0.0015786804724484682}, {\"wallTime\": 1647706098.2042713, \"step\": 1250, \"value\": 0.0015880087157711387}, {\"wallTime\": 1647706098.2465298, \"step\": 1251, \"value\": 0.0015973920235410333}, {\"wallTime\": 1647706098.2883136, \"step\": 1252, \"value\": 0.0016068308614194393}, {\"wallTime\": 1647706098.385339, \"step\": 1254, \"value\": 0.0016258759424090385}, {\"wallTime\": 1647706098.4761407, \"step\": 1256, \"value\": 0.0016451469855383039}, {\"wallTime\": 1647706098.5252, \"step\": 1257, \"value\": 0.0016548678977414966}, {\"wallTime\": 1647706098.6634831, \"step\": 1260, \"value\": 0.0016843767371028662}, {\"wallTime\": 1647706098.7039554, \"step\": 1261, \"value\": 0.0016943294322118163}, {\"wallTime\": 1647706099.0331192, \"step\": 1267, \"value\": 0.0017552932258695364}, {\"wallTime\": 1647706099.1965268, \"step\": 1271, \"value\": 0.001797149539925158}, {\"wallTime\": 1647706099.404634, \"step\": 1276, \"value\": 0.0018508763751015067}, {\"wallTime\": 1647706099.449078, \"step\": 1277, \"value\": 0.0018618128960952163}, {\"wallTime\": 1647706099.4935884, \"step\": 1278, \"value\": 0.0018728141440078616}, {\"wallTime\": 1647706099.6722434, \"step\": 1282, \"value\": 0.0019174728076905012}, {\"wallTime\": 1647706099.8101587, \"step\": 1285, \"value\": 0.0019516643369570374}, {\"wallTime\": 1647706100.034454, \"step\": 1290, \"value\": 0.002010010415688157}, {\"wallTime\": 1647706100.1631017, \"step\": 1293, \"value\": 0.0020458518993109465}, {\"wallTime\": 1647706100.3893878, \"step\": 1298, \"value\": 0.002107013715431094}, {\"wallTime\": 1647706100.4563167, \"step\": 1299, \"value\": 0.0021194638684391975}, {\"wallTime\": 1647706100.5918024, \"step\": 1302, \"value\": 0.0021572571713477373}, {\"wallTime\": 1647706100.7731922, \"step\": 1306, \"value\": 0.0022086985409259796}, {\"wallTime\": 1647706100.9536538, \"step\": 1310, \"value\": 0.002261366695165634}, {\"wallTime\": 1647706101.1778462, \"step\": 1315, \"value\": 0.0023289716336876154}, {\"wallTime\": 1647706101.4051247, \"step\": 1320, \"value\": 0.0023985973093658686}, {\"wallTime\": 1647706101.4851766, \"step\": 1322, \"value\": 0.0024270270951092243}, {\"wallTime\": 1647706101.6244192, \"step\": 1325, \"value\": 0.002470304723829031}, {\"wallTime\": 1647706101.6703923, \"step\": 1326, \"value\": 0.0024849013425409794}, {\"wallTime\": 1647706101.767557, \"step\": 1328, \"value\": 0.0025143541861325502}, {\"wallTime\": 1647706102.1907108, \"step\": 1335, \"value\": 0.002620214829221368}, {\"wallTime\": 1647706102.5684516, \"step\": 1344, \"value\": 0.0027628964744508266}, {\"wallTime\": 1647706102.607179, \"step\": 1345, \"value\": 0.0027792220935225487}, {\"wallTime\": 1647706102.6819026, \"step\": 1347, \"value\": 0.002812163205817342}, {\"wallTime\": 1647706102.7213852, \"step\": 1348, \"value\": 0.002828779863193631}, {\"wallTime\": 1647706102.8511996, \"step\": 1351, \"value\": 0.0028792214579880238}, {\"wallTime\": 1647706102.8944051, \"step\": 1352, \"value\": 0.0028962341602891684}, {\"wallTime\": 1647706102.9855235, \"step\": 1354, \"value\": 0.0029305622447282076}, {\"wallTime\": 1647706103.1492171, \"step\": 1358, \"value\": 0.0030004438012838364}, {\"wallTime\": 1647706103.2309, \"step\": 1360, \"value\": 0.0030360070522874594}, {\"wallTime\": 1647706103.4010763, \"step\": 1364, \"value\": 0.0031084029469639063}, {\"wallTime\": 1647706103.4463522, \"step\": 1365, \"value\": 0.0031267700251191854}, {\"wallTime\": 1647706103.4906328, \"step\": 1366, \"value\": 0.003145245835185051}, {\"wallTime\": 1647706103.5380437, \"step\": 1367, \"value\": 0.0031638306099921465}, {\"wallTime\": 1647706103.618958, \"step\": 1368, \"value\": 0.0031825252808630466}, {\"wallTime\": 1647706103.7799847, \"step\": 1372, \"value\": 0.0032584150321781635}, {\"wallTime\": 1647706103.8291728, \"step\": 1373, \"value\": 0.003277668496593833}, {\"wallTime\": 1647706104.00854, \"step\": 1375, \"value\": 0.003316517686471343}, {\"wallTime\": 1647706104.062032, \"step\": 1376, \"value\": 0.0033361143432557583}, {\"wallTime\": 1647706104.231909, \"step\": 1380, \"value\": 0.003415666753426194}, {\"wallTime\": 1647706104.4250488, \"step\": 1385, \"value\": 0.003517779754474759}, {\"wallTime\": 1647706104.4640374, \"step\": 1386, \"value\": 0.003538565943017602}, {\"wallTime\": 1647706104.6337006, \"step\": 1390, \"value\": 0.003622945863753557}, {\"wallTime\": 1647706104.7748203, \"step\": 1393, \"value\": 0.003687548451125622}, {\"wallTime\": 1647706104.9362, \"step\": 1397, \"value\": 0.0037754809018224478}, {\"wallTime\": 1647706105.1877139, \"step\": 1403, \"value\": 0.003911326639354229}, {\"wallTime\": 1647706109.8359685, \"step\": 1416, \"value\": 0.004222662188112736}, {\"wallTime\": 1647706109.874381, \"step\": 1417, \"value\": 0.004247613251209259}, {\"wallTime\": 1647706110.0480192, \"step\": 1421, \"value\": 0.004348901100456715}, {\"wallTime\": 1647706110.5305877, \"step\": 1431, \"value\": 0.004612813238054514}, {\"wallTime\": 1647706110.5739477, \"step\": 1432, \"value\": 0.004640069790184498}, {\"wallTime\": 1647706110.786482, \"step\": 1436, \"value\": 0.004750716034322977}, {\"wallTime\": 1647706110.8854656, \"step\": 1438, \"value\": 0.004807024262845516}, {\"wallTime\": 1647706110.9357746, \"step\": 1439, \"value\": 0.004835428670048714}, {\"wallTime\": 1647706110.9797437, \"step\": 1440, \"value\": 0.004864000249654055}, {\"wallTime\": 1647706111.0283954, \"step\": 1441, \"value\": 0.004892741329967976}, {\"wallTime\": 1647706111.1581507, \"step\": 1444, \"value\": 0.004979986231774092}, {\"wallTime\": 1647706111.2386858, \"step\": 1446, \"value\": 0.005039012059569359}, {\"wallTime\": 1647706111.282309, \"step\": 1447, \"value\": 0.005068786907941103}, {\"wallTime\": 1647706111.3730798, \"step\": 1449, \"value\": 0.005128865595906973}, {\"wallTime\": 1647706111.4674313, \"step\": 1451, \"value\": 0.005189656279981136}, {\"wallTime\": 1647706111.5133924, \"step\": 1452, \"value\": 0.005220321007072926}, {\"wallTime\": 1647706111.6047904, \"step\": 1454, \"value\": 0.005282195750623941}, {\"wallTime\": 1647706111.6528397, \"step\": 1455, \"value\": 0.005313407629728317}, {\"wallTime\": 1647706111.6983302, \"step\": 1456, \"value\": 0.005344803910702467}, {\"wallTime\": 1647706111.7467532, \"step\": 1457, \"value\": 0.005376385524868965}, {\"wallTime\": 1647706111.7923477, \"step\": 1458, \"value\": 0.005408153869211674}, {\"wallTime\": 1647706111.8382485, \"step\": 1459, \"value\": 0.005440109875053167}, {\"wallTime\": 1647706111.8854952, \"step\": 1460, \"value\": 0.005472254939377308}, {\"wallTime\": 1647706111.9314554, \"step\": 1461, \"value\": 0.005504589527845383}, {\"wallTime\": 1647706112.0308654, \"step\": 1463, \"value\": 0.00556983333081007}, {\"wallTime\": 1647706112.3388734, \"step\": 1470, \"value\": 0.005804337561130524}, {\"wallTime\": 1647706112.4615352, \"step\": 1473, \"value\": 0.005907837767153978}, {\"wallTime\": 1647706112.5036907, \"step\": 1474, \"value\": 0.00594274653121829}, {\"wallTime\": 1647706112.6090915, \"step\": 1476, \"value\": 0.006013183854520321}, {\"wallTime\": 1647706112.9257648, \"step\": 1483, \"value\": 0.006266354117542505}, {\"wallTime\": 1647706113.1107996, \"step\": 1487, \"value\": 0.006415780168026686}, {\"wallTime\": 1647706113.201857, \"step\": 1489, \"value\": 0.0064918240532279015}, {\"wallTime\": 1647706113.255731, \"step\": 1490, \"value\": 0.006530183367431164}, {\"wallTime\": 1647706113.398785, \"step\": 1493, \"value\": 0.006646626628935337}, {\"wallTime\": 1647706113.4395306, \"step\": 1494, \"value\": 0.006685900501906872}, {\"wallTime\": 1647706113.6162915, \"step\": 1498, \"value\": 0.006845331285148859}, {\"wallTime\": 1647706113.656619, \"step\": 1499, \"value\": 0.0068857790902256966}, {\"wallTime\": 1647706113.6909184, \"step\": 1500, \"value\": 0.00692646624520421}, {\"wallTime\": 1647706113.7865443, \"step\": 1502, \"value\": 0.007008563261479139}, {\"wallTime\": 1647706114.1062782, \"step\": 1509, \"value\": 0.007303641643375158}, {\"wallTime\": 1647706114.1488538, \"step\": 1510, \"value\": 0.007346797734498978}, {\"wallTime\": 1647706114.189267, \"step\": 1511, \"value\": 0.007390209008008242}, {\"wallTime\": 1647706114.2773488, \"step\": 1513, \"value\": 0.007477802224457264}, {\"wallTime\": 1647706114.3643405, \"step\": 1515, \"value\": 0.00756643433123827}, {\"wallTime\": 1647706114.4063663, \"step\": 1516, \"value\": 0.0076111434027552605}, {\"wallTime\": 1647706114.7015939, \"step\": 1523, \"value\": 0.00793159194290638}, {\"wallTime\": 1647706114.9103363, \"step\": 1528, \"value\": 0.008168710395693779}, {\"wallTime\": 1647706115.1640792, \"step\": 1534, \"value\": 0.008462629280984402}, {\"wallTime\": 1647706115.2856572, \"step\": 1537, \"value\": 0.008613531477749348}, {\"wallTime\": 1647706115.3252587, \"step\": 1538, \"value\": 0.008664427325129509}, {\"wallTime\": 1647706115.4695237, \"step\": 1541, \"value\": 0.008818927221000195}, {\"wallTime\": 1647706115.74853, \"step\": 1548, \"value\": 0.009190226905047894}, {\"wallTime\": 1647706115.8799298, \"step\": 1551, \"value\": 0.009354102425277233}, {\"wallTime\": 1647706115.9200711, \"step\": 1552, \"value\": 0.009409374557435513}, {\"wallTime\": 1647706115.961534, \"step\": 1553, \"value\": 0.009464973583817482}, {\"wallTime\": 1647706116.3802307, \"step\": 1562, \"value\": 0.009980381466448307}, {\"wallTime\": 1647706116.489726, \"step\": 1565, \"value\": 0.010158346965909004}, {\"wallTime\": 1647706116.529598, \"step\": 1566, \"value\": 0.010218370705842972}, {\"wallTime\": 1647706116.661392, \"step\": 1568, \"value\": 0.010339485481381416}, {\"wallTime\": 1647706116.776317, \"step\": 1570, \"value\": 0.010462035425007343}, {\"wallTime\": 1647706116.823611, \"step\": 1571, \"value\": 0.01052385475486517}, {\"wallTime\": 1647706116.8622584, \"step\": 1572, \"value\": 0.01058603823184967}, {\"wallTime\": 1647706116.9082906, \"step\": 1573, \"value\": 0.010648590512573719}, {\"wallTime\": 1647706117.1337433, \"step\": 1576, \"value\": 0.010838471353054047}, {\"wallTime\": 1647706117.254591, \"step\": 1578, \"value\": 0.010966935195028782}, {\"wallTime\": 1647706117.3941677, \"step\": 1580, \"value\": 0.011096922680735588}, {\"wallTime\": 1647706117.4370387, \"step\": 1581, \"value\": 0.01116249244660139}, {\"wallTime\": 1647706117.490328, \"step\": 1582, \"value\": 0.011228450573980808}, {\"wallTime\": 1647706117.6499808, \"step\": 1585, \"value\": 0.011428670957684517}, {\"wallTime\": 1647706117.912843, \"step\": 1590, \"value\": 0.0117703378200531}, {\"wallTime\": 1647706118.1777656, \"step\": 1595, \"value\": 0.012122217565774918}, {\"wallTime\": 1647706118.2413511, \"step\": 1596, \"value\": 0.012193846516311169}, {\"wallTime\": 1647706118.290324, \"step\": 1597, \"value\": 0.012265898287296295}, {\"wallTime\": 1647706118.4918983, \"step\": 1601, \"value\": 0.012558388523757458}, {\"wallTime\": 1647706118.5470557, \"step\": 1602, \"value\": 0.012632593512535095}, {\"wallTime\": 1647706118.6122928, \"step\": 1603, \"value\": 0.012707238085567951}, {\"wallTime\": 1647706119.0613213, \"step\": 1611, \"value\": 0.013320491649210453}, {\"wallTime\": 1647706119.1650882, \"step\": 1613, \"value\": 0.013478375039994717}, {\"wallTime\": 1647706119.2406964, \"step\": 1614, \"value\": 0.013558016158640385}, {\"wallTime\": 1647706119.3437366, \"step\": 1616, \"value\": 0.013718714937567711}, {\"wallTime\": 1647706119.655915, \"step\": 1622, \"value\": 0.014212328940629959}, {\"wallTime\": 1647706119.7622278, \"step\": 1624, \"value\": 0.014380782842636108}, {\"wallTime\": 1647706119.8536487, \"step\": 1626, \"value\": 0.014551232568919659}, {\"wallTime\": 1647706119.9035287, \"step\": 1627, \"value\": 0.014637214131653309}, {\"wallTime\": 1647706120.1322608, \"step\": 1631, \"value\": 0.01498624961823225}, {\"wallTime\": 1647706120.4596422, \"step\": 1635, \"value\": 0.01534360833466053}, {\"wallTime\": 1647706120.5127742, \"step\": 1636, \"value\": 0.015434271655976772}, {\"wallTime\": 1647706120.5726159, \"step\": 1637, \"value\": 0.015525470487773418}, {\"wallTime\": 1647706120.7326758, \"step\": 1640, \"value\": 0.01580231450498104}, {\"wallTime\": 1647706120.7794094, \"step\": 1641, \"value\": 0.01589568704366684}, {\"wallTime\": 1647706121.0406919, \"step\": 1646, \"value\": 0.016370898112654686}, {\"wallTime\": 1647706121.086139, \"step\": 1647, \"value\": 0.016467630863189697}, {\"wallTime\": 1647706121.1882915, \"step\": 1649, \"value\": 0.01666281558573246}, {\"wallTime\": 1647706121.2973506, \"step\": 1651, \"value\": 0.016860313713550568}, {\"wallTime\": 1647706121.3494635, \"step\": 1652, \"value\": 0.016959939152002335}, {\"wallTime\": 1647706121.425261, \"step\": 1653, \"value\": 0.01706015318632126}, {\"wallTime\": 1647706121.4787903, \"step\": 1654, \"value\": 0.017160959541797638}, {\"wallTime\": 1647706121.583481, \"step\": 1656, \"value\": 0.017364362254738808}, {\"wallTime\": 1647706121.685968, \"step\": 1658, \"value\": 0.01757017709314823}, {\"wallTime\": 1647706121.910889, \"step\": 1662, \"value\": 0.017989151179790497}, {\"wallTime\": 1647706122.0143683, \"step\": 1664, \"value\": 0.018202370032668114}, {\"wallTime\": 1647706122.11041, \"step\": 1666, \"value\": 0.018418116495013237}, {\"wallTime\": 1647706122.2530003, \"step\": 1669, \"value\": 0.01874653995037079}, {\"wallTime\": 1647706122.316382, \"step\": 1670, \"value\": 0.018857309594750404}, {\"wallTime\": 1647706122.5218515, \"step\": 1674, \"value\": 0.019306978210806847}, {\"wallTime\": 1647706122.6790023, \"step\": 1677, \"value\": 0.019651250913739204}, {\"wallTime\": 1647706122.7842631, \"step\": 1679, \"value\": 0.019884169101715088}, {\"wallTime\": 1647706122.836559, \"step\": 1680, \"value\": 0.020001662895083427}, {\"wallTime\": 1647706122.940526, \"step\": 1682, \"value\": 0.020238734781742096}, {\"wallTime\": 1647706123.1070068, \"step\": 1685, \"value\": 0.020599622279405594}, {\"wallTime\": 1647706123.170988, \"step\": 1686, \"value\": 0.020721344277262688}, {\"wallTime\": 1647706123.2200568, \"step\": 1687, \"value\": 0.020843783393502235}, {\"wallTime\": 1647706123.2716255, \"step\": 1688, \"value\": 0.020966947078704834}, {\"wallTime\": 1647706123.522504, \"step\": 1693, \"value\": 0.021593764424324036}, {\"wallTime\": 1647706123.5718923, \"step\": 1694, \"value\": 0.021721359342336655}, {\"wallTime\": 1647706123.6207232, \"step\": 1695, \"value\": 0.021849706768989563}, {\"wallTime\": 1647706123.7404518, \"step\": 1697, \"value\": 0.022108685225248337}, {\"wallTime\": 1647706123.8420255, \"step\": 1699, \"value\": 0.022370731458067894}, {\"wallTime\": 1647706123.892073, \"step\": 1700, \"value\": 0.022502915933728218}, {\"wallTime\": 1647706123.9940803, \"step\": 1702, \"value\": 0.022769635543227196}, {\"wallTime\": 1647706124.0944276, \"step\": 1704, \"value\": 0.02303951606154442}, {\"wallTime\": 1647706124.2530692, \"step\": 1707, \"value\": 0.023450346663594246}, {\"wallTime\": 1647706124.3615434, \"step\": 1709, \"value\": 0.023728294298052788}, {\"wallTime\": 1647706124.4180474, \"step\": 1710, \"value\": 0.02386850118637085}, {\"wallTime\": 1647706124.481291, \"step\": 1711, \"value\": 0.02400953695178032}, {\"wallTime\": 1647706124.545623, \"step\": 1712, \"value\": 0.024151407182216644}, {\"wallTime\": 1647706124.8624918, \"step\": 1718, \"value\": 0.025020400062203407}, {\"wallTime\": 1647706124.909552, \"step\": 1719, \"value\": 0.025168241932988167}, {\"wallTime\": 1647706125.072394, \"step\": 1722, \"value\": 0.025617031380534172}, {\"wallTime\": 1647706125.124567, \"step\": 1723, \"value\": 0.025768397375941277}, {\"wallTime\": 1647706125.177103, \"step\": 1724, \"value\": 0.02592065930366516}, {\"wallTime\": 1647706125.2293246, \"step\": 1725, \"value\": 0.026073820888996124}, {\"wallTime\": 1647706125.5344484, \"step\": 1730, \"value\": 0.02685331180691719}, {\"wallTime\": 1647706126.035489, \"step\": 1738, \"value\": 0.028149258345365524}, {\"wallTime\": 1647706126.0886257, \"step\": 1739, \"value\": 0.02831558883190155}, {\"wallTime\": 1647706126.2890177, \"step\": 1743, \"value\": 0.028990795835852623}, {\"wallTime\": 1647706126.3922472, \"step\": 1745, \"value\": 0.02933441288769245}, {\"wallTime\": 1647706126.5535028, \"step\": 1748, \"value\": 0.029857490211725235}, {\"wallTime\": 1647706126.627777, \"step\": 1749, \"value\": 0.030033914372324944}, {\"wallTime\": 1647706126.6788938, \"step\": 1750, \"value\": 0.03021138161420822}, {\"wallTime\": 1647706126.7319736, \"step\": 1751, \"value\": 0.030389895662665367}, {\"wallTime\": 1647706126.8319016, \"step\": 1753, \"value\": 0.0307500958442688}, {\"wallTime\": 1647706126.8821325, \"step\": 1754, \"value\": 0.03093179501593113}, {\"wallTime\": 1647706127.0374334, \"step\": 1757, \"value\": 0.03148335590958595}, {\"wallTime\": 1647706127.2943857, \"step\": 1762, \"value\": 0.03242456912994385}, {\"wallTime\": 1647706127.3432004, \"step\": 1763, \"value\": 0.032616160809993744}, {\"wallTime\": 1647706127.4681377, \"step\": 1765, \"value\": 0.03300274908542633}, {\"wallTime\": 1647706127.657398, \"step\": 1768, \"value\": 0.03359123691916466}, {\"wallTime\": 1647706128.1828375, \"step\": 1775, \"value\": 0.035005513578653336}, {\"wallTime\": 1647706128.2300515, \"step\": 1776, \"value\": 0.035212356597185135}, {\"wallTime\": 1647706128.275151, \"step\": 1777, \"value\": 0.03542042151093483}, {\"wallTime\": 1647706128.4055004, \"step\": 1780, \"value\": 0.036052022129297256}, {\"wallTime\": 1647706128.6505544, \"step\": 1784, \"value\": 0.03691171109676361}, {\"wallTime\": 1647706128.7247252, \"step\": 1785, \"value\": 0.03712981566786766}, {\"wallTime\": 1647706128.8049984, \"step\": 1786, \"value\": 0.037349212914705276}, {\"wallTime\": 1647706129.0017753, \"step\": 1789, \"value\": 0.038015205413103104}, {\"wallTime\": 1647706129.090239, \"step\": 1790, \"value\": 0.03823983296751976}, {\"wallTime\": 1647706129.2145627, \"step\": 1792, \"value\": 0.038693077862262726}, {\"wallTime\": 1647706129.3427353, \"step\": 1794, \"value\": 0.039151690900325775}, {\"wallTime\": 1647706129.4882178, \"step\": 1796, \"value\": 0.03961574286222458}, {\"wallTime\": 1647706129.7177196, \"step\": 1800, \"value\": 0.04056040942668915}, {\"wallTime\": 1647706129.811586, \"step\": 1802, \"value\": 0.04104115813970566}, {\"wallTime\": 1647706129.876284, \"step\": 1803, \"value\": 0.04128366708755493}, {\"wallTime\": 1647706130.1541653, \"step\": 1808, \"value\": 0.04251786321401596}, {\"wallTime\": 1647706130.2788725, \"step\": 1810, \"value\": 0.04302181303501129}, {\"wallTime\": 1647706130.5121922, \"step\": 1814, \"value\": 0.044047702103853226}, {\"wallTime\": 1647706130.7849572, \"step\": 1818, \"value\": 0.04509805142879486}, {\"wallTime\": 1647706130.8357015, \"step\": 1819, \"value\": 0.04536452889442444}, {\"wallTime\": 1647706131.0850964, \"step\": 1823, \"value\": 0.04644628241658211}, {\"wallTime\": 1647706131.2668905, \"step\": 1826, \"value\": 0.04727449268102646}, {\"wallTime\": 1647706131.3345423, \"step\": 1827, \"value\": 0.04755382984876633}, {\"wallTime\": 1647706131.4696305, \"step\": 1829, \"value\": 0.04811746999621391}, {\"wallTime\": 1647706131.5358365, \"step\": 1830, \"value\": 0.048401787877082825}, {\"wallTime\": 1647706131.660657, \"step\": 1832, \"value\": 0.04897547885775566}, {\"wallTime\": 1647706131.7336843, \"step\": 1833, \"value\": 0.04926486685872078}, {\"wallTime\": 1647706131.7996213, \"step\": 1834, \"value\": 0.04955596476793289}, {\"wallTime\": 1647706131.898584, \"step\": 1836, \"value\": 0.05014333501458168}, {\"wallTime\": 1647706131.9757957, \"step\": 1837, \"value\": 0.05043962597846985}, {\"wallTime\": 1647706132.0351865, \"step\": 1838, \"value\": 0.050737667828798294}, {\"wallTime\": 1647706132.4362404, \"step\": 1844, \"value\": 0.05256326124072075}, {\"wallTime\": 1647706132.4904127, \"step\": 1845, \"value\": 0.052873849868774414}, {\"wallTime\": 1647706132.5679302, \"step\": 1846, \"value\": 0.05318627506494522}, {\"wallTime\": 1647706132.6193204, \"step\": 1847, \"value\": 0.053500544279813766}, {\"wallTime\": 1647706132.6738834, \"step\": 1848, \"value\": 0.053816672414541245}, {\"wallTime\": 1647706132.829189, \"step\": 1851, \"value\": 0.054776307195425034}, {\"wallTime\": 1647706132.9349637, \"step\": 1853, \"value\": 0.055425550788640976}, {\"wallTime\": 1647706133.2598827, \"step\": 1860, \"value\": 0.057759106159210205}, {\"wallTime\": 1647706133.4229019, \"step\": 1864, \"value\": 0.059136416763067245}, {\"wallTime\": 1647706133.4716973, \"step\": 1865, \"value\": 0.059485845267772675}, {\"wallTime\": 1647706133.5140166, \"step\": 1866, \"value\": 0.05983734130859375}, {\"wallTime\": 1647706133.556409, \"step\": 1867, \"value\": 0.06019091233611107}, {\"wallTime\": 1647706133.7206311, \"step\": 1871, \"value\": 0.06162621080875397}, {\"wallTime\": 1647706133.7707005, \"step\": 1872, \"value\": 0.06199035048484802}, {\"wallTime\": 1647706133.8923612, \"step\": 1874, \"value\": 0.06272509694099426}, {\"wallTime\": 1647706133.8976548, \"step\": 1875, \"value\": 0.06309573352336884}, {\"wallTime\": 1647706138.8958995, \"step\": 1877, \"value\": 0.06384358555078506}, {\"wallTime\": 1647706139.1133626, \"step\": 1880, \"value\": 0.06498201191425323}, {\"wallTime\": 1647706139.2986042, \"step\": 1883, \"value\": 0.06614074856042862}, {\"wallTime\": 1647706139.343657, \"step\": 1884, \"value\": 0.06653156131505966}, {\"wallTime\": 1647706139.47373, \"step\": 1886, \"value\": 0.06732013821601868}, {\"wallTime\": 1647706139.6309395, \"step\": 1888, \"value\": 0.06811805814504623}, {\"wallTime\": 1647706139.7808533, \"step\": 1890, \"value\": 0.06892544031143188}, {\"wallTime\": 1647706140.0928736, \"step\": 1895, \"value\": 0.07098600268363953}, {\"wallTime\": 1647706140.2663395, \"step\": 1899, \"value\": 0.07267871499061584}, {\"wallTime\": 1647706140.3964162, \"step\": 1902, \"value\": 0.07397469133138657}, {\"wallTime\": 1647706140.5783067, \"step\": 1906, \"value\": 0.07573867589235306}, {\"wallTime\": 1647706140.6639414, \"step\": 1908, \"value\": 0.07663637399673462}, {\"wallTime\": 1647706140.7024894, \"step\": 1909, \"value\": 0.07708921283483505}, {\"wallTime\": 1647706140.7404342, \"step\": 1910, \"value\": 0.07754471898078918}, {\"wallTime\": 1647706140.87408, \"step\": 1913, \"value\": 0.07892746478319168}, {\"wallTime\": 1647706141.0882888, \"step\": 1918, \"value\": 0.08128704130649567}, {\"wallTime\": 1647706141.3400245, \"step\": 1924, \"value\": 0.08421183377504349}, {\"wallTime\": 1647706141.3821342, \"step\": 1925, \"value\": 0.08470943570137024}, {\"wallTime\": 1647706141.4222713, \"step\": 1926, \"value\": 0.08520996570587158}, {\"wallTime\": 1647706141.588719, \"step\": 1929, \"value\": 0.08672939240932465}, {\"wallTime\": 1647706141.7125666, \"step\": 1932, \"value\": 0.08827590942382812}, {\"wallTime\": 1647706141.8401754, \"step\": 1935, \"value\": 0.08985000848770142}, {\"wallTime\": 1647706141.878407, \"step\": 1936, \"value\": 0.09038092195987701}, {\"wallTime\": 1647706142.046919, \"step\": 1940, \"value\": 0.09253612160682678}, {\"wallTime\": 1647706142.089772, \"step\": 1941, \"value\": 0.09308290481567383}, {\"wallTime\": 1647706142.132967, \"step\": 1942, \"value\": 0.09363292157649994}, {\"wallTime\": 1647706142.2634501, \"step\": 1945, \"value\": 0.0953025370836258}, {\"wallTime\": 1647706142.3526323, \"step\": 1947, \"value\": 0.09643212705850601}, {\"wallTime\": 1647706142.4894981, \"step\": 1950, \"value\": 0.09815166145563126}, {\"wallTime\": 1647706142.5323365, \"step\": 1951, \"value\": 0.098731629550457}, {\"wallTime\": 1647706142.6190164, \"step\": 1953, \"value\": 0.09990185499191284}, {\"wallTime\": 1647706142.7509885, \"step\": 1956, \"value\": 0.10168325901031494}, {\"wallTime\": 1647706142.9177954, \"step\": 1960, \"value\": 0.10410797595977783}, {\"wallTime\": 1647706142.960358, \"step\": 1961, \"value\": 0.10472314059734344}, {\"wallTime\": 1647706143.0028737, \"step\": 1962, \"value\": 0.10534193366765976}, {\"wallTime\": 1647706143.0413322, \"step\": 1963, \"value\": 0.10596438497304916}, {\"wallTime\": 1647706143.0986798, \"step\": 1964, \"value\": 0.10659050941467285}, {\"wallTime\": 1647706143.18266, \"step\": 1966, \"value\": 0.10785388946533203}, {\"wallTime\": 1647706143.225757, \"step\": 1967, \"value\": 0.10849118232727051}, {\"wallTime\": 1647706143.2675266, \"step\": 1968, \"value\": 0.10913224518299103}, {\"wallTime\": 1647706143.3076928, \"step\": 1969, \"value\": 0.10977709293365479}, {\"wallTime\": 1647706143.5626755, \"step\": 1975, \"value\": 0.11372698843479156}, {\"wallTime\": 1647706143.6861074, \"step\": 1977, \"value\": 0.11507495492696762}, {\"wallTime\": 1647706143.825631, \"step\": 1979, \"value\": 0.11643889546394348}, {\"wallTime\": 1647706143.8664858, \"step\": 1980, \"value\": 0.11712691932916641}, {\"wallTime\": 1647706143.9097612, \"step\": 1981, \"value\": 0.11781900376081467}, {\"wallTime\": 1647706143.9455316, \"step\": 1982, \"value\": 0.11851517856121063}, {\"wallTime\": 1647706143.9927576, \"step\": 1983, \"value\": 0.1192154735326767}, {\"wallTime\": 1647706144.076011, \"step\": 1985, \"value\": 0.1206284910440445}, {\"wallTime\": 1647706144.1636078, \"step\": 1987, \"value\": 0.12205825746059418}, {\"wallTime\": 1647706144.2004874, \"step\": 1988, \"value\": 0.122779481112957}, {\"wallTime\": 1647706144.3386633, \"step\": 1991, \"value\": 0.12496883422136307}, {\"wallTime\": 1647706144.3799827, \"step\": 1992, \"value\": 0.1257072538137436}, {\"wallTime\": 1647706144.5130544, \"step\": 1995, \"value\": 0.1279488056898117}, {\"wallTime\": 1647706144.819002, \"step\": 2002, \"value\": 0.13333578407764435}, {\"wallTime\": 1647706145.5737538, \"step\": 2016, \"value\": 0.14479967951774597}, {\"wallTime\": 1647706145.6420565, \"step\": 2017, \"value\": 0.14565527439117432}, {\"wallTime\": 1647706145.9158847, \"step\": 2021, \"value\": 0.14912854135036469}, {\"wallTime\": 1647706146.0028064, \"step\": 2022, \"value\": 0.15000972151756287}, {\"wallTime\": 1647706146.057485, \"step\": 2023, \"value\": 0.1508961021900177}, {\"wallTime\": 1647706146.1688373, \"step\": 2025, \"value\": 0.15268462896347046}, {\"wallTime\": 1647706146.224814, \"step\": 2026, \"value\": 0.15358681976795197}, {\"wallTime\": 1647706146.3368967, \"step\": 2028, \"value\": 0.15540723502635956}, {\"wallTime\": 1647706146.5079837, \"step\": 2031, \"value\": 0.15817837417125702}, {\"wallTime\": 1647706146.556661, \"step\": 2032, \"value\": 0.15911303460597992}, {\"wallTime\": 1647706146.6525505, \"step\": 2034, \"value\": 0.16099894046783447}, {\"wallTime\": 1647706146.7119243, \"step\": 2035, \"value\": 0.1619502604007721}, {\"wallTime\": 1647706146.76292, \"step\": 2036, \"value\": 0.162907212972641}, {\"wallTime\": 1647706146.952966, \"step\": 2040, \"value\": 0.1667918562889099}, {\"wallTime\": 1647706147.0054865, \"step\": 2041, \"value\": 0.1677774041891098}, {\"wallTime\": 1647706147.1103115, \"step\": 2043, \"value\": 0.16976600885391235}, {\"wallTime\": 1647706147.1828396, \"step\": 2044, \"value\": 0.17076914012432098}, {\"wallTime\": 1647706147.3346689, \"step\": 2047, \"value\": 0.17381420731544495}, {\"wallTime\": 1647706147.3872876, \"step\": 2048, \"value\": 0.1748412549495697}, {\"wallTime\": 1647706147.4397895, \"step\": 2049, \"value\": 0.17587436735630035}, {\"wallTime\": 1647706147.695667, \"step\": 2054, \"value\": 0.1811322271823883}, {\"wallTime\": 1647706147.7455997, \"step\": 2055, \"value\": 0.1822025179862976}, {\"wallTime\": 1647706147.7972429, \"step\": 2056, \"value\": 0.1832791268825531}, {\"wallTime\": 1647706147.8460875, \"step\": 2057, \"value\": 0.18436209857463837}, {\"wallTime\": 1647706148.3386097, \"step\": 2067, \"value\": 0.1955500841140747}, {\"wallTime\": 1647706148.409107, \"step\": 2068, \"value\": 0.19670556485652924}, {\"wallTime\": 1647706148.5140226, \"step\": 2070, \"value\": 0.19903704524040222}, {\"wallTime\": 1647706148.7259753, \"step\": 2074, \"value\": 0.20378322899341583}, {\"wallTime\": 1647706148.93622, \"step\": 2078, \"value\": 0.2086426019668579}, {\"wallTime\": 1647706148.987496, \"step\": 2079, \"value\": 0.2098754346370697}, {\"wallTime\": 1647706149.2503085, \"step\": 2084, \"value\": 0.21614977717399597}, {\"wallTime\": 1647706149.3611312, \"step\": 2086, \"value\": 0.218711718916893}, {\"wallTime\": 1647706149.4012017, \"step\": 2087, \"value\": 0.22000406682491302}, {\"wallTime\": 1647706149.4956856, \"step\": 2089, \"value\": 0.2226116955280304}, {\"wallTime\": 1647706149.5686655, \"step\": 2090, \"value\": 0.2239270806312561}, {\"wallTime\": 1647706149.619446, \"step\": 2091, \"value\": 0.2252502292394638}, {\"wallTime\": 1647706149.8293793, \"step\": 2095, \"value\": 0.23062150180339813}, {\"wallTime\": 1647706149.8803623, \"step\": 2096, \"value\": 0.2319842129945755}, {\"wallTime\": 1647706149.9305995, \"step\": 2097, \"value\": 0.23335497081279755}, {\"wallTime\": 1647706149.9828165, \"step\": 2098, \"value\": 0.23473383486270905}, {\"wallTime\": 1647706150.0873284, \"step\": 2100, \"value\": 0.23751604557037354}, {\"wallTime\": 1647706150.2436912, \"step\": 2103, \"value\": 0.24175132811069489}, {\"wallTime\": 1647706150.3097286, \"step\": 2104, \"value\": 0.2431797981262207}, {\"wallTime\": 1647706150.365885, \"step\": 2105, \"value\": 0.24461671710014343}, {\"wallTime\": 1647706150.418668, \"step\": 2106, \"value\": 0.24606212973594666}, {\"wallTime\": 1647706150.5711195, \"step\": 2109, \"value\": 0.2504498064517975}, {\"wallTime\": 1647706150.617843, \"step\": 2110, \"value\": 0.2519296705722809}, {\"wallTime\": 1647706150.8056314, \"step\": 2114, \"value\": 0.25793713331222534}, {\"wallTime\": 1647706150.880093, \"step\": 2115, \"value\": 0.25946125388145447}, {\"wallTime\": 1647706151.0887353, \"step\": 2119, \"value\": 0.2656483054161072}, {\"wallTime\": 1647706151.1409605, \"step\": 2120, \"value\": 0.2672179639339447}, {\"wallTime\": 1647706151.242567, \"step\": 2122, \"value\": 0.270385205745697}, {\"wallTime\": 1647706151.2913342, \"step\": 2123, \"value\": 0.271982878446579}, {\"wallTime\": 1647706151.342737, \"step\": 2124, \"value\": 0.27358999848365784}, {\"wallTime\": 1647706151.4465034, \"step\": 2126, \"value\": 0.2768327593803406}, {\"wallTime\": 1647706151.5017903, \"step\": 2127, \"value\": 0.278468519449234}, {\"wallTime\": 1647706151.8566954, \"step\": 2134, \"value\": 0.29019275307655334}, {\"wallTime\": 1647706151.9012063, \"step\": 2135, \"value\": 0.2919074594974518}, {\"wallTime\": 1647706151.9493911, \"step\": 2136, \"value\": 0.29363229870796204}, {\"wallTime\": 1647706152.105142, \"step\": 2139, \"value\": 0.29886823892593384}, {\"wallTime\": 1647706152.3363802, \"step\": 2143, \"value\": 0.3059949576854706}, {\"wallTime\": 1647706152.653651, \"step\": 2149, \"value\": 0.3170049786567688}, {\"wallTime\": 1647706152.7083902, \"step\": 2150, \"value\": 0.3188781440258026}, {\"wallTime\": 1647706152.9123712, \"step\": 2154, \"value\": 0.32648202776908875}, {\"wallTime\": 1647706152.9610746, \"step\": 2155, \"value\": 0.32841116189956665}, {\"wallTime\": 1647706153.1651177, \"step\": 2159, \"value\": 0.3362423777580261}, {\"wallTime\": 1647706153.2177293, \"step\": 2160, \"value\": 0.3382291793823242}, {\"wallTime\": 1647706153.2715158, \"step\": 2161, \"value\": 0.34022775292396545}, {\"wallTime\": 1647706153.324897, \"step\": 2162, \"value\": 0.34223809838294983}, {\"wallTime\": 1647706153.7291317, \"step\": 2169, \"value\": 0.35664719343185425}, {\"wallTime\": 1647706153.948826, \"step\": 2173, \"value\": 0.36515170335769653}, {\"wallTime\": 1647706154.047967, \"step\": 2175, \"value\": 0.3694797158241272}, {\"wallTime\": 1647706154.1029038, \"step\": 2176, \"value\": 0.3716629445552826}, {\"wallTime\": 1647706154.4579759, \"step\": 2183, \"value\": 0.3873108923435211}, {\"wallTime\": 1647706154.5697896, \"step\": 2185, \"value\": 0.39190155267715454}, {\"wallTime\": 1647706154.675291, \"step\": 2187, \"value\": 0.3965466022491455}, {\"wallTime\": 1647706154.7805743, \"step\": 2189, \"value\": 0.40124672651290894}, {\"wallTime\": 1647706155.049471, \"step\": 2194, \"value\": 0.4132422208786011}, {\"wallTime\": 1647706155.312164, \"step\": 2199, \"value\": 0.42559632658958435}, {\"wallTime\": 1647706155.4392774, \"step\": 2201, \"value\": 0.4306407570838928}, {\"wallTime\": 1647706155.4881022, \"step\": 2202, \"value\": 0.4331853687763214}, {\"wallTime\": 1647706155.5387373, \"step\": 2203, \"value\": 0.4357450008392334}, {\"wallTime\": 1647706155.6895723, \"step\": 2206, \"value\": 0.44351500272750854}, {\"wallTime\": 1647706155.850333, \"step\": 2209, \"value\": 0.4514235556125641}, {\"wallTime\": 1647706155.9508314, \"step\": 2211, \"value\": 0.45677411556243896}, {\"wallTime\": 1647706156.0027351, \"step\": 2212, \"value\": 0.4594731330871582}, {\"wallTime\": 1647706156.1109698, \"step\": 2214, \"value\": 0.4649191200733185}, {\"wallTime\": 1647706156.1665103, \"step\": 2215, \"value\": 0.46766626834869385}, {\"wallTime\": 1647706156.219828, \"step\": 2216, \"value\": 0.4704296290874481}, {\"wallTime\": 1647706156.5637143, \"step\": 2221, \"value\": 0.4844933748245239}, {\"wallTime\": 1647706156.6147256, \"step\": 2222, \"value\": 0.48735618591308594}, {\"wallTime\": 1647706156.6685982, \"step\": 2223, \"value\": 0.4902358949184418}, {\"wallTime\": 1647706156.7885487, \"step\": 2225, \"value\": 0.4960464835166931}, {\"wallTime\": 1647706156.908843, \"step\": 2227, \"value\": 0.5019259452819824}, {\"wallTime\": 1647706157.2357275, \"step\": 2233, \"value\": 0.5199857950210571}, {\"wallTime\": 1647706157.4031947, \"step\": 2236, \"value\": 0.5292579531669617}, {\"wallTime\": 1647706157.585811, \"step\": 2239, \"value\": 0.5386953949928284}, {\"wallTime\": 1647706157.7463765, \"step\": 2242, \"value\": 0.5483012199401855}, {\"wallTime\": 1647706157.8551762, \"step\": 2244, \"value\": 0.5548000335693359}, {\"wallTime\": 1647706158.0471668, \"step\": 2247, \"value\": 0.5646929740905762}, {\"wallTime\": 1647706158.44008, \"step\": 2254, \"value\": 0.5884679555892944}, {\"wallTime\": 1647706158.5524669, \"step\": 2257, \"value\": 0.5989612340927124}, {\"wallTime\": 1647706158.616874, \"step\": 2258, \"value\": 0.6025004386901855}, {\"wallTime\": 1647706158.8508515, \"step\": 2264, \"value\": 0.6241790056228638}, {\"wallTime\": 1647706158.9300916, \"step\": 2266, \"value\": 0.63157719373703}, {\"wallTime\": 1647706158.9939725, \"step\": 2267, \"value\": 0.635309100151062}, {\"wallTime\": 1647706159.4421077, \"step\": 2274, \"value\": 0.6620572209358215}, {\"wallTime\": 1647706159.5673168, \"step\": 2276, \"value\": 0.669904351234436}, {\"wallTime\": 1647706159.7988896, \"step\": 2280, \"value\": 0.6858787536621094}, {\"wallTime\": 1647706159.8550813, \"step\": 2281, \"value\": 0.6899315118789673}, {\"wallTime\": 1647706160.0495095, \"step\": 2284, \"value\": 0.7022340297698975}, {\"wallTime\": 1647706160.1056051, \"step\": 2285, \"value\": 0.706383466720581}, {\"wallTime\": 1647706160.478946, \"step\": 2291, \"value\": 0.731799840927124}, {\"wallTime\": 1647706160.5676796, \"step\": 2292, \"value\": 0.7361239790916443}, {\"wallTime\": 1647706160.660177, \"step\": 2293, \"value\": 0.7404736280441284}, {\"wallTime\": 1647706161.1260219, \"step\": 2300, \"value\": 0.7716494202613831}, {\"wallTime\": 1647706161.3981795, \"step\": 2305, \"value\": 0.794718325138092}, {\"wallTime\": 1647706161.445094, \"step\": 2306, \"value\": 0.7994142174720764}, {\"wallTime\": 1647706161.4954414, \"step\": 2307, \"value\": 0.8041378259658813}, {\"wallTime\": 1647706161.603936, \"step\": 2309, \"value\": 0.813668966293335}, {\"wallTime\": 1647706161.738519, \"step\": 2311, \"value\": 0.8233131170272827}, {\"wallTime\": 1647706162.0044565, \"step\": 2315, \"value\": 0.8429456353187561}, {\"wallTime\": 1647706162.0450659, \"step\": 2316, \"value\": 0.8479264974594116}, {\"wallTime\": 1647706162.1708503, \"step\": 2319, \"value\": 0.8630463480949402}, {\"wallTime\": 1647706162.3834531, \"step\": 2324, \"value\": 0.8888475894927979}, {\"wallTime\": 1647706162.634173, \"step\": 2330, \"value\": 0.9208292365074158}, {\"wallTime\": 1647706162.7169487, \"step\": 2332, \"value\": 0.9317435026168823}, {\"wallTime\": 1647706162.8454707, \"step\": 2335, \"value\": 0.9483579397201538}, {\"wallTime\": 1647706163.0732188, \"step\": 2340, \"value\": 0.9767096042633057}, {\"wallTime\": 1647706163.2009523, \"step\": 2342, \"value\": 0.9882861971855164}, {\"wallTime\": 1647706163.2152386, \"step\": 2343, \"value\": 0.9941258430480957}, {\"wallTime\": 1647706163.2307487, \"step\": 2344, \"value\": 1.0}], \"tb_logs/exp002043-SGD\": [{\"wallTime\": 1647706694.5942476, \"step\": 3, \"value\": 0.00010198323434451595}, {\"wallTime\": 1647706694.6674068, \"step\": 4, \"value\": 0.00010248515900457278}, {\"wallTime\": 1647706695.2219903, \"step\": 10, \"value\": 0.0001055490065482445}, {\"wallTime\": 1647706695.5162017, \"step\": 14, \"value\": 0.00010764229227788746}, {\"wallTime\": 1647706695.5918055, \"step\": 15, \"value\": 0.00010817206930369139}, {\"wallTime\": 1647706695.8455641, \"step\": 18, \"value\": 0.00010977709462167695}, {\"wallTime\": 1647706695.9344573, \"step\": 19, \"value\": 0.00011031737813027576}, {\"wallTime\": 1647706696.0169346, \"step\": 20, \"value\": 0.00011086031736340374}, {\"wallTime\": 1647706696.1678658, \"step\": 22, \"value\": 0.00011195422848686576}, {\"wallTime\": 1647706696.2462144, \"step\": 23, \"value\": 0.00011250522948103026}, {\"wallTime\": 1647706697.4130473, \"step\": 26, \"value\": 0.00011417454516049474}, {\"wallTime\": 1647706697.4274452, \"step\": 27, \"value\": 0.00011473647464299574}, {\"wallTime\": 1647706697.8074486, \"step\": 33, \"value\": 0.00011816657934105024}, {\"wallTime\": 1647706698.110339, \"step\": 36, \"value\": 0.00011991990322712809}, {\"wallTime\": 1647706698.274191, \"step\": 38, \"value\": 0.00012110320676583797}, {\"wallTime\": 1647706698.4255223, \"step\": 40, \"value\": 0.00012229819549247622}, {\"wallTime\": 1647706698.890324, \"step\": 47, \"value\": 0.0001265742612304166}, {\"wallTime\": 1647706698.949426, \"step\": 48, \"value\": 0.00012719721416942775}, {\"wallTime\": 1647706699.0099576, \"step\": 49, \"value\": 0.0001278232375625521}, {\"wallTime\": 1647706699.133785, \"step\": 51, \"value\": 0.0001290845248149708}, {\"wallTime\": 1647706699.359302, \"step\": 54, \"value\": 0.00013099984789732844}, {\"wallTime\": 1647706699.5633774, \"step\": 57, \"value\": 0.00013294357631821185}, {\"wallTime\": 1647706699.786922, \"step\": 60, \"value\": 0.00013491616118699312}, {\"wallTime\": 1647706699.850467, \"step\": 61, \"value\": 0.0001355801650788635}, {\"wallTime\": 1647706699.9279256, \"step\": 62, \"value\": 0.00013624744315166026}, {\"wallTime\": 1647706699.9731617, \"step\": 63, \"value\": 0.0001369179954053834}, {\"wallTime\": 1647706700.0894375, \"step\": 65, \"value\": 0.00013826903887093067}, {\"wallTime\": 1647706700.1484501, \"step\": 66, \"value\": 0.00013894954463467002}, {\"wallTime\": 1647706700.2254152, \"step\": 67, \"value\": 0.00013963341189082712}, {\"wallTime\": 1647706700.277109, \"step\": 68, \"value\": 0.00014032062608748674}, {\"wallTime\": 1647706700.379148, \"step\": 70, \"value\": 0.00014170524082146585}, {\"wallTime\": 1647706700.4242146, \"step\": 71, \"value\": 0.0001424026704626158}, {\"wallTime\": 1647706700.7840762, \"step\": 77, \"value\": 0.0001466598769184202}, {\"wallTime\": 1647706700.8991578, \"step\": 79, \"value\": 0.00014810703578405082}, {\"wallTime\": 1647706700.9702377, \"step\": 80, \"value\": 0.00014883597032167017}, {\"wallTime\": 1647706701.1634707, \"step\": 82, \"value\": 0.00015030460781417787}, {\"wallTime\": 1647706701.3997524, \"step\": 85, \"value\": 0.00015253477613441646}, {\"wallTime\": 1647706701.7002401, \"step\": 89, \"value\": 0.0001555599010316655}, {\"wallTime\": 1647706701.772265, \"step\": 90, \"value\": 0.00015632550639566034}, {\"wallTime\": 1647706702.3647108, \"step\": 99, \"value\": 0.00016338779823854566}, {\"wallTime\": 1647706702.43305, \"step\": 100, \"value\": 0.0001641919370740652}, {\"wallTime\": 1647706702.6684546, \"step\": 103, \"value\": 0.00016662816051393747}, {\"wallTime\": 1647706702.8337018, \"step\": 106, \"value\": 0.000169100530911237}, {\"wallTime\": 1647706702.8903224, \"step\": 107, \"value\": 0.00016993278404697776}, {\"wallTime\": 1647706703.0170743, \"step\": 109, \"value\": 0.00017160960123874247}, {\"wallTime\": 1647706703.5079052, \"step\": 116, \"value\": 0.0001776098069967702}, {\"wallTime\": 1647706703.9574325, \"step\": 121, \"value\": 0.00018202369392383844}, {\"wallTime\": 1647706704.1763206, \"step\": 125, \"value\": 0.00018563366029411554}, {\"wallTime\": 1647706704.2406332, \"step\": 126, \"value\": 0.0001865472731878981}, {\"wallTime\": 1647706704.3586395, \"step\": 128, \"value\": 0.0001883880322566256}, {\"wallTime\": 1647706704.4786532, \"step\": 130, \"value\": 0.0001902469521155581}, {\"wallTime\": 1647706704.5273206, \"step\": 131, \"value\": 0.00019118328054901212}, {\"wallTime\": 1647706704.8473482, \"step\": 136, \"value\": 0.0001959344808710739}, {\"wallTime\": 1647706704.912309, \"step\": 137, \"value\": 0.00019689880718942732}, {\"wallTime\": 1647706705.3367417, \"step\": 144, \"value\": 0.0002037832309724763}, {\"wallTime\": 1647706705.4501042, \"step\": 146, \"value\": 0.00020579405827447772}, {\"wallTime\": 1647706705.5290048, \"step\": 147, \"value\": 0.0002068069006782025}, {\"wallTime\": 1647706705.7845132, \"step\": 150, \"value\": 0.00020987543393857777}, {\"wallTime\": 1647706706.2574615, \"step\": 157, \"value\": 0.00021721358643844724}, {\"wallTime\": 1647706706.3967664, \"step\": 159, \"value\": 0.0002193569380324334}, {\"wallTime\": 1647706706.4622455, \"step\": 160, \"value\": 0.00022043654462322593}, {\"wallTime\": 1647706706.5487998, \"step\": 162, \"value\": 0.00022261169215198606}, {\"wallTime\": 1647706706.64358, \"step\": 164, \"value\": 0.00022480831830762327}, {\"wallTime\": 1647706706.9333081, \"step\": 170, \"value\": 0.0002315290767000988}, {\"wallTime\": 1647706707.0033016, \"step\": 171, \"value\": 0.0002326685789739713}, {\"wallTime\": 1647706707.0746036, \"step\": 172, \"value\": 0.00023381368373520672}, {\"wallTime\": 1647706707.2949305, \"step\": 175, \"value\": 0.00023728294763714075}, {\"wallTime\": 1647706707.350144, \"step\": 176, \"value\": 0.00023845076793804765}, {\"wallTime\": 1647706707.4607704, \"step\": 177, \"value\": 0.00023962433624546975}, {\"wallTime\": 1647706707.538825, \"step\": 178, \"value\": 0.0002408036816632375}, {\"wallTime\": 1647706707.719392, \"step\": 180, \"value\": 0.00024317980569321662}, {\"wallTime\": 1647706707.8038146, \"step\": 181, \"value\": 0.0002443766570650041}, {\"wallTime\": 1647706708.0165908, \"step\": 184, \"value\": 0.00024800264509394765}, {\"wallTime\": 1647706708.0831907, \"step\": 185, \"value\": 0.00024922320153564215}, {\"wallTime\": 1647706708.146301, \"step\": 186, \"value\": 0.0002504497824702412}, {\"wallTime\": 1647706708.4033062, \"step\": 190, \"value\": 0.0002554168167989701}, {\"wallTime\": 1647706708.458112, \"step\": 191, \"value\": 0.00025667386944405735}, {\"wallTime\": 1647706708.5247676, \"step\": 192, \"value\": 0.00025793712120503187}, {\"wallTime\": 1647706708.7298248, \"step\": 195, \"value\": 0.00026176433311775327}, {\"wallTime\": 1647706709.0499904, \"step\": 199, \"value\": 0.00026695572887547314}, {\"wallTime\": 1647706709.125412, \"step\": 200, \"value\": 0.00026826959219761193}, {\"wallTime\": 1647706709.2632706, \"step\": 202, \"value\": 0.00027091673109680414}, {\"wallTime\": 1647706709.3312242, \"step\": 203, \"value\": 0.00027225009398534894}, {\"wallTime\": 1647706709.4045575, \"step\": 204, \"value\": 0.0002735900052357465}, {\"wallTime\": 1647706709.472506, \"step\": 205, \"value\": 0.0002749364939518273}, {\"wallTime\": 1647706709.6010609, \"step\": 207, \"value\": 0.0002776494366116822}, {\"wallTime\": 1647706709.736351, \"step\": 209, \"value\": 0.00028038915479555726}, {\"wallTime\": 1647706709.860868, \"step\": 211, \"value\": 0.0002831558813340962}, {\"wallTime\": 1647706709.9743721, \"step\": 213, \"value\": 0.00028594990726560354}, {\"wallTime\": 1647706710.091687, \"step\": 215, \"value\": 0.0002887715236283839}, {\"wallTime\": 1647706710.159415, \"step\": 216, \"value\": 0.00029019275098107755}, {\"wallTime\": 1647706710.3565125, \"step\": 219, \"value\": 0.0002944985462818295}, {\"wallTime\": 1647706710.433227, \"step\": 220, \"value\": 0.00029594797524623573}, {\"wallTime\": 1647706710.501765, \"step\": 221, \"value\": 0.0002974045055452734}, {\"wallTime\": 1647706710.5532534, \"step\": 222, \"value\": 0.00029886822449043393}, {\"wallTime\": 1647706710.666907, \"step\": 224, \"value\": 0.00030181731563061476}, {\"wallTime\": 1647706711.0498176, \"step\": 229, \"value\": 0.00030931795481592417}, {\"wallTime\": 1647706711.5411897, \"step\": 237, \"value\": 0.000321708619594574}, {\"wallTime\": 1647706711.5911908, \"step\": 238, \"value\": 0.00032329195528291166}, {\"wallTime\": 1647706711.6527095, \"step\": 239, \"value\": 0.0003248830616939813}, {\"wallTime\": 1647706711.8472552, \"step\": 241, \"value\": 0.0003280888486187905}, {\"wallTime\": 1647706711.9279177, \"step\": 242, \"value\": 0.000329703587340191}, {\"wallTime\": 1647706712.0905247, \"step\": 244, \"value\": 0.0003329569299239665}, {\"wallTime\": 1647706712.1658227, \"step\": 245, \"value\": 0.0003345956210978329}, {\"wallTime\": 1647706712.2296538, \"step\": 246, \"value\": 0.0003362423740327358}, {\"wallTime\": 1647706712.2873654, \"step\": 247, \"value\": 0.00033789724693633616}, {\"wallTime\": 1647706712.6004984, \"step\": 252, \"value\": 0.0003462945169303566}, {\"wallTime\": 1647706712.6661189, \"step\": 253, \"value\": 0.0003479988663457334}, {\"wallTime\": 1647706712.7347236, \"step\": 254, \"value\": 0.0003497115976642817}, {\"wallTime\": 1647706712.948188, \"step\": 258, \"value\": 0.00035664718598127365}, {\"wallTime\": 1647706713.0072618, \"step\": 259, \"value\": 0.0003584024670999497}, {\"wallTime\": 1647706713.0533032, \"step\": 260, \"value\": 0.00036016639205627143}, {\"wallTime\": 1647706713.1658587, \"step\": 262, \"value\": 0.00036372034810483456}, {\"wallTime\": 1647706713.6679475, \"step\": 270, \"value\": 0.00037829024950042367}, {\"wallTime\": 1647706713.7412014, \"step\": 271, \"value\": 0.00038015207974240184}, {\"wallTime\": 1647706713.9389427, \"step\": 274, \"value\": 0.0003857926349155605}, {\"wallTime\": 1647706714.0954115, \"step\": 276, \"value\": 0.0003895994450431317}, {\"wallTime\": 1647706714.2095013, \"step\": 278, \"value\": 0.0003934438282158226}, {\"wallTime\": 1647706714.3320696, \"step\": 280, \"value\": 0.00039732613367959857}, {\"wallTime\": 1647706714.487844, \"step\": 282, \"value\": 0.0004012467397842556}, {\"wallTime\": 1647706714.5386865, \"step\": 283, \"value\": 0.0004032215219922364}, {\"wallTime\": 1647706714.6526864, \"step\": 285, \"value\": 0.00040720030665397644}, {\"wallTime\": 1647706714.77563, \"step\": 287, \"value\": 0.00041121835238300264}, {\"wallTime\": 1647706714.8571284, \"step\": 288, \"value\": 0.0004132422327529639}, {\"wallTime\": 1647706715.0018425, \"step\": 290, \"value\": 0.0004173198831267655}, {\"wallTime\": 1647706715.3332827, \"step\": 295, \"value\": 0.0004276909457985312}, {\"wallTime\": 1647706715.3916361, \"step\": 296, \"value\": 0.00042979588033631444}, {\"wallTime\": 1647706715.4571717, \"step\": 297, \"value\": 0.0004319111758377403}, {\"wallTime\": 1647706715.530416, \"step\": 298, \"value\": 0.0004340368905104697}, {\"wallTime\": 1647706716.1308722, \"step\": 306, \"value\": 0.00045142354792915285}, {\"wallTime\": 1647706716.280939, \"step\": 308, \"value\": 0.0004558779764920473}, {\"wallTime\": 1647706716.3460755, \"step\": 309, \"value\": 0.0004581216489896178}, {\"wallTime\": 1647706716.573426, \"step\": 312, \"value\": 0.0004649191105272621}, {\"wallTime\": 1647706716.8123055, \"step\": 316, \"value\": 0.0004741395532619208}, {\"wallTime\": 1647706716.9495208, \"step\": 318, \"value\": 0.0004788181104231626}, {\"wallTime\": 1647706717.0243104, \"step\": 319, \"value\": 0.00048117467667907476}, {\"wallTime\": 1647706717.221247, \"step\": 322, \"value\": 0.000488314195536077}, {\"wallTime\": 1647706717.3354797, \"step\": 324, \"value\": 0.0004931326257064939}, {\"wallTime\": 1647706717.6472223, \"step\": 329, \"value\": 0.0005053877830505371}, {\"wallTime\": 1647706717.816784, \"step\": 331, \"value\": 0.0005103746661916375}, {\"wallTime\": 1647706717.9219804, \"step\": 332, \"value\": 0.0005128865595906973}, {\"wallTime\": 1647706718.2794635, \"step\": 337, \"value\": 0.0005256326403468847}, {\"wallTime\": 1647706718.3448825, \"step\": 338, \"value\": 0.000528219563420862}, {\"wallTime\": 1647706718.4800313, \"step\": 340, \"value\": 0.0005334317684173584}, {\"wallTime\": 1647706718.6777446, \"step\": 343, \"value\": 0.000541346671525389}, {\"wallTime\": 1647706718.8029065, \"step\": 345, \"value\": 0.0005466883885674179}, {\"wallTime\": 1647706718.8623633, \"step\": 346, \"value\": 0.0005493790376931429}, {\"wallTime\": 1647706719.1382632, \"step\": 350, \"value\": 0.0005602745222859085}, {\"wallTime\": 1647706719.278548, \"step\": 352, \"value\": 0.0005658030277118087}, {\"wallTime\": 1647706719.3419878, \"step\": 353, \"value\": 0.000568587682209909}, {\"wallTime\": 1647706719.4063826, \"step\": 354, \"value\": 0.0005713860737159848}, {\"wallTime\": 1647706719.638659, \"step\": 358, \"value\": 0.0005827179993502796}, {\"wallTime\": 1647706719.8359816, \"step\": 362, \"value\": 0.0005942746647633612}, {\"wallTime\": 1647706719.895331, \"step\": 363, \"value\": 0.0005971994833089411}, {\"wallTime\": 1647706719.9497538, \"step\": 364, \"value\": 0.0006001386791467667}, {\"wallTime\": 1647706720.0116792, \"step\": 365, \"value\": 0.0006030923104844987}, {\"wallTime\": 1647706720.0878856, \"step\": 366, \"value\": 0.0006060604937374592}, {\"wallTime\": 1647706720.1751354, \"step\": 367, \"value\": 0.0006090433453209698}, {\"wallTime\": 1647706720.6596656, \"step\": 374, \"value\": 0.0006303380941972136}, {\"wallTime\": 1647706720.8950963, \"step\": 377, \"value\": 0.0006396908429451287}, {\"wallTime\": 1647706720.973518, \"step\": 378, \"value\": 0.0006428391789086163}, {\"wallTime\": 1647706721.457172, \"step\": 386, \"value\": 0.0006685900734737515}, {\"wallTime\": 1647706721.7457073, \"step\": 390, \"value\": 0.0006818497786298394}, {\"wallTime\": 1647706721.8119693, \"step\": 391, \"value\": 0.0006852055666968226}, {\"wallTime\": 1647706721.8801975, \"step\": 392, \"value\": 0.0006885779439471662}, {\"wallTime\": 1647706721.9447742, \"step\": 393, \"value\": 0.0006919668521732092}, {\"wallTime\": 1647706722.0139291, \"step\": 394, \"value\": 0.0006953724659979343}, {\"wallTime\": 1647706722.2079427, \"step\": 397, \"value\": 0.0007056901813484728}, {\"wallTime\": 1647706722.5063655, \"step\": 402, \"value\": 0.0007232276839204133}, {\"wallTime\": 1647706722.6187143, \"step\": 404, \"value\": 0.0007303641177713871}, {\"wallTime\": 1647706722.8824916, \"step\": 408, \"value\": 0.0007448489777743816}, {\"wallTime\": 1647706722.9539764, \"step\": 409, \"value\": 0.0007485148380510509}, {\"wallTime\": 1647706723.1659997, \"step\": 413, \"value\": 0.0007633596542291343}, {\"wallTime\": 1647706723.2268622, \"step\": 414, \"value\": 0.0007671166677027941}, {\"wallTime\": 1647706723.2876832, \"step\": 415, \"value\": 0.0007708921330049634}, {\"wallTime\": 1647706723.4986477, \"step\": 418, \"value\": 0.0007823303458280861}, {\"wallTime\": 1647706723.67319, \"step\": 421, \"value\": 0.0007939383503980935}, {\"wallTime\": 1647706723.7279944, \"step\": 422, \"value\": 0.0007978458306752145}, {\"wallTime\": 1647706723.8973858, \"step\": 425, \"value\": 0.0008096839883364737}, {\"wallTime\": 1647706723.9532077, \"step\": 426, \"value\": 0.0008136690012179315}, {\"wallTime\": 1647706724.186776, \"step\": 430, \"value\": 0.000829805969260633}, {\"wallTime\": 1647706724.2429402, \"step\": 431, \"value\": 0.0008338899351656437}, {\"wallTime\": 1647706724.4431913, \"step\": 435, \"value\": 0.000850427953992039}, {\"wallTime\": 1647706724.4883804, \"step\": 436, \"value\": 0.0008546134340576828}, {\"wallTime\": 1647706724.5335464, \"step\": 437, \"value\": 0.0008588195196352899}, {\"wallTime\": 1647706724.6336603, \"step\": 439, \"value\": 0.0008672939147800207}, {\"wallTime\": 1647706724.6901145, \"step\": 440, \"value\": 0.000871562457177788}, {\"wallTime\": 1647706724.7489078, \"step\": 441, \"value\": 0.0008758519543334842}, {\"wallTime\": 1647706724.8606038, \"step\": 443, \"value\": 0.0008844943949952722}, {\"wallTime\": 1647706724.9159765, \"step\": 444, \"value\": 0.0008888475713320076}, {\"wallTime\": 1647706724.9689023, \"step\": 445, \"value\": 0.0008932221680879593}, {\"wallTime\": 1647706725.0246494, \"step\": 446, \"value\": 0.000897618243470788}, {\"wallTime\": 1647706725.2451127, \"step\": 450, \"value\": 0.0009154201252385974}, {\"wallTime\": 1647706725.2975464, \"step\": 451, \"value\": 0.0009199255146086216}, {\"wallTime\": 1647706725.356156, \"step\": 452, \"value\": 0.0009244530810974538}, {\"wallTime\": 1647706725.410774, \"step\": 453, \"value\": 0.000929002882912755}, {\"wallTime\": 1647706725.4665368, \"step\": 454, \"value\": 0.0009335750946775079}, {\"wallTime\": 1647706725.5736122, \"step\": 456, \"value\": 0.0009427871555089951}, {\"wallTime\": 1647706725.6788447, \"step\": 458, \"value\": 0.0009520900784991682}, {\"wallTime\": 1647706725.785981, \"step\": 460, \"value\": 0.0009614847949706018}, {\"wallTime\": 1647706725.8490949, \"step\": 461, \"value\": 0.000966216903179884}, {\"wallTime\": 1647706726.0675056, \"step\": 465, \"value\": 0.000985379214398563}, {\"wallTime\": 1647706726.1663184, \"step\": 466, \"value\": 0.0009902289602905512}, {\"wallTime\": 1647706726.2351227, \"step\": 468, \"value\": 0.0010000000474974513}, {\"wallTime\": 1647706730.6994674, \"step\": 470, \"value\": 0.0010098675265908241}, {\"wallTime\": 1647706730.9125679, \"step\": 474, \"value\": 0.0010298955021426082}, {\"wallTime\": 1647706730.9458437, \"step\": 475, \"value\": 0.0010349643416702747}, {\"wallTime\": 1647706731.07341, \"step\": 478, \"value\": 0.0010503208031877875}, {\"wallTime\": 1647706731.1318848, \"step\": 479, \"value\": 0.0010554901091381907}, {\"wallTime\": 1647706731.1888108, \"step\": 480, \"value\": 0.0010606847936287522}, {\"wallTime\": 1647706731.2412388, \"step\": 481, \"value\": 0.0010659050894901156}, {\"wallTime\": 1647706731.3448026, \"step\": 483, \"value\": 0.0010764229809865355}, {\"wallTime\": 1647706731.3973193, \"step\": 484, \"value\": 0.0010817206930369139}, {\"wallTime\": 1647706731.5481782, \"step\": 487, \"value\": 0.0010977709898725152}, {\"wallTime\": 1647706731.6146286, \"step\": 488, \"value\": 0.0011031737085431814}, {\"wallTime\": 1647706731.680387, \"step\": 489, \"value\": 0.0011086032027378678}, {\"wallTime\": 1647706731.8031719, \"step\": 491, \"value\": 0.0011195422848686576}, {\"wallTime\": 1647706731.986884, \"step\": 494, \"value\": 0.0011361537035554647}, {\"wallTime\": 1647706732.21521, \"step\": 498, \"value\": 0.0011586863547563553}, {\"wallTime\": 1647706732.4876535, \"step\": 502, \"value\": 0.0011816658079624176}, {\"wallTime\": 1647706732.56629, \"step\": 503, \"value\": 0.0011874815681949258}, {\"wallTime\": 1647706732.8001347, \"step\": 506, \"value\": 0.0012051010271534324}, {\"wallTime\": 1647706733.0185053, \"step\": 509, \"value\": 0.0012229819549247622}, {\"wallTime\": 1647706733.1119845, \"step\": 510, \"value\": 0.0012290009763091803}, {\"wallTime\": 1647706733.2078037, \"step\": 511, \"value\": 0.0012350496836006641}, {\"wallTime\": 1647706733.2990494, \"step\": 512, \"value\": 0.0012411281932145357}, {\"wallTime\": 1647706733.359788, \"step\": 513, \"value\": 0.001247236505150795}, {\"wallTime\": 1647706733.4097848, \"step\": 514, \"value\": 0.0012533749686554074}, {\"wallTime\": 1647706733.590938, \"step\": 517, \"value\": 0.0012719721999019384}, {\"wallTime\": 1647706733.6392806, \"step\": 518, \"value\": 0.00127823231741786}, {\"wallTime\": 1647706733.6993275, \"step\": 519, \"value\": 0.0012845234014093876}, {\"wallTime\": 1647706733.7590222, \"step\": 520, \"value\": 0.0012908453354611993}, {\"wallTime\": 1647706733.9294324, \"step\": 523, \"value\": 0.001309998449869454}, {\"wallTime\": 1647706734.2981389, \"step\": 530, \"value\": 0.001355801708996296}, {\"wallTime\": 1647706734.6316414, \"step\": 533, \"value\": 0.0013759186258539557}, {\"wallTime\": 1647706734.7305427, \"step\": 534, \"value\": 0.0013826903887093067}, {\"wallTime\": 1647706734.8977394, \"step\": 536, \"value\": 0.0013963340315967798}, {\"wallTime\": 1647706734.9622707, \"step\": 537, \"value\": 0.0014032063772901893}, {\"wallTime\": 1647706735.0210714, \"step\": 538, \"value\": 0.0014101123670116067}, {\"wallTime\": 1647706735.085337, \"step\": 539, \"value\": 0.0014170524664223194}, {\"wallTime\": 1647706735.1485362, \"step\": 540, \"value\": 0.0014240266755223274}, {\"wallTime\": 1647706735.290148, \"step\": 542, \"value\": 0.0014380782376974821}, {\"wallTime\": 1647706735.4084074, \"step\": 544, \"value\": 0.0014522684505209327}, {\"wallTime\": 1647706735.544523, \"step\": 546, \"value\": 0.001466598710976541}, {\"wallTime\": 1647706735.6177654, \"step\": 547, \"value\": 0.0014738168101757765}, {\"wallTime\": 1647706735.7963092, \"step\": 550, \"value\": 0.001495684846304357}, {\"wallTime\": 1647706735.9207003, \"step\": 552, \"value\": 0.0015104435151442885}, {\"wallTime\": 1647706736.0806167, \"step\": 555, \"value\": 0.0015328549779951572}, {\"wallTime\": 1647706736.1492887, \"step\": 556, \"value\": 0.00154039915651083}, {\"wallTime\": 1647706736.5456316, \"step\": 562, \"value\": 0.0015864501474425197}, {\"wallTime\": 1647706736.6079805, \"step\": 563, \"value\": 0.0015942581230774522}, {\"wallTime\": 1647706736.6644135, \"step\": 564, \"value\": 0.0016021045157685876}, {\"wallTime\": 1647706736.9276116, \"step\": 568, \"value\": 0.0016338779823854566}, {\"wallTime\": 1647706737.1233377, \"step\": 571, \"value\": 0.0016581208910793066}, {\"wallTime\": 1647706737.2708821, \"step\": 573, \"value\": 0.0016744824824854732}, {\"wallTime\": 1647706737.4849675, \"step\": 576, \"value\": 0.0016993278404697776}, {\"wallTime\": 1647706737.7738388, \"step\": 580, \"value\": 0.001733029610477388}, {\"wallTime\": 1647706738.0884135, \"step\": 584, \"value\": 0.0017673996044322848}, {\"wallTime\": 1647706738.1413777, \"step\": 585, \"value\": 0.0017760981572791934}, {\"wallTime\": 1647706738.203242, \"step\": 586, \"value\": 0.0017848394345492125}, {\"wallTime\": 1647706738.3254085, \"step\": 588, \"value\": 0.0018024513265118003}, {\"wallTime\": 1647706738.5061688, \"step\": 590, \"value\": 0.0018202370265498757}, {\"wallTime\": 1647706738.550365, \"step\": 591, \"value\": 0.0018291955348104239}, {\"wallTime\": 1647706738.6062539, \"step\": 592, \"value\": 0.0018381981644779444}, {\"wallTime\": 1647706738.6996112, \"step\": 594, \"value\": 0.0018563366029411554}, {\"wallTime\": 1647706738.808425, \"step\": 596, \"value\": 0.0018746539717540145}, {\"wallTime\": 1647706738.8753743, \"step\": 597, \"value\": 0.0018838803516700864}, {\"wallTime\": 1647706738.9427612, \"step\": 598, \"value\": 0.001893152017146349}, {\"wallTime\": 1647706738.9951053, \"step\": 599, \"value\": 0.0019024694338440895}, {\"wallTime\": 1647706739.144777, \"step\": 601, \"value\": 0.0019212421029806137}, {\"wallTime\": 1647706739.1976702, \"step\": 602, \"value\": 0.0019306977046653628}, {\"wallTime\": 1647706739.2666206, \"step\": 603, \"value\": 0.0019401998724788427}, {\"wallTime\": 1647706739.396338, \"step\": 605, \"value\": 0.0019593448378145695}, {\"wallTime\": 1647706739.5950058, \"step\": 608, \"value\": 0.0019884170033037663}, {\"wallTime\": 1647706739.7243152, \"step\": 610, \"value\": 0.002008037641644478}, {\"wallTime\": 1647706739.9434223, \"step\": 613, \"value\": 0.0020378322806209326}, {\"wallTime\": 1647706740.011217, \"step\": 614, \"value\": 0.0020478616934269667}, {\"wallTime\": 1647706740.1573906, \"step\": 616, \"value\": 0.002068069064989686}, {\"wallTime\": 1647706740.28553, \"step\": 618, \"value\": 0.002088475739583373}, {\"wallTime\": 1647706740.425064, \"step\": 620, \"value\": 0.0021090838126838207}, {\"wallTime\": 1647706740.5394216, \"step\": 622, \"value\": 0.002129895146936178}, {\"wallTime\": 1647706740.6108124, \"step\": 623, \"value\": 0.0021403776481747627}, {\"wallTime\": 1647706740.822033, \"step\": 626, \"value\": 0.002172135980799794}, {\"wallTime\": 1647706740.9495625, \"step\": 628, \"value\": 0.002193569438531995}, {\"wallTime\": 1647706741.0219567, \"step\": 629, \"value\": 0.0022043653298169374}, {\"wallTime\": 1647706741.300495, \"step\": 633, \"value\": 0.0022480832412838936}, {\"wallTime\": 1647706741.5779514, \"step\": 637, \"value\": 0.002292667981237173}, {\"wallTime\": 1647706741.764411, \"step\": 640, \"value\": 0.0023266857024282217}, {\"wallTime\": 1647706741.8211377, \"step\": 641, \"value\": 0.00233813701197505}, {\"wallTime\": 1647706741.881705, \"step\": 642, \"value\": 0.002349644433706999}, {\"wallTime\": 1647706741.9280338, \"step\": 643, \"value\": 0.0023612084332853556}, {\"wallTime\": 1647706741.9843478, \"step\": 644, \"value\": 0.0023728294763714075}, {\"wallTime\": 1647706742.3509865, \"step\": 649, \"value\": 0.0024317980278283358}, {\"wallTime\": 1647706742.523429, \"step\": 651, \"value\": 0.0024557937867939472}, {\"wallTime\": 1647706742.586005, \"step\": 652, \"value\": 0.0024678802583366632}, {\"wallTime\": 1647706742.645731, \"step\": 653, \"value\": 0.0024800263345241547}, {\"wallTime\": 1647706742.7050376, \"step\": 654, \"value\": 0.0024922320153564215}, {\"wallTime\": 1647706742.7597792, \"step\": 655, \"value\": 0.0025044979993253946}, {\"wallTime\": 1647706742.931378, \"step\": 658, \"value\": 0.0025416589342057705}, {\"wallTime\": 1647706743.0483117, \"step\": 660, \"value\": 0.0025667387526482344}, {\"wallTime\": 1647706743.4613817, \"step\": 667, \"value\": 0.002656482858583331}, {\"wallTime\": 1647706743.6821747, \"step\": 670, \"value\": 0.0026958989910781384}, {\"wallTime\": 1647706743.9975667, \"step\": 675, \"value\": 0.0027628964744508266}, {\"wallTime\": 1647706744.0603473, \"step\": 676, \"value\": 0.0027764944825321436}, {\"wallTime\": 1647706744.1242793, \"step\": 677, \"value\": 0.002790159313008189}, {\"wallTime\": 1647706744.3054357, \"step\": 680, \"value\": 0.00283155869692564}, {\"wallTime\": 1647706744.4330301, \"step\": 682, \"value\": 0.002859499305486679}, {\"wallTime\": 1647706744.4963171, \"step\": 683, \"value\": 0.0028735725209116936}, {\"wallTime\": 1647706744.5646708, \"step\": 684, \"value\": 0.0028877153526991606}, {\"wallTime\": 1647706744.7338204, \"step\": 687, \"value\": 0.0029305622447282076}, {\"wallTime\": 1647706745.041136, \"step\": 692, \"value\": 0.0030033914372324944}, {\"wallTime\": 1647706745.1438465, \"step\": 694, \"value\": 0.003033027285709977}, {\"wallTime\": 1647706745.2500925, \"step\": 696, \"value\": 0.003062955802306533}, {\"wallTime\": 1647706745.300429, \"step\": 697, \"value\": 0.0030780304223299026}, {\"wallTime\": 1647706745.408359, \"step\": 699, \"value\": 0.0031084029469639063}, {\"wallTime\": 1647706745.5763142, \"step\": 702, \"value\": 0.0031545243691653013}, {\"wallTime\": 1647706745.6793041, \"step\": 703, \"value\": 0.0031700499821454287}, {\"wallTime\": 1647706745.8218002, \"step\": 705, \"value\": 0.0032013303134590387}, {\"wallTime\": 1647706746.2075672, \"step\": 709, \"value\": 0.0032648202031850815}, {\"wallTime\": 1647706746.2761862, \"step\": 710, \"value\": 0.003280888544395566}, {\"wallTime\": 1647706746.4003015, \"step\": 712, \"value\": 0.003313262714073062}, {\"wallTime\": 1647706746.592012, \"step\": 715, \"value\": 0.0033624237403273582}, {\"wallTime\": 1647706746.7357478, \"step\": 717, \"value\": 0.003395602572709322}, {\"wallTime\": 1647706746.9217772, \"step\": 720, \"value\": 0.003445985494181514}, {\"wallTime\": 1647706746.9848082, \"step\": 721, \"value\": 0.003462945343926549}, {\"wallTime\": 1647706747.1152022, \"step\": 723, \"value\": 0.0034971158020198345}, {\"wallTime\": 1647706747.2791173, \"step\": 725, \"value\": 0.0035316236317157745}, {\"wallTime\": 1647706747.3559132, \"step\": 726, \"value\": 0.003549004904925823}, {\"wallTime\": 1647706747.5116787, \"step\": 728, \"value\": 0.003584024729207158}, {\"wallTime\": 1647706747.5882118, \"step\": 729, \"value\": 0.0036016639787703753}, {\"wallTime\": 1647706747.7349985, \"step\": 731, \"value\": 0.0036372034810483456}, {\"wallTime\": 1647706747.7970538, \"step\": 732, \"value\": 0.0036551044322550297}, {\"wallTime\": 1647706747.8491673, \"step\": 733, \"value\": 0.003673093393445015}, {\"wallTime\": 1647706748.2354968, \"step\": 738, \"value\": 0.003764375811442733}, {\"wallTime\": 1647706748.5312483, \"step\": 742, \"value\": 0.003839032258838415}, {\"wallTime\": 1647706748.5897791, \"step\": 743, \"value\": 0.0038579264655709267}, {\"wallTime\": 1647706748.6560805, \"step\": 744, \"value\": 0.0038769138045608997}, {\"wallTime\": 1647706749.354433, \"step\": 755, \"value\": 0.004092044197022915}, {\"wallTime\": 1647706749.4028838, \"step\": 756, \"value\": 0.004112183582037687}, {\"wallTime\": 1647706749.5311084, \"step\": 758, \"value\": 0.004152760375291109}, {\"wallTime\": 1647706749.8033485, \"step\": 763, \"value\": 0.004255963023751974}, {\"wallTime\": 1647706749.86524, \"step\": 764, \"value\": 0.004276909399777651}, {\"wallTime\": 1647706749.9119818, \"step\": 765, \"value\": 0.004297958686947823}, {\"wallTime\": 1647706750.0986166, \"step\": 768, \"value\": 0.00436173053458333}, {\"wallTime\": 1647706750.1665888, \"step\": 769, \"value\": 0.004383197519928217}, {\"wallTime\": 1647706750.3552015, \"step\": 772, \"value\": 0.004448234103620052}, {\"wallTime\": 1647706750.5516613, \"step\": 775, \"value\": 0.004514235537499189}, {\"wallTime\": 1647706750.599625, \"step\": 776, \"value\": 0.004536453168839216}, {\"wallTime\": 1647706750.7128818, \"step\": 778, \"value\": 0.004581216257065535}, {\"wallTime\": 1647706750.7658374, \"step\": 779, \"value\": 0.004603763576596975}, {\"wallTime\": 1647706750.8308997, \"step\": 780, \"value\": 0.004626421723514795}, {\"wallTime\": 1647706750.8802679, \"step\": 781, \"value\": 0.004649191163480282}, {\"wallTime\": 1647706750.944635, \"step\": 782, \"value\": 0.0046720728278160095}, {\"wallTime\": 1647706751.3491867, \"step\": 788, \"value\": 0.004811746999621391}, {\"wallTime\": 1647706751.5109105, \"step\": 791, \"value\": 0.004883142188191414}, {\"wallTime\": 1647706751.6660454, \"step\": 793, \"value\": 0.004931326489895582}, {\"wallTime\": 1647706751.7834778, \"step\": 795, \"value\": 0.004979986231774092}, {\"wallTime\": 1647706751.9986207, \"step\": 799, \"value\": 0.005078751128166914}, {\"wallTime\": 1647706752.3863132, \"step\": 804, \"value\": 0.00520496629178524}, {\"wallTime\": 1647706752.471447, \"step\": 805, \"value\": 0.0052305832505226135}, {\"wallTime\": 1647706752.554774, \"step\": 806, \"value\": 0.00525632593780756}, {\"wallTime\": 1647706752.6310134, \"step\": 807, \"value\": 0.005282195750623941}, {\"wallTime\": 1647706752.73422, \"step\": 810, \"value\": 0.005360571201890707}, {\"wallTime\": 1647706752.8849754, \"step\": 818, \"value\": 0.005575305316597223}, {\"wallTime\": 1647706752.904149, \"step\": 819, \"value\": 0.005602744873613119}, {\"wallTime\": 1647706752.9449058, \"step\": 821, \"value\": 0.005658030044287443}, {\"wallTime\": 1647706752.9808297, \"step\": 823, \"value\": 0.0057138605043292046}, {\"wallTime\": 1647706753.0655928, \"step\": 826, \"value\": 0.005798641126602888}, {\"wallTime\": 1647706753.0869753, \"step\": 827, \"value\": 0.00582717964425683}, {\"wallTime\": 1647706753.108202, \"step\": 828, \"value\": 0.005855859257280827}, {\"wallTime\": 1647706753.1914594, \"step\": 832, \"value\": 0.005971994716674089}, {\"wallTime\": 1647706753.2126122, \"step\": 833, \"value\": 0.006001386325806379}, {\"wallTime\": 1647706753.253982, \"step\": 835, \"value\": 0.006060604937374592}, {\"wallTime\": 1647706753.274538, \"step\": 836, \"value\": 0.006090433336794376}, {\"wallTime\": 1647706753.295485, \"step\": 837, \"value\": 0.0061204079538583755}, {\"wallTime\": 1647706753.3383594, \"step\": 839, \"value\": 0.0061808014288544655}, {\"wallTime\": 1647706753.359387, \"step\": 840, \"value\": 0.0062112207524478436}, {\"wallTime\": 1647706753.4224696, \"step\": 843, \"value\": 0.00630338117480278}, {\"wallTime\": 1647706753.4647439, \"step\": 845, \"value\": 0.006365579552948475}, {\"wallTime\": 1647706753.573986, \"step\": 850, \"value\": 0.006523774471133947}, {\"wallTime\": 1647706753.59511, \"step\": 851, \"value\": 0.006555881816893816}, {\"wallTime\": 1647706753.6616073, \"step\": 854, \"value\": 0.006653156131505966}, {\"wallTime\": 1647706753.723472, \"step\": 857, \"value\": 0.006751873530447483}, {\"wallTime\": 1647706753.7844374, \"step\": 860, \"value\": 0.00685205589979887}, {\"wallTime\": 1647706753.8286037, \"step\": 862, \"value\": 0.006919668521732092}, {\"wallTime\": 1647706753.999232, \"step\": 865, \"value\": 0.007022340316325426}, {\"wallTime\": 1647706754.0494814, \"step\": 866, \"value\": 0.0070569016970694065}, {\"wallTime\": 1647706754.2705925, \"step\": 870, \"value\": 0.007196856662631035}, {\"wallTime\": 1647706754.3374844, \"step\": 871, \"value\": 0.007232277188450098}, {\"wallTime\": 1647706755.1962574, \"step\": 884, \"value\": 0.00770892109721899}, {\"wallTime\": 1647706755.257337, \"step\": 885, \"value\": 0.007746861781924963}, {\"wallTime\": 1647706755.3013992, \"step\": 886, \"value\": 0.007784988731145859}, {\"wallTime\": 1647706755.4121945, \"step\": 888, \"value\": 0.007861807011067867}, {\"wallTime\": 1647706755.5004053, \"step\": 890, \"value\": 0.007939383387565613}, {\"wallTime\": 1647706755.6083684, \"step\": 892, \"value\": 0.008017725311219692}, {\"wallTime\": 1647706755.7603207, \"step\": 895, \"value\": 0.00813668966293335}, {\"wallTime\": 1647706755.8478968, \"step\": 897, \"value\": 0.00821697898209095}, {\"wallTime\": 1647706755.9142556, \"step\": 898, \"value\": 0.008257419802248478}, {\"wallTime\": 1647706756.0629349, \"step\": 901, \"value\": 0.008379940874874592}, {\"wallTime\": 1647706756.110803, \"step\": 902, \"value\": 0.008421183563768864}, {\"wallTime\": 1647706756.2345572, \"step\": 904, \"value\": 0.008504279889166355}, {\"wallTime\": 1647706756.4043825, \"step\": 907, \"value\": 0.008630463853478432}, {\"wallTime\": 1647706756.4625988, \"step\": 908, \"value\": 0.008672939613461494}, {\"wallTime\": 1647706756.5508053, \"step\": 910, \"value\": 0.008758519776165485}, {\"wallTime\": 1647706756.600139, \"step\": 911, \"value\": 0.008801626041531563}, {\"wallTime\": 1647706756.7363696, \"step\": 914, \"value\": 0.008932221680879593}, {\"wallTime\": 1647706756.9146903, \"step\": 918, \"value\": 0.009109368547797203}, {\"wallTime\": 1647706756.960921, \"step\": 919, \"value\": 0.009154201485216618}, {\"wallTime\": 1647706757.0238218, \"step\": 921, \"value\": 0.009244530461728573}, {\"wallTime\": 1647706757.0756772, \"step\": 923, \"value\": 0.009335750713944435}, {\"wallTime\": 1647706757.1813126, \"step\": 927, \"value\": 0.009520900435745716}, {\"wallTime\": 1647706757.2076626, \"step\": 928, \"value\": 0.00956775899976492}, {\"wallTime\": 1647706757.2584171, \"step\": 930, \"value\": 0.00966216903179884}, {\"wallTime\": 1647706757.2824464, \"step\": 931, \"value\": 0.009709722362458706}, {\"wallTime\": 1647706757.3202217, \"step\": 932, \"value\": 0.009757510386407375}, {\"wallTime\": 1647706757.3418715, \"step\": 933, \"value\": 0.009805533103644848}, {\"wallTime\": 1647706757.4200609, \"step\": 935, \"value\": 0.009902289137244225}, {\"wallTime\": 1647706760.2454216, \"step\": 939, \"value\": 0.010098675265908241}, {\"wallTime\": 1647706760.2932305, \"step\": 941, \"value\": 0.010198323056101799}, {\"wallTime\": 1647706760.316872, \"step\": 942, \"value\": 0.010248515754938126}, {\"wallTime\": 1647706760.3959718, \"step\": 945, \"value\": 0.010400580242276192}, {\"wallTime\": 1647706760.5101953, \"step\": 949, \"value\": 0.010606848634779453}, {\"wallTime\": 1647706760.7571054, \"step\": 952, \"value\": 0.010764229111373425}, {\"wallTime\": 1647706760.9369307, \"step\": 955, \"value\": 0.010923945344984531}, {\"wallTime\": 1647706760.9805582, \"step\": 956, \"value\": 0.010977709665894508}, {\"wallTime\": 1647706761.1444547, \"step\": 960, \"value\": 0.01119542308151722}, {\"wallTime\": 1647706761.2497354, \"step\": 962, \"value\": 0.011305893771350384}, {\"wallTime\": 1647706761.2951436, \"step\": 963, \"value\": 0.011361537501215935}, {\"wallTime\": 1647706761.3803225, \"step\": 965, \"value\": 0.011473647318780422}, {\"wallTime\": 1647706761.449706, \"step\": 967, \"value\": 0.011586863547563553}, {\"wallTime\": 1647706761.480937, \"step\": 968, \"value\": 0.011643889360129833}, {\"wallTime\": 1647706761.571949, \"step\": 971, \"value\": 0.011816658079624176}, {\"wallTime\": 1647706761.746737, \"step\": 976, \"value\": 0.01211032085120678}, {\"wallTime\": 1647706761.826665, \"step\": 978, \"value\": 0.012229819782078266}, {\"wallTime\": 1647706761.8722262, \"step\": 979, \"value\": 0.01229001022875309}, {\"wallTime\": 1647706761.956295, \"step\": 981, \"value\": 0.01241128146648407}, {\"wallTime\": 1647706761.9941118, \"step\": 982, \"value\": 0.01247236505150795}, {\"wallTime\": 1647706762.1557956, \"step\": 986, \"value\": 0.012719721533358097}, {\"wallTime\": 1647706762.3369472, \"step\": 990, \"value\": 0.012971984222531319}, {\"wallTime\": 1647706762.4211318, \"step\": 992, \"value\": 0.013099984265863895}, {\"wallTime\": 1647706762.4940503, \"step\": 994, \"value\": 0.0132292490452528}, {\"wallTime\": 1647706762.559575, \"step\": 996, \"value\": 0.013359787873923779}, {\"wallTime\": 1647706762.6279495, \"step\": 998, \"value\": 0.013491615653038025}, {\"wallTime\": 1647706762.6565478, \"step\": 999, \"value\": 0.013558016158640385}, {\"wallTime\": 1647706762.8035784, \"step\": 1002, \"value\": 0.013759186491370201}, {\"wallTime\": 1647706762.8525162, \"step\": 1003, \"value\": 0.013826903887093067}, {\"wallTime\": 1647706762.8936598, \"step\": 1004, \"value\": 0.013894954696297646}, {\"wallTime\": 1647706763.0461934, \"step\": 1006, \"value\": 0.014032063074409962}, {\"wallTime\": 1647706763.251523, \"step\": 1011, \"value\": 0.014380782842636108}, {\"wallTime\": 1647706763.333035, \"step\": 1013, \"value\": 0.01452268473803997}, {\"wallTime\": 1647706763.4348795, \"step\": 1015, \"value\": 0.014665987342596054}, {\"wallTime\": 1647706763.4749775, \"step\": 1016, \"value\": 0.014738167636096478}, {\"wallTime\": 1647706763.5188541, \"step\": 1017, \"value\": 0.014810703694820404}, {\"wallTime\": 1647706763.7101238, \"step\": 1022, \"value\": 0.015178773552179337}, {\"wallTime\": 1647706763.8792694, \"step\": 1026, \"value\": 0.015479804016649723}, {\"wallTime\": 1647706763.9794023, \"step\": 1028, \"value\": 0.015632551163434982}, {\"wallTime\": 1647706764.0230818, \"step\": 1029, \"value\": 0.015709487721323967}, {\"wallTime\": 1647706764.3552806, \"step\": 1035, \"value\": 0.016179131343960762}, {\"wallTime\": 1647706764.410362, \"step\": 1036, \"value\": 0.016258759424090385}, {\"wallTime\": 1647706764.4657726, \"step\": 1037, \"value\": 0.016338780522346497}, {\"wallTime\": 1647706764.5210402, \"step\": 1038, \"value\": 0.016419192776083946}, {\"wallTime\": 1647706764.570394, \"step\": 1039, \"value\": 0.016500001773238182}, {\"wallTime\": 1647706764.7659883, \"step\": 1043, \"value\": 0.016827236860990524}, {\"wallTime\": 1647706764.8631787, \"step\": 1045, \"value\": 0.01699327863752842}, {\"wallTime\": 1647706764.91493, \"step\": 1046, \"value\": 0.01707691326737404}, {\"wallTime\": 1647706765.218831, \"step\": 1052, \"value\": 0.017587436363101006}, {\"wallTime\": 1647706765.2607985, \"step\": 1053, \"value\": 0.017673995345830917}, {\"wallTime\": 1647706765.4144738, \"step\": 1056, \"value\": 0.017936237156391144}, {\"wallTime\": 1647706765.5710409, \"step\": 1058, \"value\": 0.01811322383582592}, {\"wallTime\": 1647706765.625035, \"step\": 1059, \"value\": 0.018202370032668114}, {\"wallTime\": 1647706765.6680255, \"step\": 1060, \"value\": 0.018291955813765526}, {\"wallTime\": 1647706765.7840884, \"step\": 1062, \"value\": 0.018472451716661453}, {\"wallTime\": 1647706765.9958606, \"step\": 1065, \"value\": 0.01874653995037079}, {\"wallTime\": 1647706766.133548, \"step\": 1067, \"value\": 0.018931521102786064}, {\"wallTime\": 1647706766.224313, \"step\": 1069, \"value\": 0.019118327647447586}, {\"wallTime\": 1647706766.2684183, \"step\": 1070, \"value\": 0.019212421029806137}, {\"wallTime\": 1647706766.308401, \"step\": 1071, \"value\": 0.019306978210806847}, {\"wallTime\": 1647706766.3546145, \"step\": 1072, \"value\": 0.019401999190449715}, {\"wallTime\": 1647706766.3988447, \"step\": 1073, \"value\": 0.01949748955667019}, {\"wallTime\": 1647706766.4409199, \"step\": 1074, \"value\": 0.01959344744682312}, {\"wallTime\": 1647706766.5746644, \"step\": 1077, \"value\": 0.019884169101715088}, {\"wallTime\": 1647706766.6205883, \"step\": 1078, \"value\": 0.019982032477855682}, {\"wallTime\": 1647706766.714346, \"step\": 1080, \"value\": 0.020179204642772675}, {\"wallTime\": 1647706766.7611356, \"step\": 1081, \"value\": 0.02027851901948452}, {\"wallTime\": 1647706766.8018603, \"step\": 1082, \"value\": 0.020378323271870613}, {\"wallTime\": 1647706766.9461377, \"step\": 1085, \"value\": 0.020680690184235573}, {\"wallTime\": 1647706767.003644, \"step\": 1086, \"value\": 0.02078247256577015}, {\"wallTime\": 1647706767.0626645, \"step\": 1087, \"value\": 0.02088475599884987}, {\"wallTime\": 1647706767.3127887, \"step\": 1091, \"value\": 0.021298950538039207}, {\"wallTime\": 1647706767.6670654, \"step\": 1098, \"value\": 0.022043654695153236}, {\"wallTime\": 1647706767.7487888, \"step\": 1100, \"value\": 0.02226116880774498}, {\"wallTime\": 1647706767.8378053, \"step\": 1102, \"value\": 0.022480830550193787}, {\"wallTime\": 1647706767.883665, \"step\": 1103, \"value\": 0.022591473534703255}, {\"wallTime\": 1647706767.9342177, \"step\": 1104, \"value\": 0.022702660411596298}, {\"wallTime\": 1647706768.0676646, \"step\": 1107, \"value\": 0.02303951606154442}, {\"wallTime\": 1647706768.1666799, \"step\": 1109, \"value\": 0.023266857489943504}, {\"wallTime\": 1647706768.2597537, \"step\": 1111, \"value\": 0.023496443405747414}, {\"wallTime\": 1647706768.3065977, \"step\": 1112, \"value\": 0.02361208386719227}, {\"wallTime\": 1647706768.3966033, \"step\": 1114, \"value\": 0.02384507656097412}, {\"wallTime\": 1647706768.6196475, \"step\": 1119, \"value\": 0.024437664076685905}, {\"wallTime\": 1647706768.6919732, \"step\": 1121, \"value\": 0.024678803980350494}, {\"wallTime\": 1647706768.7193267, \"step\": 1122, \"value\": 0.024800263345241547}, {\"wallTime\": 1647706768.843408, \"step\": 1125, \"value\": 0.025168241932988167}, {\"wallTime\": 1647706768.8833182, \"step\": 1126, \"value\": 0.025292111560702324}, {\"wallTime\": 1647706768.9601393, \"step\": 1128, \"value\": 0.025541679933667183}, {\"wallTime\": 1647706769.0037665, \"step\": 1129, \"value\": 0.02566738799214363}, {\"wallTime\": 1647706769.0509274, \"step\": 1130, \"value\": 0.025793712586164474}, {\"wallTime\": 1647706769.093311, \"step\": 1131, \"value\": 0.02592065930366516}, {\"wallTime\": 1647706769.135339, \"step\": 1132, \"value\": 0.02604823186993599}, {\"wallTime\": 1647706769.2250223, \"step\": 1134, \"value\": 0.026305261999368668}, {\"wallTime\": 1647706769.2719727, \"step\": 1135, \"value\": 0.026434727013111115}, {\"wallTime\": 1647706769.3182974, \"step\": 1136, \"value\": 0.0265648290514946}, {\"wallTime\": 1647706769.456843, \"step\": 1139, \"value\": 0.026958990842103958}, {\"wallTime\": 1647706769.6039183, \"step\": 1142, \"value\": 0.027358999475836754}, {\"wallTime\": 1647706769.7523053, \"step\": 1145, \"value\": 0.02776494435966015}, {\"wallTime\": 1647706769.7986293, \"step\": 1146, \"value\": 0.02790159359574318}, {\"wallTime\": 1647706769.8883238, \"step\": 1148, \"value\": 0.028176911175251007}, {\"wallTime\": 1647706769.9707441, \"step\": 1150, \"value\": 0.028454946354031563}, {\"wallTime\": 1647706770.0210884, \"step\": 1151, \"value\": 0.02859499119222164}, {\"wallTime\": 1647706770.0589757, \"step\": 1152, \"value\": 0.028735725209116936}, {\"wallTime\": 1647706770.1052427, \"step\": 1153, \"value\": 0.028877152130007744}, {\"wallTime\": 1647706770.3977208, \"step\": 1160, \"value\": 0.029886823147535324}, {\"wallTime\": 1647706770.5111227, \"step\": 1162, \"value\": 0.030181730166077614}, {\"wallTime\": 1647706770.5999138, \"step\": 1164, \"value\": 0.03047954849898815}, {\"wallTime\": 1647706770.690981, \"step\": 1166, \"value\": 0.030780306085944176}, {\"wallTime\": 1647706770.7369587, \"step\": 1167, \"value\": 0.03093179501593113}, {\"wallTime\": 1647706771.0139306, \"step\": 1173, \"value\": 0.03185651823878288}, {\"wallTime\": 1647706771.0560508, \"step\": 1174, \"value\": 0.03201330453157425}, {\"wallTime\": 1647706771.1384501, \"step\": 1176, \"value\": 0.032329194247722626}, {\"wallTime\": 1647706771.1767917, \"step\": 1177, \"value\": 0.03248830512166023}, {\"wallTime\": 1647706771.2166717, \"step\": 1178, \"value\": 0.032648202031850815}, {\"wallTime\": 1647706771.386536, \"step\": 1182, \"value\": 0.03329569473862648}, {\"wallTime\": 1647706771.4608412, \"step\": 1184, \"value\": 0.03362423926591873}, {\"wallTime\": 1647706771.5631711, \"step\": 1186, \"value\": 0.033956024795770645}, {\"wallTime\": 1647706771.6879146, \"step\": 1188, \"value\": 0.03429108485579491}, {\"wallTime\": 1647706771.7328436, \"step\": 1189, \"value\": 0.034459855407476425}, {\"wallTime\": 1647706771.7782998, \"step\": 1190, \"value\": 0.0346294529736042}, {\"wallTime\": 1647706771.9125874, \"step\": 1193, \"value\": 0.03514327481389046}, {\"wallTime\": 1647706771.9603972, \"step\": 1194, \"value\": 0.035316236317157745}, {\"wallTime\": 1647706772.008113, \"step\": 1195, \"value\": 0.03549005091190338}, {\"wallTime\": 1647706772.111874, \"step\": 1197, \"value\": 0.035840246826410294}, {\"wallTime\": 1647706772.162378, \"step\": 1198, \"value\": 0.036016639322042465}, {\"wallTime\": 1647706772.30975, \"step\": 1201, \"value\": 0.03655104339122772}, {\"wallTime\": 1647706772.4838421, \"step\": 1205, \"value\": 0.03727593645453453}, {\"wallTime\": 1647706772.5278802, \"step\": 1206, \"value\": 0.037459395825862885}, {\"wallTime\": 1647706772.5741215, \"step\": 1207, \"value\": 0.037643756717443466}, {\"wallTime\": 1647706772.648208, \"step\": 1209, \"value\": 0.038015205413103104}, {\"wallTime\": 1647706772.8877273, \"step\": 1213, \"value\": 0.03876913711428642}, {\"wallTime\": 1647706772.9335241, \"step\": 1214, \"value\": 0.03895994648337364}, {\"wallTime\": 1647706772.9800913, \"step\": 1215, \"value\": 0.039151690900325775}, {\"wallTime\": 1647706773.166879, \"step\": 1218, \"value\": 0.039732612669467926}, {\"wallTime\": 1647706773.4205015, \"step\": 1223, \"value\": 0.040720030665397644}, {\"wallTime\": 1647706774.270549, \"step\": 1225, \"value\": 0.04112183675169945}, {\"wallTime\": 1647706774.5116436, \"step\": 1229, \"value\": 0.04193737730383873}, {\"wallTime\": 1647706774.6834524, \"step\": 1232, \"value\": 0.042559631168842316}, {\"wallTime\": 1647706774.7465801, \"step\": 1233, \"value\": 0.04276909679174423}, {\"wallTime\": 1647706774.966233, \"step\": 1238, \"value\": 0.043831974267959595}, {\"wallTime\": 1647706775.0525146, \"step\": 1240, \"value\": 0.04426448792219162}, {\"wallTime\": 1647706775.094502, \"step\": 1241, \"value\": 0.044482339173555374}, {\"wallTime\": 1647706775.1375828, \"step\": 1242, \"value\": 0.044701267033815384}, {\"wallTime\": 1647706775.1823938, \"step\": 1243, \"value\": 0.04492127150297165}, {\"wallTime\": 1647706775.2234228, \"step\": 1244, \"value\": 0.04514235630631447}, {\"wallTime\": 1647706775.3225605, \"step\": 1246, \"value\": 0.045587796717882156}, {\"wallTime\": 1647706776.3560848, \"step\": 1249, \"value\": 0.04626421630382538}, {\"wallTime\": 1647706776.3654032, \"step\": 1250, \"value\": 0.04649190977215767}, {\"wallTime\": 1647706776.3723643, \"step\": 1251, \"value\": 0.046720728278160095}, {\"wallTime\": 1647706776.435941, \"step\": 1252, \"value\": 0.04695066809654236}, {\"wallTime\": 1647706776.5317335, \"step\": 1254, \"value\": 0.04741395637392998}, {\"wallTime\": 1647706776.6180067, \"step\": 1256, \"value\": 0.04788181185722351}, {\"wallTime\": 1647706776.6540256, \"step\": 1257, \"value\": 0.04811746999621391}, {\"wallTime\": 1647706776.8254356, \"step\": 1260, \"value\": 0.04883142188191414}, {\"wallTime\": 1647706776.8900073, \"step\": 1261, \"value\": 0.04907175153493881}, {\"wallTime\": 1647706777.194557, \"step\": 1267, \"value\": 0.05053877830505371}, {\"wallTime\": 1647706777.3754575, \"step\": 1271, \"value\": 0.051541078835725784}, {\"wallTime\": 1647706777.6065786, \"step\": 1276, \"value\": 0.05282195657491684}, {\"wallTime\": 1647706777.6532445, \"step\": 1277, \"value\": 0.0530819296836853}, {\"wallTime\": 1647706777.7009351, \"step\": 1278, \"value\": 0.05334317684173584}, {\"wallTime\": 1647706777.8732157, \"step\": 1282, \"value\": 0.05440109968185425}, {\"wallTime\": 1647706778.0034227, \"step\": 1285, \"value\": 0.05520828440785408}, {\"wallTime\": 1647706778.2294664, \"step\": 1290, \"value\": 0.056580301374197006}, {\"wallTime\": 1647706778.3680973, \"step\": 1293, \"value\": 0.05741982161998749}, {\"wallTime\": 1647706778.5977762, \"step\": 1298, \"value\": 0.058846794068813324}, {\"wallTime\": 1647706778.6416972, \"step\": 1299, \"value\": 0.059136416763067245}, {\"wallTime\": 1647706778.8549821, \"step\": 1302, \"value\": 0.06001386418938637}, {\"wallTime\": 1647706779.047462, \"step\": 1306, \"value\": 0.061204079538583755}, {\"wallTime\": 1647706779.2390978, \"step\": 1310, \"value\": 0.062417902052402496}, {\"wallTime\": 1647706779.4803877, \"step\": 1315, \"value\": 0.06396908313035965}, {\"wallTime\": 1647706779.714558, \"step\": 1320, \"value\": 0.06555882096290588}, {\"wallTime\": 1647706779.8047202, \"step\": 1322, \"value\": 0.06620572507381439}, {\"wallTime\": 1647706779.9501011, \"step\": 1325, \"value\": 0.06718806177377701}, {\"wallTime\": 1647706779.986425, \"step\": 1326, \"value\": 0.06751873344182968}, {\"wallTime\": 1647706780.084768, \"step\": 1328, \"value\": 0.0681849792599678}, {\"wallTime\": 1647706780.4152055, \"step\": 1335, \"value\": 0.07056901603937149}, {\"wallTime\": 1647706780.8489273, \"step\": 1344, \"value\": 0.073757104575634}, {\"wallTime\": 1647706780.8931375, \"step\": 1345, \"value\": 0.07412010431289673}, {\"wallTime\": 1647706780.980241, \"step\": 1347, \"value\": 0.07485148310661316}, {\"wallTime\": 1647706781.0222392, \"step\": 1348, \"value\": 0.07521987706422806}, {\"wallTime\": 1647706781.1654942, \"step\": 1351, \"value\": 0.07633596658706665}, {\"wallTime\": 1647706781.2073812, \"step\": 1352, \"value\": 0.07671166211366653}, {\"wallTime\": 1647706781.3360782, \"step\": 1354, \"value\": 0.0774686187505722}, {\"wallTime\": 1647706781.5662565, \"step\": 1358, \"value\": 0.07900500297546387}, {\"wallTime\": 1647706781.6458883, \"step\": 1360, \"value\": 0.0797845795750618}, {\"wallTime\": 1647706781.815749, \"step\": 1364, \"value\": 0.0813668966293335}, {\"wallTime\": 1647706781.8576205, \"step\": 1365, \"value\": 0.08176735788583755}, {\"wallTime\": 1647706781.899227, \"step\": 1366, \"value\": 0.0821697860956192}, {\"wallTime\": 1647706781.9396684, \"step\": 1367, \"value\": 0.08257419615983963}, {\"wallTime\": 1647706781.982059, \"step\": 1368, \"value\": 0.08298059552907944}, {\"wallTime\": 1647706782.1503265, \"step\": 1372, \"value\": 0.08462629467248917}, {\"wallTime\": 1647706782.1946955, \"step\": 1373, \"value\": 0.0850427970290184}, {\"wallTime\": 1647706782.2829943, \"step\": 1375, \"value\": 0.08588195592164993}, {\"wallTime\": 1647706782.3249147, \"step\": 1376, \"value\": 0.08630463480949402}, {\"wallTime\": 1647706782.489272, \"step\": 1380, \"value\": 0.08801625669002533}, {\"wallTime\": 1647706782.6940386, \"step\": 1385, \"value\": 0.09020360559225082}, {\"wallTime\": 1647706782.7384171, \"step\": 1386, \"value\": 0.09064754843711853}, {\"wallTime\": 1647706782.9140882, \"step\": 1390, \"value\": 0.09244530647993088}, {\"wallTime\": 1647706783.0458236, \"step\": 1393, \"value\": 0.09381698071956635}, {\"wallTime\": 1647706783.231623, \"step\": 1397, \"value\": 0.09567759186029434}, {\"wallTime\": 1647706783.487849, \"step\": 1403, \"value\": 0.09853792190551758}, {\"wallTime\": 1647706788.729356, \"step\": 1416, \"value\": 0.10503207892179489}, {\"wallTime\": 1647706788.7727947, \"step\": 1417, \"value\": 0.10554900765419006}, {\"wallTime\": 1647706789.0554016, \"step\": 1421, \"value\": 0.1076422929763794}, {\"wallTime\": 1647706789.522784, \"step\": 1431, \"value\": 0.11305893957614899}, {\"wallTime\": 1647706789.5723488, \"step\": 1432, \"value\": 0.11361537128686905}, {\"wallTime\": 1647706790.5547829, \"step\": 1436, \"value\": 0.11586863547563553}, {\"wallTime\": 1647706790.5895522, \"step\": 1438, \"value\": 0.11701196432113647}, {\"wallTime\": 1647706790.6372855, \"step\": 1439, \"value\": 0.1175878569483757}, {\"wallTime\": 1647706790.6918879, \"step\": 1440, \"value\": 0.11816658079624176}, {\"wallTime\": 1647706790.747346, \"step\": 1441, \"value\": 0.11874815076589584}, {\"wallTime\": 1647706790.9136918, \"step\": 1444, \"value\": 0.12051010131835938}, {\"wallTime\": 1647706791.030536, \"step\": 1446, \"value\": 0.12169923633337021}, {\"wallTime\": 1647706791.0684903, \"step\": 1447, \"value\": 0.12229819595813751}, {\"wallTime\": 1647706791.1702385, \"step\": 1449, \"value\": 0.12350496649742126}, {\"wallTime\": 1647706791.3298178, \"step\": 1451, \"value\": 0.1247236579656601}, {\"wallTime\": 1647706791.4222562, \"step\": 1452, \"value\": 0.12533749639987946}, {\"wallTime\": 1647706791.558638, \"step\": 1454, \"value\": 0.12657426297664642}, {\"wallTime\": 1647706791.6145475, \"step\": 1455, \"value\": 0.12719722092151642}, {\"wallTime\": 1647706791.6640875, \"step\": 1456, \"value\": 0.12782323360443115}, {\"wallTime\": 1647706791.7130666, \"step\": 1457, \"value\": 0.128452330827713}, {\"wallTime\": 1647706791.7623148, \"step\": 1458, \"value\": 0.1290845274925232}, {\"wallTime\": 1647706791.8091302, \"step\": 1459, \"value\": 0.1297198385000229}, {\"wallTime\": 1647706791.8561213, \"step\": 1460, \"value\": 0.1303582787513733}, {\"wallTime\": 1647706791.9082215, \"step\": 1461, \"value\": 0.1309998482465744}, {\"wallTime\": 1647706792.0020745, \"step\": 1463, \"value\": 0.1322924941778183}, {\"wallTime\": 1647706792.3226416, \"step\": 1470, \"value\": 0.13691800832748413}, {\"wallTime\": 1647706792.461406, \"step\": 1473, \"value\": 0.13894954323768616}, {\"wallTime\": 1647706792.5028856, \"step\": 1474, \"value\": 0.1396334022283554}, {\"wallTime\": 1647706792.5842087, \"step\": 1476, \"value\": 0.14101123809814453}, {\"wallTime\": 1647706792.907784, \"step\": 1483, \"value\": 0.1459416002035141}, {\"wallTime\": 1647706793.0903141, \"step\": 1487, \"value\": 0.14883597195148468}, {\"wallTime\": 1647706793.1815104, \"step\": 1489, \"value\": 0.15030460059642792}, {\"wallTime\": 1647706793.2281156, \"step\": 1490, \"value\": 0.1510443538427353}, {\"wallTime\": 1647706793.3712711, \"step\": 1493, \"value\": 0.15328550338745117}, {\"wallTime\": 1647706793.4153812, \"step\": 1494, \"value\": 0.1540399193763733}, {\"wallTime\": 1647706793.5864382, \"step\": 1498, \"value\": 0.15709488093852997}, {\"wallTime\": 1647706793.6265924, \"step\": 1499, \"value\": 0.15786804258823395}, {\"wallTime\": 1647706793.6704483, \"step\": 1500, \"value\": 0.15864501893520355}, {\"wallTime\": 1647706793.7558749, \"step\": 1502, \"value\": 0.16021044552326202}, {\"wallTime\": 1647706794.1075115, \"step\": 1509, \"value\": 0.16581209003925323}, {\"wallTime\": 1647706794.1492746, \"step\": 1510, \"value\": 0.1666281670331955}, {\"wallTime\": 1647706794.191621, \"step\": 1511, \"value\": 0.1674482375383377}, {\"wallTime\": 1647706794.289459, \"step\": 1513, \"value\": 0.1691005378961563}, {\"wallTime\": 1647706794.3762712, \"step\": 1515, \"value\": 0.17076914012432098}, {\"wallTime\": 1647706794.4110959, \"step\": 1516, \"value\": 0.17160959541797638}, {\"wallTime\": 1647706794.8087442, \"step\": 1523, \"value\": 0.17760981619358063}, {\"wallTime\": 1647706795.0317545, \"step\": 1528, \"value\": 0.18202370405197144}, {\"wallTime\": 1647706795.3612137, \"step\": 1534, \"value\": 0.18746539950370789}, {\"wallTime\": 1647706795.5085506, \"step\": 1537, \"value\": 0.19024695456027985}, {\"wallTime\": 1647706795.5675807, \"step\": 1538, \"value\": 0.19118326902389526}, {\"wallTime\": 1647706795.6839762, \"step\": 1541, \"value\": 0.19401998817920685}, {\"wallTime\": 1647706796.0234993, \"step\": 1548, \"value\": 0.20080377161502838}, {\"wallTime\": 1647706796.1508179, \"step\": 1551, \"value\": 0.20378322899341583}, {\"wallTime\": 1647706796.1898177, \"step\": 1552, \"value\": 0.20478618144989014}, {\"wallTime\": 1647706796.2202861, \"step\": 1553, \"value\": 0.2057940661907196}, {\"wallTime\": 1647706796.6206808, \"step\": 1562, \"value\": 0.21509118378162384}, {\"wallTime\": 1647706796.7555234, \"step\": 1565, \"value\": 0.21828263998031616}, {\"wallTime\": 1647706796.8009596, \"step\": 1566, \"value\": 0.2193569391965866}, {\"wallTime\": 1647706796.8977559, \"step\": 1568, \"value\": 0.22152145206928253}, {\"wallTime\": 1647706796.996337, \"step\": 1570, \"value\": 0.22370730340480804}, {\"wallTime\": 1647706797.0405872, \"step\": 1571, \"value\": 0.22480832040309906}, {\"wallTime\": 1647706797.087838, \"step\": 1572, \"value\": 0.22591473162174225}, {\"wallTime\": 1647706797.1302445, \"step\": 1573, \"value\": 0.22702661156654358}, {\"wallTime\": 1647706797.2814448, \"step\": 1576, \"value\": 0.2303951531648636}, {\"wallTime\": 1647706797.4527166, \"step\": 1578, \"value\": 0.23266857862472534}, {\"wallTime\": 1647706797.542918, \"step\": 1580, \"value\": 0.23496443033218384}, {\"wallTime\": 1647706797.591381, \"step\": 1581, \"value\": 0.23612084984779358}, {\"wallTime\": 1647706797.6350915, \"step\": 1582, \"value\": 0.23728294670581818}, {\"wallTime\": 1647706797.7764194, \"step\": 1585, \"value\": 0.24080367386341095}, {\"wallTime\": 1647706798.010269, \"step\": 1590, \"value\": 0.24678802490234375}, {\"wallTime\": 1647706798.239169, \"step\": 1595, \"value\": 0.25292110443115234}, {\"wallTime\": 1647706798.2858913, \"step\": 1596, \"value\": 0.2541658878326416}, {\"wallTime\": 1647706798.3237078, \"step\": 1597, \"value\": 0.2554168105125427}, {\"wallTime\": 1647706798.4944222, \"step\": 1601, \"value\": 0.2604823112487793}, {\"wallTime\": 1647706798.5384994, \"step\": 1602, \"value\": 0.2617643177509308}, {\"wallTime\": 1647706798.578366, \"step\": 1603, \"value\": 0.2630526125431061}, {\"wallTime\": 1647706798.9128475, \"step\": 1611, \"value\": 0.27358999848365784}, {\"wallTime\": 1647706798.9944277, \"step\": 1613, \"value\": 0.2762896418571472}, {\"wallTime\": 1647706799.0355868, \"step\": 1614, \"value\": 0.2776494324207306}, {\"wallTime\": 1647706799.131776, \"step\": 1616, \"value\": 0.28038913011550903}, {\"wallTime\": 1647706799.468, \"step\": 1622, \"value\": 0.28877153992652893}, {\"wallTime\": 1647706799.5443385, \"step\": 1624, \"value\": 0.29162096977233887}, {\"wallTime\": 1647706799.6355245, \"step\": 1626, \"value\": 0.2944985330104828}, {\"wallTime\": 1647706799.6735, \"step\": 1627, \"value\": 0.29594796895980835}, {\"wallTime\": 1647706799.8559442, \"step\": 1631, \"value\": 0.30181729793548584}, {\"wallTime\": 1647706800.018923, \"step\": 1635, \"value\": 0.30780306458473206}, {\"wallTime\": 1647706800.0612648, \"step\": 1636, \"value\": 0.309317946434021}, {\"wallTime\": 1647706800.1050766, \"step\": 1637, \"value\": 0.31084030866622925}, {\"wallTime\": 1647706800.2429183, \"step\": 1640, \"value\": 0.3154524564743042}, {\"wallTime\": 1647706800.290156, \"step\": 1641, \"value\": 0.3170049786567688}, {\"wallTime\": 1647706800.5281105, \"step\": 1646, \"value\": 0.3248830735683441}, {\"wallTime\": 1647706800.5773144, \"step\": 1647, \"value\": 0.32648202776908875}, {\"wallTime\": 1647706800.681491, \"step\": 1649, \"value\": 0.32970356941223145}, {\"wallTime\": 1647706800.777534, \"step\": 1651, \"value\": 0.3329569399356842}, {\"wallTime\": 1647706800.8288834, \"step\": 1652, \"value\": 0.33459562063217163}, {\"wallTime\": 1647706800.8950133, \"step\": 1653, \"value\": 0.3362423777580261}, {\"wallTime\": 1647706800.9548082, \"step\": 1654, \"value\": 0.33789724111557007}, {\"wallTime\": 1647706801.0417829, \"step\": 1656, \"value\": 0.34123143553733826}, {\"wallTime\": 1647706801.134348, \"step\": 1658, \"value\": 0.34459853172302246}, {\"wallTime\": 1647706801.3879807, \"step\": 1662, \"value\": 0.351432740688324}, {\"wallTime\": 1647706801.4828184, \"step\": 1664, \"value\": 0.3549005091190338}, {\"wallTime\": 1647706801.6012635, \"step\": 1666, \"value\": 0.3584024906158447}, {\"wallTime\": 1647706801.7427986, \"step\": 1669, \"value\": 0.3637203276157379}, {\"wallTime\": 1647706801.785989, \"step\": 1670, \"value\": 0.3655104339122772}, {\"wallTime\": 1647706801.9516528, \"step\": 1674, \"value\": 0.3727593719959259}, {\"wallTime\": 1647706802.071403, \"step\": 1677, \"value\": 0.3782902657985687}, {\"wallTime\": 1647706802.1540997, \"step\": 1679, \"value\": 0.38202303647994995}, {\"wallTime\": 1647706802.192128, \"step\": 1680, \"value\": 0.3839032053947449}, {\"wallTime\": 1647706802.2705193, \"step\": 1682, \"value\": 0.3876913785934448}, {\"wallTime\": 1647706802.402907, \"step\": 1685, \"value\": 0.3934438228607178}, {\"wallTime\": 1647706802.4450533, \"step\": 1686, \"value\": 0.3953801989555359}, {\"wallTime\": 1647706802.4882948, \"step\": 1687, \"value\": 0.39732611179351807}, {\"wallTime\": 1647706802.5296, \"step\": 1688, \"value\": 0.3992816209793091}, {\"wallTime\": 1647706802.7491324, \"step\": 1693, \"value\": 0.4092043936252594}, {\"wallTime\": 1647706802.790566, \"step\": 1694, \"value\": 0.4112183451652527}, {\"wallTime\": 1647706802.8347611, \"step\": 1695, \"value\": 0.4132422208786011}, {\"wallTime\": 1647706802.919772, \"step\": 1697, \"value\": 0.4173198938369751}, {\"wallTime\": 1647706803.0113943, \"step\": 1699, \"value\": 0.4214377999305725}, {\"wallTime\": 1647706803.0599444, \"step\": 1700, \"value\": 0.42351195216178894}, {\"wallTime\": 1647706803.1435046, \"step\": 1702, \"value\": 0.42769095301628113}, {\"wallTime\": 1647706803.2281444, \"step\": 1704, \"value\": 0.4319112002849579}, {\"wallTime\": 1647706803.3941529, \"step\": 1707, \"value\": 0.43831974267959595}, {\"wallTime\": 1647706803.508515, \"step\": 1709, \"value\": 0.442644864320755}, {\"wallTime\": 1647706803.586079, \"step\": 1710, \"value\": 0.44482341408729553}, {\"wallTime\": 1647706803.6428208, \"step\": 1711, \"value\": 0.44701266288757324}, {\"wallTime\": 1647706803.697278, \"step\": 1712, \"value\": 0.4492127001285553}, {\"wallTime\": 1647706804.0502136, \"step\": 1718, \"value\": 0.4626421630382538}, {\"wallTime\": 1647706804.1019146, \"step\": 1719, \"value\": 0.4649191200733185}, {\"wallTime\": 1647706804.2527802, \"step\": 1722, \"value\": 0.4718174338340759}, {\"wallTime\": 1647706804.3023038, \"step\": 1723, \"value\": 0.474139541387558}, {\"wallTime\": 1647706804.3521292, \"step\": 1724, \"value\": 0.4764730930328369}, {\"wallTime\": 1647706804.41213, \"step\": 1725, \"value\": 0.4788181185722351}, {\"wallTime\": 1647706804.700152, \"step\": 1730, \"value\": 0.49071750044822693}, {\"wallTime\": 1647706805.1457028, \"step\": 1738, \"value\": 0.5103746652603149}, {\"wallTime\": 1647706805.1971097, \"step\": 1739, \"value\": 0.5128865838050842}, {\"wallTime\": 1647706805.4190562, \"step\": 1743, \"value\": 0.523058295249939}, {\"wallTime\": 1647706805.5347803, \"step\": 1745, \"value\": 0.5282195806503296}, {\"wallTime\": 1647706805.712895, \"step\": 1748, \"value\": 0.5360571146011353}, {\"wallTime\": 1647706805.756819, \"step\": 1749, \"value\": 0.5386953949928284}, {\"wallTime\": 1647706805.809633, \"step\": 1750, \"value\": 0.5413466691970825}, {\"wallTime\": 1647706805.8685193, \"step\": 1751, \"value\": 0.5440109968185425}, {\"wallTime\": 1647706805.9880786, \"step\": 1753, \"value\": 0.5493789911270142}, {\"wallTime\": 1647706806.046463, \"step\": 1754, \"value\": 0.5520828366279602}, {\"wallTime\": 1647706806.201491, \"step\": 1757, \"value\": 0.5602744817733765}, {\"wallTime\": 1647706806.421191, \"step\": 1762, \"value\": 0.5741981863975525}, {\"wallTime\": 1647706806.4665666, \"step\": 1763, \"value\": 0.5770242214202881}, {\"wallTime\": 1647706806.5583932, \"step\": 1765, \"value\": 0.5827179551124573}, {\"wallTime\": 1647706806.6927965, \"step\": 1768, \"value\": 0.5913641452789307}, {\"wallTime\": 1647706807.0137377, \"step\": 1775, \"value\": 0.6120408177375793}, {\"wallTime\": 1647706807.0544574, \"step\": 1776, \"value\": 0.6150530576705933}, {\"wallTime\": 1647706807.096591, \"step\": 1777, \"value\": 0.6180801391601562}, {\"wallTime\": 1647706807.2226956, \"step\": 1780, \"value\": 0.6272510290145874}, {\"wallTime\": 1647706807.3900692, \"step\": 1784, \"value\": 0.6396908760070801}, {\"wallTime\": 1647706807.43574, \"step\": 1785, \"value\": 0.6428391933441162}, {\"wallTime\": 1647706807.4818957, \"step\": 1786, \"value\": 0.646003007888794}, {\"wallTime\": 1647706807.6197014, \"step\": 1789, \"value\": 0.6555882096290588}, {\"wallTime\": 1647706807.6646447, \"step\": 1790, \"value\": 0.6588147878646851}, {\"wallTime\": 1647706807.7684996, \"step\": 1792, \"value\": 0.6653156280517578}, {\"wallTime\": 1647706807.8592994, \"step\": 1794, \"value\": 0.6718806028366089}, {\"wallTime\": 1647706807.951378, \"step\": 1796, \"value\": 0.6785103678703308}, {\"wallTime\": 1647706808.1346877, \"step\": 1800, \"value\": 0.6919668316841125}, {\"wallTime\": 1647706808.2271478, \"step\": 1802, \"value\": 0.6987948417663574}, {\"wallTime\": 1647706808.2694275, \"step\": 1803, \"value\": 0.7022340297698975}, {\"wallTime\": 1647706808.4765255, \"step\": 1808, \"value\": 0.7196856737136841}, {\"wallTime\": 1647706808.5604186, \"step\": 1810, \"value\": 0.7267871499061584}, {\"wallTime\": 1647706808.7303793, \"step\": 1814, \"value\": 0.7412010431289673}, {\"wallTime\": 1647706808.9043996, \"step\": 1818, \"value\": 0.7559008002281189}, {\"wallTime\": 1647706808.9504888, \"step\": 1819, \"value\": 0.7596210837364197}, {\"wallTime\": 1647706809.134726, \"step\": 1823, \"value\": 0.7746861577033997}, {\"wallTime\": 1647706809.2796948, \"step\": 1826, \"value\": 0.7861807346343994}, {\"wallTime\": 1647706809.3327363, \"step\": 1827, \"value\": 0.7900500297546387}, {\"wallTime\": 1647706809.439537, \"step\": 1829, \"value\": 0.7978458404541016}, {\"wallTime\": 1647706809.4942803, \"step\": 1830, \"value\": 0.8017725348472595}, {\"wallTime\": 1647706809.607889, \"step\": 1832, \"value\": 0.8096840381622314}, {\"wallTime\": 1647706809.6617625, \"step\": 1833, \"value\": 0.813668966293335}, {\"wallTime\": 1647706809.716471, \"step\": 1834, \"value\": 0.8176735639572144}, {\"wallTime\": 1647706809.819188, \"step\": 1836, \"value\": 0.8257419466972351}, {\"wallTime\": 1647706809.8632417, \"step\": 1837, \"value\": 0.8298059701919556}, {\"wallTime\": 1647706809.9009569, \"step\": 1838, \"value\": 0.8338899612426758}, {\"wallTime\": 1647706810.1763783, \"step\": 1844, \"value\": 0.8588195443153381}, {\"wallTime\": 1647706810.2234154, \"step\": 1845, \"value\": 0.8630463480949402}, {\"wallTime\": 1647706810.2700186, \"step\": 1846, \"value\": 0.8672939538955688}, {\"wallTime\": 1647706810.3165643, \"step\": 1847, \"value\": 0.8715624213218689}, {\"wallTime\": 1647706810.3621202, \"step\": 1848, \"value\": 0.8758519291877747}, {\"wallTime\": 1647706810.4975965, \"step\": 1851, \"value\": 0.8888475894927979}, {\"wallTime\": 1647706810.582613, \"step\": 1853, \"value\": 0.897618293762207}, {\"wallTime\": 1647706810.892342, \"step\": 1860, \"value\": 0.9290028810501099}, {\"wallTime\": 1647706811.0638707, \"step\": 1864, \"value\": 0.9474272131919861}, {\"wallTime\": 1647706811.1122434, \"step\": 1865, \"value\": 0.9520900845527649}, {\"wallTime\": 1647706811.1562483, \"step\": 1866, \"value\": 0.9567759037017822}, {\"wallTime\": 1647706811.2003005, \"step\": 1867, \"value\": 0.9614847898483276}, {\"wallTime\": 1647706811.367003, \"step\": 1871, \"value\": 0.9805533289909363}, {\"wallTime\": 1647706811.4121392, \"step\": 1872, \"value\": 0.9853792190551758}, {\"wallTime\": 1647706811.5102262, \"step\": 1874, \"value\": 0.9951024651527405}, {\"wallTime\": 1647706811.5260942, \"step\": 1875, \"value\": 1.0}, {\"wallTime\": 1647706815.681142, \"step\": 1877, \"value\": 1.009867548942566}, {\"wallTime\": 1647706815.8921587, \"step\": 1880, \"value\": 1.0248515605926514}, {\"wallTime\": 1647706816.021049, \"step\": 1883, \"value\": 1.0400580167770386}, {\"wallTime\": 1647706816.0712304, \"step\": 1884, \"value\": 1.0451768636703491}, {\"wallTime\": 1647706816.1733575, \"step\": 1886, \"value\": 1.0554901361465454}, {\"wallTime\": 1647706816.2583957, \"step\": 1888, \"value\": 1.0659050941467285}, {\"wallTime\": 1647706816.3509688, \"step\": 1890, \"value\": 1.076422929763794}, {\"wallTime\": 1647706816.583398, \"step\": 1895, \"value\": 1.1031737327575684}, {\"wallTime\": 1647706816.7712069, \"step\": 1899, \"value\": 1.1250523328781128}, {\"wallTime\": 1647706816.9175339, \"step\": 1902, \"value\": 1.1417454481124878}, {\"wallTime\": 1647706817.1134603, \"step\": 1906, \"value\": 1.1643890142440796}, {\"wallTime\": 1647706817.199894, \"step\": 1908, \"value\": 1.1758785247802734}, {\"wallTime\": 1647706817.2418947, \"step\": 1909, \"value\": 1.1816657781600952}, {\"wallTime\": 1647706817.2923017, \"step\": 1910, \"value\": 1.1874815225601196}, {\"wallTime\": 1647706817.4288852, \"step\": 1913, \"value\": 1.2051010131835938}, {\"wallTime\": 1647706817.6512816, \"step\": 1918, \"value\": 1.2350497245788574}, {\"wallTime\": 1647706817.9009824, \"step\": 1924, \"value\": 1.2719721794128418}, {\"wallTime\": 1647706817.9451568, \"step\": 1925, \"value\": 1.2782323360443115}, {\"wallTime\": 1647706817.985372, \"step\": 1926, \"value\": 1.284523367881775}, {\"wallTime\": 1647706818.0913973, \"step\": 1929, \"value\": 1.3035826683044434}, {\"wallTime\": 1647706818.1763868, \"step\": 1932, \"value\": 1.3229248523712158}, {\"wallTime\": 1647706818.291689, \"step\": 1935, \"value\": 1.342553973197937}, {\"wallTime\": 1647706818.3339143, \"step\": 1936, \"value\": 1.3491616249084473}, {\"wallTime\": 1647706818.4797385, \"step\": 1940, \"value\": 1.3759186267852783}, {\"wallTime\": 1647706818.5221891, \"step\": 1941, \"value\": 1.3826904296875}, {\"wallTime\": 1647706818.564766, \"step\": 1942, \"value\": 1.3894954919815063}, {\"wallTime\": 1647706818.6913579, \"step\": 1945, \"value\": 1.4101123809814453}, {\"wallTime\": 1647706818.7709494, \"step\": 1947, \"value\": 1.4240267276763916}, {\"wallTime\": 1647706818.906302, \"step\": 1950, \"value\": 1.4451559782028198}, {\"wallTime\": 1647706818.9528956, \"step\": 1951, \"value\": 1.4522684812545776}, {\"wallTime\": 1647706819.0368683, \"step\": 1953, \"value\": 1.4665987491607666}, {\"wallTime\": 1647706819.1437402, \"step\": 1956, \"value\": 1.4883596897125244}, {\"wallTime\": 1647706819.3084736, \"step\": 1960, \"value\": 1.5178773403167725}, {\"wallTime\": 1647706819.3419693, \"step\": 1961, \"value\": 1.5253477096557617}, {\"wallTime\": 1647706819.3817508, \"step\": 1962, \"value\": 1.5328549146652222}, {\"wallTime\": 1647706819.4259558, \"step\": 1963, \"value\": 1.5403990745544434}, {\"wallTime\": 1647706819.4616246, \"step\": 1964, \"value\": 1.5479804277420044}, {\"wallTime\": 1647706819.54869, \"step\": 1966, \"value\": 1.5632550716400146}, {\"wallTime\": 1647706819.5976233, \"step\": 1967, \"value\": 1.570948839187622}, {\"wallTime\": 1647706819.6356988, \"step\": 1968, \"value\": 1.5786805152893066}, {\"wallTime\": 1647706819.6752317, \"step\": 1969, \"value\": 1.586450219154358}, {\"wallTime\": 1647706819.9122012, \"step\": 1975, \"value\": 1.6338779926300049}, {\"wallTime\": 1647706820.0057094, \"step\": 1977, \"value\": 1.6500002145767212}, {\"wallTime\": 1647706820.0913243, \"step\": 1979, \"value\": 1.6662815809249878}, {\"wallTime\": 1647706820.1311843, \"step\": 1980, \"value\": 1.6744824647903442}, {\"wallTime\": 1647706820.1670074, \"step\": 1981, \"value\": 1.6827236413955688}, {\"wallTime\": 1647706820.2103534, \"step\": 1982, \"value\": 1.6910053491592407}, {\"wallTime\": 1647706820.241941, \"step\": 1983, \"value\": 1.6993279457092285}, {\"wallTime\": 1647706820.3074725, \"step\": 1985, \"value\": 1.716096043586731}, {\"wallTime\": 1647706820.4230084, \"step\": 1987, \"value\": 1.7330296039581299}, {\"wallTime\": 1647706820.4797919, \"step\": 1988, \"value\": 1.7415589094161987}, {\"wallTime\": 1647706820.5886192, \"step\": 1991, \"value\": 1.7673996686935425}, {\"wallTime\": 1647706820.6697721, \"step\": 1992, \"value\": 1.7760981321334839}, {\"wallTime\": 1647706820.8152773, \"step\": 1995, \"value\": 1.802451252937317}, {\"wallTime\": 1647706821.1190555, \"step\": 2002, \"value\": 1.8654727935791016}, {\"wallTime\": 1647706821.7714367, \"step\": 2016, \"value\": 1.9982032775878906}, {\"wallTime\": 1647706821.8119853, \"step\": 2017, \"value\": 2.008037567138672}, {\"wallTime\": 1647706821.9954495, \"step\": 2021, \"value\": 2.0478618144989014}, {\"wallTime\": 1647706822.0479195, \"step\": 2022, \"value\": 2.057940721511841}, {\"wallTime\": 1647706822.0974162, \"step\": 2023, \"value\": 2.0680689811706543}, {\"wallTime\": 1647706822.1915958, \"step\": 2025, \"value\": 2.0884757041931152}, {\"wallTime\": 1647706822.238515, \"step\": 2026, \"value\": 2.098754405975342}, {\"wallTime\": 1647706822.3331473, \"step\": 2028, \"value\": 2.1194639205932617}, {\"wallTime\": 1647706822.4953094, \"step\": 2031, \"value\": 2.150911808013916}, {\"wallTime\": 1647706822.5386128, \"step\": 2032, \"value\": 2.1614978313446045}, {\"wallTime\": 1647706822.637979, \"step\": 2034, \"value\": 2.182826280593872}, {\"wallTime\": 1647706822.6822224, \"step\": 2035, \"value\": 2.1935694217681885}, {\"wallTime\": 1647706822.726267, \"step\": 2036, \"value\": 2.2043654918670654}, {\"wallTime\": 1647706822.9032304, \"step\": 2040, \"value\": 2.2480831146240234}, {\"wallTime\": 1647706822.9494874, \"step\": 2041, \"value\": 2.2591474056243896}, {\"wallTime\": 1647706823.0337114, \"step\": 2043, \"value\": 2.2814395427703857}, {\"wallTime\": 1647706823.0774415, \"step\": 2044, \"value\": 2.292667865753174}, {\"wallTime\": 1647706823.2444682, \"step\": 2047, \"value\": 2.326685905456543}, {\"wallTime\": 1647706823.3017247, \"step\": 2048, \"value\": 2.338136911392212}, {\"wallTime\": 1647706823.357975, \"step\": 2049, \"value\": 2.349644422531128}, {\"wallTime\": 1647706823.6476521, \"step\": 2054, \"value\": 2.408036708831787}, {\"wallTime\": 1647706823.6968722, \"step\": 2055, \"value\": 2.4198882579803467}, {\"wallTime\": 1647706823.7441523, \"step\": 2056, \"value\": 2.431797981262207}, {\"wallTime\": 1647706823.7913241, \"step\": 2057, \"value\": 2.4437663555145264}, {\"wallTime\": 1647706824.2992284, \"step\": 2067, \"value\": 2.5667388439178467}, {\"wallTime\": 1647706824.3592467, \"step\": 2068, \"value\": 2.579371213912964}, {\"wallTime\": 1647706824.451905, \"step\": 2070, \"value\": 2.604823112487793}, {\"wallTime\": 1647706826.6101084, \"step\": 2074, \"value\": 2.6564829349517822}, {\"wallTime\": 1647706826.7530391, \"step\": 2078, \"value\": 2.709167242050171}, {\"wallTime\": 1647706826.7960975, \"step\": 2079, \"value\": 2.722500801086426}, {\"wallTime\": 1647706827.0566685, \"step\": 2084, \"value\": 2.790159225463867}, {\"wallTime\": 1647706827.1631162, \"step\": 2086, \"value\": 2.8176910877227783}, {\"wallTime\": 1647706827.255925, \"step\": 2087, \"value\": 2.8315587043762207}, {\"wallTime\": 1647706827.3466156, \"step\": 2089, \"value\": 2.859499216079712}, {\"wallTime\": 1647706827.3918874, \"step\": 2090, \"value\": 2.873572587966919}, {\"wallTime\": 1647706827.437184, \"step\": 2091, \"value\": 2.8877153396606445}, {\"wallTime\": 1647706827.6146882, \"step\": 2095, \"value\": 2.9449853897094727}, {\"wallTime\": 1647706827.6583264, \"step\": 2096, \"value\": 2.959479570388794}, {\"wallTime\": 1647706827.7025163, \"step\": 2097, \"value\": 2.9740450382232666}, {\"wallTime\": 1647706827.7424996, \"step\": 2098, \"value\": 2.988682270050049}, {\"wallTime\": 1647706827.8203914, \"step\": 2100, \"value\": 3.0181729793548584}, {\"wallTime\": 1647706827.9926136, \"step\": 2103, \"value\": 3.062955856323242}, {\"wallTime\": 1647706828.0477772, \"step\": 2104, \"value\": 3.078030586242676}, {\"wallTime\": 1647706828.093659, \"step\": 2105, \"value\": 3.09317946434021}, {\"wallTime\": 1647706828.1333113, \"step\": 2106, \"value\": 3.108402967453003}, {\"wallTime\": 1647706828.2899642, \"step\": 2109, \"value\": 3.154524564743042}, {\"wallTime\": 1647706828.3319974, \"step\": 2110, \"value\": 3.1700499057769775}, {\"wallTime\": 1647706828.5198607, \"step\": 2114, \"value\": 3.232919454574585}, {\"wallTime\": 1647706828.5957775, \"step\": 2115, \"value\": 3.248830795288086}, {\"wallTime\": 1647706828.8283226, \"step\": 2119, \"value\": 3.313262701034546}, {\"wallTime\": 1647706828.8918087, \"step\": 2120, \"value\": 3.3295693397521973}, {\"wallTime\": 1647706828.9799173, \"step\": 2122, \"value\": 3.362423896789551}, {\"wallTime\": 1647706829.0220249, \"step\": 2123, \"value\": 3.3789725303649902}, {\"wallTime\": 1647706829.0640402, \"step\": 2124, \"value\": 3.3956024646759033}, {\"wallTime\": 1647706829.1770816, \"step\": 2126, \"value\": 3.4291086196899414}, {\"wallTime\": 1647706829.2271607, \"step\": 2127, \"value\": 3.4459853172302246}, {\"wallTime\": 1647706829.5442715, \"step\": 2134, \"value\": 3.566471815109253}, {\"wallTime\": 1647706829.5911946, \"step\": 2135, \"value\": 3.584024667739868}, {\"wallTime\": 1647706829.6390476, \"step\": 2136, \"value\": 3.6016640663146973}, {\"wallTime\": 1647706829.7747571, \"step\": 2139, \"value\": 3.655104398727417}, {\"wallTime\": 1647706829.9669685, \"step\": 2143, \"value\": 3.7275936603546143}, {\"wallTime\": 1647706830.2173128, \"step\": 2149, \"value\": 3.8390321731567383}, {\"wallTime\": 1647706830.257477, \"step\": 2150, \"value\": 3.857926368713379}, {\"wallTime\": 1647706830.4410665, \"step\": 2154, \"value\": 3.9344382286071777}, {\"wallTime\": 1647706830.486322, \"step\": 2155, \"value\": 3.9538021087646484}, {\"wallTime\": 1647706830.6647012, \"step\": 2159, \"value\": 4.032215118408203}, {\"wallTime\": 1647706830.7079601, \"step\": 2160, \"value\": 4.052060127258301}, {\"wallTime\": 1647706830.7521534, \"step\": 2161, \"value\": 4.07200288772583}, {\"wallTime\": 1647706830.8115237, \"step\": 2162, \"value\": 4.092043876647949}, {\"wallTime\": 1647706831.1748238, \"step\": 2169, \"value\": 4.235119342803955}, {\"wallTime\": 1647706831.3749378, \"step\": 2173, \"value\": 4.3191118240356445}, {\"wallTime\": 1647706831.486023, \"step\": 2175, \"value\": 4.361730575561523}, {\"wallTime\": 1647706831.52949, \"step\": 2176, \"value\": 4.383197784423828}, {\"wallTime\": 1647706831.8918397, \"step\": 2183, \"value\": 4.5364532470703125}, {\"wallTime\": 1647706831.9827592, \"step\": 2185, \"value\": 4.581216335296631}, {\"wallTime\": 1647706832.076142, \"step\": 2187, \"value\": 4.6264214515686035}, {\"wallTime\": 1647706832.1632464, \"step\": 2189, \"value\": 4.672072887420654}, {\"wallTime\": 1647706832.389573, \"step\": 2194, \"value\": 4.788181304931641}, {\"wallTime\": 1647706832.6126466, \"step\": 2199, \"value\": 4.907175064086914}, {\"wallTime\": 1647706832.6986215, \"step\": 2201, \"value\": 4.955596446990967}, {\"wallTime\": 1647706832.7407382, \"step\": 2202, \"value\": 4.979986190795898}, {\"wallTime\": 1647706832.780743, \"step\": 2203, \"value\": 5.004496097564697}, {\"wallTime\": 1647706832.9279556, \"step\": 2206, \"value\": 5.078751087188721}, {\"wallTime\": 1647706833.0722246, \"step\": 2209, \"value\": 5.154108047485352}, {\"wallTime\": 1647706833.166409, \"step\": 2211, \"value\": 5.204966068267822}, {\"wallTime\": 1647706833.2144394, \"step\": 2212, \"value\": 5.230583190917969}, {\"wallTime\": 1647706833.3101556, \"step\": 2214, \"value\": 5.282196044921875}, {\"wallTime\": 1647706833.3584085, \"step\": 2215, \"value\": 5.308192729949951}, {\"wallTime\": 1647706833.4070032, \"step\": 2216, \"value\": 5.334317684173584}, {\"wallTime\": 1647706833.6395607, \"step\": 2221, \"value\": 5.466884136199951}, {\"wallTime\": 1647706833.6858568, \"step\": 2222, \"value\": 5.493790149688721}, {\"wallTime\": 1647706833.7322001, \"step\": 2223, \"value\": 5.520828723907471}, {\"wallTime\": 1647706833.832834, \"step\": 2225, \"value\": 5.575305461883545}, {\"wallTime\": 1647706833.9209912, \"step\": 2227, \"value\": 5.630319595336914}, {\"wallTime\": 1647706834.223421, \"step\": 2233, \"value\": 5.798641204833984}, {\"wallTime\": 1647706834.396097, \"step\": 2236, \"value\": 5.884679317474365}, {\"wallTime\": 1647706834.57272, \"step\": 2239, \"value\": 5.971994400024414}, {\"wallTime\": 1647706834.7328148, \"step\": 2242, \"value\": 6.060605049133301}, {\"wallTime\": 1647706834.8116527, \"step\": 2244, \"value\": 6.120408058166504}, {\"wallTime\": 1647706834.94847, \"step\": 2247, \"value\": 6.211220741271973}, {\"wallTime\": 1647706835.2556765, \"step\": 2254, \"value\": 6.428391933441162}, {\"wallTime\": 1647706835.3875384, \"step\": 2257, \"value\": 6.52377462387085}, {\"wallTime\": 1647706835.4313536, \"step\": 2258, \"value\": 6.555881977081299}, {\"wallTime\": 1647706835.7745852, \"step\": 2264, \"value\": 6.75187349319458}, {\"wallTime\": 1647706835.871735, \"step\": 2266, \"value\": 6.818497657775879}, {\"wallTime\": 1647706835.9223533, \"step\": 2267, \"value\": 6.85205602645874}, {\"wallTime\": 1647706836.2637491, \"step\": 2274, \"value\": 7.091633319854736}, {\"wallTime\": 1647706836.3559134, \"step\": 2276, \"value\": 7.161610126495361}, {\"wallTime\": 1647706836.524468, \"step\": 2280, \"value\": 7.303641319274902}, {\"wallTime\": 1647706836.5663824, \"step\": 2281, \"value\": 7.339587211608887}, {\"wallTime\": 1647706836.6952171, \"step\": 2284, \"value\": 7.448489665985107}, {\"wallTime\": 1647706836.740267, \"step\": 2285, \"value\": 7.4851484298706055}, {\"wallTime\": 1647706837.026272, \"step\": 2291, \"value\": 7.708920955657959}, {\"wallTime\": 1647706837.0733202, \"step\": 2292, \"value\": 7.746861457824707}, {\"wallTime\": 1647706837.1189096, \"step\": 2293, \"value\": 7.784988880157471}, {\"wallTime\": 1647706837.4402528, \"step\": 2300, \"value\": 8.057185173034668}, {\"wallTime\": 1647706837.6729898, \"step\": 2305, \"value\": 8.25741958618164}, {\"wallTime\": 1647706837.7171857, \"step\": 2306, \"value\": 8.298059463500977}, {\"wallTime\": 1647706837.7611222, \"step\": 2307, \"value\": 8.338899612426758}, {\"wallTime\": 1647706837.8489957, \"step\": 2309, \"value\": 8.421183586120605}, {\"wallTime\": 1647706837.9247909, \"step\": 2311, \"value\": 8.504279136657715}, {\"wallTime\": 1647706838.1043708, \"step\": 2315, \"value\": 8.67293930053711}, {\"wallTime\": 1647706838.151091, \"step\": 2316, \"value\": 8.715624809265137}, {\"wallTime\": 1647706838.2839363, \"step\": 2319, \"value\": 8.84494400024414}, {\"wallTime\": 1647706838.514647, \"step\": 2324, \"value\": 9.0647554397583}, {\"wallTime\": 1647706838.8123019, \"step\": 2330, \"value\": 9.335750579833984}, {\"wallTime\": 1647706838.9086895, \"step\": 2332, \"value\": 9.427871704101562}, {\"wallTime\": 1647706839.0493834, \"step\": 2335, \"value\": 9.56775951385498}, {\"wallTime\": 1647706839.2785037, \"step\": 2340, \"value\": 9.805533409118652}, {\"wallTime\": 1647706839.3996444, \"step\": 2342, \"value\": 9.902289390563965}, {\"wallTime\": 1647706839.4351463, \"step\": 2343, \"value\": 9.951025009155273}, {\"wallTime\": 1647706839.476407, \"step\": 2344, \"value\": 10.0}], \"tb_logs/OneCycleLR015321-AdamW\": [{\"wallTime\": 1647712266.694661, \"step\": 3, \"value\": 1.9938601326430216e-05}, {\"wallTime\": 1647712266.7410305, \"step\": 4, \"value\": 1.9960090867243707e-05}, {\"wallTime\": 1647712267.0102427, \"step\": 10, \"value\": 2.018927625613287e-05}, {\"wallTime\": 1647712267.1768615, \"step\": 14, \"value\": 2.0437477360246703e-05}, {\"wallTime\": 1647712267.2195692, \"step\": 15, \"value\": 2.0511442926363088e-05}, {\"wallTime\": 1647712267.341897, \"step\": 18, \"value\": 2.0761917767231353e-05}, {\"wallTime\": 1647712267.385773, \"step\": 19, \"value\": 2.0854928152402863e-05}, {\"wallTime\": 1647712267.4408724, \"step\": 20, \"value\": 2.0952695194864646e-05}, {\"wallTime\": 1647712267.5357397, \"step\": 22, \"value\": 2.1162493794690818e-05}, {\"wallTime\": 1647712267.568839, \"step\": 23, \"value\": 2.1274518076097593e-05}, {\"wallTime\": 1647712267.690682, \"step\": 26, \"value\": 2.1639076294377446e-05}, {\"wallTime\": 1647712267.7406404, \"step\": 27, \"value\": 2.1770081730210222e-05}, {\"wallTime\": 1647712268.0532956, \"step\": 33, \"value\": 2.2655518478131853e-05}, {\"wallTime\": 1647712268.174313, \"step\": 36, \"value\": 2.3162008801591583e-05}, {\"wallTime\": 1647712268.2591224, \"step\": 38, \"value\": 2.3523227355326526e-05}, {\"wallTime\": 1647712268.3389807, \"step\": 40, \"value\": 2.3903259716462344e-05}, {\"wallTime\": 1647712268.6793797, \"step\": 47, \"value\": 2.538107401051093e-05}, {\"wallTime\": 1647712268.754622, \"step\": 48, \"value\": 2.5610890588723123e-05}, {\"wallTime\": 1647712268.7971609, \"step\": 49, \"value\": 2.5845369236776605e-05}, {\"wallTime\": 1647712268.919433, \"step\": 51, \"value\": 2.632829091453459e-05}, {\"wallTime\": 1647712269.0642517, \"step\": 54, \"value\": 2.708751526370179e-05}, {\"wallTime\": 1647712269.2007024, \"step\": 57, \"value\": 2.7888429031008855e-05}, {\"wallTime\": 1647712269.3303905, \"step\": 60, \"value\": 2.8730886697303504e-05}, {\"wallTime\": 1647712269.381218, \"step\": 61, \"value\": 2.9020911824773066e-05}, {\"wallTime\": 1647712269.4256682, \"step\": 62, \"value\": 2.9315531719475985e-05}, {\"wallTime\": 1647712269.468015, \"step\": 63, \"value\": 2.9614737286465243e-05}, {\"wallTime\": 1647712269.5667415, \"step\": 65, \"value\": 3.0226889066398144e-05}, {\"wallTime\": 1647712269.5986032, \"step\": 66, \"value\": 3.053982072742656e-05}, {\"wallTime\": 1647712269.643413, \"step\": 67, \"value\": 3.0857318051857874e-05}, {\"wallTime\": 1647712269.6860566, \"step\": 68, \"value\": 3.117937012575567e-05}, {\"wallTime\": 1647712269.7657561, \"step\": 70, \"value\": 3.183711669407785e-05}, {\"wallTime\": 1647712269.806786, \"step\": 71, \"value\": 3.2172800274565816e-05}, {\"wallTime\": 1647712270.0691338, \"step\": 77, \"value\": 3.42817984346766e-05}, {\"wallTime\": 1647712270.1559465, \"step\": 79, \"value\": 3.502078106976114e-05}, {\"wallTime\": 1647712270.2005985, \"step\": 80, \"value\": 3.5396984458202496e-05}, {\"wallTime\": 1647712270.2870471, \"step\": 82, \"value\": 3.6162786273052916e-05}, {\"wallTime\": 1647712270.4360213, \"step\": 85, \"value\": 3.734484198503196e-05}, {\"wallTime\": 1647712270.6003594, \"step\": 89, \"value\": 3.898286013281904e-05}, {\"wallTime\": 1647712270.657332, \"step\": 90, \"value\": 3.9403370465151966e-05}, {\"wallTime\": 1647712271.1009333, \"step\": 99, \"value\": 4.338429062045179e-05}, {\"wallTime\": 1647712271.151861, \"step\": 100, \"value\": 4.384826388559304e-05}, {\"wallTime\": 1647712271.2651567, \"step\": 103, \"value\": 4.526593693299219e-05}, {\"wallTime\": 1647712271.3807282, \"step\": 106, \"value\": 4.672202339861542e-05}, {\"wallTime\": 1647712271.4168339, \"step\": 107, \"value\": 4.721587902167812e-05}, {\"wallTime\": 1647712271.5118234, \"step\": 109, \"value\": 4.821626498596743e-05}, {\"wallTime\": 1647712271.7649586, \"step\": 116, \"value\": 5.184968176763505e-05}, {\"wallTime\": 1647712271.9994094, \"step\": 121, \"value\": 5.4569292842643335e-05}, {\"wallTime\": 1647712272.20114, \"step\": 125, \"value\": 5.68185314477887e-05}, {\"wallTime\": 1647712272.235342, \"step\": 126, \"value\": 5.7390963775105774e-05}, {\"wallTime\": 1647712272.3226526, \"step\": 128, \"value\": 5.854789196746424e-05}, {\"wallTime\": 1647712272.4199898, \"step\": 130, \"value\": 5.972083454253152e-05}, {\"wallTime\": 1647712272.4639838, \"step\": 131, \"value\": 6.0313279391266406e-05}, {\"wallTime\": 1647712272.6844997, \"step\": 136, \"value\": 6.333478086162359e-05}, {\"wallTime\": 1647712272.7281585, \"step\": 137, \"value\": 6.395085802068934e-05}, {\"wallTime\": 1647712273.0915031, \"step\": 144, \"value\": 6.837170803919435e-05}, {\"wallTime\": 1647712273.186323, \"step\": 146, \"value\": 6.966925866436213e-05}, {\"wallTime\": 1647712273.2329051, \"step\": 147, \"value\": 7.032370922388509e-05}, {\"wallTime\": 1647712273.3740523, \"step\": 150, \"value\": 7.230962364701554e-05}, {\"wallTime\": 1647712273.6760387, \"step\": 157, \"value\": 7.707325130468234e-05}, {\"wallTime\": 1647712273.7579648, \"step\": 159, \"value\": 7.846718654036522e-05}, {\"wallTime\": 1647712273.8059247, \"step\": 160, \"value\": 7.91695638326928e-05}, {\"wallTime\": 1647712273.900155, \"step\": 162, \"value\": 8.058508683461696e-05}, {\"wallTime\": 1647712273.9948032, \"step\": 164, \"value\": 8.201484888559207e-05}, {\"wallTime\": 1647712274.3242128, \"step\": 170, \"value\": 8.638849976705387e-05}, {\"wallTime\": 1647712274.3677537, \"step\": 171, \"value\": 8.712958515388891e-05}, {\"wallTime\": 1647712274.4125688, \"step\": 172, \"value\": 8.787410479271784e-05}, {\"wallTime\": 1647712274.550095, \"step\": 175, \"value\": 9.01281091501005e-05}, {\"wallTime\": 1647712274.5923555, \"step\": 176, \"value\": 9.088619844987988e-05}, {\"wallTime\": 1647712274.633771, \"step\": 177, \"value\": 9.164765651803464e-05}, {\"wallTime\": 1647712274.713127, \"step\": 178, \"value\": 9.241244697477669e-05}, {\"wallTime\": 1647712274.8317995, \"step\": 180, \"value\": 9.395199595019221e-05}, {\"wallTime\": 1647712274.884553, \"step\": 181, \"value\": 9.472671808907762e-05}, {\"wallTime\": 1647712275.0492988, \"step\": 184, \"value\": 9.707050048746169e-05}, {\"wallTime\": 1647712275.1057646, \"step\": 185, \"value\": 9.785824659047648e-05}, {\"wallTime\": 1647712275.1586547, \"step\": 186, \"value\": 9.864921594271436e-05}, {\"wallTime\": 1647712275.3240113, \"step\": 190, \"value\": 0.00010184491839027032}, {\"wallTime\": 1647712275.3743687, \"step\": 191, \"value\": 0.00010265172750223428}, {\"wallTime\": 1647712275.4333076, \"step\": 192, \"value\": 0.00010346165800001472}, {\"wallTime\": 1647712275.6114223, \"step\": 195, \"value\": 0.00010591001773718745}, {\"wallTime\": 1647712275.8326848, \"step\": 199, \"value\": 0.0001092171878553927}, {\"wallTime\": 1647712275.9054093, \"step\": 200, \"value\": 0.00011005150008713827}, {\"wallTime\": 1647712275.9795392, \"step\": 202, \"value\": 0.00011172901577083394}, {\"wallTime\": 1647712276.0259554, \"step\": 203, \"value\": 0.0001125721973949112}, {\"wallTime\": 1647712276.0681436, \"step\": 204, \"value\": 0.00011341829667799175}, {\"wallTime\": 1647712276.112339, \"step\": 205, \"value\": 0.00011426730634411797}, {\"wallTime\": 1647712276.1958869, \"step\": 207, \"value\": 0.00011597396223805845}, {\"wallTime\": 1647712276.292318, \"step\": 209, \"value\": 0.0001176920413854532}, {\"wallTime\": 1647712276.382184, \"step\": 211, \"value\": 0.00011942139826714993}, {\"wallTime\": 1647712276.474502, \"step\": 213, \"value\": 0.00012116190191591159}, {\"wallTime\": 1647712276.5653539, \"step\": 215, \"value\": 0.0001229134068125859}, {\"wallTime\": 1647712276.6117847, \"step\": 216, \"value\": 0.0001237932447111234}, {\"wallTime\": 1647712276.7835321, \"step\": 219, \"value\": 0.00012644885282497853}, {\"wallTime\": 1647712276.8301938, \"step\": 220, \"value\": 0.00012733937182929367}, {\"wallTime\": 1647712276.875554, \"step\": 221, \"value\": 0.00012823252473026514}, {\"wallTime\": 1647712276.9269454, \"step\": 222, \"value\": 0.0001291282824240625}, {\"wallTime\": 1647712277.0114431, \"step\": 224, \"value\": 0.0001309275539824739}, {\"wallTime\": 1647712277.2409406, \"step\": 229, \"value\": 0.0001354701234959066}, {\"wallTime\": 1647712277.6007206, \"step\": 237, \"value\": 0.0001428654504707083}, {\"wallTime\": 1647712277.6475477, \"step\": 238, \"value\": 0.00014380048378370702}, {\"wallTime\": 1647712277.692831, \"step\": 239, \"value\": 0.00014473781629931182}, {\"wallTime\": 1647712277.784288, \"step\": 241, \"value\": 0.0001466193061787635}, {\"wallTime\": 1647712277.8301282, \"step\": 242, \"value\": 0.00014756341988686472}, {\"wallTime\": 1647712277.9200735, \"step\": 244, \"value\": 0.0001494582975283265}, {\"wallTime\": 1647712277.966009, \"step\": 245, \"value\": 0.0001504090178059414}, {\"wallTime\": 1647712278.0154374, \"step\": 246, \"value\": 0.00015136190631892532}, {\"wallTime\": 1647712278.0599422, \"step\": 247, \"value\": 0.00015231694851536304}, {\"wallTime\": 1647712278.2775893, \"step\": 252, \"value\": 0.00015712366439402103}, {\"wallTime\": 1647712278.3409326, \"step\": 253, \"value\": 0.0001580911921337247}, {\"wallTime\": 1647712278.3770337, \"step\": 254, \"value\": 0.00015906071348581463}, {\"wallTime\": 1647712278.5500252, \"step\": 258, \"value\": 0.00016295856039505452}, {\"wallTime\": 1647712278.5962183, \"step\": 259, \"value\": 0.00016393786063417792}, {\"wallTime\": 1647712278.6473167, \"step\": 260, \"value\": 0.00016491905262228101}, {\"wallTime\": 1647712278.7725852, \"step\": 262, \"value\": 0.00016688703908585012}, {\"wallTime\": 1647712279.1283133, \"step\": 270, \"value\": 0.0001748308859532699}, {\"wallTime\": 1647712279.2011788, \"step\": 271, \"value\": 0.0001758316211635247}, {\"wallTime\": 1647712279.4241214, \"step\": 274, \"value\": 0.00017884369299281389}, {\"wallTime\": 1647712279.5133436, \"step\": 276, \"value\": 0.00018085975898429751}, {\"wallTime\": 1647712279.5974956, \"step\": 278, \"value\": 0.00018288205319549888}, {\"wallTime\": 1647712279.6817687, \"step\": 280, \"value\": 0.00018491041555535048}, {\"wallTime\": 1647712279.7642777, \"step\": 282, \"value\": 0.0001869446859927848}, {\"wallTime\": 1647712279.806537, \"step\": 283, \"value\": 0.00018796398944687098}, {\"wallTime\": 1647712279.8958209, \"step\": 285, \"value\": 0.00019000680185854435}, {\"wallTime\": 1647712279.9886014, \"step\": 287, \"value\": 0.00019205511489417404}, {\"wallTime\": 1647712280.0337842, \"step\": 288, \"value\": 0.00019308127230033278}, {\"wallTime\": 1647712280.124304, \"step\": 290, \"value\": 0.00019513751612976193}, {\"wallTime\": 1647712280.3543785, \"step\": 295, \"value\": 0.0002003000263357535}, {\"wallTime\": 1647712280.4016623, \"step\": 296, \"value\": 0.000201336108148098}, {\"wallTime\": 1647712280.448875, \"step\": 297, \"value\": 0.00020237333956174552}, {\"wallTime\": 1647712280.5001523, \"step\": 298, \"value\": 0.00020341170602478087}, {\"wallTime\": 1647712280.8578248, \"step\": 306, \"value\": 0.00021175666188355535}, {\"wallTime\": 1647712280.9372482, \"step\": 308, \"value\": 0.00021385270520113409}, {\"wallTime\": 1647712280.9798543, \"step\": 309, \"value\": 0.0002149020874639973}, {\"wallTime\": 1647712281.111938, \"step\": 312, \"value\": 0.0002180553856305778}, {\"wallTime\": 1647712281.329567, \"step\": 316, \"value\": 0.00022227107547223568}, {\"wallTime\": 1647712281.4205194, \"step\": 318, \"value\": 0.00022438338783103973}, {\"wallTime\": 1647712281.4661515, \"step\": 319, \"value\": 0.00022544056992046535}, {\"wallTime\": 1647712281.5965724, \"step\": 322, \"value\": 0.0002286160597577691}, {\"wallTime\": 1647712281.6898878, \"step\": 324, \"value\": 0.0002307360846316442}, {\"wallTime\": 1647712281.917365, \"step\": 329, \"value\": 0.0002360455837333575}, {\"wallTime\": 1647712282.0016932, \"step\": 331, \"value\": 0.00023817269538994879}, {\"wallTime\": 1647712282.0457094, \"step\": 332, \"value\": 0.00023923689150251448}, {\"wallTime\": 1647712282.2698965, \"step\": 337, \"value\": 0.00024456324172206223}, {\"wallTime\": 1647712282.3153102, \"step\": 338, \"value\": 0.0002456294314470142}, {\"wallTime\": 1647712282.405711, \"step\": 340, \"value\": 0.0002477625967003405}, {\"wallTime\": 1647712282.5410516, \"step\": 343, \"value\": 0.0002509639598429203}, {\"wallTime\": 1647712282.6326137, \"step\": 345, \"value\": 0.00025309898774139583}, {\"wallTime\": 1647712282.6837955, \"step\": 346, \"value\": 0.00025416669086553156}, {\"wallTime\": 1647712282.87393, \"step\": 350, \"value\": 0.000258438172750175}, {\"wallTime\": 1647712282.959804, \"step\": 352, \"value\": 0.0002605740155559033}, {\"wallTime\": 1647712283.01102, \"step\": 353, \"value\": 0.0002616418933030218}, {\"wallTime\": 1647712283.0553632, \"step\": 354, \"value\": 0.0002627097419463098}, {\"wallTime\": 1647712283.2965126, \"step\": 358, \"value\": 0.0002669800305739045}, {\"wallTime\": 1647712283.4876342, \"step\": 362, \"value\": 0.00027124767075292766}, {\"wallTime\": 1647712283.5154462, \"step\": 363, \"value\": 0.00027231400599703193}, {\"wallTime\": 1647712283.5524547, \"step\": 364, \"value\": 0.0002733800502028316}, {\"wallTime\": 1647712283.6004658, \"step\": 365, \"value\": 0.0002744458324741572}, {\"wallTime\": 1647712283.6482332, \"step\": 366, \"value\": 0.0002755112946033478}, {\"wallTime\": 1647712283.695872, \"step\": 367, \"value\": 0.00027657640748657286}, {\"wallTime\": 1647712284.0615451, \"step\": 374, \"value\": 0.0002840210509020835}, {\"wallTime\": 1647712284.1937878, \"step\": 377, \"value\": 0.00028720442787744105}, {\"wallTime\": 1647712284.2384522, \"step\": 378, \"value\": 0.0002882644475903362}, {\"wallTime\": 1647712284.6000423, \"step\": 386, \"value\": 0.00029672152595594525}, {\"wallTime\": 1647712284.7742794, \"step\": 390, \"value\": 0.00030093250097706914}, {\"wallTime\": 1647712284.8140664, \"step\": 391, \"value\": 0.00030198320746421814}, {\"wallTime\": 1647712284.8533123, \"step\": 392, \"value\": 0.000303033011732623}, {\"wallTime\": 1647712284.8894715, \"step\": 393, \"value\": 0.0003040819428861141}, {\"wallTime\": 1647712284.9360783, \"step\": 394, \"value\": 0.0003051299718208611}, {\"wallTime\": 1647712285.066249, \"step\": 397, \"value\": 0.000308268383378163}, {\"wallTime\": 1647712285.290417, \"step\": 402, \"value\": 0.0003134789876639843}, {\"wallTime\": 1647712285.3771646, \"step\": 404, \"value\": 0.000315555720590055}, {\"wallTime\": 1647712285.5546715, \"step\": 408, \"value\": 0.00031969533301889896}, {\"wallTime\": 1647712285.6010687, \"step\": 409, \"value\": 0.0003207272384315729}, {\"wallTime\": 1647712285.7850614, \"step\": 413, \"value\": 0.00032484225812368095}, {\"wallTime\": 1647712285.8275185, \"step\": 414, \"value\": 0.0003258677606936544}, {\"wallTime\": 1647712285.8637953, \"step\": 415, \"value\": 0.0003268919244874269}, {\"wallTime\": 1647712286.0035334, \"step\": 418, \"value\": 0.00032995615038089454}, {\"wallTime\": 1647712286.1370962, \"step\": 421, \"value\": 0.00033300751238130033}, {\"wallTime\": 1647712286.1826384, \"step\": 422, \"value\": 0.0003340217226650566}, {\"wallTime\": 1647712286.3117313, \"step\": 425, \"value\": 0.00033705512760207057}, {\"wallTime\": 1647712286.3566775, \"step\": 426, \"value\": 0.00033806316787377}, {\"wallTime\": 1647712286.575996, \"step\": 430, \"value\": 0.0003420792636461556}, {\"wallTime\": 1647712286.6183903, \"step\": 431, \"value\": 0.00034307915484532714}, {\"wallTime\": 1647712286.7840047, \"step\": 435, \"value\": 0.0003470616939011961}, {\"wallTime\": 1647712286.8256662, \"step\": 436, \"value\": 0.000348052941262722}, {\"wallTime\": 1647712286.8683138, \"step\": 437, \"value\": 0.0003490424423944205}, {\"wallTime\": 1647712286.9625535, \"step\": 439, \"value\": 0.00035101594403386116}, {\"wallTime\": 1647712287.0081155, \"step\": 440, \"value\": 0.0003519999445416033}, {\"wallTime\": 1647712287.0554729, \"step\": 441, \"value\": 0.00035298208240419626}, {\"wallTime\": 1647712287.1482434, \"step\": 443, \"value\": 0.0003549406537786126}, {\"wallTime\": 1647712287.194224, \"step\": 444, \"value\": 0.00035591708729043603}, {\"wallTime\": 1647712287.2394912, \"step\": 445, \"value\": 0.00035689157084561884}, {\"wallTime\": 1647712287.2848158, \"step\": 446, \"value\": 0.0003578640753403306}, {\"wallTime\": 1647712287.466554, \"step\": 450, \"value\": 0.00036173409898765385}, {\"wallTime\": 1647712287.5119076, \"step\": 451, \"value\": 0.00036269647534936666}, {\"wallTime\": 1647712287.5615962, \"step\": 452, \"value\": 0.0003636568144429475}, {\"wallTime\": 1647712287.6038222, \"step\": 453, \"value\": 0.000364615028956905}, {\"wallTime\": 1647712287.648064, \"step\": 454, \"value\": 0.0003655711479950696}, {\"wallTime\": 1647712287.7370205, \"step\": 456, \"value\": 0.00036747692502103746}, {\"wallTime\": 1647712287.821755, \"step\": 458, \"value\": 0.00036937400000169873}, {\"wallTime\": 1647712287.9145675, \"step\": 460, \"value\": 0.0003712621983140707}, {\"wallTime\": 1647712287.9563282, \"step\": 461, \"value\": 0.00037220295052975416}, {\"wallTime\": 1647712288.1291006, \"step\": 465, \"value\": 0.00037594305467791855}, {\"wallTime\": 1647712288.2331145, \"step\": 466, \"value\": 0.0003768722526729107}, {\"wallTime\": 1647712288.3046587, \"step\": 468, \"value\": 0.000378723576432094}, {\"wallTime\": 1647712292.6015515, \"step\": 470, \"value\": 0.0003805652668233961}, {\"wallTime\": 1647712292.7783399, \"step\": 474, \"value\": 0.0003842193109448999}, {\"wallTime\": 1647712292.8160548, \"step\": 475, \"value\": 0.0003851265646517277}, {\"wallTime\": 1647712292.9542193, \"step\": 478, \"value\": 0.000387833162676543}, {\"wallTime\": 1647712293.0000622, \"step\": 479, \"value\": 0.0003887302300427109}, {\"wallTime\": 1647712293.0442095, \"step\": 480, \"value\": 0.0003896246780641377}, {\"wallTime\": 1647712293.0903952, \"step\": 481, \"value\": 0.0003905165067408234}, {\"wallTime\": 1647712293.1814, \"step\": 483, \"value\": 0.00039229224785231054}, {\"wallTime\": 1647712293.2262053, \"step\": 484, \"value\": 0.00039317613118328154}, {\"wallTime\": 1647712293.3635123, \"step\": 487, \"value\": 0.0003958115412387997}, {\"wallTime\": 1647712293.4096744, \"step\": 488, \"value\": 0.00039668456884101033}, {\"wallTime\": 1647712293.4535296, \"step\": 489, \"value\": 0.0003975548024754971}, {\"wallTime\": 1647712293.5447285, \"step\": 491, \"value\": 0.00039928697515279055}, {\"wallTime\": 1647712293.678141, \"step\": 494, \"value\": 0.0004018640611320734}, {\"wallTime\": 1647712293.8576021, \"step\": 498, \"value\": 0.0004052600415889174}, {\"wallTime\": 1647712294.0570087, \"step\": 502, \"value\": 0.00040860913577489555}, {\"wallTime\": 1647712294.110193, \"step\": 503, \"value\": 0.0004094389732927084}, {\"wallTime\": 1647712294.248884, \"step\": 506, \"value\": 0.000411910266848281}, {\"wallTime\": 1647712294.3860795, \"step\": 509, \"value\": 0.00041435399907641113}, {\"wallTime\": 1647712294.4305606, \"step\": 510, \"value\": 0.0004151623579673469}, {\"wallTime\": 1647712294.4711676, \"step\": 511, \"value\": 0.0004159676027484238}, {\"wallTime\": 1647712294.5235834, \"step\": 512, \"value\": 0.0004167697043158114}, {\"wallTime\": 1647712294.5728712, \"step\": 513, \"value\": 0.0004175686335656792}, {\"wallTime\": 1647712294.6210203, \"step\": 514, \"value\": 0.0004183643904980272}, {\"wallTime\": 1647712294.7644506, \"step\": 517, \"value\": 0.0004207324527669698}, {\"wallTime\": 1647712294.8133347, \"step\": 518, \"value\": 0.00042151534580625594}, {\"wallTime\": 1647712294.856477, \"step\": 519, \"value\": 0.0004222949792165309}, {\"wallTime\": 1647712294.886033, \"step\": 520, \"value\": 0.00042307135299779475}, {\"wallTime\": 1647712295.0191338, \"step\": 523, \"value\": 0.0004253806546330452}, {\"wallTime\": 1647712295.5523777, \"step\": 530, \"value\": 0.0004306516784708947}, {\"wallTime\": 1647712295.7488022, \"step\": 533, \"value\": 0.00043285940773785114}, {\"wallTime\": 1647712295.8075724, \"step\": 534, \"value\": 0.00043358837137930095}, {\"wallTime\": 1647712295.929314, \"step\": 536, \"value\": 0.0004350357921794057}, {\"wallTime\": 1647712295.9938629, \"step\": 537, \"value\": 0.00043575422023423016}, {\"wallTime\": 1647712296.060564, \"step\": 538, \"value\": 0.0004364690976217389}, {\"wallTime\": 1647712296.121769, \"step\": 539, \"value\": 0.00043718042434193194}, {\"wallTime\": 1647712296.183042, \"step\": 540, \"value\": 0.00043788820039480925}, {\"wallTime\": 1647712296.2967858, \"step\": 542, \"value\": 0.0004392929549794644}, {\"wallTime\": 1647712296.4164662, \"step\": 544, \"value\": 0.00044068327406421304}, {\"wallTime\": 1647712296.526189, \"step\": 546, \"value\": 0.00044205901212990284}, {\"wallTime\": 1647712296.571023, \"step\": 547, \"value\": 0.0004427414096426219}, {\"wallTime\": 1647712296.7118087, \"step\": 550, \"value\": 0.00044476642506197095}, {\"wallTime\": 1647712296.8059726, \"step\": 552, \"value\": 0.00044609783799387515}, {\"wallTime\": 1647712296.9366848, \"step\": 555, \"value\": 0.00044806685764342546}, {\"wallTime\": 1647712296.9786773, \"step\": 556, \"value\": 0.0004487156111281365}, {\"wallTime\": 1647712297.2659204, \"step\": 562, \"value\": 0.0004525280382949859}, {\"wallTime\": 1647712297.3059494, \"step\": 563, \"value\": 0.00045314995804801583}, {\"wallTime\": 1647712297.3439107, \"step\": 564, \"value\": 0.0004537679778877646}, {\"wallTime\": 1647712297.500975, \"step\": 568, \"value\": 0.0004562009125947952}, {\"wallTime\": 1647712297.6487424, \"step\": 571, \"value\": 0.00045798419159837067}, {\"wallTime\": 1647712297.757073, \"step\": 573, \"value\": 0.0004591531469486654}, {\"wallTime\": 1647712297.9263916, \"step\": 576, \"value\": 0.00046087647206149995}, {\"wallTime\": 1647712298.125731, \"step\": 580, \"value\": 0.0004631175834219903}, {\"wallTime\": 1647712298.3059587, \"step\": 584, \"value\": 0.00046529326937161386}, {\"wallTime\": 1647712298.3496726, \"step\": 585, \"value\": 0.00046582691720686853}, {\"wallTime\": 1647712298.3918738, \"step\": 586, \"value\": 0.0004663564031943679}, {\"wallTime\": 1647712298.4815323, \"step\": 588, \"value\": 0.00046740288962610066}, {\"wallTime\": 1647712298.564356, \"step\": 590, \"value\": 0.0004684326995629817}, {\"wallTime\": 1647712298.6107523, \"step\": 591, \"value\": 0.00046894128900021315}, {\"wallTime\": 1647712298.64862, \"step\": 592, \"value\": 0.00046944571658968925}, {\"wallTime\": 1647712298.7421634, \"step\": 594, \"value\": 0.00047044188249856234}, {\"wallTime\": 1647712298.8224106, \"step\": 596, \"value\": 0.0004714211099781096}, {\"wallTime\": 1647712298.8641276, \"step\": 597, \"value\": 0.0004719043499790132}, {\"wallTime\": 1647712298.905186, \"step\": 598, \"value\": 0.00047238331171683967}, {\"wallTime\": 1647712298.9832678, \"step\": 599, \"value\": 0.00047285802429541945}, {\"wallTime\": 1647712299.074179, \"step\": 601, \"value\": 0.0004737945564556867}, {\"wallTime\": 1647712299.1194572, \"step\": 602, \"value\": 0.00047425637603737414}, {\"wallTime\": 1647712299.1643224, \"step\": 603, \"value\": 0.000474713888252154}, {\"wallTime\": 1647712299.2548018, \"step\": 605, \"value\": 0.00047561596147716045}, {\"wallTime\": 1647712299.3903544, \"step\": 608, \"value\": 0.00047693648957647383}, {\"wallTime\": 1647712299.4814365, \"step\": 610, \"value\": 0.000477795023471117}, {\"wallTime\": 1647712299.6166697, \"step\": 613, \"value\": 0.0004790499515365809}, {\"wallTime\": 1647712299.658903, \"step\": 614, \"value\": 0.0004794594715349376}, {\"wallTime\": 1647712299.7402885, \"step\": 616, \"value\": 0.00048026524018496275}, {\"wallTime\": 1647712299.8223124, \"step\": 618, \"value\": 0.00048105328460223973}, {\"wallTime\": 1647712299.9000323, \"step\": 620, \"value\": 0.00048182354657910764}, {\"wallTime\": 1647712299.9759927, \"step\": 622, \"value\": 0.0004825759388040751}, {\"wallTime\": 1647712300.0022047, \"step\": 623, \"value\": 0.0004829454410355538}, {\"wallTime\": 1647712300.1278718, \"step\": 626, \"value\": 0.0004840269684791565}, {\"wallTime\": 1647712300.2067463, \"step\": 628, \"value\": 0.00048472548951394856}, {\"wallTime\": 1647712300.2480326, \"step\": 629, \"value\": 0.00048506795428693295}, {\"wallTime\": 1647712300.4043584, \"step\": 633, \"value\": 0.0004863925278186798}, {\"wallTime\": 1647712300.581445, \"step\": 637, \"value\": 0.000487644225358963}, {\"wallTime\": 1647712300.7038171, \"step\": 640, \"value\": 0.0004885349771939218}, {\"wallTime\": 1647712300.744981, \"step\": 641, \"value\": 0.0004888226976618171}, {\"wallTime\": 1647712300.8061352, \"step\": 642, \"value\": 0.0004891058197245002}, {\"wallTime\": 1647712300.8354294, \"step\": 643, \"value\": 0.0004893843433819711}, {\"wallTime\": 1647712300.8736072, \"step\": 644, \"value\": 0.0004896582686342299}, {\"wallTime\": 1647712301.1162221, \"step\": 649, \"value\": 0.0004909583949483931}, {\"wallTime\": 1647712301.2010045, \"step\": 651, \"value\": 0.0004914459423162043}, {\"wallTime\": 1647712301.247369, \"step\": 652, \"value\": 0.0004916827310808003}, {\"wallTime\": 1647712301.2941608, \"step\": 653, \"value\": 0.0004919149214401841}, {\"wallTime\": 1647712301.340262, \"step\": 654, \"value\": 0.000492142396979034}, {\"wallTime\": 1647712301.3862226, \"step\": 655, \"value\": 0.0004923652159050107}, {\"wallTime\": 1647712301.5297296, \"step\": 658, \"value\": 0.0004930055583827198}, {\"wallTime\": 1647712301.6243927, \"step\": 660, \"value\": 0.0004934091120958328}, {\"wallTime\": 1647712301.9600377, \"step\": 667, \"value\": 0.0004946733242832124}, {\"wallTime\": 1647712302.0954723, \"step\": 670, \"value\": 0.0004951443988829851}, {\"wallTime\": 1647712302.3125184, \"step\": 675, \"value\": 0.0004958349163644016}, {\"wallTime\": 1647712302.3549407, \"step\": 676, \"value\": 0.0004959588404744864}, {\"wallTime\": 1647712302.3982387, \"step\": 677, \"value\": 0.0004960779915563762}, {\"wallTime\": 1647712302.5633895, \"step\": 680, \"value\": 0.0004964069230481982}, {\"wallTime\": 1647712302.6566687, \"step\": 682, \"value\": 0.0004966024425812066}, {\"wallTime\": 1647712302.7008657, \"step\": 683, \"value\": 0.0004966930719092488}, {\"wallTime\": 1647712302.7447038, \"step\": 684, \"value\": 0.0004967789864167571}, {\"wallTime\": 1647712302.885211, \"step\": 687, \"value\": 0.0004970080335624516}, {\"wallTime\": 1647712303.11035, \"step\": 692, \"value\": 0.0004972944152541459}, {\"wallTime\": 1647712303.1979015, \"step\": 694, \"value\": 0.0004973756149411201}, {\"wallTime\": 1647712303.281059, \"step\": 696, \"value\": 0.0004974376643076539}, {\"wallTime\": 1647712303.3277884, \"step\": 697, \"value\": 0.0004974615294486284}, {\"wallTime\": 1647712303.4163277, \"step\": 699, \"value\": 0.0004974949988536537}, {\"wallTime\": 1647712303.5466187, \"step\": 702, \"value\": 0.0004975097835995257}, {\"wallTime\": 1647712303.5912912, \"step\": 703, \"value\": 0.0004975088522769511}, {\"wallTime\": 1647712303.6846862, \"step\": 705, \"value\": 0.0004975043120793998}, {\"wallTime\": 1647712303.8710866, \"step\": 709, \"value\": 0.0004974842886440456}, {\"wallTime\": 1647712303.914978, \"step\": 710, \"value\": 0.0004974770126864314}, {\"wallTime\": 1647712304.0129929, \"step\": 712, \"value\": 0.0004974596668034792}, {\"wallTime\": 1647712304.158814, \"step\": 715, \"value\": 0.0004974268958903849}, {\"wallTime\": 1647712304.2564309, \"step\": 717, \"value\": 0.0004974004696123302}, {\"wallTime\": 1647712304.391044, \"step\": 720, \"value\": 0.0004973540198989213}, {\"wallTime\": 1647712304.4353683, \"step\": 721, \"value\": 0.000497336674015969}, {\"wallTime\": 1647712304.5280397, \"step\": 723, \"value\": 0.0004972993629053235}, {\"wallTime\": 1647712304.6137385, \"step\": 725, \"value\": 0.0004972583265043795}, {\"wallTime\": 1647712304.6943545, \"step\": 726, \"value\": 0.000497236498631537}, {\"wallTime\": 1647712304.7912815, \"step\": 728, \"value\": 0.000497190048918128}, {\"wallTime\": 1647712304.8368003, \"step\": 729, \"value\": 0.0004971654270775616}, {\"wallTime\": 1647712304.9275894, \"step\": 731, \"value\": 0.0004971135640516877}, {\"wallTime\": 1647712304.9735432, \"step\": 732, \"value\": 0.0004970862064510584}, {\"wallTime\": 1647712305.0006552, \"step\": 733, \"value\": 0.0004970579757355154}, {\"wallTime\": 1647712305.218401, \"step\": 738, \"value\": 0.0004969032015651464}, {\"wallTime\": 1647712305.3990796, \"step\": 742, \"value\": 0.0004967630375176668}, {\"wallTime\": 1647712305.4399714, \"step\": 743, \"value\": 0.0004967257264070213}, {\"wallTime\": 1647712305.4800863, \"step\": 744, \"value\": 0.0004966874839738011}, {\"wallTime\": 1647712305.8827739, \"step\": 755, \"value\": 0.0004962070961482823}, {\"wallTime\": 1647712305.927486, \"step\": 756, \"value\": 0.0004961579688824713}, {\"wallTime\": 1647712306.0199327, \"step\": 758, \"value\": 0.0004960570367984474}, {\"wallTime\": 1647712306.196003, \"step\": 763, \"value\": 0.0004957888158969581}, {\"wallTime\": 1647712306.2258117, \"step\": 764, \"value\": 0.000495732412673533}, {\"wallTime\": 1647712306.2724504, \"step\": 765, \"value\": 0.000495675194542855}, {\"wallTime\": 1647712306.4114301, \"step\": 768, \"value\": 0.0004954979522153735}, {\"wallTime\": 1647712306.4569082, \"step\": 769, \"value\": 0.000495437067002058}, {\"wallTime\": 1647712306.5976589, \"step\": 772, \"value\": 0.0004952489980496466}, {\"wallTime\": 1647712306.7862377, \"step\": 775, \"value\": 0.0004950528382323682}, {\"wallTime\": 1647712306.8286815, \"step\": 776, \"value\": 0.0004949856083840132}, {\"wallTime\": 1647712306.9446933, \"step\": 778, \"value\": 0.000494848529342562}, {\"wallTime\": 1647712307.0234785, \"step\": 779, \"value\": 0.0004947786219418049}, {\"wallTime\": 1647712307.081227, \"step\": 780, \"value\": 0.0004947078414261341}, {\"wallTime\": 1647712307.1253695, \"step\": 781, \"value\": 0.0004946361295878887}, {\"wallTime\": 1647712307.171867, \"step\": 782, \"value\": 0.0004945634864270687}, {\"wallTime\": 1647712307.4758463, \"step\": 788, \"value\": 0.0004941089428029954}, {\"wallTime\": 1647712307.6078637, \"step\": 791, \"value\": 0.0004938695346936584}, {\"wallTime\": 1647712307.7025619, \"step\": 793, \"value\": 0.0004937054472975433}, {\"wallTime\": 1647712307.783416, \"step\": 795, \"value\": 0.0004935378092341125}, {\"wallTime\": 1647712307.9606352, \"step\": 799, \"value\": 0.0004931916482746601}, {\"wallTime\": 1647712308.162765, \"step\": 804, \"value\": 0.0004927388508804142}, {\"wallTime\": 1647712308.207349, \"step\": 805, \"value\": 0.0004926456022076309}, {\"wallTime\": 1647712308.253954, \"step\": 806, \"value\": 0.0004925514804199338}, {\"wallTime\": 1647712308.2995465, \"step\": 807, \"value\": 0.000492456485517323}, {\"wallTime\": 1647712308.4363177, \"step\": 810, \"value\": 0.0004921660292893648}, {\"wallTime\": 1647712308.7978969, \"step\": 818, \"value\": 0.0004913523443974555}, {\"wallTime\": 1647712308.8408756, \"step\": 819, \"value\": 0.0004912465810775757}, {\"wallTime\": 1647712308.9292881, \"step\": 821, \"value\": 0.000491032493300736}, {\"wallTime\": 1647712309.0218759, \"step\": 823, \"value\": 0.0004908148548565805}, {\"wallTime\": 1647712309.152396, \"step\": 826, \"value\": 0.0004904817324131727}, {\"wallTime\": 1647712309.1985855, \"step\": 827, \"value\": 0.0004903689259663224}, {\"wallTime\": 1647712309.2537968, \"step\": 828, \"value\": 0.0004902552464045584}, {\"wallTime\": 1647712309.4475553, \"step\": 832, \"value\": 0.0004897916223853827}, {\"wallTime\": 1647712309.4924743, \"step\": 833, \"value\": 0.0004896735190413892}, {\"wallTime\": 1647712309.5816188, \"step\": 835, \"value\": 0.0004894346348010004}, {\"wallTime\": 1647712309.627022, \"step\": 836, \"value\": 0.0004893138539046049}, {\"wallTime\": 1647712309.6748438, \"step\": 837, \"value\": 0.0004891922581009567}, {\"wallTime\": 1647712309.7616365, \"step\": 839, \"value\": 0.0004889463307335973}, {\"wallTime\": 1647712309.8083022, \"step\": 840, \"value\": 0.000488822057377547}, {\"wallTime\": 1647712309.9549215, \"step\": 843, \"value\": 0.0004884439404122531}, {\"wallTime\": 1647712310.0438073, \"step\": 845, \"value\": 0.00048818744835443795}, {\"wallTime\": 1647712310.256862, \"step\": 850, \"value\": 0.00048753092414699495}, {\"wallTime\": 1647712310.2969573, \"step\": 851, \"value\": 0.0004873970174230635}, {\"wallTime\": 1647712310.4046664, \"step\": 854, \"value\": 0.00048698997125029564}, {\"wallTime\": 1647712310.5295231, \"step\": 857, \"value\": 0.0004865750961471349}, {\"wallTime\": 1647712310.6598725, \"step\": 860, \"value\": 0.00048615236300975084}, {\"wallTime\": 1647712310.7307231, \"step\": 862, \"value\": 0.00048586621414870024}, {\"wallTime\": 1647712310.8686996, \"step\": 865, \"value\": 0.000485430471599102}, {\"wallTime\": 1647712310.9144025, \"step\": 866, \"value\": 0.00048528346815146506}, {\"wallTime\": 1647712311.0971863, \"step\": 870, \"value\": 0.0004846868687309325}, {\"wallTime\": 1647712311.1425123, \"step\": 871, \"value\": 0.0004845355579163879}, {\"wallTime\": 1647712311.7808073, \"step\": 884, \"value\": 0.0004824901116080582}, {\"wallTime\": 1647712311.8201509, \"step\": 885, \"value\": 0.00048232675180770457}, {\"wallTime\": 1647712311.8658636, \"step\": 886, \"value\": 0.0004821625479962677}, {\"wallTime\": 1647712311.951315, \"step\": 888, \"value\": 0.0004818315792363137}, {\"wallTime\": 1647712312.0343766, \"step\": 890, \"value\": 0.00048149717622436583}, {\"wallTime\": 1647712312.1243527, \"step\": 892, \"value\": 0.0004811593680642545}, {\"wallTime\": 1647712312.266357, \"step\": 895, \"value\": 0.0004806462675333023}, {\"wallTime\": 1647712312.356865, \"step\": 897, \"value\": 0.00048029996105469763}, {\"wallTime\": 1647712312.4019303, \"step\": 898, \"value\": 0.00048012554179877043}, {\"wallTime\": 1647712312.5378404, \"step\": 901, \"value\": 0.0004795971908606589}, {\"wallTime\": 1647712312.581129, \"step\": 902, \"value\": 0.00047941936645656824}, {\"wallTime\": 1647712312.6687987, \"step\": 904, \"value\": 0.0004790612147189677}, {\"wallTime\": 1647712312.7953606, \"step\": 907, \"value\": 0.0004785176715813577}, {\"wallTime\": 1647712312.8376195, \"step\": 908, \"value\": 0.0004783347831107676}, {\"wallTime\": 1647712312.9630823, \"step\": 910, \"value\": 0.00047796653234399855}, {\"wallTime\": 1647712313.0100696, \"step\": 911, \"value\": 0.00047778114094398916}, {\"wallTime\": 1647712313.1508327, \"step\": 914, \"value\": 0.00047721993178129196}, {\"wallTime\": 1647712313.3386192, \"step\": 918, \"value\": 0.0004764599434565753}, {\"wallTime\": 1647712313.385406, \"step\": 919, \"value\": 0.00047626785817556083}, {\"wallTime\": 1647712313.4679484, \"step\": 921, \"value\": 0.00047588118468411267}, {\"wallTime\": 1647712313.5620809, \"step\": 923, \"value\": 0.00047549119335599244}, {\"wallTime\": 1647712313.7501464, \"step\": 927, \"value\": 0.0004747012280859053}, {\"wallTime\": 1647712313.7925556, \"step\": 928, \"value\": 0.00047450169222429395}, {\"wallTime\": 1647712313.8753047, \"step\": 930, \"value\": 0.0004741000884678215}, {\"wallTime\": 1647712313.902609, \"step\": 931, \"value\": 0.00047389804967679083}, {\"wallTime\": 1647712313.9404244, \"step\": 932, \"value\": 0.0004736951959785074}, {\"wallTime\": 1647712313.9847093, \"step\": 933, \"value\": 0.0004734914982691407}, {\"wallTime\": 1647712314.1276095, \"step\": 935, \"value\": 0.000473081658128649}, {\"wallTime\": 1647712318.4929202, \"step\": 939, \"value\": 0.00047225214075297117}, {\"wallTime\": 1647712318.5488386, \"step\": 941, \"value\": 0.00047183246351778507}, {\"wallTime\": 1647712318.588458, \"step\": 942, \"value\": 0.0004716213734354824}, {\"wallTime\": 1647712318.7203546, \"step\": 945, \"value\": 0.00047098330105654895}, {\"wallTime\": 1647712318.8873441, \"step\": 949, \"value\": 0.0004701211000792682}, {\"wallTime\": 1647712319.0186467, \"step\": 952, \"value\": 0.0004694659437518567}, {\"wallTime\": 1647712319.152286, \"step\": 955, \"value\": 0.00046880351146683097}, {\"wallTime\": 1647712319.1969929, \"step\": 956, \"value\": 0.0004685810999944806}, {\"wallTime\": 1647712319.375182, \"step\": 960, \"value\": 0.0004676833632402122}, {\"wallTime\": 1647712319.4646845, \"step\": 962, \"value\": 0.00046722969273105264}, {\"wallTime\": 1647712319.5093248, \"step\": 963, \"value\": 0.00046700163511559367}, {\"wallTime\": 1647712319.5982945, \"step\": 965, \"value\": 0.00046654316247440875}, {\"wallTime\": 1647712319.690667, \"step\": 967, \"value\": 0.0004660814884118736}, {\"wallTime\": 1647712319.7319953, \"step\": 968, \"value\": 0.00046584944357164204}, {\"wallTime\": 1647712319.8618069, \"step\": 971, \"value\": 0.00046514859423041344}, {\"wallTime\": 1647712320.091759, \"step\": 976, \"value\": 0.0004639646504074335}, {\"wallTime\": 1647712320.191104, \"step\": 978, \"value\": 0.00046348554315045476}, {\"wallTime\": 1647712320.238078, \"step\": 979, \"value\": 0.0004632448253687471}, {\"wallTime\": 1647712320.3325534, \"step\": 981, \"value\": 0.0004627610032912344}, {\"wallTime\": 1647712320.3842688, \"step\": 982, \"value\": 0.00046251792809925973}, {\"wallTime\": 1647712320.5695415, \"step\": 986, \"value\": 0.00046153776929713786}, {\"wallTime\": 1647712320.7677512, \"step\": 990, \"value\": 0.00046054512495175004}, {\"wallTime\": 1647712321.3838131, \"step\": 992, \"value\": 0.0004600441607180983}, {\"wallTime\": 1647712321.4336472, \"step\": 994, \"value\": 0.00045954008237458766}, {\"wallTime\": 1647712321.5221808, \"step\": 996, \"value\": 0.00045903294812887907}, {\"wallTime\": 1647712321.6532116, \"step\": 998, \"value\": 0.0004585226997733116}, {\"wallTime\": 1647712321.7182732, \"step\": 999, \"value\": 0.0004582664405461401}, {\"wallTime\": 1647712321.84791, \"step\": 1002, \"value\": 0.0004574930062517524}, {\"wallTime\": 1647712321.893117, \"step\": 1003, \"value\": 0.0004572336620185524}, {\"wallTime\": 1647712321.93999, \"step\": 1004, \"value\": 0.00045697359018959105}, {\"wallTime\": 1647712322.0295696, \"step\": 1006, \"value\": 0.0004564510891214013}, {\"wallTime\": 1647712322.2582738, \"step\": 1011, \"value\": 0.0004551315796561539}, {\"wallTime\": 1647712322.3783894, \"step\": 1013, \"value\": 0.0004545984847936779}, {\"wallTime\": 1647712322.4707208, \"step\": 1015, \"value\": 0.00045406236313283443}, {\"wallTime\": 1647712322.5342371, \"step\": 1016, \"value\": 0.0004537931818049401}, {\"wallTime\": 1647712322.5964637, \"step\": 1017, \"value\": 0.0004535232437774539}, {\"wallTime\": 1647712322.8369915, \"step\": 1022, \"value\": 0.0004521623195614666}, {\"wallTime\": 1647712324.193683, \"step\": 1026, \"value\": 0.00045106015750207007}, {\"wallTime\": 1647712324.3355634, \"step\": 1028, \"value\": 0.00045050462358631194}, {\"wallTime\": 1647712324.438751, \"step\": 1029, \"value\": 0.0004502257506828755}, {\"wallTime\": 1647712324.7226896, \"step\": 1035, \"value\": 0.00044853705912828445}, {\"wallTime\": 1647712324.7693892, \"step\": 1036, \"value\": 0.0004482530348468572}, {\"wallTime\": 1647712324.817414, \"step\": 1037, \"value\": 0.0004479682829696685}, {\"wallTime\": 1647712324.8706896, \"step\": 1038, \"value\": 0.0004476828034967184}, {\"wallTime\": 1647712324.9161227, \"step\": 1039, \"value\": 0.0004473965964280069}, {\"wallTime\": 1647712325.1040783, \"step\": 1043, \"value\": 0.0004462445212993771}, {\"wallTime\": 1647712325.2043765, \"step\": 1045, \"value\": 0.0004456641327124089}, {\"wallTime\": 1647712325.249872, \"step\": 1046, \"value\": 0.0004453728615771979}, {\"wallTime\": 1647712325.5285044, \"step\": 1052, \"value\": 0.00044361010077409446}, {\"wallTime\": 1647712325.6091657, \"step\": 1053, \"value\": 0.00044331379467621446}, {\"wallTime\": 1647712325.707039, \"step\": 1056, \"value\": 0.0004424206563271582}, {\"wallTime\": 1647712325.798081, \"step\": 1058, \"value\": 0.0004418216703925282}, {\"wallTime\": 1647712325.8479564, \"step\": 1059, \"value\": 0.0004415211151354015}, {\"wallTime\": 1647712325.883542, \"step\": 1060, \"value\": 0.0004412198322825134}, {\"wallTime\": 1647712325.971325, \"step\": 1062, \"value\": 0.00044061520020477474}, {\"wallTime\": 1647712326.1120808, \"step\": 1065, \"value\": 0.0004397029697429389}, {\"wallTime\": 1647712326.2750382, \"step\": 1067, \"value\": 0.00043909132364206016}, {\"wallTime\": 1647712326.3651898, \"step\": 1069, \"value\": 0.00043847691267728806}, {\"wallTime\": 1647712326.4028592, \"step\": 1070, \"value\": 0.00043816864490509033}, {\"wallTime\": 1647712326.4476068, \"step\": 1071, \"value\": 0.00043785967864096165}, {\"wallTime\": 1647712326.4935086, \"step\": 1072, \"value\": 0.00043755004298873246}, {\"wallTime\": 1647712326.5385587, \"step\": 1073, \"value\": 0.0004372397088445723}, {\"wallTime\": 1647712326.5843468, \"step\": 1074, \"value\": 0.0004369286762084812}, {\"wallTime\": 1647712326.7200913, \"step\": 1077, \"value\": 0.000435991445556283}, {\"wallTime\": 1647712326.7751572, \"step\": 1078, \"value\": 0.00043567767716012895}, {\"wallTime\": 1647712326.8504245, \"step\": 1080, \"value\": 0.00043504807399585843}, {\"wallTime\": 1647712326.8948476, \"step\": 1081, \"value\": 0.00043473223922774196}, {\"wallTime\": 1647712326.9349298, \"step\": 1082, \"value\": 0.0004344157059676945}, {\"wallTime\": 1647712327.0650685, \"step\": 1085, \"value\": 0.00043346211896277964}, {\"wallTime\": 1647712327.1077943, \"step\": 1086, \"value\": 0.00043314287904649973}, {\"wallTime\": 1647712327.1506286, \"step\": 1087, \"value\": 0.00043282299884594977}, {\"wallTime\": 1647712327.3872976, \"step\": 1091, \"value\": 0.00043153666774742305}, {\"wallTime\": 1647712327.8169482, \"step\": 1098, \"value\": 0.0004292598459869623}, {\"wallTime\": 1647712327.9111402, \"step\": 1100, \"value\": 0.00042860337998718023}, {\"wallTime\": 1647712328.008651, \"step\": 1102, \"value\": 0.00042794423643499613}, {\"wallTime\": 1647712328.0530813, \"step\": 1103, \"value\": 0.000427613704232499}, {\"wallTime\": 1647712328.0973423, \"step\": 1104, \"value\": 0.0004272825026419014}, {\"wallTime\": 1647712328.3076093, \"step\": 1107, \"value\": 0.0004262849979568273}, {\"wallTime\": 1647712328.3790498, \"step\": 1109, \"value\": 0.00042561671580187976}, {\"wallTime\": 1647712328.4582195, \"step\": 1111, \"value\": 0.00042494587250985205}, {\"wallTime\": 1647712328.5001485, \"step\": 1112, \"value\": 0.00042460946133360267}, {\"wallTime\": 1647712328.5900567, \"step\": 1114, \"value\": 0.0004239347472321242}, {\"wallTime\": 1647712328.8006623, \"step\": 1119, \"value\": 0.00042223671334795654}, {\"wallTime\": 1647712328.8906288, \"step\": 1121, \"value\": 0.00042155306437052786}, {\"wallTime\": 1647712328.9357889, \"step\": 1122, \"value\": 0.00042121027945540845}, {\"wallTime\": 1647712329.0714307, \"step\": 1125, \"value\": 0.00042017814121209085}, {\"wallTime\": 1647712329.116133, \"step\": 1126, \"value\": 0.00041983285336755216}, {\"wallTime\": 1647712329.2144341, \"step\": 1128, \"value\": 0.00041914035682566464}, {\"wallTime\": 1647712329.2586846, \"step\": 1129, \"value\": 0.00041879317723214626}, {\"wallTime\": 1647712329.3008058, \"step\": 1130, \"value\": 0.0004184453864581883}, {\"wallTime\": 1647712329.3460128, \"step\": 1131, \"value\": 0.0004180969553999603}, {\"wallTime\": 1647712329.385726, \"step\": 1132, \"value\": 0.00041774791316129267}, {\"wallTime\": 1647712329.4678555, \"step\": 1134, \"value\": 0.0004170479660388082}, {\"wallTime\": 1647712329.4910848, \"step\": 1135, \"value\": 0.00041669709025882185}, {\"wallTime\": 1647712329.5207155, \"step\": 1136, \"value\": 0.0004163455741945654}, {\"wallTime\": 1647712329.609465, \"step\": 1139, \"value\": 0.0004152873589191586}, {\"wallTime\": 1647712329.7319937, \"step\": 1142, \"value\": 0.0004142236721236259}, {\"wallTime\": 1647712329.8809834, \"step\": 1145, \"value\": 0.0004131545138079673}, {\"wallTime\": 1647712329.9188704, \"step\": 1146, \"value\": 0.0004127969150431454}, {\"wallTime\": 1647712329.9986453, \"step\": 1148, \"value\": 0.0004120799421798438}, {\"wallTime\": 1647712330.0922947, \"step\": 1150, \"value\": 0.00041136055369861424}, {\"wallTime\": 1647712330.1348782, \"step\": 1151, \"value\": 0.00041099998634308577}, {\"wallTime\": 1647712330.1808054, \"step\": 1152, \"value\": 0.0004106388078071177}, {\"wallTime\": 1647712330.2191179, \"step\": 1153, \"value\": 0.0004102770471945405}, {\"wallTime\": 1647712330.454453, \"step\": 1160, \"value\": 0.0004077281628269702}, {\"wallTime\": 1647712330.5114377, \"step\": 1162, \"value\": 0.00040699465898796916}, {\"wallTime\": 1647712330.5703979, \"step\": 1164, \"value\": 0.00040625882684253156}, {\"wallTime\": 1647712330.6405954, \"step\": 1166, \"value\": 0.0004055206954944879}, {\"wallTime\": 1647712330.683054, \"step\": 1167, \"value\": 0.00040515075670555234}, {\"wallTime\": 1647712330.9153905, \"step\": 1173, \"value\": 0.0004029191914014518}, {\"wallTime\": 1647712330.9561896, \"step\": 1174, \"value\": 0.00040254529449157417}, {\"wallTime\": 1647712331.0513613, \"step\": 1176, \"value\": 0.0004017957835458219}, {\"wallTime\": 1647712331.0920725, \"step\": 1177, \"value\": 0.0004014201695099473}, {\"wallTime\": 1647712331.1329994, \"step\": 1178, \"value\": 0.000401044002501294}, {\"wallTime\": 1647712331.4299746, \"step\": 1182, \"value\": 0.00039953383384272456}, {\"wallTime\": 1647712331.489186, \"step\": 1184, \"value\": 0.00039877541712485254}, {\"wallTime\": 1647712331.5515096, \"step\": 1186, \"value\": 0.0003980147885158658}, {\"wallTime\": 1647712331.6337867, \"step\": 1188, \"value\": 0.00039725200622342527}, {\"wallTime\": 1647712331.6737525, \"step\": 1189, \"value\": 0.000396869785618037}, {\"wallTime\": 1647712331.7096443, \"step\": 1190, \"value\": 0.00039648701203987}, {\"wallTime\": 1647712331.8587143, \"step\": 1193, \"value\": 0.00039533551898784935}, {\"wallTime\": 1647712331.8960686, \"step\": 1194, \"value\": 0.0003949505917262286}, {\"wallTime\": 1647712331.9351869, \"step\": 1195, \"value\": 0.0003945651405956596}, {\"wallTime\": 1647712332.0293808, \"step\": 1197, \"value\": 0.00039379263762384653}, {\"wallTime\": 1647712332.0696523, \"step\": 1198, \"value\": 0.00039340558578260243}, {\"wallTime\": 1647712332.186081, \"step\": 1201, \"value\": 0.0003922412870451808}, {\"wallTime\": 1647712332.3118541, \"step\": 1205, \"value\": 0.0003906814963556826}, {\"wallTime\": 1647712332.3459039, \"step\": 1206, \"value\": 0.00039029025356285274}, {\"wallTime\": 1647712332.3884006, \"step\": 1207, \"value\": 0.00038989848690107465}, {\"wallTime\": 1647712332.4773748, \"step\": 1209, \"value\": 0.00038911341107450426}, {\"wallTime\": 1647712332.6337337, \"step\": 1213, \"value\": 0.00038753708940930665}, {\"wallTime\": 1647712332.6808162, \"step\": 1214, \"value\": 0.0003871417429763824}, {\"wallTime\": 1647712332.7268918, \"step\": 1215, \"value\": 0.0003867458726745099}, {\"wallTime\": 1647712332.8683054, \"step\": 1218, \"value\": 0.00038555526407435536}, {\"wallTime\": 1647712333.1050127, \"step\": 1223, \"value\": 0.0003835609240923077}, {\"wallTime\": 1647712333.1976523, \"step\": 1225, \"value\": 0.0003827596956398338}, {\"wallTime\": 1647712333.3902726, \"step\": 1229, \"value\": 0.0003811514179687947}, {\"wallTime\": 1647712333.5286276, \"step\": 1232, \"value\": 0.000379940087441355}, {\"wallTime\": 1647712333.574993, \"step\": 1233, \"value\": 0.00037953536957502365}, {\"wallTime\": 1647712333.7598033, \"step\": 1238, \"value\": 0.00037750453338958323}, {\"wallTime\": 1647712333.882874, \"step\": 1240, \"value\": 0.00037668889854103327}, {\"wallTime\": 1647712333.9281845, \"step\": 1241, \"value\": 0.0003762803680729121}, {\"wallTime\": 1647712333.9749427, \"step\": 1242, \"value\": 0.0003758713719435036}, {\"wallTime\": 1647712334.0211356, \"step\": 1243, \"value\": 0.00037546191015280783}, {\"wallTime\": 1647712334.0678816, \"step\": 1244, \"value\": 0.00037505198270082474}, {\"wallTime\": 1647712334.160083, \"step\": 1246, \"value\": 0.0003742307599168271}, {\"wallTime\": 1647712334.2985492, \"step\": 1249, \"value\": 0.0003729954769369215}, {\"wallTime\": 1647712334.3408628, \"step\": 1250, \"value\": 0.000372582784621045}, {\"wallTime\": 1647712334.3850896, \"step\": 1251, \"value\": 0.00037216965574771166}, {\"wallTime\": 1647712334.432821, \"step\": 1252, \"value\": 0.00037175609031692147}, {\"wallTime\": 1647712334.5343459, \"step\": 1254, \"value\": 0.0003709275624714792}, {\"wallTime\": 1647712334.6289024, \"step\": 1256, \"value\": 0.000370097259292379}, {\"wallTime\": 1647712334.6762261, \"step\": 1257, \"value\": 0.00036968145286664367}, {\"wallTime\": 1647712334.814135, \"step\": 1260, \"value\": 0.00036843132693320513}, {\"wallTime\": 1647712334.86295, \"step\": 1261, \"value\": 0.0003680137451738119}, {\"wallTime\": 1647712335.1653004, \"step\": 1267, \"value\": 0.00036549914511851966}, {\"wallTime\": 1647712335.3801124, \"step\": 1271, \"value\": 0.00036381417885422707}, {\"wallTime\": 1647712335.6133811, \"step\": 1276, \"value\": 0.0003616984758991748}, {\"wallTime\": 1647712335.6607034, \"step\": 1277, \"value\": 0.0003612740838434547}, {\"wallTime\": 1647712335.7132318, \"step\": 1278, \"value\": 0.00036084928433410823}, {\"wallTime\": 1647712335.896118, \"step\": 1282, \"value\": 0.00035914601176045835}, {\"wallTime\": 1647712336.0308623, \"step\": 1285, \"value\": 0.00035786430817097425}, {\"wallTime\": 1647712336.2712057, \"step\": 1290, \"value\": 0.0003557201416697353}, {\"wallTime\": 1647712336.4143293, \"step\": 1293, \"value\": 0.0003544289502315223}, {\"wallTime\": 1647712336.6572921, \"step\": 1298, \"value\": 0.000352269213180989}, {\"wallTime\": 1647712336.7061963, \"step\": 1299, \"value\": 0.00035183611907996237}, {\"wallTime\": 1647712336.8497603, \"step\": 1302, \"value\": 0.0003505345666781068}, {\"wallTime\": 1647712337.0279825, \"step\": 1306, \"value\": 0.00034879398299381137}, {\"wallTime\": 1647712337.2248127, \"step\": 1310, \"value\": 0.00034704754943959415}, {\"wallTime\": 1647712337.477314, \"step\": 1315, \"value\": 0.0003448563802521676}, {\"wallTime\": 1647712337.7081254, \"step\": 1320, \"value\": 0.0003426564217079431}, {\"wallTime\": 1647712337.80273, \"step\": 1322, \"value\": 0.00034177402267232537}, {\"wallTime\": 1647712337.9437337, \"step\": 1325, \"value\": 0.00034044787753373384}, {\"wallTime\": 1647712337.9892783, \"step\": 1326, \"value\": 0.000340005150064826}, {\"wallTime\": 1647712338.0940692, \"step\": 1328, \"value\": 0.0003391187055967748}, {\"wallTime\": 1647712338.3954687, \"step\": 1335, \"value\": 0.00033600578899495304}, {\"wallTime\": 1647712338.7839284, \"step\": 1344, \"value\": 0.000331980554619804}, {\"wallTime\": 1647712338.8312492, \"step\": 1345, \"value\": 0.00033153174445033073}, {\"wallTime\": 1647712338.889723, \"step\": 1347, \"value\": 0.00033063325099647045}, {\"wallTime\": 1647712338.9348145, \"step\": 1348, \"value\": 0.00033018356771208346}, {\"wallTime\": 1647712339.0732718, \"step\": 1351, \"value\": 0.0003288326843176037}, {\"wallTime\": 1647712339.1540499, \"step\": 1352, \"value\": 0.00032838177867233753}, {\"wallTime\": 1647712339.2503538, \"step\": 1354, \"value\": 0.0003274791524745524}, {\"wallTime\": 1647712339.423335, \"step\": 1358, \"value\": 0.0003256704076193273}, {\"wallTime\": 1647712339.5143964, \"step\": 1360, \"value\": 0.0003247643471695483}, {\"wallTime\": 1647712339.6824887, \"step\": 1364, \"value\": 0.00032294890843331814}, {\"wallTime\": 1647712339.7247734, \"step\": 1365, \"value\": 0.00032249436480924487}, {\"wallTime\": 1647712339.7698033, \"step\": 1366, \"value\": 0.0003220395592506975}, {\"wallTime\": 1647712339.8142943, \"step\": 1367, \"value\": 0.00032158446265384555}, {\"wallTime\": 1647712339.8590884, \"step\": 1368, \"value\": 0.0003211291041225195}, {\"wallTime\": 1647712340.0420535, \"step\": 1372, \"value\": 0.0003193050797563046}, {\"wallTime\": 1647712340.0873036, \"step\": 1373, \"value\": 0.000318848411552608}, {\"wallTime\": 1647712340.1791942, \"step\": 1375, \"value\": 0.0003179343184456229}, {\"wallTime\": 1647712340.2257388, \"step\": 1376, \"value\": 0.00031747689354233444}, {\"wallTime\": 1647712340.4218004, \"step\": 1380, \"value\": 0.0003156446909997612}, {\"wallTime\": 1647712340.6463473, \"step\": 1385, \"value\": 0.0003133489517495036}, {\"wallTime\": 1647712340.6909273, \"step\": 1386, \"value\": 0.00031288908212445676}, {\"wallTime\": 1647712340.8607817, \"step\": 1390, \"value\": 0.00031104727531783283}, {\"wallTime\": 1647712341.0014193, \"step\": 1393, \"value\": 0.0003096635336987674}, {\"wallTime\": 1647712341.180265, \"step\": 1397, \"value\": 0.0003078154113609344}, {\"wallTime\": 1647712341.4627824, \"step\": 1403, \"value\": 0.00030503678135573864}, {\"wallTime\": 1647712346.4178896, \"step\": 1416, \"value\": 0.00029899145010858774}, {\"wallTime\": 1647712346.4688883, \"step\": 1417, \"value\": 0.00029852509032934904}, {\"wallTime\": 1647712346.6477163, \"step\": 1421, \"value\": 0.0002966578467749059}, {\"wallTime\": 1647712347.1885467, \"step\": 1431, \"value\": 0.0002919776597991586}, {\"wallTime\": 1647712347.2388313, \"step\": 1432, \"value\": 0.0002915087388828397}, {\"wallTime\": 1647712347.4256551, \"step\": 1436, \"value\": 0.00028963154181838036}, {\"wallTime\": 1647712347.5173743, \"step\": 1438, \"value\": 0.0002886920119635761}, {\"wallTime\": 1647712347.563903, \"step\": 1439, \"value\": 0.00028822204330936074}, {\"wallTime\": 1647712347.6116621, \"step\": 1440, \"value\": 0.0002877519291359931}, {\"wallTime\": 1647712347.6602066, \"step\": 1441, \"value\": 0.0002872816694434732}, {\"wallTime\": 1647712347.7866185, \"step\": 1444, \"value\": 0.0002858700172509998}, {\"wallTime\": 1647712347.8730247, \"step\": 1446, \"value\": 0.00028492824640125036}, {\"wallTime\": 1647712347.9172843, \"step\": 1447, \"value\": 0.00028445717180147767}, {\"wallTime\": 1647712347.9998055, \"step\": 1449, \"value\": 0.0002835146151483059}, {\"wallTime\": 1647712348.09796, \"step\": 1451, \"value\": 0.0002825715346261859}, {\"wallTime\": 1647712348.149131, \"step\": 1452, \"value\": 0.00028209981974214315}, {\"wallTime\": 1647712348.2387109, \"step\": 1454, \"value\": 0.00028115601162426174}, {\"wallTime\": 1647712348.2838838, \"step\": 1455, \"value\": 0.0002806839474942535}, {\"wallTime\": 1647712348.3290539, \"step\": 1456, \"value\": 0.000280211737845093}, {\"wallTime\": 1647712348.3743029, \"step\": 1457, \"value\": 0.0002797394117806107}, {\"wallTime\": 1647712348.4247475, \"step\": 1458, \"value\": 0.000279266998404637}, {\"wallTime\": 1647712348.4709604, \"step\": 1459, \"value\": 0.000278794439509511}, {\"wallTime\": 1647712348.516211, \"step\": 1460, \"value\": 0.00027832179330289364}, {\"wallTime\": 1647712348.5620265, \"step\": 1461, \"value\": 0.00027784903068095446}, {\"wallTime\": 1647712348.657401, \"step\": 1463, \"value\": 0.0002769032143987715}, {\"wallTime\": 1647712348.9738867, \"step\": 1470, \"value\": 0.00027358962688595057}, {\"wallTime\": 1647712349.1007493, \"step\": 1473, \"value\": 0.0002721681375987828}, {\"wallTime\": 1647712349.1448317, \"step\": 1474, \"value\": 0.00027169412351213396}, {\"wallTime\": 1647712349.2324312, \"step\": 1476, \"value\": 0.00027074586250819266}, {\"wallTime\": 1647712349.5500576, \"step\": 1483, \"value\": 0.0002674244751688093}, {\"wallTime\": 1647712349.737186, \"step\": 1487, \"value\": 0.00026552501367405057}, {\"wallTime\": 1647712349.825526, \"step\": 1489, \"value\": 0.00026457489002496004}, {\"wallTime\": 1647712349.870572, \"step\": 1490, \"value\": 0.0002640997408889234}, {\"wallTime\": 1647712350.016976, \"step\": 1493, \"value\": 0.0002626739733386785}, {\"wallTime\": 1647712350.060801, \"step\": 1494, \"value\": 0.00026219862047582865}, {\"wallTime\": 1647712350.226854, \"step\": 1498, \"value\": 0.00026029671425931156}, {\"wallTime\": 1647712350.2714164, \"step\": 1499, \"value\": 0.00025982112856581807}, {\"wallTime\": 1647712350.3114789, \"step\": 1500, \"value\": 0.00025934551376849413}, {\"wallTime\": 1647712350.401327, \"step\": 1502, \"value\": 0.00025839413865469396}, {\"wallTime\": 1647712350.7991683, \"step\": 1509, \"value\": 0.0002550633216742426}, {\"wallTime\": 1647712350.8587797, \"step\": 1510, \"value\": 0.00025458738673478365}, {\"wallTime\": 1647712350.919588, \"step\": 1511, \"value\": 0.0002541114226914942}, {\"wallTime\": 1647712351.0402493, \"step\": 1513, \"value\": 0.00025315943639725447}, {\"wallTime\": 1647712351.154088, \"step\": 1515, \"value\": 0.00025220742099918425}, {\"wallTime\": 1647712351.1963325, \"step\": 1516, \"value\": 0.00025173136964440346}, {\"wallTime\": 1647712351.5114007, \"step\": 1523, \"value\": 0.0002483988937456161}, {\"wallTime\": 1647712351.7361097, \"step\": 1528, \"value\": 0.00024601854966022074}, {\"wallTime\": 1647712352.0141027, \"step\": 1534, \"value\": 0.00024316248891409487}, {\"wallTime\": 1647712352.1613045, \"step\": 1537, \"value\": 0.00024173471319954842}, {\"wallTime\": 1647712352.2087247, \"step\": 1538, \"value\": 0.00024125883646775037}, {\"wallTime\": 1647712352.35746, \"step\": 1541, \"value\": 0.00023983138089533895}, {\"wallTime\": 1647712352.7099948, \"step\": 1548, \"value\": 0.00023650187358725816}, {\"wallTime\": 1647712352.8348982, \"step\": 1551, \"value\": 0.000235075582168065}, {\"wallTime\": 1647712352.8755774, \"step\": 1552, \"value\": 0.0002346002438571304}, {\"wallTime\": 1647712352.921871, \"step\": 1553, \"value\": 0.00023412496375385672}, {\"wallTime\": 1647712353.3463438, \"step\": 1562, \"value\": 0.00022985006216913462}, {\"wallTime\": 1647712353.4899871, \"step\": 1565, \"value\": 0.00022842627367936075}, {\"wallTime\": 1647712353.5406826, \"step\": 1566, \"value\": 0.00022795182303525507}, {\"wallTime\": 1647712353.6291437, \"step\": 1568, \"value\": 0.00022700315457768738}, {\"wallTime\": 1647712353.719568, \"step\": 1570, \"value\": 0.00022605480626225471}, {\"wallTime\": 1647712353.7642183, \"step\": 1571, \"value\": 0.0002255807485198602}, {\"wallTime\": 1647712353.806696, \"step\": 1572, \"value\": 0.0002251067926408723}, {\"wallTime\": 1647712353.8467877, \"step\": 1573, \"value\": 0.00022463290952146053}, {\"wallTime\": 1647712353.9772527, \"step\": 1576, \"value\": 0.0002232118131360039}, {\"wallTime\": 1647712354.0677977, \"step\": 1578, \"value\": 0.0002222648763563484}, {\"wallTime\": 1647712354.1610386, \"step\": 1580, \"value\": 0.00022131833247840405}, {\"wallTime\": 1647712354.208495, \"step\": 1581, \"value\": 0.00022084520605858415}, {\"wallTime\": 1647712354.2558622, \"step\": 1582, \"value\": 0.00022037218150217086}, {\"wallTime\": 1647712354.428498, \"step\": 1585, \"value\": 0.00021895374811720103}, {\"wallTime\": 1647712354.669092, \"step\": 1590, \"value\": 0.00021659189951606095}, {\"wallTime\": 1647712354.916076, \"step\": 1595, \"value\": 0.000214232990401797}, {\"wallTime\": 1647712354.9627259, \"step\": 1596, \"value\": 0.00021376159565988928}, {\"wallTime\": 1647712355.0049026, \"step\": 1597, \"value\": 0.00021329030278138816}, {\"wallTime\": 1647712355.177698, \"step\": 1601, \"value\": 0.00021140649914741516}, {\"wallTime\": 1647712355.2237744, \"step\": 1602, \"value\": 0.00021093589020892978}, {\"wallTime\": 1647712355.2708588, \"step\": 1603, \"value\": 0.00021046541223768145}, {\"wallTime\": 1647712355.6583993, \"step\": 1611, \"value\": 0.0002067068126052618}, {\"wallTime\": 1647712355.7541165, \"step\": 1613, \"value\": 0.00020576866518240422}, {\"wallTime\": 1647712355.7999644, \"step\": 1614, \"value\": 0.0002052998315775767}, {\"wallTime\": 1647712355.8977365, \"step\": 1616, \"value\": 0.00020436263002920896}, {\"wallTime\": 1647712356.1628048, \"step\": 1622, \"value\": 0.00020155499805696309}, {\"wallTime\": 1647712356.2471585, \"step\": 1624, \"value\": 0.0002006204886129126}, {\"wallTime\": 1647712356.3733284, \"step\": 1626, \"value\": 0.0001996866922127083}, {\"wallTime\": 1647712356.4134583, \"step\": 1627, \"value\": 0.00019922005594708025}, {\"wallTime\": 1647712356.5952017, \"step\": 1631, \"value\": 0.00019735534442588687}, {\"wallTime\": 1647712356.7825732, \"step\": 1635, \"value\": 0.00019549364515114576}, {\"wallTime\": 1647712356.8283622, \"step\": 1636, \"value\": 0.00019502871145959944}, {\"wallTime\": 1647712356.8742208, \"step\": 1637, \"value\": 0.00019456396694295108}, {\"wallTime\": 1647712357.0080736, \"step\": 1640, \"value\": 0.00019317094120196998}, {\"wallTime\": 1647712357.0522387, \"step\": 1641, \"value\": 0.0001927069970406592}, {\"wallTime\": 1647712357.270808, \"step\": 1646, \"value\": 0.00019039041944779456}, {\"wallTime\": 1647712357.313442, \"step\": 1647, \"value\": 0.00018992774130310863}, {\"wallTime\": 1647712357.4004617, \"step\": 1649, \"value\": 0.00018900302529800683}, {\"wallTime\": 1647712357.487725, \"step\": 1651, \"value\": 0.00018807918240781873}, {\"wallTime\": 1647712357.530242, \"step\": 1652, \"value\": 0.00018761759565677494}, {\"wallTime\": 1647712357.570361, \"step\": 1653, \"value\": 0.00018715622718445957}, {\"wallTime\": 1647712357.6155992, \"step\": 1654, \"value\": 0.00018669509154278785}, {\"wallTime\": 1647712357.700781, \"step\": 1656, \"value\": 0.00018577350419946015}, {\"wallTime\": 1647712357.7901495, \"step\": 1658, \"value\": 0.00018485283362679183}, {\"wallTime\": 1647712357.976497, \"step\": 1662, \"value\": 0.0001830143155530095}, {\"wallTime\": 1647712358.066124, \"step\": 1664, \"value\": 0.00018209649715572596}, {\"wallTime\": 1647712358.156315, \"step\": 1666, \"value\": 0.0001811796537367627}, {\"wallTime\": 1647712358.287089, \"step\": 1669, \"value\": 0.00017980624397750944}, {\"wallTime\": 1647712358.3309102, \"step\": 1670, \"value\": 0.000179348950041458}, {\"wallTime\": 1647712358.5415733, \"step\": 1674, \"value\": 0.00017752230633050203}, {\"wallTime\": 1647712358.6702802, \"step\": 1677, \"value\": 0.0001761550665833056}, {\"wallTime\": 1647712358.7566428, \"step\": 1679, \"value\": 0.00017524490249343216}, {\"wallTime\": 1647712358.7961392, \"step\": 1680, \"value\": 0.0001747902133502066}, {\"wallTime\": 1647712358.8812652, \"step\": 1682, \"value\": 0.00017388166452292353}, {\"wallTime\": 1647712359.0152962, \"step\": 1685, \"value\": 0.00017252091492991894}, {\"wallTime\": 1647712359.0613804, \"step\": 1686, \"value\": 0.00017206788470502943}, {\"wallTime\": 1647712359.107066, \"step\": 1687, \"value\": 0.00017161513096652925}, {\"wallTime\": 1647712359.1521719, \"step\": 1688, \"value\": 0.00017116266826633364}, {\"wallTime\": 1647712359.377722, \"step\": 1693, \"value\": 0.0001689046184765175}, {\"wallTime\": 1647712359.4226773, \"step\": 1694, \"value\": 0.00016845388745423406}, {\"wallTime\": 1647712359.4682748, \"step\": 1695, \"value\": 0.0001680034474702552}, {\"wallTime\": 1647712359.559051, \"step\": 1697, \"value\": 0.00016710344061721116}, {\"wallTime\": 1647712359.6523485, \"step\": 1699, \"value\": 0.00016620464157313108}, {\"wallTime\": 1647712359.6912954, \"step\": 1700, \"value\": 0.00016575570043642074}, {\"wallTime\": 1647712359.800932, \"step\": 1702, \"value\": 0.0001648587203817442}, {\"wallTime\": 1647712359.8835497, \"step\": 1704, \"value\": 0.00016396296268794686}, {\"wallTime\": 1647712360.014806, \"step\": 1707, \"value\": 0.0001626216690056026}, {\"wallTime\": 1647712360.1197693, \"step\": 1709, \"value\": 0.00016172903997357935}, {\"wallTime\": 1647712360.2101023, \"step\": 1710, \"value\": 0.00016128321294672787}, {\"wallTime\": 1647712360.2958431, \"step\": 1711, \"value\": 0.00016083770606201142}, {\"wallTime\": 1647712360.3404574, \"step\": 1712, \"value\": 0.00016039250476751477}, {\"wallTime\": 1647712360.6926558, \"step\": 1718, \"value\": 0.0001577282091602683}, {\"wallTime\": 1647712360.7535024, \"step\": 1719, \"value\": 0.00015728532162029296}, {\"wallTime\": 1647712360.918272, \"step\": 1722, \"value\": 0.00015595866716466844}, {\"wallTime\": 1647712360.9732885, \"step\": 1723, \"value\": 0.0001555171184008941}, {\"wallTime\": 1647712361.0261433, \"step\": 1724, \"value\": 0.00015507591888308525}, {\"wallTime\": 1647712361.0685928, \"step\": 1725, \"value\": 0.00015463506861124188}, {\"wallTime\": 1647712361.27371, \"step\": 1730, \"value\": 0.00015243598318193108}, {\"wallTime\": 1647712361.635769, \"step\": 1738, \"value\": 0.00014893588377162814}, {\"wallTime\": 1647712361.6818063, \"step\": 1739, \"value\": 0.00014850001025479287}, {\"wallTime\": 1647712361.888314, \"step\": 1743, \"value\": 0.00014676015416625887}, {\"wallTime\": 1647712362.004016, \"step\": 1745, \"value\": 0.00014589246711693704}, {\"wallTime\": 1647712362.1805608, \"step\": 1748, \"value\": 0.0001445937668904662}, {\"wallTime\": 1647712362.245069, \"step\": 1749, \"value\": 0.0001441616186639294}, {\"wallTime\": 1647712362.299031, \"step\": 1750, \"value\": 0.00014372986333910376}, {\"wallTime\": 1647712362.343171, \"step\": 1751, \"value\": 0.00014329850091598928}, {\"wallTime\": 1647712362.4348447, \"step\": 1753, \"value\": 0.00014243691111914814}, {\"wallTime\": 1647712362.5302758, \"step\": 1754, \"value\": 0.0001420066982973367}, {\"wallTime\": 1647712362.7741213, \"step\": 1757, \"value\": 0.0001407184317940846}, {\"wallTime\": 1647712363.0277894, \"step\": 1762, \"value\": 0.00013857924204785377}, {\"wallTime\": 1647712363.0759661, \"step\": 1763, \"value\": 0.0001381526089971885}, {\"wallTime\": 1647712363.1750624, \"step\": 1765, \"value\": 0.00013730055070482194}, {\"wallTime\": 1647712363.3127892, \"step\": 1768, \"value\": 0.00013602555554825813}, {\"wallTime\": 1647712363.6473725, \"step\": 1775, \"value\": 0.00013306505570653826}, {\"wallTime\": 1647712363.69823, \"step\": 1776, \"value\": 0.0001326438068645075}, {\"wallTime\": 1647712363.739666, \"step\": 1777, \"value\": 0.00013222299457993358}, {\"wallTime\": 1647712363.8944962, \"step\": 1780, \"value\": 0.00013096308975946158}, {\"wallTime\": 1647712364.1283092, \"step\": 1784, \"value\": 0.00012928928481414914}, {\"wallTime\": 1647712364.1690042, \"step\": 1785, \"value\": 0.00012887192133348435}, {\"wallTime\": 1647712364.2100163, \"step\": 1786, \"value\": 0.00012845500896219164}, {\"wallTime\": 1647712364.4273264, \"step\": 1789, \"value\": 0.0001272068766411394}, {\"wallTime\": 1647712364.4720612, \"step\": 1790, \"value\": 0.0001267917250515893}, {\"wallTime\": 1647712364.5834253, \"step\": 1792, \"value\": 0.0001259627752006054}, {\"wallTime\": 1647712364.6849916, \"step\": 1794, \"value\": 0.00012513561523519456}, {\"wallTime\": 1647712364.750937, \"step\": 1796, \"value\": 0.00012431025970727205}, {\"wallTime\": 1647712364.8915687, \"step\": 1800, \"value\": 0.00012266503472346812}, {\"wallTime\": 1647712364.9666717, \"step\": 1802, \"value\": 0.00012184519437141716}, {\"wallTime\": 1647712365.0092347, \"step\": 1803, \"value\": 0.00012143596541136503}, {\"wallTime\": 1647712365.2972686, \"step\": 1808, \"value\": 0.0001193968637380749}, {\"wallTime\": 1647712365.3872683, \"step\": 1810, \"value\": 0.00011858453217428178}, {\"wallTime\": 1647712365.577652, \"step\": 1814, \"value\": 0.00011696559522533789}, {\"wallTime\": 1647712365.7580385, \"step\": 1818, \"value\": 0.00011535437806742266}, {\"wallTime\": 1647712365.80479, \"step\": 1819, \"value\": 0.00011495279613882303}, {\"wallTime\": 1647712366.0364034, \"step\": 1823, \"value\": 0.00011335136514389887}, {\"wallTime\": 1647712366.2006438, \"step\": 1826, \"value\": 0.00011215550330234692}, {\"wallTime\": 1647712366.2548378, \"step\": 1827, \"value\": 0.0001117578794946894}, {\"wallTime\": 1647712366.4018173, \"step\": 1829, \"value\": 0.00011096413800260052}, {\"wallTime\": 1647712366.4551244, \"step\": 1830, \"value\": 0.00011056802031816915}, {\"wallTime\": 1647712366.5652564, \"step\": 1832, \"value\": 0.00010977731290040538}, {\"wallTime\": 1647712366.6216295, \"step\": 1833, \"value\": 0.00010938272316707298}, {\"wallTime\": 1647712366.6787264, \"step\": 1834, \"value\": 0.00010898864275077358}, {\"wallTime\": 1647712366.79152, \"step\": 1836, \"value\": 0.00010820201714523137}, {\"wallTime\": 1647712366.846407, \"step\": 1837, \"value\": 0.00010780947923194617}, {\"wallTime\": 1647712366.9068272, \"step\": 1838, \"value\": 0.00010741745791165158}, {\"wallTime\": 1647712367.2535574, \"step\": 1844, \"value\": 0.0001050762293743901}, {\"wallTime\": 1647712367.296044, \"step\": 1845, \"value\": 0.00010468786058481783}, {\"wallTime\": 1647712367.3361075, \"step\": 1846, \"value\": 0.0001043000229401514}, {\"wallTime\": 1647712367.383304, \"step\": 1847, \"value\": 0.00010391270916443318}, {\"wallTime\": 1647712367.4308088, \"step\": 1848, \"value\": 0.0001035259265336208}, {\"wallTime\": 1647712367.5690243, \"step\": 1851, \"value\": 0.0001023687727865763}, {\"wallTime\": 1647712367.6644568, \"step\": 1853, \"value\": 0.00010160001693293452}, {\"wallTime\": 1647712368.0110958, \"step\": 1860, \"value\": 9.892642265185714e-05}, {\"wallTime\": 1647712368.182499, \"step\": 1864, \"value\": 9.741070243762806e-05}, {\"wallTime\": 1647712368.2181873, \"step\": 1865, \"value\": 9.703315299702808e-05}, {\"wallTime\": 1647712368.248445, \"step\": 1866, \"value\": 9.66561638051644e-05}, {\"wallTime\": 1647712368.2855484, \"step\": 1867, \"value\": 9.627972758607939e-05}, {\"wallTime\": 1647712368.440773, \"step\": 1871, \"value\": 9.477958519710228e-05}, {\"wallTime\": 1647712368.4939947, \"step\": 1872, \"value\": 9.440595022169873e-05}, {\"wallTime\": 1647712368.6031103, \"step\": 1874, \"value\": 9.366039012093097e-05}, {\"wallTime\": 1647712368.639189, \"step\": 1875, \"value\": 9.328846499556676e-05}, {\"wallTime\": 1647712373.291371, \"step\": 1877, \"value\": 9.254631004296243e-05}, {\"wallTime\": 1647712373.4311814, \"step\": 1880, \"value\": 9.143738134298474e-05}, {\"wallTime\": 1647712373.769699, \"step\": 1883, \"value\": 9.033364040078595e-05}, {\"wallTime\": 1647712373.8279147, \"step\": 1884, \"value\": 8.996688848128542e-05}, {\"wallTime\": 1647712373.9471686, \"step\": 1886, \"value\": 8.923512359615415e-05}, {\"wallTime\": 1647712374.0723608, \"step\": 1888, \"value\": 8.850569429341704e-05}, {\"wallTime\": 1647712374.1938858, \"step\": 1890, \"value\": 8.77786151249893e-05}, {\"wallTime\": 1647712374.4814131, \"step\": 1895, \"value\": 8.597125997766852e-05}, {\"wallTime\": 1647712374.6822371, \"step\": 1899, \"value\": 8.453609916614369e-05}, {\"wallTime\": 1647712374.8080451, \"step\": 1902, \"value\": 8.346603863174096e-05}, {\"wallTime\": 1647712374.979268, \"step\": 1906, \"value\": 8.204777259379625e-05}, {\"wallTime\": 1647712375.0969965, \"step\": 1908, \"value\": 8.134230301948264e-05}, {\"wallTime\": 1647712375.1467931, \"step\": 1909, \"value\": 8.099048136500642e-05}, {\"wallTime\": 1647712375.1980975, \"step\": 1910, \"value\": 8.06392781669274e-05}, {\"wallTime\": 1647712375.345056, \"step\": 1913, \"value\": 7.958937203511596e-05}, {\"wallTime\": 1647712375.5557353, \"step\": 1918, \"value\": 7.785193156450987e-05}, {\"wallTime\": 1647712376.3290823, \"step\": 1924, \"value\": 7.57876769057475e-05}, {\"wallTime\": 1647712376.3740678, \"step\": 1925, \"value\": 7.544584514107555e-05}, {\"wallTime\": 1647712376.418556, \"step\": 1926, \"value\": 7.510464638471603e-05}, {\"wallTime\": 1647712376.5472586, \"step\": 1929, \"value\": 7.408487726934254e-05}, {\"wallTime\": 1647712376.6921127, \"step\": 1932, \"value\": 7.307086343644187e-05}, {\"wallTime\": 1647712376.8182526, \"step\": 1935, \"value\": 7.206264126580209e-05}, {\"wallTime\": 1647712376.8651993, \"step\": 1936, \"value\": 7.172785990405828e-05}, {\"wallTime\": 1647712377.0598853, \"step\": 1940, \"value\": 7.039523188723251e-05}, {\"wallTime\": 1647712377.1148531, \"step\": 1941, \"value\": 7.006370287854224e-05}, {\"wallTime\": 1647712377.162524, \"step\": 1942, \"value\": 6.973282870603725e-05}, {\"wallTime\": 1647712378.5620081, \"step\": 1945, \"value\": 6.874414975754917e-05}, {\"wallTime\": 1647712378.601391, \"step\": 1947, \"value\": 6.808833131799474e-05}, {\"wallTime\": 1647712378.8258975, \"step\": 1950, \"value\": 6.710956222377717e-05}, {\"wallTime\": 1647712378.9191718, \"step\": 1951, \"value\": 6.678463250864297e-05}, {\"wallTime\": 1647712379.0397243, \"step\": 1953, \"value\": 6.613678124267608e-05}, {\"wallTime\": 1647712379.1627426, \"step\": 1956, \"value\": 6.517001747852191e-05}, {\"wallTime\": 1647712379.3559244, \"step\": 1960, \"value\": 6.389042391674593e-05}, {\"wallTime\": 1647712379.4050553, \"step\": 1961, \"value\": 6.357220991048962e-05}, {\"wallTime\": 1647712379.4490678, \"step\": 1962, \"value\": 6.325467984424904e-05}, {\"wallTime\": 1647712379.4922512, \"step\": 1963, \"value\": 6.29378337180242e-05}, {\"wallTime\": 1647712379.5352795, \"step\": 1964, \"value\": 6.262165697989985e-05}, {\"wallTime\": 1647712379.6247985, \"step\": 1966, \"value\": 6.199136259965599e-05}, {\"wallTime\": 1647712379.697938, \"step\": 1967, \"value\": 6.167724495753646e-05}, {\"wallTime\": 1647712379.7440076, \"step\": 1968, \"value\": 6.136380397947505e-05}, {\"wallTime\": 1647712379.790066, \"step\": 1969, \"value\": 6.105105421738699e-05}, {\"wallTime\": 1647712380.131858, \"step\": 1975, \"value\": 5.9189034800510854e-05}, {\"wallTime\": 1647712380.2017205, \"step\": 1977, \"value\": 5.8573903515934944e-05}, {\"wallTime\": 1647712380.305616, \"step\": 1979, \"value\": 5.796155892312527e-05}, {\"wallTime\": 1647712380.3367772, \"step\": 1980, \"value\": 5.765643436461687e-05}, {\"wallTime\": 1647712380.3642662, \"step\": 1981, \"value\": 5.7352008298039436e-05}, {\"wallTime\": 1647712380.406438, \"step\": 1982, \"value\": 5.704828436137177e-05}, {\"wallTime\": 1647712380.442215, \"step\": 1983, \"value\": 5.674526255461387e-05}, {\"wallTime\": 1647712380.5078785, \"step\": 1985, \"value\": 5.614132896880619e-05}, {\"wallTime\": 1647712380.5899878, \"step\": 1987, \"value\": 5.554022209253162e-05}, {\"wallTime\": 1647712380.642661, \"step\": 1988, \"value\": 5.5240725487237796e-05}, {\"wallTime\": 1647712380.8173862, \"step\": 1991, \"value\": 5.434650302049704e-05}, {\"wallTime\": 1647712380.8639185, \"step\": 1992, \"value\": 5.404984767665155e-05}, {\"wallTime\": 1647712380.9835515, \"step\": 1995, \"value\": 5.316417446010746e-05}, {\"wallTime\": 1647712381.3224728, \"step\": 2002, \"value\": 5.112272992846556e-05}, {\"wallTime\": 1647712381.9948046, \"step\": 2016, \"value\": 4.7146608267212287e-05}, {\"wallTime\": 1647712382.0199988, \"step\": 2017, \"value\": 4.686810643761419e-05}, {\"wallTime\": 1647712382.2022383, \"step\": 2021, \"value\": 4.576149513013661e-05}, {\"wallTime\": 1647712382.2512279, \"step\": 2022, \"value\": 4.5486700400942937e-05}, {\"wallTime\": 1647712382.2966592, \"step\": 2023, \"value\": 4.521264781942591e-05}, {\"wallTime\": 1647712382.3934045, \"step\": 2025, \"value\": 4.466678365133703e-05}, {\"wallTime\": 1647712382.4387615, \"step\": 2026, \"value\": 4.439497206476517e-05}, {\"wallTime\": 1647712382.5301676, \"step\": 2028, \"value\": 4.385359352454543e-05}, {\"wallTime\": 1647712382.6790328, \"step\": 2031, \"value\": 4.3047159124398604e-05}, {\"wallTime\": 1647712382.7203114, \"step\": 2032, \"value\": 4.277985499356873e-05}, {\"wallTime\": 1647712382.8081446, \"step\": 2034, \"value\": 4.2247505916748196e-05}, {\"wallTime\": 1647712382.8484552, \"step\": 2035, \"value\": 4.198246824671514e-05}, {\"wallTime\": 1647712382.8929296, \"step\": 2036, \"value\": 4.171818363829516e-05}, {\"wallTime\": 1647712383.0928822, \"step\": 2040, \"value\": 4.066864858032204e-05}, {\"wallTime\": 1647712383.137069, \"step\": 2041, \"value\": 4.0408169297734275e-05}, {\"wallTime\": 1647712383.229285, \"step\": 2043, \"value\": 3.98894990212284e-05}, {\"wallTime\": 1647712383.2757885, \"step\": 2044, \"value\": 3.96313080273103e-05}, {\"wallTime\": 1647712383.4131913, \"step\": 2047, \"value\": 3.8861344364704564e-05}, {\"wallTime\": 1647712383.4582453, \"step\": 2048, \"value\": 3.8606223824899644e-05}, {\"wallTime\": 1647712383.5038874, \"step\": 2049, \"value\": 3.8351874536601827e-05}, {\"wallTime\": 1647712383.7255652, \"step\": 2054, \"value\": 3.7091707781655714e-05}, {\"wallTime\": 1647712383.7707314, \"step\": 2055, \"value\": 3.684199691633694e-05}, {\"wallTime\": 1647712383.820323, \"step\": 2056, \"value\": 3.6593060940504074e-05}, {\"wallTime\": 1647712383.8627138, \"step\": 2057, \"value\": 3.634490349213593e-05}, {\"wallTime\": 1647712384.299307, \"step\": 2067, \"value\": 3.390626443433575e-05}, {\"wallTime\": 1647712384.3455443, \"step\": 2068, \"value\": 3.3666714443825185e-05}, {\"wallTime\": 1647712384.443708, \"step\": 2070, \"value\": 3.318997914902866e-05}, {\"wallTime\": 1647712384.6243849, \"step\": 2074, \"value\": 3.224598913220689e-05}, {\"wallTime\": 1647712384.8433177, \"step\": 2078, \"value\": 3.131468838546425e-05}, {\"wallTime\": 1647712384.888469, \"step\": 2079, \"value\": 3.108385135419667e-05}, {\"wallTime\": 1647712385.1167424, \"step\": 2084, \"value\": 2.99416442430811e-05}, {\"wallTime\": 1647712385.2170265, \"step\": 2086, \"value\": 2.94903675239766e-05}, {\"wallTime\": 1647712385.248878, \"step\": 2087, \"value\": 2.9265931516420096e-05}, {\"wallTime\": 1647712385.333407, \"step\": 2089, \"value\": 2.8819475119234994e-05}, {\"wallTime\": 1647712385.3779237, \"step\": 2090, \"value\": 2.8597454729606397e-05}, {\"wallTime\": 1647712385.420403, \"step\": 2091, \"value\": 2.8376241971272975e-05}, {\"wallTime\": 1647712385.5936134, \"step\": 2095, \"value\": 2.749946725089103e-05}, {\"wallTime\": 1647712385.6399822, \"step\": 2096, \"value\": 2.7282296287012286e-05}, {\"wallTime\": 1647712385.6862025, \"step\": 2097, \"value\": 2.7065938411396928e-05}, {\"wallTime\": 1647712385.7336435, \"step\": 2098, \"value\": 2.685039180505555e-05}, {\"wallTime\": 1647712385.822429, \"step\": 2100, \"value\": 2.6421737857162952e-05}, {\"wallTime\": 1647712385.9629781, \"step\": 2103, \"value\": 2.5784867830225267e-05}, {\"wallTime\": 1647712386.0108767, \"step\": 2104, \"value\": 2.5574208848411217e-05}, {\"wallTime\": 1647712386.0590434, \"step\": 2105, \"value\": 2.5364368411828764e-05}, {\"wallTime\": 1647712386.1093283, \"step\": 2106, \"value\": 2.5155346520477906e-05}, {\"wallTime\": 1647712386.2358458, \"step\": 2109, \"value\": 2.4533197574783117e-05}, {\"wallTime\": 1647712386.2835119, \"step\": 2110, \"value\": 2.4327455321326852e-05}, {\"wallTime\": 1647712386.483019, \"step\": 2114, \"value\": 2.3512717234552838e-05}, {\"wallTime\": 1647712386.5297642, \"step\": 2115, \"value\": 2.33110931731062e-05}, {\"wallTime\": 1647712386.7081358, \"step\": 2119, \"value\": 2.2512862415169366e-05}, {\"wallTime\": 1647712386.7580764, \"step\": 2120, \"value\": 2.2315374735626392e-05}, {\"wallTime\": 1647712386.8765876, \"step\": 2122, \"value\": 2.1922887754044496e-05}, {\"wallTime\": 1647712386.923052, \"step\": 2123, \"value\": 2.1727890270994976e-05}, {\"wallTime\": 1647712386.9709167, \"step\": 2124, \"value\": 2.153372588509228e-05}, {\"wallTime\": 1647712387.0655801, \"step\": 2126, \"value\": 2.114789094775915e-05}, {\"wallTime\": 1647712387.1125717, \"step\": 2127, \"value\": 2.0956224034307525e-05}, {\"wallTime\": 1647712387.4407737, \"step\": 2134, \"value\": 1.9637958757812157e-05}, {\"wallTime\": 1647712387.4943006, \"step\": 2135, \"value\": 1.9452987544354983e-05}, {\"wallTime\": 1647712387.535143, \"step\": 2136, \"value\": 1.9268854885012843e-05}, {\"wallTime\": 1647712387.6615505, \"step\": 2139, \"value\": 1.872150278359186e-05}, {\"wallTime\": 1647712387.8070562, \"step\": 2143, \"value\": 1.800350219127722e-05}, {\"wallTime\": 1647712388.05642, \"step\": 2149, \"value\": 1.6951868019532412e-05}, {\"wallTime\": 1647712388.1003087, \"step\": 2150, \"value\": 1.6779562429292127e-05}, {\"wallTime\": 1647712388.295213, \"step\": 2154, \"value\": 1.6098849300760776e-05}, {\"wallTime\": 1647712388.344023, \"step\": 2155, \"value\": 1.593080014572479e-05}, {\"wallTime\": 1647712388.5355074, \"step\": 2159, \"value\": 1.526713458588347e-05}, {\"wallTime\": 1647712388.5908308, \"step\": 2160, \"value\": 1.5103355508472305e-05}, {\"wallTime\": 1647712388.6384482, \"step\": 2161, \"value\": 1.4940431356080808e-05}, {\"wallTime\": 1647712388.6906693, \"step\": 2162, \"value\": 1.477836394769838e-05}, {\"wallTime\": 1647712389.0384867, \"step\": 2169, \"value\": 1.3667922758031636e-05}, {\"wallTime\": 1647712389.2416983, \"step\": 2173, \"value\": 1.3052316717221402e-05}, {\"wallTime\": 1647712389.3306797, \"step\": 2175, \"value\": 1.2749690540658776e-05}, {\"wallTime\": 1647712389.3776007, \"step\": 2176, \"value\": 1.259967393707484e-05}, {\"wallTime\": 1647712389.692364, \"step\": 2183, \"value\": 1.1573810297704767e-05}, {\"wallTime\": 1647712389.770298, \"step\": 2185, \"value\": 1.128851727116853e-05}, {\"wallTime\": 1647712389.857246, \"step\": 2187, \"value\": 1.1006703061866574e-05}, {\"wallTime\": 1647712389.9442778, \"step\": 2189, \"value\": 1.0728372217272408e-05}, {\"wallTime\": 1647712390.1589196, \"step\": 2194, \"value\": 1.0047811883850954e-05}, {\"wallTime\": 1647712390.361332, \"step\": 2199, \"value\": 9.389110346091911e-06}, {\"wallTime\": 1647712390.4509292, \"step\": 2201, \"value\": 9.131764272751752e-06}, {\"wallTime\": 1647712390.5029106, \"step\": 2202, \"value\": 9.004406820167787e-06}, {\"wallTime\": 1647712390.5487645, \"step\": 2203, \"value\": 8.877927939465735e-06}, {\"wallTime\": 1647712390.687035, \"step\": 2206, \"value\": 8.50376545713516e-06}, {\"wallTime\": 1647712390.8260908, \"step\": 2209, \"value\": 8.13752194517292e-06}, {\"wallTime\": 1647712390.9020452, \"step\": 2211, \"value\": 7.897766408859752e-06}, {\"wallTime\": 1647712390.9281425, \"step\": 2212, \"value\": 7.779211045999546e-06}, {\"wallTime\": 1647712391.0146003, \"step\": 2214, \"value\": 7.544750133092748e-06}, {\"wallTime\": 1647712391.0525522, \"step\": 2215, \"value\": 7.428844583046157e-06}, {\"wallTime\": 1647712391.0947568, \"step\": 2216, \"value\": 7.313823061849689e-06}, {\"wallTime\": 1647712391.3412204, \"step\": 2221, \"value\": 6.751988621545024e-06}, {\"wallTime\": 1647712391.3854103, \"step\": 2222, \"value\": 6.642279004154261e-06}, {\"wallTime\": 1647712391.4239247, \"step\": 2223, \"value\": 6.533456598845078e-06}, {\"wallTime\": 1647712391.5218062, \"step\": 2225, \"value\": 6.3184738792188e-06}, {\"wallTime\": 1647712391.614605, \"step\": 2227, \"value\": 6.1070431911502965e-06}, {\"wallTime\": 1647712391.895477, \"step\": 2233, \"value\": 5.49409378436394e-06}, {\"wallTime\": 1647712392.0389278, \"step\": 2236, \"value\": 5.199643055675551e-06}, {\"wallTime\": 1647712392.182644, \"step\": 2239, \"value\": 4.913221346214414e-06}, {\"wallTime\": 1647712392.3136423, \"step\": 2242, \"value\": 4.634837750927545e-06}, {\"wallTime\": 1647712392.407223, \"step\": 2244, \"value\": 4.453719157027081e-06}, {\"wallTime\": 1647712392.5449965, \"step\": 2247, \"value\": 4.188753337075468e-06}, {\"wallTime\": 1647712392.8707688, \"step\": 2254, \"value\": 3.601867319957819e-06}, {\"wallTime\": 1647712393.0104117, \"step\": 2257, \"value\": 3.363808218637132e-06}, {\"wallTime\": 1647712393.0549924, \"step\": 2258, \"value\": 3.2862524221854983e-06}, {\"wallTime\": 1647712393.3269818, \"step\": 2264, \"value\": 2.8398089852998964e-06}, {\"wallTime\": 1647712393.4168365, \"step\": 2266, \"value\": 2.6981974770023953e-06}, {\"wallTime\": 1647712393.469095, \"step\": 2267, \"value\": 2.62874368672783e-06}, {\"wallTime\": 1647712393.8140225, \"step\": 2274, \"value\": 2.167822913179407e-06}, {\"wallTime\": 1647712393.8857546, \"step\": 2276, \"value\": 2.044256461886107e-06}, {\"wallTime\": 1647712394.0615902, \"step\": 2280, \"value\": 1.8079697383655002e-06}, {\"wallTime\": 1647712394.1259372, \"step\": 2281, \"value\": 1.7511588339402806e-06}, {\"wallTime\": 1647712394.2513933, \"step\": 2284, \"value\": 1.5861553492868552e-06}, {\"wallTime\": 1647712394.297719, \"step\": 2285, \"value\": 1.532964574835205e-06}, {\"wallTime\": 1647712394.5900102, \"step\": 2291, \"value\": 1.232843032994424e-06}, {\"wallTime\": 1647712394.6424618, \"step\": 2292, \"value\": 1.1859949609061005e-06}, {\"wallTime\": 1647712394.685069, \"step\": 2293, \"value\": 1.1400536550354445e-06}, {\"wallTime\": 1647712395.0073826, \"step\": 2300, \"value\": 8.438692020718008e-07}, {\"wallTime\": 1647712395.2347972, \"step\": 2305, \"value\": 6.595475383619487e-07}, {\"wallTime\": 1647712395.281771, \"step\": 2306, \"value\": 6.254089157664566e-07}, {\"wallTime\": 1647712395.3289776, \"step\": 2307, \"value\": 5.921791057517112e-07}, {\"wallTime\": 1647712395.4530025, \"step\": 2309, \"value\": 5.284466055854864e-07}, {\"wallTime\": 1647712395.5711904, \"step\": 2311, \"value\": 4.6835097577968554e-07}, {\"wallTime\": 1647712395.8130157, \"step\": 2315, \"value\": 3.590737946979061e-07}, {\"wallTime\": 1647712395.8710494, \"step\": 2316, \"value\": 3.340288685649284e-07}, {\"wallTime\": 1647712396.0051122, \"step\": 2319, \"value\": 2.6435395739099476e-07}, {\"wallTime\": 1647712396.2188675, \"step\": 2324, \"value\": 1.6643376454794634e-07}, {\"wallTime\": 1647712396.478729, \"step\": 2330, \"value\": 7.897790510469349e-08}, {\"wallTime\": 1647712396.5677102, \"step\": 2332, \"value\": 5.711233441729746e-08}, {\"wallTime\": 1647712396.7057178, \"step\": 2335, \"value\": 3.114613988941528e-08}, {\"wallTime\": 1647712396.9643085, \"step\": 2340, \"value\": 6.090185245000157e-09}, {\"wallTime\": 1647712397.1264114, \"step\": 2342, \"value\": 2.4456123792759854e-09}, {\"wallTime\": 1647712397.1453602, \"step\": 2343, \"value\": 1.990039688593015e-09}, {\"wallTime\": 1647712397.1719227, \"step\": 2344, \"value\": 2.4456123792759854e-09}], \"tb_logs/exp000418-Adam\": [{\"wallTime\": 1647705694.1111522, \"step\": 3, \"value\": 1.0238458116873517e-06}, {\"wallTime\": 1647705694.1776695, \"step\": 4, \"value\": 1.0298955430698697e-06}, {\"wallTime\": 1647705694.5304542, \"step\": 10, \"value\": 1.0669522225725814e-06}, {\"wallTime\": 1647705695.0050414, \"step\": 14, \"value\": 1.092394541046815e-06}, {\"wallTime\": 1647705695.0145178, \"step\": 15, \"value\": 1.0988493386321352e-06}, {\"wallTime\": 1647705695.2584774, \"step\": 18, \"value\": 1.1184436061739689e-06}, {\"wallTime\": 1647705695.3042965, \"step\": 19, \"value\": 1.1250523357375641e-06}, {\"wallTime\": 1647705695.3635528, \"step\": 20, \"value\": 1.131700059886498e-06}, {\"wallTime\": 1647705695.4725256, \"step\": 22, \"value\": 1.145113742495596e-06}, {\"wallTime\": 1647705695.527658, \"step\": 23, \"value\": 1.1518800420162734e-06}, {\"wallTime\": 1647705697.6387227, \"step\": 26, \"value\": 1.1724198429874377e-06}, {\"wallTime\": 1647705697.6709895, \"step\": 27, \"value\": 1.1793474641308421e-06}, {\"wallTime\": 1647705698.1832995, \"step\": 33, \"value\": 1.221781644744624e-06}, {\"wallTime\": 1647705698.3906446, \"step\": 36, \"value\": 1.243567908204568e-06}, {\"wallTime\": 1647705698.5369396, \"step\": 38, \"value\": 1.2583075204020133e-06}, {\"wallTime\": 1647705698.6765983, \"step\": 40, \"value\": 1.273221755582199e-06}, {\"wallTime\": 1647705699.0995014, \"step\": 47, \"value\": 1.3268276006783708e-06}, {\"wallTime\": 1647705699.1625764, \"step\": 48, \"value\": 1.3346676723813289e-06}, {\"wallTime\": 1647705699.2314126, \"step\": 49, \"value\": 1.3425540146272397e-06}, {\"wallTime\": 1647705699.3997273, \"step\": 51, \"value\": 1.358466874989972e-06}, {\"wallTime\": 1647705699.5033653, \"step\": 54, \"value\": 1.3826903568769922e-06}, {\"wallTime\": 1647705699.7062974, \"step\": 57, \"value\": 1.4073458487473545e-06}, {\"wallTime\": 1647705699.869473, \"step\": 60, \"value\": 1.432441081306024e-06}, {\"wallTime\": 1647705700.231661, \"step\": 61, \"value\": 1.440905180061236e-06}, {\"wallTime\": 1647705700.252015, \"step\": 62, \"value\": 1.4494193010250456e-06}, {\"wallTime\": 1647705700.2620306, \"step\": 63, \"value\": 1.457983671571128e-06}, {\"wallTime\": 1647705700.391455, \"step\": 65, \"value\": 1.4752646393390023e-06}, {\"wallTime\": 1647705700.4376554, \"step\": 66, \"value\": 1.4839818049949827e-06}, {\"wallTime\": 1647705700.4905326, \"step\": 67, \"value\": 1.492750470788451e-06}, {\"wallTime\": 1647705700.5433228, \"step\": 68, \"value\": 1.5015708640930825e-06}, {\"wallTime\": 1647705700.6491916, \"step\": 70, \"value\": 1.5193684248515638e-06}, {\"wallTime\": 1647705700.697304, \"step\": 71, \"value\": 1.5283462744264398e-06}, {\"wallTime\": 1647705701.0182052, \"step\": 77, \"value\": 1.5833377347007627e-06}, {\"wallTime\": 1647705701.1536493, \"step\": 79, \"value\": 1.6021044757508207e-06}, {\"wallTime\": 1647705701.1784656, \"step\": 80, \"value\": 1.611571065041062e-06}, {\"wallTime\": 1647705701.3278751, \"step\": 82, \"value\": 1.6306725001413724e-06}, {\"wallTime\": 1647705701.4547057, \"step\": 85, \"value\": 1.659749841564917e-06}, {\"wallTime\": 1647705701.6681995, \"step\": 89, \"value\": 1.6993278677546186e-06}, {\"wallTime\": 1647705701.721487, \"step\": 90, \"value\": 1.709369030322705e-06}, {\"wallTime\": 1647705702.2681408, \"step\": 99, \"value\": 1.8024512655756553e-06}, {\"wallTime\": 1647705702.3250377, \"step\": 100, \"value\": 1.8131017895939294e-06}, {\"wallTime\": 1647705702.4865186, \"step\": 103, \"value\": 1.8454321661920403e-06}, {\"wallTime\": 1647705702.6515963, \"step\": 106, \"value\": 1.8783390487442375e-06}, {\"wallTime\": 1647705702.7290971, \"step\": 107, \"value\": 1.8894379536504857e-06}, {\"wallTime\": 1647705702.8442097, \"step\": 109, \"value\": 1.911832669065916e-06}, {\"wallTime\": 1647705703.178228, \"step\": 116, \"value\": 1.9923256786569254e-06}, {\"wallTime\": 1647705703.40392, \"step\": 121, \"value\": 2.0518873498076573e-06}, {\"wallTime\": 1647705704.0144691, \"step\": 125, \"value\": 2.100816118399962e-06}, {\"wallTime\": 1647705704.0711176, \"step\": 126, \"value\": 2.113229584210785e-06}, {\"wallTime\": 1647705704.1907003, \"step\": 128, \"value\": 2.1382770682976115e-06}, {\"wallTime\": 1647705704.2892005, \"step\": 130, \"value\": 2.1636212750308914e-06}, {\"wallTime\": 1647705704.3340306, \"step\": 131, \"value\": 2.176405814680038e-06}, {\"wallTime\": 1647705704.6326814, \"step\": 136, \"value\": 2.2414706108975224e-06}, {\"wallTime\": 1647705704.6835668, \"step\": 137, \"value\": 2.2547151274920907e-06}, {\"wallTime\": 1647705705.0298865, \"step\": 144, \"value\": 2.3496443191106664e-06}, {\"wallTime\": 1647705705.1726463, \"step\": 146, \"value\": 2.3774939563736552e-06}, {\"wallTime\": 1647705705.2505841, \"step\": 147, \"value\": 2.3915422389109153e-06}, {\"wallTime\": 1647705705.4107559, \"step\": 150, \"value\": 2.4341870812349953e-06}, {\"wallTime\": 1647705705.7323, \"step\": 157, \"value\": 2.5366723548359005e-06}, {\"wallTime\": 1647705705.8182201, \"step\": 159, \"value\": 2.5667386580607854e-06}, {\"wallTime\": 1647705705.8630598, \"step\": 160, \"value\": 2.5819051643338753e-06}, {\"wallTime\": 1647705705.9495256, \"step\": 162, \"value\": 2.6125076146854553e-06}, {\"wallTime\": 1647705706.0347555, \"step\": 164, \"value\": 2.6434727260493673e-06}, {\"wallTime\": 1647705706.3752866, \"step\": 170, \"value\": 2.73858768196078e-06}, {\"wallTime\": 1647705706.4218104, \"step\": 171, \"value\": 2.7547696390683996e-06}, {\"wallTime\": 1647705706.4687905, \"step\": 172, \"value\": 2.771047093119705e-06}, {\"wallTime\": 1647705706.6441467, \"step\": 175, \"value\": 2.820459258146002e-06}, {\"wallTime\": 1647705706.691395, \"step\": 176, \"value\": 2.8371250664349645e-06}, {\"wallTime\": 1647705706.7378147, \"step\": 177, \"value\": 2.8538891001517186e-06}, {\"wallTime\": 1647705706.7855043, \"step\": 178, \"value\": 2.8707524961646413e-06}, {\"wallTime\": 1647705706.8808389, \"step\": 180, \"value\": 2.90477851194737e-06}, {\"wallTime\": 1647705706.9286106, \"step\": 181, \"value\": 2.9219422685855534e-06}, {\"wallTime\": 1647705707.070935, \"step\": 184, \"value\": 2.9740451736870455e-06}, {\"wallTime\": 1647705707.1175218, \"step\": 185, \"value\": 2.9916182029410265e-06}, {\"wallTime\": 1647705707.1578674, \"step\": 186, \"value\": 3.0092953693383606e-06}, {\"wallTime\": 1647705707.331522, \"step\": 190, \"value\": 3.081054273934569e-06}, {\"wallTime\": 1647705707.3777735, \"step\": 191, \"value\": 3.0992598567536334e-06}, {\"wallTime\": 1647705707.420145, \"step\": 192, \"value\": 3.117572987321182e-06}, {\"wallTime\": 1647705707.5619135, \"step\": 195, \"value\": 3.173164031977649e-06}, {\"wallTime\": 1647705707.7591624, \"step\": 199, \"value\": 3.248830580560025e-06}, {\"wallTime\": 1647705707.8101988, \"step\": 200, \"value\": 3.2680275126040215e-06}, {\"wallTime\": 1647705707.9268303, \"step\": 202, \"value\": 3.3067624372051796e-06}, {\"wallTime\": 1647705707.974321, \"step\": 203, \"value\": 3.3263015666307183e-06}, {\"wallTime\": 1647705708.028693, \"step\": 204, \"value\": 3.345956201883382e-06}, {\"wallTime\": 1647705708.076018, \"step\": 205, \"value\": 3.3657270250841975e-06}, {\"wallTime\": 1647705708.1622624, \"step\": 207, \"value\": 3.4056197364407126e-06}, {\"wallTime\": 1647705708.2505078, \"step\": 209, \"value\": 3.4459853850421496e-06}, {\"wallTime\": 1647705708.3390365, \"step\": 211, \"value\": 3.486829427856719e-06}, {\"wallTime\": 1647705708.4686384, \"step\": 213, \"value\": 3.5281575492263073e-06}, {\"wallTime\": 1647705708.5537992, \"step\": 215, \"value\": 3.5699756608664757e-06}, {\"wallTime\": 1647705708.5987682, \"step\": 216, \"value\": 3.591070026232046e-06}, {\"wallTime\": 1647705708.7293572, \"step\": 219, \"value\": 3.6551043649524217e-06}, {\"wallTime\": 1647705708.7736197, \"step\": 220, \"value\": 3.676701908261748e-06}, {\"wallTime\": 1647705708.8153381, \"step\": 221, \"value\": 3.698427008202998e-06}, {\"wallTime\": 1647705708.8579783, \"step\": 222, \"value\": 3.7202805742708733e-06}, {\"wallTime\": 1647705708.9556453, \"step\": 224, \"value\": 3.7643758332706057e-06}, {\"wallTime\": 1647705709.2294302, \"step\": 229, \"value\": 3.8769139791838825e-06}, {\"wallTime\": 1647705709.66432, \"step\": 237, \"value\": 4.0640143197379075e-06}, {\"wallTime\": 1647705709.7085907, \"step\": 238, \"value\": 4.088028163096169e-06}, {\"wallTime\": 1647705710.034166, \"step\": 239, \"value\": 4.112183432880556e-06}, {\"wallTime\": 1647705710.0797415, \"step\": 241, \"value\": 4.160923708695918e-06}, {\"wallTime\": 1647705710.1271076, \"step\": 242, \"value\": 4.185510078968946e-06}, {\"wallTime\": 1647705710.217813, \"step\": 244, \"value\": 4.235119376971852e-06}, {\"wallTime\": 1647705710.2641954, \"step\": 245, \"value\": 4.260144123691134e-06}, {\"wallTime\": 1647705710.3177178, \"step\": 246, \"value\": 4.285316663299454e-06}, {\"wallTime\": 1647705710.3563085, \"step\": 247, \"value\": 4.310638360038865e-06}, {\"wallTime\": 1647705710.5865328, \"step\": 252, \"value\": 4.439506938069826e-06}, {\"wallTime\": 1647705710.6319115, \"step\": 253, \"value\": 4.4657394937530626e-06}, {\"wallTime\": 1647705710.6779819, \"step\": 254, \"value\": 4.492127118282951e-06}, {\"wallTime\": 1647705710.8934429, \"step\": 258, \"value\": 4.5992451305210125e-06}, {\"wallTime\": 1647705710.940205, \"step\": 259, \"value\": 4.626421741704689e-06}, {\"wallTime\": 1647705710.9823902, \"step\": 260, \"value\": 4.653758423955878e-06}, {\"wallTime\": 1647705711.2873716, \"step\": 262, \"value\": 4.708917913376354e-06}, {\"wallTime\": 1647705711.6835568, \"step\": 270, \"value\": 4.936171080771601e-06}, {\"wallTime\": 1647705711.7370298, \"step\": 271, \"value\": 4.965338121110108e-06}, {\"wallTime\": 1647705711.8802927, \"step\": 274, \"value\": 5.053877885075053e-06}, {\"wallTime\": 1647705711.9795928, \"step\": 276, \"value\": 5.113779479870573e-06}, {\"wallTime\": 1647705712.0684574, \"step\": 278, \"value\": 5.174391390028177e-06}, {\"wallTime\": 1647705712.1561089, \"step\": 280, \"value\": 5.235721801000182e-06}, {\"wallTime\": 1647705712.2406023, \"step\": 282, \"value\": 5.297778898238903e-06}, {\"wallTime\": 1647705712.284822, \"step\": 283, \"value\": 5.329082796379225e-06}, {\"wallTime\": 1647705712.369503, \"step\": 285, \"value\": 5.392246293922653e-06}, {\"wallTime\": 1647705712.66343, \"step\": 287, \"value\": 5.4561587603529915e-06}, {\"wallTime\": 1647705712.6739225, \"step\": 288, \"value\": 5.488398528541438e-06}, {\"wallTime\": 1647705712.7550285, \"step\": 290, \"value\": 5.553450591833098e-06}, {\"wallTime\": 1647705713.0046837, \"step\": 295, \"value\": 5.719473847420886e-06}, {\"wallTime\": 1647705713.0526805, \"step\": 296, \"value\": 5.7532693062967155e-06}, {\"wallTime\": 1647705713.1033974, \"step\": 297, \"value\": 5.787264854006935e-06}, {\"wallTime\": 1647705713.1542284, \"step\": 298, \"value\": 5.821460945298895e-06}, {\"wallTime\": 1647705713.550133, \"step\": 306, \"value\": 6.102405677665956e-06}, {\"wallTime\": 1647705713.6491098, \"step\": 308, \"value\": 6.174735062813852e-06}, {\"wallTime\": 1647705713.6965349, \"step\": 309, \"value\": 6.211220807017526e-06}, {\"wallTime\": 1647705713.8412714, \"step\": 312, \"value\": 6.3219763433153275e-06}, {\"wallTime\": 1647705714.1573591, \"step\": 316, \"value\": 6.4727287281129975e-06}, {\"wallTime\": 1647705714.246913, \"step\": 318, \"value\": 6.549447789439e-06}, {\"wallTime\": 1647705714.300136, \"step\": 319, \"value\": 6.58814769849414e-06}, {\"wallTime\": 1647705714.4347978, \"step\": 322, \"value\": 6.705624400638044e-06}, {\"wallTime\": 1647705714.5232308, \"step\": 324, \"value\": 6.785103778383927e-06}, {\"wallTime\": 1647705714.7457051, \"step\": 329, \"value\": 6.987948381720344e-06}, {\"wallTime\": 1647705714.8403127, \"step\": 331, \"value\": 7.07077379047405e-06}, {\"wallTime\": 1647705714.8873818, \"step\": 332, \"value\": 7.1125541580840945e-06}, {\"wallTime\": 1647705715.12238, \"step\": 337, \"value\": 7.325187652895693e-06}, {\"wallTime\": 1647705715.1630147, \"step\": 338, \"value\": 7.368471415247768e-06}, {\"wallTime\": 1647705715.2606344, \"step\": 340, \"value\": 7.455807008227566e-06}, {\"wallTime\": 1647705715.411429, \"step\": 343, \"value\": 7.58875557949068e-06}, {\"wallTime\": 1647705715.510548, \"step\": 345, \"value\": 7.67870278650662e-06}, {\"wallTime\": 1647705715.5572944, \"step\": 346, \"value\": 7.724074748693965e-06}, {\"wallTime\": 1647705715.7323306, \"step\": 350, \"value\": 7.908261977718212e-06}, {\"wallTime\": 1647705715.8315873, \"step\": 352, \"value\": 8.001995411177631e-06}, {\"wallTime\": 1647705715.8742597, \"step\": 353, \"value\": 8.049278221733402e-06}, {\"wallTime\": 1647705715.9230187, \"step\": 354, \"value\": 8.096840247162618e-06}, {\"wallTime\": 1647705716.1505241, \"step\": 358, \"value\": 8.289915967907291e-06}, {\"wallTime\": 1647705716.340909, \"step\": 362, \"value\": 8.487594641337637e-06}, {\"wallTime\": 1647705716.3852887, \"step\": 363, \"value\": 8.537746907677501e-06}, {\"wallTime\": 1647705716.4339375, \"step\": 364, \"value\": 8.588195669290144e-06}, {\"wallTime\": 1647705716.4819875, \"step\": 365, \"value\": 8.638941835670266e-06}, {\"wallTime\": 1647705716.5298975, \"step\": 366, \"value\": 8.689988135301974e-06}, {\"wallTime\": 1647705716.5775242, \"step\": 367, \"value\": 8.74133638717467e-06}, {\"wallTime\": 1647705716.8951306, \"step\": 374, \"value\": 9.109368875215296e-06}, {\"wallTime\": 1647705717.018513, \"step\": 377, \"value\": 9.271802809962537e-06}, {\"wallTime\": 1647705717.0572987, \"step\": 378, \"value\": 9.326588042313233e-06}, {\"wallTime\": 1647705717.6127582, \"step\": 386, \"value\": 9.776691513252445e-06}, {\"wallTime\": 1647705717.793296, \"step\": 390, \"value\": 1.0009824109147303e-05}, {\"wallTime\": 1647705717.843391, \"step\": 391, \"value\": 1.0068970368593e-05}, {\"wallTime\": 1647705717.889599, \"step\": 392, \"value\": 1.012846678349888e-05}, {\"wallTime\": 1647705717.973262, \"step\": 393, \"value\": 1.0188314263359644e-05}, {\"wallTime\": 1647705718.0088036, \"step\": 394, \"value\": 1.0248515536659397e-05}, {\"wallTime\": 1647705718.2255898, \"step\": 397, \"value\": 1.0431263035570737e-05}, {\"wallTime\": 1647705718.5229363, \"step\": 402, \"value\": 1.0743110578914639e-05}, {\"wallTime\": 1647705718.5964413, \"step\": 404, \"value\": 1.087044529413106e-05}, {\"wallTime\": 1647705718.7789278, \"step\": 408, \"value\": 1.112965946958866e-05}, {\"wallTime\": 1647705718.824816, \"step\": 409, \"value\": 1.1195423212484457e-05}, {\"wallTime\": 1647705719.011873, \"step\": 413, \"value\": 1.1462386282801162e-05}, {\"wallTime\": 1647705719.063084, \"step\": 414, \"value\": 1.1530116353242192e-05}, {\"wallTime\": 1647705719.111891, \"step\": 415, \"value\": 1.1598246601352002e-05}, {\"wallTime\": 1647705719.2745268, \"step\": 418, \"value\": 1.1805061149061657e-05}, {\"wallTime\": 1647705719.4157624, \"step\": 421, \"value\": 1.2015563697787002e-05}, {\"wallTime\": 1647705719.4853942, \"step\": 422, \"value\": 1.2086561582691502e-05}, {\"wallTime\": 1647705719.7184145, \"step\": 425, \"value\": 1.2302083632675931e-05}, {\"wallTime\": 1647705719.7869046, \"step\": 426, \"value\": 1.2374774996715132e-05}, {\"wallTime\": 1647705720.058505, \"step\": 430, \"value\": 1.266986146220006e-05}, {\"wallTime\": 1647705720.3330207, \"step\": 431, \"value\": 1.2744725609081797e-05}, {\"wallTime\": 1647705720.5397668, \"step\": 435, \"value\": 1.3048633263679221e-05}, {\"wallTime\": 1647705720.5756485, \"step\": 436, \"value\": 1.3125735677022021e-05}, {\"wallTime\": 1647705720.6013756, \"step\": 437, \"value\": 1.3203294656705111e-05}, {\"wallTime\": 1647705720.6877759, \"step\": 439, \"value\": 1.3359787772060372e-05}, {\"wallTime\": 1647705720.726702, \"step\": 440, \"value\": 1.3438729183690157e-05}, {\"wallTime\": 1647705720.7638729, \"step\": 441, \"value\": 1.3518137166101951e-05}, {\"wallTime\": 1647705720.845809, \"step\": 443, \"value\": 1.3678362847713288e-05}, {\"wallTime\": 1647705720.892135, \"step\": 444, \"value\": 1.3759186003881041e-05}, {\"wallTime\": 1647705720.9385235, \"step\": 445, \"value\": 1.3840487554261927e-05}, {\"wallTime\": 1647705720.9956007, \"step\": 446, \"value\": 1.3922269317845348e-05}, {\"wallTime\": 1647705721.2056477, \"step\": 450, \"value\": 1.425425671186531e-05}, {\"wallTime\": 1647705721.2478456, \"step\": 451, \"value\": 1.4338483197207097e-05}, {\"wallTime\": 1647705721.2935095, \"step\": 452, \"value\": 1.4423207176150754e-05}, {\"wallTime\": 1647705721.3332915, \"step\": 453, \"value\": 1.4508431377180386e-05}, {\"wallTime\": 1647705721.3750403, \"step\": 454, \"value\": 1.4594160347769503e-05}, {\"wallTime\": 1647705721.4566083, \"step\": 456, \"value\": 1.4767139873583801e-05}, {\"wallTime\": 1647705721.518295, \"step\": 458, \"value\": 1.4942169400455896e-05}, {\"wallTime\": 1647705721.6054523, \"step\": 460, \"value\": 1.5119273484742735e-05}, {\"wallTime\": 1647705721.6524267, \"step\": 461, \"value\": 1.5208611330308486e-05}, {\"wallTime\": 1647705721.8359864, \"step\": 465, \"value\": 1.557127143314574e-05}, {\"wallTime\": 1647705721.9384558, \"step\": 466, \"value\": 1.56632813741453e-05}, {\"wallTime\": 1647705722.0262349, \"step\": 468, \"value\": 1.5848931070649996e-05}, {\"wallTime\": 1647705726.262769, \"step\": 470, \"value\": 1.6036783563322388e-05}, {\"wallTime\": 1647705726.5586994, \"step\": 474, \"value\": 1.641919334360864e-05}, {\"wallTime\": 1647705726.628409, \"step\": 475, \"value\": 1.6516212781425565e-05}, {\"wallTime\": 1647705726.8034046, \"step\": 478, \"value\": 1.6810721717774868e-05}, {\"wallTime\": 1647705726.8506405, \"step\": 479, \"value\": 1.69100530911237e-05}, {\"wallTime\": 1647705726.9098701, \"step\": 480, \"value\": 1.700997381703928e-05}, {\"wallTime\": 1647705726.9794893, \"step\": 481, \"value\": 1.7110482076532207e-05}, {\"wallTime\": 1647705727.1143966, \"step\": 483, \"value\": 1.7313286662101746e-05}, {\"wallTime\": 1647705727.1570737, \"step\": 484, \"value\": 1.7415588445146568e-05}, {\"wallTime\": 1647705727.35195, \"step\": 487, \"value\": 1.7726135411066934e-05}, {\"wallTime\": 1647705727.4225419, \"step\": 488, \"value\": 1.7830876458901912e-05}, {\"wallTime\": 1647705727.4906847, \"step\": 489, \"value\": 1.79362377821235e-05}, {\"wallTime\": 1647705727.6353712, \"step\": 491, \"value\": 1.8148828530684114e-05}, {\"wallTime\": 1647705727.8546968, \"step\": 494, \"value\": 1.8472450392437167e-05}, {\"wallTime\": 1647705728.0950825, \"step\": 498, \"value\": 1.891294050437864e-05}, {\"wallTime\": 1647705728.2785819, \"step\": 502, \"value\": 1.9363935280125588e-05}, {\"wallTime\": 1647705728.3237464, \"step\": 503, \"value\": 1.947835335158743e-05}, {\"wallTime\": 1647705728.4649253, \"step\": 506, \"value\": 1.9825682102236897e-05}, {\"wallTime\": 1647705728.60846, \"step\": 509, \"value\": 2.0179204511805438e-05}, {\"wallTime\": 1647705728.6555784, \"step\": 510, \"value\": 2.0298441086197272e-05}, {\"wallTime\": 1647705728.7033334, \"step\": 511, \"value\": 2.041838160948828e-05}, {\"wallTime\": 1647705728.7488208, \"step\": 512, \"value\": 2.0539031538646668e-05}, {\"wallTime\": 1647705728.7949739, \"step\": 513, \"value\": 2.0660394511651248e-05}, {\"wallTime\": 1647705728.8411024, \"step\": 514, \"value\": 2.078247234749142e-05}, {\"wallTime\": 1647705728.982794, \"step\": 517, \"value\": 2.115305687766522e-05}, {\"wallTime\": 1647705729.0286303, \"step\": 518, \"value\": 2.127804691554047e-05}, {\"wallTime\": 1647705729.0780492, \"step\": 519, \"value\": 2.1403777282102965e-05}, {\"wallTime\": 1647705729.1203842, \"step\": 520, \"value\": 2.15302479773527e-05}, {\"wallTime\": 1647705729.2525558, \"step\": 523, \"value\": 2.1914165699854493e-05}, {\"wallTime\": 1647705729.6362395, \"step\": 530, \"value\": 2.283680805703625e-05}, {\"wallTime\": 1647705729.7809725, \"step\": 533, \"value\": 2.3244023395818658e-05}, {\"wallTime\": 1647705729.8288746, \"step\": 534, \"value\": 2.3381369828712195e-05}, {\"wallTime\": 1647705729.9252841, \"step\": 536, \"value\": 2.365850014030002e-05}, {\"wallTime\": 1647705729.973301, \"step\": 537, \"value\": 2.379829493293073e-05}, {\"wallTime\": 1647705730.0281982, \"step\": 538, \"value\": 2.393891554675065e-05}, {\"wallTime\": 1647705730.075968, \"step\": 539, \"value\": 2.408036743872799e-05}, {\"wallTime\": 1647705730.124155, \"step\": 540, \"value\": 2.422265606583096e-05}, {\"wallTime\": 1647705730.2196753, \"step\": 542, \"value\": 2.4509758077329025e-05}, {\"wallTime\": 1647705730.3223171, \"step\": 544, \"value\": 2.4800263418001123e-05}, {\"wallTime\": 1647705730.4101458, \"step\": 546, \"value\": 2.5094212105614133e-05}, {\"wallTime\": 1647705730.464978, \"step\": 547, \"value\": 2.524249066482298e-05}, {\"wallTime\": 1647705730.5983663, \"step\": 550, \"value\": 2.569260323070921e-05}, {\"wallTime\": 1647705730.684226, \"step\": 552, \"value\": 2.5997127522714436e-05}, {\"wallTime\": 1647705730.8230386, \"step\": 555, \"value\": 2.6460696972208098e-05}, {\"wallTime\": 1647705730.8703017, \"step\": 556, \"value\": 2.6617050025379285e-05}, {\"wallTime\": 1647705731.161699, \"step\": 562, \"value\": 2.75747588602826e-05}, {\"wallTime\": 1647705731.2056918, \"step\": 563, \"value\": 2.773769483610522e-05}, {\"wallTime\": 1647705731.2715256, \"step\": 564, \"value\": 2.7901593057322316e-05}, {\"wallTime\": 1647705731.467137, \"step\": 568, \"value\": 2.856692844943609e-05}, {\"wallTime\": 1647705731.588777, \"step\": 571, \"value\": 2.9076320060994476e-05}, {\"wallTime\": 1647705731.6819632, \"step\": 573, \"value\": 2.9420951250358485e-05}, {\"wallTime\": 1647705731.8490713, \"step\": 576, \"value\": 2.994557326019276e-05}, {\"wallTime\": 1647705732.0563602, \"step\": 580, \"value\": 3.0659648473374546e-05}, {\"wallTime\": 1647705732.2900424, \"step\": 584, \"value\": 3.1390751246362925e-05}, {\"wallTime\": 1647705732.3504577, \"step\": 585, \"value\": 3.1576233595842496e-05}, {\"wallTime\": 1647705732.4107296, \"step\": 586, \"value\": 3.176281461492181e-05}, {\"wallTime\": 1647705732.514805, \"step\": 588, \"value\": 3.213928721379489e-05}, {\"wallTime\": 1647705732.6583, \"step\": 590, \"value\": 3.252022361266427e-05}, {\"wallTime\": 1647705732.7066348, \"step\": 591, \"value\": 3.271238165325485e-05}, {\"wallTime\": 1647705732.7466202, \"step\": 592, \"value\": 3.290567474323325e-05}, {\"wallTime\": 1647705732.8309374, \"step\": 594, \"value\": 3.329569153720513e-05}, {\"wallTime\": 1647705732.9198375, \"step\": 596, \"value\": 3.369033584021963e-05}, {\"wallTime\": 1647705732.9621305, \"step\": 597, \"value\": 3.388940604054369e-05}, {\"wallTime\": 1647705733.002197, \"step\": 598, \"value\": 3.4089654946001247e-05}, {\"wallTime\": 1647705733.0443492, \"step\": 599, \"value\": 3.429108619457111e-05}, {\"wallTime\": 1647705733.123362, \"step\": 601, \"value\": 3.46975248248782e-05}, {\"wallTime\": 1647705733.165123, \"step\": 602, \"value\": 3.490255039650947e-05}, {\"wallTime\": 1647705733.2083137, \"step\": 603, \"value\": 3.510878377710469e-05}, {\"wallTime\": 1647705733.2963946, \"step\": 605, \"value\": 3.5524913982953876e-05}, {\"wallTime\": 1647705733.4310446, \"step\": 608, \"value\": 3.615838068071753e-05}, {\"wallTime\": 1647705733.5211504, \"step\": 610, \"value\": 3.658695277408697e-05}, {\"wallTime\": 1647705734.4010587, \"step\": 613, \"value\": 3.723935515154153e-05}, {\"wallTime\": 1647705734.4113603, \"step\": 614, \"value\": 3.7459394661709666e-05}, {\"wallTime\": 1647705734.4872413, \"step\": 616, \"value\": 3.790338814724237e-05}, {\"wallTime\": 1647705734.629395, \"step\": 618, \"value\": 3.835264578810893e-05}, {\"wallTime\": 1647705734.707568, \"step\": 620, \"value\": 3.880722579197027e-05}, {\"wallTime\": 1647705734.801498, \"step\": 622, \"value\": 3.926719364244491e-05}, {\"wallTime\": 1647705734.8463314, \"step\": 623, \"value\": 3.9499216654803604e-05}, {\"wallTime\": 1647705734.9830058, \"step\": 626, \"value\": 4.0203547541750595e-05}, {\"wallTime\": 1647705735.0744007, \"step\": 628, \"value\": 4.06800681957975e-05}, {\"wallTime\": 1647705735.1574216, \"step\": 629, \"value\": 4.0920440369518474e-05}, {\"wallTime\": 1647705735.3304393, \"step\": 633, \"value\": 4.189621904515661e-05}, {\"wallTime\": 1647705735.5009966, \"step\": 637, \"value\": 4.289526623324491e-05}, {\"wallTime\": 1647705735.6255279, \"step\": 640, \"value\": 4.366015491541475e-05}, {\"wallTime\": 1647705735.6708148, \"step\": 641, \"value\": 4.391813854454085e-05}, {\"wallTime\": 1647705735.7168658, \"step\": 642, \"value\": 4.4177646486787125e-05}, {\"wallTime\": 1647705735.7641656, \"step\": 643, \"value\": 4.4438686018111184e-05}, {\"wallTime\": 1647705735.8111618, \"step\": 644, \"value\": 4.470126805244945e-05}, {\"wallTime\": 1647705736.0429218, \"step\": 649, \"value\": 4.6037635911488906e-05}, {\"wallTime\": 1647705736.1381023, \"step\": 651, \"value\": 4.6583303628722206e-05}, {\"wallTime\": 1647705736.186745, \"step\": 652, \"value\": 4.685855674324557e-05}, {\"wallTime\": 1647705736.2357829, \"step\": 653, \"value\": 4.7135439672274515e-05}, {\"wallTime\": 1647705736.2967737, \"step\": 654, \"value\": 4.741395605378784e-05}, {\"wallTime\": 1647705736.3319757, \"step\": 655, \"value\": 4.7694116801721975e-05}, {\"wallTime\": 1647705736.5228696, \"step\": 658, \"value\": 4.8544578021392226e-05}, {\"wallTime\": 1647705736.6158779, \"step\": 660, \"value\": 4.911996074952185e-05}, {\"wallTime\": 1647705736.9540505, \"step\": 667, \"value\": 5.1188031648052856e-05}, {\"wallTime\": 1647705737.1329849, \"step\": 670, \"value\": 5.210079325479455e-05}, {\"wallTime\": 1647705737.3738296, \"step\": 675, \"value\": 5.3658375691156834e-05}, {\"wallTime\": 1647705737.4222615, \"step\": 676, \"value\": 5.39754364581313e-05}, {\"wallTime\": 1647705737.5187597, \"step\": 677, \"value\": 5.4294370784191415e-05}, {\"wallTime\": 1647705737.6302629, \"step\": 680, \"value\": 5.526252061827108e-05}, {\"wallTime\": 1647705737.7740326, \"step\": 682, \"value\": 5.5917527788551524e-05}, {\"wallTime\": 1647705737.8210306, \"step\": 683, \"value\": 5.6247939937748015e-05}, {\"wallTime\": 1647705737.868651, \"step\": 684, \"value\": 5.65802984056063e-05}, {\"wallTime\": 1647705738.0005643, \"step\": 687, \"value\": 5.758921543019824e-05}, {\"wallTime\": 1647705738.232341, \"step\": 692, \"value\": 5.931087434873916e-05}, {\"wallTime\": 1647705738.3271253, \"step\": 694, \"value\": 6.0013866459485143e-05}, {\"wallTime\": 1647705738.4278274, \"step\": 696, \"value\": 6.0725189541699365e-05}, {\"wallTime\": 1647705738.4892933, \"step\": 697, \"value\": 6.108400702942163e-05}, {\"wallTime\": 1647705738.5838952, \"step\": 699, \"value\": 6.180801574373618e-05}, {\"wallTime\": 1647705738.7248292, \"step\": 702, \"value\": 6.291014142334461e-05}, {\"wallTime\": 1647705738.7755945, \"step\": 703, \"value\": 6.328187009785324e-05}, {\"wallTime\": 1647705738.8652015, \"step\": 705, \"value\": 6.403192674042657e-05}, {\"wallTime\": 1647705739.0850677, \"step\": 709, \"value\": 6.555882282555103e-05}, {\"wallTime\": 1647705739.1390276, \"step\": 710, \"value\": 6.594620208488777e-05}, {\"wallTime\": 1647705739.2249107, \"step\": 712, \"value\": 6.672783638350666e-05}, {\"wallTime\": 1647705739.395321, \"step\": 715, \"value\": 6.791769556002691e-05}, {\"wallTime\": 1647705739.50765, \"step\": 717, \"value\": 6.872270023450255e-05}, {\"wallTime\": 1647705739.655414, \"step\": 720, \"value\": 6.994813156779855e-05}, {\"wallTime\": 1647705739.7049832, \"step\": 721, \"value\": 7.036144234007224e-05}, {\"wallTime\": 1647705739.8023005, \"step\": 723, \"value\": 7.119541260180995e-05}, {\"wallTime\": 1647705739.902781, \"step\": 725, \"value\": 7.203927088994533e-05}, {\"wallTime\": 1647705739.9521666, \"step\": 726, \"value\": 7.24649362382479e-05}, {\"wallTime\": 1647705740.0510895, \"step\": 728, \"value\": 7.332384120672941e-05}, {\"wallTime\": 1647705740.0993588, \"step\": 729, \"value\": 7.375710265478119e-05}, {\"wallTime\": 1647705740.1990392, \"step\": 731, \"value\": 7.463131623808295e-05}, {\"wallTime\": 1647705740.243743, \"step\": 732, \"value\": 7.507230475312099e-05}, {\"wallTime\": 1647705740.294571, \"step\": 733, \"value\": 7.551589806098491e-05}, {\"wallTime\": 1647705740.5344098, \"step\": 738, \"value\": 7.777348218951374e-05}, {\"wallTime\": 1647705740.7539582, \"step\": 742, \"value\": 7.962805102579296e-05}, {\"wallTime\": 1647705740.8116834, \"step\": 743, \"value\": 8.009856537682936e-05}, {\"wallTime\": 1647705740.8701842, \"step\": 744, \"value\": 8.057185914367437e-05}, {\"wallTime\": 1647705741.4810283, \"step\": 755, \"value\": 8.596632687840611e-05}, {\"wallTime\": 1647705741.5321007, \"step\": 756, \"value\": 8.647429058328271e-05}, {\"wallTime\": 1647705741.6183465, \"step\": 758, \"value\": 8.74992401804775e-05}, {\"wallTime\": 1647705741.8464768, \"step\": 763, \"value\": 9.011507063405588e-05}, {\"wallTime\": 1647705741.8865108, \"step\": 764, \"value\": 9.064755431609228e-05}, {\"wallTime\": 1647705741.9260697, \"step\": 765, \"value\": 9.11831739358604e-05}, {\"wallTime\": 1647705742.0559347, \"step\": 768, \"value\": 9.280911035602912e-05}, {\"wallTime\": 1647705742.0962605, \"step\": 769, \"value\": 9.335750655736774e-05}, {\"wallTime\": 1647705742.2217896, \"step\": 772, \"value\": 9.502221655566245e-05}, {\"wallTime\": 1647705742.8374157, \"step\": 775, \"value\": 9.671661246102303e-05}, {\"wallTime\": 1647705742.9020088, \"step\": 776, \"value\": 9.728809527587146e-05}, {\"wallTime\": 1647705743.0217266, \"step\": 778, \"value\": 9.84412181423977e-05}, {\"wallTime\": 1647705743.0892048, \"step\": 779, \"value\": 9.90228945738636e-05}, {\"wallTime\": 1647705743.160788, \"step\": 780, \"value\": 9.960800525732338e-05}, {\"wallTime\": 1647705743.2535734, \"step\": 781, \"value\": 0.00010019657202064991}, {\"wallTime\": 1647705743.3215408, \"step\": 782, \"value\": 0.00010078862396767363}, {\"wallTime\": 1647705743.7028544, \"step\": 788, \"value\": 0.00010441510676173493}, {\"wallTime\": 1647705743.8700483, \"step\": 791, \"value\": 0.0001062769879354164}, {\"wallTime\": 1647705743.960963, \"step\": 793, \"value\": 0.00010753665264928713}, {\"wallTime\": 1647705744.0510778, \"step\": 795, \"value\": 0.00010881124035222456}, {\"wallTime\": 1647705744.4057746, \"step\": 799, \"value\": 0.00011140593414893374}, {\"wallTime\": 1647705744.6244793, \"step\": 804, \"value\": 0.00011473647464299574}, {\"wallTime\": 1647705744.668333, \"step\": 805, \"value\": 0.00011541443382157013}, {\"wallTime\": 1647705744.7147205, \"step\": 806, \"value\": 0.00011609640205278993}, {\"wallTime\": 1647705744.7623005, \"step\": 807, \"value\": 0.00011678240116452798}, {\"wallTime\": 1647705744.8905306, \"step\": 810, \"value\": 0.00011886480933753774}, {\"wallTime\": 1647705745.3075328, \"step\": 818, \"value\": 0.00012460123980417848}, {\"wallTime\": 1647705745.3554134, \"step\": 819, \"value\": 0.0001253374939551577}, {\"wallTime\": 1647705745.4418557, \"step\": 821, \"value\": 0.00012682308442890644}, {\"wallTime\": 1647705745.552907, \"step\": 823, \"value\": 0.00012832626816816628}, {\"wallTime\": 1647705745.7290535, \"step\": 826, \"value\": 0.0001306145277339965}, {\"wallTime\": 1647705745.7780426, \"step\": 827, \"value\": 0.00013138630311004817}, {\"wallTime\": 1647705745.8243303, \"step\": 828, \"value\": 0.00013216264778748155}, {\"wallTime\": 1647705746.0296974, \"step\": 832, \"value\": 0.00013531417062040418}, {\"wallTime\": 1647705746.0803528, \"step\": 833, \"value\": 0.0001361137256026268}, {\"wallTime\": 1647705746.1775658, \"step\": 835, \"value\": 0.00013772703823633492}, {\"wallTime\": 1647705746.2263527, \"step\": 836, \"value\": 0.0001385408395435661}, {\"wallTime\": 1647705746.2774305, \"step\": 837, \"value\": 0.00013935945753473788}, {\"wallTime\": 1647705746.3744817, \"step\": 839, \"value\": 0.0001410112454323098}, {\"wallTime\": 1647705746.4150374, \"step\": 840, \"value\": 0.00014184445899445564}, {\"wallTime\": 1647705746.7356296, \"step\": 843, \"value\": 0.00014437375648412853}, {\"wallTime\": 1647705746.7785845, \"step\": 845, \"value\": 0.0001460849744034931}, {\"wallTime\": 1647705747.0142124, \"step\": 850, \"value\": 0.0001504522660980001}, {\"wallTime\": 1647705747.0574663, \"step\": 851, \"value\": 0.00015134125715121627}, {\"wallTime\": 1647705747.2068946, \"step\": 854, \"value\": 0.0001540399098303169}, {\"wallTime\": 1647705747.3564777, \"step\": 857, \"value\": 0.00015678668569307774}, {\"wallTime\": 1647705747.497859, \"step\": 860, \"value\": 0.00015958242875058204}, {\"wallTime\": 1647705747.5966861, \"step\": 862, \"value\": 0.0001614739012438804}, {\"wallTime\": 1647705747.7409036, \"step\": 865, \"value\": 0.00016435323050245643}, {\"wallTime\": 1647705747.786227, \"step\": 866, \"value\": 0.00016532436711713672}, {\"wallTime\": 1647705748.169076, \"step\": 870, \"value\": 0.00016926665557548404}, {\"wallTime\": 1647705748.1897867, \"step\": 871, \"value\": 0.00017026683781296015}, {\"wallTime\": 1647705748.7470105, \"step\": 884, \"value\": 0.0001838198077166453}, {\"wallTime\": 1647705748.7931128, \"step\": 885, \"value\": 0.00018490597722120583}, {\"wallTime\": 1647705748.8380997, \"step\": 886, \"value\": 0.00018599856412038207}, {\"wallTime\": 1647705748.9300945, \"step\": 888, \"value\": 0.00018820313562173396}, {\"wallTime\": 1647705749.02528, \"step\": 890, \"value\": 0.000190433842362836}, {\"wallTime\": 1647705749.1111917, \"step\": 892, \"value\": 0.00019269098993390799}, {\"wallTime\": 1647705749.245127, \"step\": 895, \"value\": 0.00019612697360571474}, {\"wallTime\": 1647705749.3295896, \"step\": 897, \"value\": 0.00019845158385578543}, {\"wallTime\": 1647705749.3738317, \"step\": 898, \"value\": 0.00019962422084063292}, {\"wallTime\": 1647705749.5022793, \"step\": 901, \"value\": 0.00020318382303230464}, {\"wallTime\": 1647705749.5481021, \"step\": 902, \"value\": 0.00020438441424630582}, {\"wallTime\": 1647705749.6444273, \"step\": 904, \"value\": 0.0002068069006782025}, {\"wallTime\": 1647705749.7847998, \"step\": 907, \"value\": 0.00021049458882771432}, {\"wallTime\": 1647705749.8303905, \"step\": 908, \"value\": 0.0002117383701261133}, {\"wallTime\": 1647705749.9226124, \"step\": 910, \"value\": 0.00021424803708214313}, {\"wallTime\": 1647705749.9683852, \"step\": 911, \"value\": 0.00021551399549935013}, {\"wallTime\": 1647705750.1064098, \"step\": 914, \"value\": 0.0002193569380324334}, {\"wallTime\": 1647705750.2943015, \"step\": 918, \"value\": 0.00022458768216893077}, {\"wallTime\": 1647705750.3361, \"step\": 919, \"value\": 0.00022591474407818168}, {\"wallTime\": 1647705750.433899, \"step\": 921, \"value\": 0.00022859242744743824}, {\"wallTime\": 1647705750.5205867, \"step\": 923, \"value\": 0.00023130184854380786}, {\"wallTime\": 1647705750.6939983, \"step\": 927, \"value\": 0.00023681741731707007}, {\"wallTime\": 1647705750.740704, \"step\": 928, \"value\": 0.00023821674403734505}, {\"wallTime\": 1647705750.8999305, \"step\": 930, \"value\": 0.00024104023759718984}, {\"wallTime\": 1647705750.927228, \"step\": 931, \"value\": 0.00024246452085208148}, {\"wallTime\": 1647705750.9503093, \"step\": 932, \"value\": 0.00024389720056205988}, {\"wallTime\": 1647705750.993631, \"step\": 933, \"value\": 0.0002453383640386164}, {\"wallTime\": 1647705751.171107, \"step\": 935, \"value\": 0.00024824627325870097}, {\"wallTime\": 1647705755.5156763, \"step\": 939, \"value\": 0.00025416590506210923}, {\"wallTime\": 1647705755.6109111, \"step\": 941, \"value\": 0.00025717844255268574}, {\"wallTime\": 1647705755.6574984, \"step\": 942, \"value\": 0.00025869806995615363}, {\"wallTime\": 1647705756.4848719, \"step\": 945, \"value\": 0.0002633110561873764}, {\"wallTime\": 1647705756.732674, \"step\": 949, \"value\": 0.0002695899165701121}, {\"wallTime\": 1647705756.868249, \"step\": 952, \"value\": 0.00027439711266197264}, {\"wallTime\": 1647705757.0476632, \"step\": 955, \"value\": 0.00027929001953452826}, {\"wallTime\": 1647705757.1183255, \"step\": 956, \"value\": 0.0002809403231367469}, {\"wallTime\": 1647705757.37031, \"step\": 960, \"value\": 0.0002876395592465997}, {\"wallTime\": 1647705757.4571602, \"step\": 962, \"value\": 0.0002910488401539624}, {\"wallTime\": 1647705757.4953213, \"step\": 963, \"value\": 0.0002927686145994812}, {\"wallTime\": 1647705757.5799909, \"step\": 965, \"value\": 0.00029623869340866804}, {\"wallTime\": 1647705757.6626015, \"step\": 967, \"value\": 0.0002997498959302902}, {\"wallTime\": 1647705757.7003365, \"step\": 968, \"value\": 0.0003015210968442261}, {\"wallTime\": 1647705757.8325424, \"step\": 971, \"value\": 0.0003068976802751422}, {\"wallTime\": 1647705758.072749, \"step\": 976, \"value\": 0.00031607254641130567}, {\"wallTime\": 1647705758.166919, \"step\": 978, \"value\": 0.00031981884967535734}, {\"wallTime\": 1647705758.2143345, \"step\": 979, \"value\": 0.000321708619594574}, {\"wallTime\": 1647705758.3133504, \"step\": 981, \"value\": 0.00032552171614952385}, {\"wallTime\": 1647705758.3610156, \"step\": 982, \"value\": 0.00032744515920057893}, {\"wallTime\": 1647705758.555303, \"step\": 986, \"value\": 0.0003352533676661551}, {\"wallTime\": 1647705758.7377746, \"step\": 990, \"value\": 0.00034324772423133254}, {\"wallTime\": 1647705758.826523, \"step\": 992, \"value\": 0.0003473161195870489}, {\"wallTime\": 1647705758.9168744, \"step\": 994, \"value\": 0.00035143273998983204}, {\"wallTime\": 1647705759.1062784, \"step\": 996, \"value\": 0.0003555981384124607}, {\"wallTime\": 1647705759.1936433, \"step\": 998, \"value\": 0.0003598129260353744}, {\"wallTime\": 1647705759.236869, \"step\": 999, \"value\": 0.0003619390190578997}, {\"wallTime\": 1647705759.41119, \"step\": 1002, \"value\": 0.0003683929389808327}, {\"wallTime\": 1647705759.4897783, \"step\": 1003, \"value\": 0.00037056973087601364}, {\"wallTime\": 1647705759.5809872, \"step\": 1004, \"value\": 0.000372759357560426}, {\"wallTime\": 1647705759.6967597, \"step\": 1006, \"value\": 0.0003771775518544018}, {\"wallTime\": 1647705759.953996, \"step\": 1011, \"value\": 0.0003884534817188978}, {\"wallTime\": 1647705760.0157945, \"step\": 1013, \"value\": 0.00039305767859332263}, {\"wallTime\": 1647705760.1045816, \"step\": 1015, \"value\": 0.0003977164451498538}, {\"wallTime\": 1647705760.1763341, \"step\": 1016, \"value\": 0.00040006652125157416}, {\"wallTime\": 1647705760.2143543, \"step\": 1017, \"value\": 0.0004024304507765919}, {\"wallTime\": 1647705760.4297373, \"step\": 1022, \"value\": 0.00041446133400313556}, {\"wallTime\": 1647705760.6068158, \"step\": 1026, \"value\": 0.0004243444709572941}, {\"wallTime\": 1647705760.7161613, \"step\": 1028, \"value\": 0.000429374078521505}, {\"wallTime\": 1647705760.7758095, \"step\": 1029, \"value\": 0.0004319111758377403}, {\"wallTime\": 1647705761.1146355, \"step\": 1035, \"value\": 0.0004474518063943833}, {\"wallTime\": 1647705761.163148, \"step\": 1036, \"value\": 0.0004500957438722253}, {\"wallTime\": 1647705761.2452006, \"step\": 1037, \"value\": 0.0004527553101070225}, {\"wallTime\": 1647705761.295829, \"step\": 1038, \"value\": 0.00045543056330643594}, {\"wallTime\": 1647705761.3296487, \"step\": 1039, \"value\": 0.0004581216489896178}, {\"wallTime\": 1647705761.4792638, \"step\": 1043, \"value\": 0.0004690459172707051}, {\"wallTime\": 1647705761.5614114, \"step\": 1045, \"value\": 0.0004746053309645504}, {\"wallTime\": 1647705761.6013634, \"step\": 1046, \"value\": 0.0004774097178597003}, {\"wallTime\": 1647705761.863362, \"step\": 1052, \"value\": 0.0004945874097757041}, {\"wallTime\": 1647705761.9068372, \"step\": 1053, \"value\": 0.0004975099000148475}, {\"wallTime\": 1647705762.030087, \"step\": 1056, \"value\": 0.0005063812714070082}, {\"wallTime\": 1647705762.089273, \"step\": 1058, \"value\": 0.0005123831797391176}, {\"wallTime\": 1647705762.121896, \"step\": 1059, \"value\": 0.0005154107930138707}, {\"wallTime\": 1647705762.1548073, \"step\": 1060, \"value\": 0.0005184562760405242}, {\"wallTime\": 1647705762.2201662, \"step\": 1062, \"value\": 0.0005246013752184808}, {\"wallTime\": 1647705762.3463745, \"step\": 1065, \"value\": 0.0005339558119885623}, {\"wallTime\": 1647705762.4590948, \"step\": 1067, \"value\": 0.0005402846145443618}, {\"wallTime\": 1647705762.5518556, \"step\": 1069, \"value\": 0.0005466883885674179}, {\"wallTime\": 1647705762.5997136, \"step\": 1070, \"value\": 0.0005499187391251326}, {\"wallTime\": 1647705762.647576, \"step\": 1071, \"value\": 0.000553168123587966}, {\"wallTime\": 1647705762.7019455, \"step\": 1072, \"value\": 0.0005564367165789008}, {\"wallTime\": 1647705762.7495596, \"step\": 1073, \"value\": 0.0005597246345132589}, {\"wallTime\": 1647705762.7971184, \"step\": 1074, \"value\": 0.0005630319355987012}, {\"wallTime\": 1647705762.9415884, \"step\": 1077, \"value\": 0.0005730717093683779}, {\"wallTime\": 1647705762.9894338, \"step\": 1078, \"value\": 0.000576457881834358}, {\"wallTime\": 1647705763.0885975, \"step\": 1080, \"value\": 0.0005832904716953635}, {\"wallTime\": 1647705763.1396787, \"step\": 1081, \"value\": 0.0005867370055057108}, {\"wallTime\": 1647705763.406897, \"step\": 1082, \"value\": 0.0005902039702050388}, {\"wallTime\": 1647705763.485967, \"step\": 1085, \"value\": 0.0006007282063364983}, {\"wallTime\": 1647705763.5249443, \"step\": 1086, \"value\": 0.0006042778259143233}, {\"wallTime\": 1647705763.5692463, \"step\": 1087, \"value\": 0.0006078484584577382}, {\"wallTime\": 1647705763.7950082, \"step\": 1091, \"value\": 0.0006223430391401052}, {\"wallTime\": 1647705764.100138, \"step\": 1098, \"value\": 0.0006485452759079635}, {\"wallTime\": 1647705764.196244, \"step\": 1100, \"value\": 0.0006562322378158569}, {\"wallTime\": 1647705764.335183, \"step\": 1102, \"value\": 0.0006640103529207408}, {\"wallTime\": 1647705764.3831537, \"step\": 1103, \"value\": 0.000667933898512274}, {\"wallTime\": 1647705764.4309335, \"step\": 1104, \"value\": 0.0006718806107528508}, {\"wallTime\": 1647705764.5825708, \"step\": 1107, \"value\": 0.0006838612607680261}, {\"wallTime\": 1647705764.6668203, \"step\": 1109, \"value\": 0.0006919668521732092}, {\"wallTime\": 1647705764.7574034, \"step\": 1111, \"value\": 0.0007001684862188995}, {\"wallTime\": 1647705764.8029907, \"step\": 1112, \"value\": 0.000704305712133646}, {\"wallTime\": 1647705764.9508767, \"step\": 1114, \"value\": 0.0007126535638235509}, {\"wallTime\": 1647705765.2638087, \"step\": 1119, \"value\": 0.0007339587318710983}, {\"wallTime\": 1647705765.3623593, \"step\": 1121, \"value\": 0.0007426580996252596}, {\"wallTime\": 1647705765.43789, \"step\": 1122, \"value\": 0.0007470463751815259}, {\"wallTime\": 1647705765.5782669, \"step\": 1125, \"value\": 0.0007603673147968948}, {\"wallTime\": 1647705765.6229122, \"step\": 1126, \"value\": 0.0007648602477274835}, {\"wallTime\": 1647705765.7110624, \"step\": 1128, \"value\": 0.0007739258580841124}, {\"wallTime\": 1647705765.7856119, \"step\": 1129, \"value\": 0.0007784988847561181}, {\"wallTime\": 1647705765.8301282, \"step\": 1130, \"value\": 0.0007830989197827876}, {\"wallTime\": 1647705765.872317, \"step\": 1131, \"value\": 0.0007877261377871037}, {\"wallTime\": 1647705765.9165747, \"step\": 1132, \"value\": 0.0007923807133920491}, {\"wallTime\": 1647705765.9995728, \"step\": 1134, \"value\": 0.000801772519480437}, {\"wallTime\": 1647705766.0424297, \"step\": 1135, \"value\": 0.0008065100992098451}, {\"wallTime\": 1647705766.0871465, \"step\": 1136, \"value\": 0.0008112756768241525}, {\"wallTime\": 1647705766.2291145, \"step\": 1139, \"value\": 0.0008257419685833156}, {\"wallTime\": 1647705766.371738, \"step\": 1142, \"value\": 0.0008404661784879863}, {\"wallTime\": 1647705766.5119436, \"step\": 1145, \"value\": 0.0008554530213586986}, {\"wallTime\": 1647705766.5602353, \"step\": 1146, \"value\": 0.0008605077746324241}, {\"wallTime\": 1647705766.6549704, \"step\": 1148, \"value\": 0.0008707070373930037}, {\"wallTime\": 1647705766.7528737, \"step\": 1150, \"value\": 0.0008810272556729615}, {\"wallTime\": 1647705766.7992992, \"step\": 1151, \"value\": 0.0008862331160344183}, {\"wallTime\": 1647705766.8519368, \"step\": 1152, \"value\": 0.0008914697682484984}, {\"wallTime\": 1647705766.8977242, \"step\": 1153, \"value\": 0.0008967373287305236}, {\"wallTime\": 1647705767.2135608, \"step\": 1160, \"value\": 0.0009344922145828605}, {\"wallTime\": 1647705767.3032613, \"step\": 1162, \"value\": 0.0009455684339627624}, {\"wallTime\": 1647705767.398249, \"step\": 1164, \"value\": 0.0009567759116180241}, {\"wallTime\": 1647705767.5008254, \"step\": 1166, \"value\": 0.0009681162191554904}, {\"wallTime\": 1647705767.551588, \"step\": 1167, \"value\": 0.0009738366934470832}, {\"wallTime\": 1647705767.822638, \"step\": 1173, \"value\": 0.0010088763665407896}, {\"wallTime\": 1647705767.868029, \"step\": 1174, \"value\": 0.0010148376459255815}, {\"wallTime\": 1647705767.987719, \"step\": 1176, \"value\": 0.0010268661426380277}, {\"wallTime\": 1647705768.029876, \"step\": 1177, \"value\": 0.0010329338256269693}, {\"wallTime\": 1647705768.0736845, \"step\": 1178, \"value\": 0.0010390372481197119}, {\"wallTime\": 1647705768.2571528, \"step\": 1182, \"value\": 0.0010638139210641384}, {\"wallTime\": 1647705768.326897, \"step\": 1184, \"value\": 0.0010764229809865355}, {\"wallTime\": 1647705768.4094138, \"step\": 1186, \"value\": 0.0010891814017668366}, {\"wallTime\": 1647705768.4965847, \"step\": 1188, \"value\": 0.001102091046050191}, {\"wallTime\": 1647705768.5796835, \"step\": 1189, \"value\": 0.0011086032027378678}, {\"wallTime\": 1647705768.5923595, \"step\": 1190, \"value\": 0.0011151537764817476}, {\"wallTime\": 1647705768.7296116, \"step\": 1193, \"value\": 0.0011350386776030064}, {\"wallTime\": 1647705768.7750185, \"step\": 1194, \"value\": 0.001141745480708778}, {\"wallTime\": 1647705768.820573, \"step\": 1195, \"value\": 0.0011484918650239706}, {\"wallTime\": 1647705768.982453, \"step\": 1197, \"value\": 0.0011621045414358377}, {\"wallTime\": 1647705768.9912763, \"step\": 1198, \"value\": 0.0011689712991937995}, {\"wallTime\": 1647705769.1476872, \"step\": 1201, \"value\": 0.0011898158118128777}, {\"wallTime\": 1647705769.3249133, \"step\": 1205, \"value\": 0.0012181878555566072}, {\"wallTime\": 1647705769.3711655, \"step\": 1206, \"value\": 0.0012253860477358103}, {\"wallTime\": 1647705771.0704758, \"step\": 1207, \"value\": 0.0012326266150921583}, {\"wallTime\": 1647705771.1967103, \"step\": 1209, \"value\": 0.001247236505150795}, {\"wallTime\": 1647705771.4205909, \"step\": 1213, \"value\": 0.001276977825909853}, {\"wallTime\": 1647705771.4966333, \"step\": 1214, \"value\": 0.0012845234014093876}, {\"wallTime\": 1647705771.566548, \"step\": 1215, \"value\": 0.00129211344756186}, {\"wallTime\": 1647705771.870096, \"step\": 1218, \"value\": 0.0013151537859812379}, {\"wallTime\": 1647705772.089429, \"step\": 1223, \"value\": 0.001354471081867814}, {\"wallTime\": 1647705772.1847942, \"step\": 1225, \"value\": 0.0013705251039937139}, {\"wallTime\": 1647705772.5659435, \"step\": 1229, \"value\": 0.0014032063772901893}, {\"wallTime\": 1647705772.7331967, \"step\": 1232, \"value\": 0.0014282276388257742}, {\"wallTime\": 1647705772.7887125, \"step\": 1233, \"value\": 0.0014366668183356524}, {\"wallTime\": 1647705773.7697244, \"step\": 1238, \"value\": 0.001479616854339838}, {\"wallTime\": 1647705773.8164797, \"step\": 1240, \"value\": 0.0014971541240811348}, {\"wallTime\": 1647705773.8418312, \"step\": 1241, \"value\": 0.0015060006408020854}, {\"wallTime\": 1647705773.8814514, \"step\": 1242, \"value\": 0.0015148994280025363}, {\"wallTime\": 1647705774.0325358, \"step\": 1243, \"value\": 0.0015238507185131311}, {\"wallTime\": 1647705774.0453238, \"step\": 1244, \"value\": 0.0015328549779951572}, {\"wallTime\": 1647705774.1463394, \"step\": 1246, \"value\": 0.0015510233351960778}, {\"wallTime\": 1647705774.3243246, \"step\": 1249, \"value\": 0.0015786804724484682}, {\"wallTime\": 1647705774.370662, \"step\": 1250, \"value\": 0.0015880087157711387}, {\"wallTime\": 1647705774.4173427, \"step\": 1251, \"value\": 0.0015973920235410333}, {\"wallTime\": 1647705774.4689872, \"step\": 1252, \"value\": 0.0016068308614194393}, {\"wallTime\": 1647705774.565709, \"step\": 1254, \"value\": 0.0016258759424090385}, {\"wallTime\": 1647705774.6557422, \"step\": 1256, \"value\": 0.0016451469855383039}, {\"wallTime\": 1647705774.7003186, \"step\": 1257, \"value\": 0.0016548678977414966}, {\"wallTime\": 1647705774.8370137, \"step\": 1260, \"value\": 0.0016843767371028662}, {\"wallTime\": 1647705774.983277, \"step\": 1261, \"value\": 0.0016943294322118163}, {\"wallTime\": 1647705775.213799, \"step\": 1267, \"value\": 0.0017552932258695364}, {\"wallTime\": 1647705775.39071, \"step\": 1271, \"value\": 0.001797149539925158}, {\"wallTime\": 1647705775.622949, \"step\": 1276, \"value\": 0.0018508763751015067}, {\"wallTime\": 1647705775.6663024, \"step\": 1277, \"value\": 0.0018618128960952163}, {\"wallTime\": 1647705775.7149906, \"step\": 1278, \"value\": 0.0018728141440078616}, {\"wallTime\": 1647705775.9074104, \"step\": 1282, \"value\": 0.0019174728076905012}, {\"wallTime\": 1647705776.0688999, \"step\": 1285, \"value\": 0.0019516643369570374}, {\"wallTime\": 1647705780.884194, \"step\": 1290, \"value\": 0.002010010415688157}, {\"wallTime\": 1647705781.0464816, \"step\": 1293, \"value\": 0.0020458518993109465}, {\"wallTime\": 1647705781.3072546, \"step\": 1298, \"value\": 0.002107013715431094}, {\"wallTime\": 1647705781.3417652, \"step\": 1299, \"value\": 0.0021194638684391975}, {\"wallTime\": 1647705781.6181042, \"step\": 1302, \"value\": 0.0021572571713477373}, {\"wallTime\": 1647705781.8324223, \"step\": 1306, \"value\": 0.0022086985409259796}, {\"wallTime\": 1647705782.0286663, \"step\": 1310, \"value\": 0.002261366695165634}, {\"wallTime\": 1647705782.2695558, \"step\": 1315, \"value\": 0.0023289716336876154}, {\"wallTime\": 1647705782.4903338, \"step\": 1320, \"value\": 0.0023985973093658686}, {\"wallTime\": 1647705782.5766823, \"step\": 1322, \"value\": 0.0024270270951092243}, {\"wallTime\": 1647705782.7173176, \"step\": 1325, \"value\": 0.002470304723829031}, {\"wallTime\": 1647705782.7642102, \"step\": 1326, \"value\": 0.0024849013425409794}, {\"wallTime\": 1647705782.8557746, \"step\": 1328, \"value\": 0.0025143541861325502}, {\"wallTime\": 1647705783.178705, \"step\": 1335, \"value\": 0.002620214829221368}, {\"wallTime\": 1647705783.5651743, \"step\": 1344, \"value\": 0.0027628964744508266}, {\"wallTime\": 1647705783.609504, \"step\": 1345, \"value\": 0.0027792220935225487}, {\"wallTime\": 1647705783.6941378, \"step\": 1347, \"value\": 0.002812163205817342}, {\"wallTime\": 1647705783.7630773, \"step\": 1348, \"value\": 0.002828779863193631}, {\"wallTime\": 1647705783.8946447, \"step\": 1351, \"value\": 0.0028792214579880238}, {\"wallTime\": 1647705783.9384966, \"step\": 1352, \"value\": 0.0028962341602891684}, {\"wallTime\": 1647705784.0306668, \"step\": 1354, \"value\": 0.0029305622447282076}, {\"wallTime\": 1647705784.21735, \"step\": 1358, \"value\": 0.0030004438012838364}, {\"wallTime\": 1647705784.312369, \"step\": 1360, \"value\": 0.0030360070522874594}, {\"wallTime\": 1647705784.5029173, \"step\": 1364, \"value\": 0.0031084029469639063}, {\"wallTime\": 1647705784.545132, \"step\": 1365, \"value\": 0.0031267700251191854}, {\"wallTime\": 1647705784.5851192, \"step\": 1366, \"value\": 0.003145245835185051}, {\"wallTime\": 1647705784.6287024, \"step\": 1367, \"value\": 0.0031638306099921465}, {\"wallTime\": 1647705784.6781096, \"step\": 1368, \"value\": 0.0031825252808630466}, {\"wallTime\": 1647705784.8427877, \"step\": 1372, \"value\": 0.0032584150321781635}, {\"wallTime\": 1647705784.8848753, \"step\": 1373, \"value\": 0.003277668496593833}, {\"wallTime\": 1647705785.0723746, \"step\": 1375, \"value\": 0.003316517686471343}, {\"wallTime\": 1647705785.1022997, \"step\": 1376, \"value\": 0.0033361143432557583}, {\"wallTime\": 1647705785.299624, \"step\": 1380, \"value\": 0.003415666753426194}, {\"wallTime\": 1647705785.5402238, \"step\": 1385, \"value\": 0.003517779754474759}, {\"wallTime\": 1647705785.5890536, \"step\": 1386, \"value\": 0.003538565943017602}, {\"wallTime\": 1647705785.7902498, \"step\": 1390, \"value\": 0.003622945863753557}, {\"wallTime\": 1647705785.928559, \"step\": 1393, \"value\": 0.003687548451125622}, {\"wallTime\": 1647705786.1027958, \"step\": 1397, \"value\": 0.0037754809018224478}, {\"wallTime\": 1647705786.3922818, \"step\": 1403, \"value\": 0.003911326639354229}, {\"wallTime\": 1647705791.728447, \"step\": 1416, \"value\": 0.004222662188112736}, {\"wallTime\": 1647705791.7780228, \"step\": 1417, \"value\": 0.004247613251209259}, {\"wallTime\": 1647705792.069601, \"step\": 1421, \"value\": 0.004348901100456715}, {\"wallTime\": 1647705792.5131261, \"step\": 1431, \"value\": 0.004612813238054514}, {\"wallTime\": 1647705792.5580115, \"step\": 1432, \"value\": 0.004640069790184498}, {\"wallTime\": 1647705792.749095, \"step\": 1436, \"value\": 0.004750716034322977}, {\"wallTime\": 1647705792.837851, \"step\": 1438, \"value\": 0.004807024262845516}, {\"wallTime\": 1647705792.8815672, \"step\": 1439, \"value\": 0.004835428670048714}, {\"wallTime\": 1647705801.6714747, \"step\": 1440, \"value\": 0.004864000249654055}, {\"wallTime\": 1647705801.6936805, \"step\": 1441, \"value\": 0.004892741329967976}, {\"wallTime\": 1647705801.7966392, \"step\": 1444, \"value\": 0.004979986231774092}, {\"wallTime\": 1647705801.9344475, \"step\": 1446, \"value\": 0.005039012059569359}, {\"wallTime\": 1647705801.9743981, \"step\": 1447, \"value\": 0.005068786907941103}, {\"wallTime\": 1647705802.1603487, \"step\": 1449, \"value\": 0.005128865595906973}, {\"wallTime\": 1647705802.202327, \"step\": 1451, \"value\": 0.005189656279981136}, {\"wallTime\": 1647705802.2491813, \"step\": 1452, \"value\": 0.005220321007072926}, {\"wallTime\": 1647705802.3694317, \"step\": 1454, \"value\": 0.005282195750623941}, {\"wallTime\": 1647705802.4283803, \"step\": 1455, \"value\": 0.005313407629728317}, {\"wallTime\": 1647705802.4854925, \"step\": 1456, \"value\": 0.005344803910702467}, {\"wallTime\": 1647705802.5468197, \"step\": 1457, \"value\": 0.005376385524868965}, {\"wallTime\": 1647705802.6019397, \"step\": 1458, \"value\": 0.005408153869211674}, {\"wallTime\": 1647705802.6533797, \"step\": 1459, \"value\": 0.005440109875053167}, {\"wallTime\": 1647705802.712641, \"step\": 1460, \"value\": 0.005472254939377308}, {\"wallTime\": 1647705802.7711494, \"step\": 1461, \"value\": 0.005504589527845383}, {\"wallTime\": 1647705802.881125, \"step\": 1463, \"value\": 0.00556983333081007}, {\"wallTime\": 1647705803.2691896, \"step\": 1470, \"value\": 0.005804337561130524}, {\"wallTime\": 1647705803.4430323, \"step\": 1473, \"value\": 0.005907837767153978}, {\"wallTime\": 1647705803.5020027, \"step\": 1474, \"value\": 0.00594274653121829}, {\"wallTime\": 1647705803.6198723, \"step\": 1476, \"value\": 0.006013183854520321}, {\"wallTime\": 1647705804.0304637, \"step\": 1483, \"value\": 0.006266354117542505}, {\"wallTime\": 1647705804.2129552, \"step\": 1487, \"value\": 0.006415780168026686}, {\"wallTime\": 1647705804.3005707, \"step\": 1489, \"value\": 0.0064918240532279015}, {\"wallTime\": 1647705804.3460367, \"step\": 1490, \"value\": 0.006530183367431164}, {\"wallTime\": 1647705804.483406, \"step\": 1493, \"value\": 0.006646626628935337}, {\"wallTime\": 1647705804.5275412, \"step\": 1494, \"value\": 0.006685900501906872}, {\"wallTime\": 1647705804.722872, \"step\": 1498, \"value\": 0.006845331285148859}, {\"wallTime\": 1647705804.765045, \"step\": 1499, \"value\": 0.0068857790902256966}, {\"wallTime\": 1647705804.8114307, \"step\": 1500, \"value\": 0.00692646624520421}, {\"wallTime\": 1647705804.8922014, \"step\": 1502, \"value\": 0.007008563261479139}, {\"wallTime\": 1647705805.1977172, \"step\": 1509, \"value\": 0.007303641643375158}, {\"wallTime\": 1647705805.2435253, \"step\": 1510, \"value\": 0.007346797734498978}, {\"wallTime\": 1647705805.340817, \"step\": 1511, \"value\": 0.007390209008008242}, {\"wallTime\": 1647705805.4327457, \"step\": 1513, \"value\": 0.007477802224457264}, {\"wallTime\": 1647705805.5200248, \"step\": 1515, \"value\": 0.00756643433123827}, {\"wallTime\": 1647705805.5640352, \"step\": 1516, \"value\": 0.0076111434027552605}, {\"wallTime\": 1647705805.984233, \"step\": 1523, \"value\": 0.00793159194290638}, {\"wallTime\": 1647705806.2588534, \"step\": 1528, \"value\": 0.008168710395693779}, {\"wallTime\": 1647705806.6006577, \"step\": 1534, \"value\": 0.008462629280984402}, {\"wallTime\": 1647705806.7364204, \"step\": 1537, \"value\": 0.008613531477749348}, {\"wallTime\": 1647705806.7854145, \"step\": 1538, \"value\": 0.008664427325129509}, {\"wallTime\": 1647705807.210551, \"step\": 1541, \"value\": 0.008818927221000195}, {\"wallTime\": 1647705807.5194602, \"step\": 1548, \"value\": 0.009190226905047894}, {\"wallTime\": 1647705807.6742663, \"step\": 1551, \"value\": 0.009354102425277233}, {\"wallTime\": 1647705807.7189403, \"step\": 1552, \"value\": 0.009409374557435513}, {\"wallTime\": 1647705807.7656157, \"step\": 1553, \"value\": 0.009464973583817482}, {\"wallTime\": 1647705808.2509112, \"step\": 1562, \"value\": 0.009980381466448307}, {\"wallTime\": 1647705808.4343455, \"step\": 1565, \"value\": 0.010158346965909004}, {\"wallTime\": 1647705808.4668489, \"step\": 1566, \"value\": 0.010218370705842972}, {\"wallTime\": 1647705808.5342104, \"step\": 1568, \"value\": 0.010339485481381416}, {\"wallTime\": 1647705808.6164913, \"step\": 1570, \"value\": 0.010462035425007343}, {\"wallTime\": 1647705808.65666, \"step\": 1571, \"value\": 0.01052385475486517}, {\"wallTime\": 1647705808.6970696, \"step\": 1572, \"value\": 0.01058603823184967}, {\"wallTime\": 1647705808.7545388, \"step\": 1573, \"value\": 0.010648590512573719}, {\"wallTime\": 1647705808.9238014, \"step\": 1576, \"value\": 0.010838471353054047}, {\"wallTime\": 1647705809.0387998, \"step\": 1578, \"value\": 0.010966935195028782}, {\"wallTime\": 1647705809.1477487, \"step\": 1580, \"value\": 0.011096922680735588}, {\"wallTime\": 1647705809.2057168, \"step\": 1581, \"value\": 0.01116249244660139}, {\"wallTime\": 1647705809.265764, \"step\": 1582, \"value\": 0.011228450573980808}, {\"wallTime\": 1647705809.4372225, \"step\": 1585, \"value\": 0.011428670957684517}, {\"wallTime\": 1647705809.7250967, \"step\": 1590, \"value\": 0.0117703378200531}, {\"wallTime\": 1647705809.96072, \"step\": 1595, \"value\": 0.012122217565774918}, {\"wallTime\": 1647705810.0035574, \"step\": 1596, \"value\": 0.012193846516311169}, {\"wallTime\": 1647705810.0470524, \"step\": 1597, \"value\": 0.012265898287296295}, {\"wallTime\": 1647705810.262154, \"step\": 1601, \"value\": 0.012558388523757458}, {\"wallTime\": 1647705810.309528, \"step\": 1602, \"value\": 0.012632593512535095}, {\"wallTime\": 1647705810.3569298, \"step\": 1603, \"value\": 0.012707238085567951}, {\"wallTime\": 1647705810.737762, \"step\": 1611, \"value\": 0.013320491649210453}, {\"wallTime\": 1647705810.8579695, \"step\": 1613, \"value\": 0.013478375039994717}, {\"wallTime\": 1647705810.9070628, \"step\": 1614, \"value\": 0.013558016158640385}, {\"wallTime\": 1647705811.0038385, \"step\": 1616, \"value\": 0.013718714937567711}, {\"wallTime\": 1647705811.2940662, \"step\": 1622, \"value\": 0.014212328940629959}, {\"wallTime\": 1647705811.400903, \"step\": 1624, \"value\": 0.014380782842636108}, {\"wallTime\": 1647705811.537845, \"step\": 1626, \"value\": 0.014551232568919659}, {\"wallTime\": 1647705811.582334, \"step\": 1627, \"value\": 0.014637214131653309}, {\"wallTime\": 1647705811.8115776, \"step\": 1631, \"value\": 0.01498624961823225}, {\"wallTime\": 1647705812.003368, \"step\": 1635, \"value\": 0.01534360833466053}, {\"wallTime\": 1647705812.0459564, \"step\": 1636, \"value\": 0.015434271655976772}, {\"wallTime\": 1647705812.0969167, \"step\": 1637, \"value\": 0.015525470487773418}, {\"wallTime\": 1647705812.2279265, \"step\": 1640, \"value\": 0.01580231450498104}, {\"wallTime\": 1647705812.2741992, \"step\": 1641, \"value\": 0.01589568704366684}, {\"wallTime\": 1647705812.5184822, \"step\": 1646, \"value\": 0.016370898112654686}, {\"wallTime\": 1647705812.5615199, \"step\": 1647, \"value\": 0.016467630863189697}, {\"wallTime\": 1647705812.6520474, \"step\": 1649, \"value\": 0.01666281558573246}, {\"wallTime\": 1647705812.7415018, \"step\": 1651, \"value\": 0.016860313713550568}, {\"wallTime\": 1647705812.883232, \"step\": 1652, \"value\": 0.016959939152002335}, {\"wallTime\": 1647705812.8921013, \"step\": 1653, \"value\": 0.01706015318632126}, {\"wallTime\": 1647705812.9501448, \"step\": 1654, \"value\": 0.017160959541797638}, {\"wallTime\": 1647705813.081176, \"step\": 1656, \"value\": 0.017364362254738808}, {\"wallTime\": 1647705813.174363, \"step\": 1658, \"value\": 0.01757017709314823}, {\"wallTime\": 1647705813.3549087, \"step\": 1662, \"value\": 0.017989151179790497}, {\"wallTime\": 1647705813.4504561, \"step\": 1664, \"value\": 0.018202370032668114}, {\"wallTime\": 1647705813.5324895, \"step\": 1666, \"value\": 0.018418116495013237}, {\"wallTime\": 1647705813.683217, \"step\": 1669, \"value\": 0.01874653995037079}, {\"wallTime\": 1647705813.7367022, \"step\": 1670, \"value\": 0.018857309594750404}, {\"wallTime\": 1647705813.9325464, \"step\": 1674, \"value\": 0.019306978210806847}, {\"wallTime\": 1647705814.0828655, \"step\": 1677, \"value\": 0.019651250913739204}, {\"wallTime\": 1647705814.1808424, \"step\": 1679, \"value\": 0.019884169101715088}, {\"wallTime\": 1647705814.230586, \"step\": 1680, \"value\": 0.020001662895083427}, {\"wallTime\": 1647705814.3296468, \"step\": 1682, \"value\": 0.020238734781742096}, {\"wallTime\": 1647705814.4861715, \"step\": 1685, \"value\": 0.020599622279405594}, {\"wallTime\": 1647705814.5286489, \"step\": 1686, \"value\": 0.020721344277262688}, {\"wallTime\": 1647705814.5842028, \"step\": 1687, \"value\": 0.020843783393502235}, {\"wallTime\": 1647705814.6585085, \"step\": 1688, \"value\": 0.020966947078704834}, {\"wallTime\": 1647705814.991395, \"step\": 1693, \"value\": 0.021593764424324036}, {\"wallTime\": 1647705815.0591285, \"step\": 1694, \"value\": 0.021721359342336655}, {\"wallTime\": 1647705815.1160574, \"step\": 1695, \"value\": 0.021849706768989563}, {\"wallTime\": 1647705815.2090461, \"step\": 1697, \"value\": 0.022108685225248337}, {\"wallTime\": 1647705815.3018224, \"step\": 1699, \"value\": 0.022370731458067894}, {\"wallTime\": 1647705815.347112, \"step\": 1700, \"value\": 0.022502915933728218}, {\"wallTime\": 1647705815.4392173, \"step\": 1702, \"value\": 0.022769635543227196}, {\"wallTime\": 1647705815.5300984, \"step\": 1704, \"value\": 0.02303951606154442}, {\"wallTime\": 1647705815.6717808, \"step\": 1707, \"value\": 0.023450346663594246}, {\"wallTime\": 1647705815.7624311, \"step\": 1709, \"value\": 0.023728294298052788}, {\"wallTime\": 1647705815.8061314, \"step\": 1710, \"value\": 0.02386850118637085}, {\"wallTime\": 1647705815.8598585, \"step\": 1711, \"value\": 0.02400953695178032}, {\"wallTime\": 1647705815.9189339, \"step\": 1712, \"value\": 0.024151407182216644}, {\"wallTime\": 1647705816.2775483, \"step\": 1718, \"value\": 0.025020400062203407}, {\"wallTime\": 1647705816.318274, \"step\": 1719, \"value\": 0.025168241932988167}, {\"wallTime\": 1647705816.4821002, \"step\": 1722, \"value\": 0.025617031380534172}, {\"wallTime\": 1647705816.5280063, \"step\": 1723, \"value\": 0.025768397375941277}, {\"wallTime\": 1647705816.5737677, \"step\": 1724, \"value\": 0.02592065930366516}, {\"wallTime\": 1647705816.6224687, \"step\": 1725, \"value\": 0.026073820888996124}, {\"wallTime\": 1647705816.855601, \"step\": 1730, \"value\": 0.02685331180691719}, {\"wallTime\": 1647705817.2080858, \"step\": 1738, \"value\": 0.028149258345365524}, {\"wallTime\": 1647705817.2522488, \"step\": 1739, \"value\": 0.02831558883190155}, {\"wallTime\": 1647705817.4178903, \"step\": 1743, \"value\": 0.028990795835852623}, {\"wallTime\": 1647705817.5027752, \"step\": 1745, \"value\": 0.02933441288769245}, {\"wallTime\": 1647705817.6672173, \"step\": 1748, \"value\": 0.029857490211725235}, {\"wallTime\": 1647705817.7153668, \"step\": 1749, \"value\": 0.030033914372324944}, {\"wallTime\": 1647705817.7629395, \"step\": 1750, \"value\": 0.03021138161420822}, {\"wallTime\": 1647705817.810673, \"step\": 1751, \"value\": 0.030389895662665367}, {\"wallTime\": 1647705817.90493, \"step\": 1753, \"value\": 0.0307500958442688}, {\"wallTime\": 1647705817.9528692, \"step\": 1754, \"value\": 0.03093179501593113}, {\"wallTime\": 1647705818.095054, \"step\": 1757, \"value\": 0.03148335590958595}, {\"wallTime\": 1647705818.3243837, \"step\": 1762, \"value\": 0.03242456912994385}, {\"wallTime\": 1647705818.3626308, \"step\": 1763, \"value\": 0.032616160809993744}, {\"wallTime\": 1647705818.4597657, \"step\": 1765, \"value\": 0.03300274908542633}, {\"wallTime\": 1647705818.6205525, \"step\": 1768, \"value\": 0.03359123691916466}, {\"wallTime\": 1647705818.9666934, \"step\": 1775, \"value\": 0.035005513578653336}, {\"wallTime\": 1647705819.0155547, \"step\": 1776, \"value\": 0.035212356597185135}, {\"wallTime\": 1647705819.0637383, \"step\": 1777, \"value\": 0.03542042151093483}, {\"wallTime\": 1647705819.2107768, \"step\": 1780, \"value\": 0.036052022129297256}, {\"wallTime\": 1647705819.3987558, \"step\": 1784, \"value\": 0.03691171109676361}, {\"wallTime\": 1647705819.4450638, \"step\": 1785, \"value\": 0.03712981566786766}, {\"wallTime\": 1647705819.4926667, \"step\": 1786, \"value\": 0.037349212914705276}, {\"wallTime\": 1647705819.6573918, \"step\": 1789, \"value\": 0.038015205413103104}, {\"wallTime\": 1647705819.6971326, \"step\": 1790, \"value\": 0.03823983296751976}, {\"wallTime\": 1647705819.7772584, \"step\": 1792, \"value\": 0.038693077862262726}, {\"wallTime\": 1647705819.9122572, \"step\": 1794, \"value\": 0.039151690900325775}, {\"wallTime\": 1647705820.0109625, \"step\": 1796, \"value\": 0.03961574286222458}, {\"wallTime\": 1647705820.192523, \"step\": 1800, \"value\": 0.04056040942668915}, {\"wallTime\": 1647705820.287827, \"step\": 1802, \"value\": 0.04104115813970566}, {\"wallTime\": 1647705820.3369195, \"step\": 1803, \"value\": 0.04128366708755493}, {\"wallTime\": 1647705820.7261565, \"step\": 1808, \"value\": 0.04251786321401596}, {\"wallTime\": 1647705820.8447845, \"step\": 1810, \"value\": 0.04302181303501129}, {\"wallTime\": 1647705821.06491, \"step\": 1814, \"value\": 0.044047702103853226}, {\"wallTime\": 1647705821.252159, \"step\": 1818, \"value\": 0.04509805142879486}, {\"wallTime\": 1647705821.2977815, \"step\": 1819, \"value\": 0.04536452889442444}, {\"wallTime\": 1647705821.4792893, \"step\": 1823, \"value\": 0.04644628241658211}, {\"wallTime\": 1647705821.6279273, \"step\": 1826, \"value\": 0.04727449268102646}, {\"wallTime\": 1647705821.6607056, \"step\": 1827, \"value\": 0.04755382984876633}, {\"wallTime\": 1647705821.7536309, \"step\": 1829, \"value\": 0.04811746999621391}, {\"wallTime\": 1647705821.797944, \"step\": 1830, \"value\": 0.048401787877082825}, {\"wallTime\": 1647705821.8813953, \"step\": 1832, \"value\": 0.04897547885775566}, {\"wallTime\": 1647705821.9212928, \"step\": 1833, \"value\": 0.04926486685872078}, {\"wallTime\": 1647705821.963347, \"step\": 1834, \"value\": 0.04955596476793289}, {\"wallTime\": 1647705822.05584, \"step\": 1836, \"value\": 0.05014333501458168}, {\"wallTime\": 1647705822.0978882, \"step\": 1837, \"value\": 0.05043962597846985}, {\"wallTime\": 1647705822.1386845, \"step\": 1838, \"value\": 0.050737667828798294}, {\"wallTime\": 1647705822.4535515, \"step\": 1844, \"value\": 0.05256326124072075}, {\"wallTime\": 1647705822.498491, \"step\": 1845, \"value\": 0.052873849868774414}, {\"wallTime\": 1647705822.5433629, \"step\": 1846, \"value\": 0.05318627506494522}, {\"wallTime\": 1647705822.5870054, \"step\": 1847, \"value\": 0.053500544279813766}, {\"wallTime\": 1647705822.6322844, \"step\": 1848, \"value\": 0.053816672414541245}, {\"wallTime\": 1647705822.7704918, \"step\": 1851, \"value\": 0.054776307195425034}, {\"wallTime\": 1647705822.8606482, \"step\": 1853, \"value\": 0.055425550788640976}, {\"wallTime\": 1647705823.1636493, \"step\": 1860, \"value\": 0.057759106159210205}, {\"wallTime\": 1647705825.2264135, \"step\": 1864, \"value\": 0.059136416763067245}, {\"wallTime\": 1647705825.2746012, \"step\": 1865, \"value\": 0.059485845267772675}, {\"wallTime\": 1647705825.3223605, \"step\": 1866, \"value\": 0.05983734130859375}, {\"wallTime\": 1647705825.3749666, \"step\": 1867, \"value\": 0.06019091233611107}, {\"wallTime\": 1647705825.5601878, \"step\": 1871, \"value\": 0.06162621080875397}, {\"wallTime\": 1647705825.6022322, \"step\": 1872, \"value\": 0.06199035048484802}, {\"wallTime\": 1647705825.7184734, \"step\": 1874, \"value\": 0.06272509694099426}, {\"wallTime\": 1647705825.7501137, \"step\": 1875, \"value\": 0.06309573352336884}, {\"wallTime\": 1647705830.1082866, \"step\": 1877, \"value\": 0.06384358555078506}, {\"wallTime\": 1647705830.2452304, \"step\": 1880, \"value\": 0.06498201191425323}, {\"wallTime\": 1647705830.46787, \"step\": 1883, \"value\": 0.06614074856042862}, {\"wallTime\": 1647705830.5144353, \"step\": 1884, \"value\": 0.06653156131505966}, {\"wallTime\": 1647705830.5971427, \"step\": 1886, \"value\": 0.06732013821601868}, {\"wallTime\": 1647705830.6789858, \"step\": 1888, \"value\": 0.06811805814504623}, {\"wallTime\": 1647705830.7740295, \"step\": 1890, \"value\": 0.06892544031143188}, {\"wallTime\": 1647705830.9879644, \"step\": 1895, \"value\": 0.07098600268363953}, {\"wallTime\": 1647705831.1775746, \"step\": 1899, \"value\": 0.07267871499061584}, {\"wallTime\": 1647705831.2947812, \"step\": 1902, \"value\": 0.07397469133138657}, {\"wallTime\": 1647705831.4883797, \"step\": 1906, \"value\": 0.07573867589235306}, {\"wallTime\": 1647705831.5818472, \"step\": 1908, \"value\": 0.07663637399673462}, {\"wallTime\": 1647705831.6355867, \"step\": 1909, \"value\": 0.07708921283483505}, {\"wallTime\": 1647705831.681228, \"step\": 1910, \"value\": 0.07754471898078918}, {\"wallTime\": 1647705831.8195002, \"step\": 1913, \"value\": 0.07892746478319168}, {\"wallTime\": 1647705832.0547364, \"step\": 1918, \"value\": 0.08128704130649567}, {\"wallTime\": 1647705832.3060095, \"step\": 1924, \"value\": 0.08421183377504349}, {\"wallTime\": 1647705832.6586797, \"step\": 1925, \"value\": 0.08470943570137024}, {\"wallTime\": 1647705832.6680117, \"step\": 1926, \"value\": 0.08520996570587158}, {\"wallTime\": 1647705832.820862, \"step\": 1929, \"value\": 0.08672939240932465}, {\"wallTime\": 1647705832.9717586, \"step\": 1932, \"value\": 0.08827590942382812}, {\"wallTime\": 1647705833.1017065, \"step\": 1935, \"value\": 0.08985000848770142}, {\"wallTime\": 1647705833.1466498, \"step\": 1936, \"value\": 0.09038092195987701}, {\"wallTime\": 1647705833.337024, \"step\": 1940, \"value\": 0.09253612160682678}, {\"wallTime\": 1647705833.3730545, \"step\": 1941, \"value\": 0.09308290481567383}, {\"wallTime\": 1647705833.446069, \"step\": 1942, \"value\": 0.09363292157649994}, {\"wallTime\": 1647705833.5673137, \"step\": 1945, \"value\": 0.0953025370836258}, {\"wallTime\": 1647705833.648532, \"step\": 1947, \"value\": 0.09643212705850601}, {\"wallTime\": 1647705833.7849896, \"step\": 1950, \"value\": 0.09815166145563126}, {\"wallTime\": 1647705833.8318734, \"step\": 1951, \"value\": 0.098731629550457}, {\"wallTime\": 1647705833.9223354, \"step\": 1953, \"value\": 0.09990185499191284}, {\"wallTime\": 1647705834.066492, \"step\": 1956, \"value\": 0.10168325901031494}, {\"wallTime\": 1647705834.2518473, \"step\": 1960, \"value\": 0.10410797595977783}, {\"wallTime\": 1647705834.3002884, \"step\": 1961, \"value\": 0.10472314059734344}, {\"wallTime\": 1647705834.350361, \"step\": 1962, \"value\": 0.10534193366765976}, {\"wallTime\": 1647705834.3925362, \"step\": 1963, \"value\": 0.10596438497304916}, {\"wallTime\": 1647705834.4334247, \"step\": 1964, \"value\": 0.10659050941467285}, {\"wallTime\": 1647705834.5344567, \"step\": 1966, \"value\": 0.10785388946533203}, {\"wallTime\": 1647705834.5724413, \"step\": 1967, \"value\": 0.10849118232727051}, {\"wallTime\": 1647705834.7050982, \"step\": 1968, \"value\": 0.10913224518299103}, {\"wallTime\": 1647705834.7201858, \"step\": 1969, \"value\": 0.10977709293365479}, {\"wallTime\": 1647705835.0502644, \"step\": 1975, \"value\": 0.11372698843479156}, {\"wallTime\": 1647705835.137634, \"step\": 1977, \"value\": 0.11507495492696762}, {\"wallTime\": 1647705835.2335176, \"step\": 1979, \"value\": 0.11643889546394348}, {\"wallTime\": 1647705835.2762322, \"step\": 1980, \"value\": 0.11712691932916641}, {\"wallTime\": 1647705835.3240588, \"step\": 1981, \"value\": 0.11781900376081467}, {\"wallTime\": 1647705835.3717356, \"step\": 1982, \"value\": 0.11851517856121063}, {\"wallTime\": 1647705835.4194877, \"step\": 1983, \"value\": 0.1192154735326767}, {\"wallTime\": 1647705835.5146892, \"step\": 1985, \"value\": 0.1206284910440445}, {\"wallTime\": 1647705835.608968, \"step\": 1987, \"value\": 0.12205825746059418}, {\"wallTime\": 1647705835.6549492, \"step\": 1988, \"value\": 0.122779481112957}, {\"wallTime\": 1647705835.7928367, \"step\": 1991, \"value\": 0.12496883422136307}, {\"wallTime\": 1647705835.8369982, \"step\": 1992, \"value\": 0.1257072538137436}, {\"wallTime\": 1647705835.9745321, \"step\": 1995, \"value\": 0.1279488056898117}, {\"wallTime\": 1647705836.346687, \"step\": 2002, \"value\": 0.13333578407764435}, {\"wallTime\": 1647705837.094131, \"step\": 2016, \"value\": 0.14479967951774597}, {\"wallTime\": 1647705837.135131, \"step\": 2017, \"value\": 0.14565527439117432}, {\"wallTime\": 1647705837.3575299, \"step\": 2021, \"value\": 0.14912854135036469}, {\"wallTime\": 1647705837.4036424, \"step\": 2022, \"value\": 0.15000972151756287}, {\"wallTime\": 1647705837.4510965, \"step\": 2023, \"value\": 0.1508961021900177}, {\"wallTime\": 1647705837.5453434, \"step\": 2025, \"value\": 0.15268462896347046}, {\"wallTime\": 1647705837.5910356, \"step\": 2026, \"value\": 0.15358681976795197}, {\"wallTime\": 1647705837.694707, \"step\": 2028, \"value\": 0.15540723502635956}, {\"wallTime\": 1647705837.8365412, \"step\": 2031, \"value\": 0.15817837417125702}, {\"wallTime\": 1647705837.886261, \"step\": 2032, \"value\": 0.15911303460597992}, {\"wallTime\": 1647705837.985652, \"step\": 2034, \"value\": 0.16099894046783447}, {\"wallTime\": 1647705838.029169, \"step\": 2035, \"value\": 0.1619502604007721}, {\"wallTime\": 1647705838.0672143, \"step\": 2036, \"value\": 0.162907212972641}, {\"wallTime\": 1647705838.2511854, \"step\": 2040, \"value\": 0.1667918562889099}, {\"wallTime\": 1647705838.290049, \"step\": 2041, \"value\": 0.1677774041891098}, {\"wallTime\": 1647705838.3805912, \"step\": 2043, \"value\": 0.16976600885391235}, {\"wallTime\": 1647705838.4279232, \"step\": 2044, \"value\": 0.17076914012432098}, {\"wallTime\": 1647705838.5848181, \"step\": 2047, \"value\": 0.17381420731544495}, {\"wallTime\": 1647705838.6698346, \"step\": 2048, \"value\": 0.1748412549495697}, {\"wallTime\": 1647705838.7272766, \"step\": 2049, \"value\": 0.17587436735630035}, {\"wallTime\": 1647705839.0074124, \"step\": 2054, \"value\": 0.1811322271823883}, {\"wallTime\": 1647705839.0669057, \"step\": 2055, \"value\": 0.1822025179862976}, {\"wallTime\": 1647705839.1238875, \"step\": 2056, \"value\": 0.1832791268825531}, {\"wallTime\": 1647705839.1662395, \"step\": 2057, \"value\": 0.18436209857463837}, {\"wallTime\": 1647705839.589276, \"step\": 2067, \"value\": 0.1955500841140747}, {\"wallTime\": 1647705839.6332884, \"step\": 2068, \"value\": 0.19670556485652924}, {\"wallTime\": 1647705839.725439, \"step\": 2070, \"value\": 0.19903704524040222}, {\"wallTime\": 1647705839.9228141, \"step\": 2074, \"value\": 0.20378322899341583}, {\"wallTime\": 1647705840.1131408, \"step\": 2078, \"value\": 0.2086426019668579}, {\"wallTime\": 1647705840.1638422, \"step\": 2079, \"value\": 0.2098754346370697}, {\"wallTime\": 1647705840.3884382, \"step\": 2084, \"value\": 0.21614977717399597}, {\"wallTime\": 1647705840.4844139, \"step\": 2086, \"value\": 0.218711718916893}, {\"wallTime\": 1647705840.5287373, \"step\": 2087, \"value\": 0.22000406682491302}, {\"wallTime\": 1647705840.6169274, \"step\": 2089, \"value\": 0.2226116955280304}, {\"wallTime\": 1647705840.6610997, \"step\": 2090, \"value\": 0.2239270806312561}, {\"wallTime\": 1647705840.7054303, \"step\": 2091, \"value\": 0.2252502292394638}, {\"wallTime\": 1647705840.9116921, \"step\": 2095, \"value\": 0.23062150180339813}, {\"wallTime\": 1647705840.9589312, \"step\": 2096, \"value\": 0.2319842129945755}, {\"wallTime\": 1647705841.005844, \"step\": 2097, \"value\": 0.23335497081279755}, {\"wallTime\": 1647705841.054133, \"step\": 2098, \"value\": 0.23473383486270905}, {\"wallTime\": 1647705841.1487877, \"step\": 2100, \"value\": 0.23751604557037354}, {\"wallTime\": 1647705841.2894592, \"step\": 2103, \"value\": 0.24175132811069489}, {\"wallTime\": 1647705841.3348663, \"step\": 2104, \"value\": 0.2431797981262207}, {\"wallTime\": 1647705841.3797412, \"step\": 2105, \"value\": 0.24461671710014343}, {\"wallTime\": 1647705841.424383, \"step\": 2106, \"value\": 0.24606212973594666}, {\"wallTime\": 1647705841.5608494, \"step\": 2109, \"value\": 0.2504498064517975}, {\"wallTime\": 1647705841.724877, \"step\": 2110, \"value\": 0.2519296705722809}, {\"wallTime\": 1647705841.9320455, \"step\": 2114, \"value\": 0.25793713331222534}, {\"wallTime\": 1647705841.9941425, \"step\": 2115, \"value\": 0.25946125388145447}, {\"wallTime\": 1647705842.189136, \"step\": 2119, \"value\": 0.2656483054161072}, {\"wallTime\": 1647705842.2306151, \"step\": 2120, \"value\": 0.2672179639339447}, {\"wallTime\": 1647705842.3580391, \"step\": 2122, \"value\": 0.270385205745697}, {\"wallTime\": 1647705842.4056494, \"step\": 2123, \"value\": 0.271982878446579}, {\"wallTime\": 1647705842.4572055, \"step\": 2124, \"value\": 0.27358999848365784}, {\"wallTime\": 1647705842.5512304, \"step\": 2126, \"value\": 0.2768327593803406}, {\"wallTime\": 1647705842.597422, \"step\": 2127, \"value\": 0.278468519449234}, {\"wallTime\": 1647705842.9462368, \"step\": 2134, \"value\": 0.29019275307655334}, {\"wallTime\": 1647705843.1819499, \"step\": 2135, \"value\": 0.2919074594974518}, {\"wallTime\": 1647705843.1944568, \"step\": 2136, \"value\": 0.29363229870796204}, {\"wallTime\": 1647705843.3625834, \"step\": 2139, \"value\": 0.29886823892593384}, {\"wallTime\": 1647705843.559218, \"step\": 2143, \"value\": 0.3059949576854706}, {\"wallTime\": 1647705843.8542602, \"step\": 2149, \"value\": 0.3170049786567688}, {\"wallTime\": 1647705843.8999183, \"step\": 2150, \"value\": 0.3188781440258026}, {\"wallTime\": 1647705844.0800693, \"step\": 2154, \"value\": 0.32648202776908875}, {\"wallTime\": 1647705844.122978, \"step\": 2155, \"value\": 0.32841116189956665}, {\"wallTime\": 1647705844.287503, \"step\": 2159, \"value\": 0.3362423777580261}, {\"wallTime\": 1647705844.3296773, \"step\": 2160, \"value\": 0.3382291793823242}, {\"wallTime\": 1647705844.3725889, \"step\": 2161, \"value\": 0.34022775292396545}, {\"wallTime\": 1647705844.4164298, \"step\": 2162, \"value\": 0.34223809838294983}, {\"wallTime\": 1647705845.153406, \"step\": 2169, \"value\": 0.35664719343185425}, {\"wallTime\": 1647705845.378915, \"step\": 2173, \"value\": 0.36515170335769653}, {\"wallTime\": 1647705845.4911287, \"step\": 2175, \"value\": 0.3694797158241272}, {\"wallTime\": 1647705845.543609, \"step\": 2176, \"value\": 0.3716629445552826}, {\"wallTime\": 1647705845.9611428, \"step\": 2183, \"value\": 0.3873108923435211}, {\"wallTime\": 1647705846.0818818, \"step\": 2185, \"value\": 0.39190155267715454}, {\"wallTime\": 1647705846.2041616, \"step\": 2187, \"value\": 0.3965466022491455}, {\"wallTime\": 1647705846.330339, \"step\": 2189, \"value\": 0.40124672651290894}, {\"wallTime\": 1647705846.6157238, \"step\": 2194, \"value\": 0.4132422208786011}, {\"wallTime\": 1647705847.0127656, \"step\": 2199, \"value\": 0.42559632658958435}, {\"wallTime\": 1647705847.1480842, \"step\": 2201, \"value\": 0.4306407570838928}, {\"wallTime\": 1647705847.2160308, \"step\": 2202, \"value\": 0.4331853687763214}, {\"wallTime\": 1647705847.2911992, \"step\": 2203, \"value\": 0.4357450008392334}, {\"wallTime\": 1647705847.4615817, \"step\": 2206, \"value\": 0.44351500272750854}, {\"wallTime\": 1647705847.611588, \"step\": 2209, \"value\": 0.4514235556125641}, {\"wallTime\": 1647705847.712801, \"step\": 2211, \"value\": 0.45677411556243896}, {\"wallTime\": 1647705847.7594204, \"step\": 2212, \"value\": 0.4594731330871582}, {\"wallTime\": 1647705847.86076, \"step\": 2214, \"value\": 0.4649191200733185}, {\"wallTime\": 1647705847.895027, \"step\": 2215, \"value\": 0.46766626834869385}, {\"wallTime\": 1647705847.9520547, \"step\": 2216, \"value\": 0.4704296290874481}, {\"wallTime\": 1647705848.186327, \"step\": 2221, \"value\": 0.4844933748245239}, {\"wallTime\": 1647705848.2324913, \"step\": 2222, \"value\": 0.48735618591308594}, {\"wallTime\": 1647705848.277009, \"step\": 2223, \"value\": 0.4902358949184418}, {\"wallTime\": 1647705848.3699758, \"step\": 2225, \"value\": 0.4960464835166931}, {\"wallTime\": 1647705848.4764137, \"step\": 2227, \"value\": 0.5019259452819824}, {\"wallTime\": 1647705848.7678065, \"step\": 2233, \"value\": 0.5199857950210571}, {\"wallTime\": 1647705848.913557, \"step\": 2236, \"value\": 0.5292579531669617}, {\"wallTime\": 1647705849.0504518, \"step\": 2239, \"value\": 0.5386953949928284}, {\"wallTime\": 1647705849.1917222, \"step\": 2242, \"value\": 0.5483012199401855}, {\"wallTime\": 1647705849.2838926, \"step\": 2244, \"value\": 0.5548000335693359}, {\"wallTime\": 1647705849.4521835, \"step\": 2247, \"value\": 0.5646929740905762}, {\"wallTime\": 1647705849.8523326, \"step\": 2254, \"value\": 0.5884679555892944}, {\"wallTime\": 1647705850.0317435, \"step\": 2257, \"value\": 0.5989612340927124}, {\"wallTime\": 1647705850.091614, \"step\": 2258, \"value\": 0.6025004386901855}, {\"wallTime\": 1647705850.4789574, \"step\": 2264, \"value\": 0.6241790056228638}, {\"wallTime\": 1647705850.5863378, \"step\": 2266, \"value\": 0.63157719373703}, {\"wallTime\": 1647705850.6463299, \"step\": 2267, \"value\": 0.635309100151062}, {\"wallTime\": 1647705851.0166905, \"step\": 2274, \"value\": 0.6620572209358215}, {\"wallTime\": 1647705851.128843, \"step\": 2276, \"value\": 0.669904351234436}, {\"wallTime\": 1647705851.3574064, \"step\": 2280, \"value\": 0.6858787536621094}, {\"wallTime\": 1647705851.408473, \"step\": 2281, \"value\": 0.6899315118789673}, {\"wallTime\": 1647705851.5346987, \"step\": 2284, \"value\": 0.7022340297698975}, {\"wallTime\": 1647705851.581249, \"step\": 2285, \"value\": 0.706383466720581}, {\"wallTime\": 1647705851.8686852, \"step\": 2291, \"value\": 0.731799840927124}, {\"wallTime\": 1647705851.929026, \"step\": 2292, \"value\": 0.7361239790916443}, {\"wallTime\": 1647705851.9739254, \"step\": 2293, \"value\": 0.7404736280441284}, {\"wallTime\": 1647705852.3011959, \"step\": 2300, \"value\": 0.7716494202613831}, {\"wallTime\": 1647705852.5350425, \"step\": 2305, \"value\": 0.794718325138092}, {\"wallTime\": 1647705852.583734, \"step\": 2306, \"value\": 0.7994142174720764}, {\"wallTime\": 1647705852.621779, \"step\": 2307, \"value\": 0.8041378259658813}, {\"wallTime\": 1647705852.7104857, \"step\": 2309, \"value\": 0.813668966293335}, {\"wallTime\": 1647705852.8020294, \"step\": 2311, \"value\": 0.8233131170272827}, {\"wallTime\": 1647705852.979838, \"step\": 2315, \"value\": 0.8429456353187561}, {\"wallTime\": 1647705853.0217085, \"step\": 2316, \"value\": 0.8479264974594116}, {\"wallTime\": 1647705853.1584232, \"step\": 2319, \"value\": 0.8630463480949402}, {\"wallTime\": 1647705853.3996196, \"step\": 2324, \"value\": 0.8888475894927979}, {\"wallTime\": 1647705853.714625, \"step\": 2330, \"value\": 0.9208292365074158}, {\"wallTime\": 1647705853.8101945, \"step\": 2332, \"value\": 0.9317435026168823}, {\"wallTime\": 1647705853.9557917, \"step\": 2335, \"value\": 0.9483579397201538}, {\"wallTime\": 1647705854.1909354, \"step\": 2340, \"value\": 0.9767096042633057}, {\"wallTime\": 1647705854.3064985, \"step\": 2342, \"value\": 0.9882861971855164}, {\"wallTime\": 1647705854.3318367, \"step\": 2343, \"value\": 0.9941258430480957}, {\"wallTime\": 1647705854.3444774, \"step\": 2344, \"value\": 1.0}]}}]"
          },
          "redirectURL": "",
          "headersSize": 261,
          "bodySize": 214314,
          "_transferSize": 214575,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2022-03-19T17:57:54.368Z",
        "time": 614.6979999903124,
        "timings": {
          "blocked": 0.9560000054985285,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.10699999999999998,
          "wait": 557.0700000076871,
          "receive": 56.56499997712672,
          "_blocked_queueing": 0.7040000054985285
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "other"
        },
        "_priority": "High",
        "_resourceType": "other",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "http://localhost:6006/chart_worker.js?_file_hash=5a17be0a",
          "httpVersion": "HTTP/1.1",
          "headers": [],
          "queryString": [
            {
              "name": "_file_hash",
              "value": "5a17be0a"
            }
          ],
          "cookies": [],
          "headersSize": 51,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Content-Length",
              "value": "164302"
            },
            {
              "name": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "name": "Content-Encoding",
              "value": "gzip"
            },
            {
              "name": "Expires",
              "value": "Sun, 20 Mar 2022 10:09:04 GMT"
            },
            {
              "name": "Cache-Control",
              "value": "private, max-age=86400"
            },
            {
              "name": "Content-Type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "Server",
              "value": "Werkzeug/2.0.3 Python/3.8.10"
            },
            {
              "name": "Date",
              "value": "Sat, 19 Mar 2022 10:09:04 GMT"
            }
          ],
          "cookies": [],
          "content": {
            "size": 581961,
            "mimeType": "application/javascript",
            "text": "!(function(){var t;function e(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function n(t){return 1===t.length&&(t=(function n(t){return function(n,i){return e(t(n),i)}})(t)),{left:function(e,n,i,r){for(null==i&&(i=0),null==r&&(r=e.length);i<r;){var a=i+r>>>1;t(e[a],n)<0?i=a+1:r=a}return i},right:function(e,n,i,r){for(null==i&&(i=0),null==r&&(r=e.length);i<r;){var a=i+r>>>1;t(e[a],n)>0?r=a:i=a+1}return i}}}!(function(t){t[t.LINEAR=0]=\"LINEAR\",t[t.LOG10=1]=\"LOG10\",t[t.TIME=2]=\"TIME\"})(t||(t={}));var i=n(e).right,r=Math.sqrt(50),a=Math.sqrt(10),s=Math.sqrt(2);function o(t,e,n){var i,r,a,s,o=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((i=e<t)&&(r=t,t=e,e=r),0===(s=l(t,e,n))||!isFinite(s))return[];if(s>0)for(t=Math.ceil(t/s),e=Math.floor(e/s),a=new Array(r=Math.ceil(e-t+1));++o<r;)a[o]=(t+o)*s;else for(t=Math.floor(t*s),e=Math.ceil(e*s),a=new Array(r=Math.ceil(t-e+1));++o<r;)a[o]=(t-o)/s;return i&&a.reverse(),a}function l(t,e,n){var i=(e-t)/Math.max(0,n),o=Math.floor(Math.log(i)/Math.LN10),l=i/Math.pow(10,o);return o>=0?(l>=r?10:l>=a?5:l>=s?2:1)*Math.pow(10,o):-Math.pow(10,-o)/(l>=r?10:l>=a?5:l>=s?2:1)}function c(t,e,n){var i=Math.abs(e-t)/Math.max(0,n),o=Math.pow(10,Math.floor(Math.log(i)/Math.LN10)),l=i/o;return l>=r?o*=10:l>=a?o*=5:l>=s&&(o*=2),e<t?-o:o}var h={value:function(){}};function u(){for(var t,e=0,n=arguments.length,i={};e<n;++e){if(!(t=arguments[e]+\"\")||t in i||/[\\s.]/.test(t))throw new Error(\"illegal type: \"+t);i[t]=[]}return new d(i)}function d(t){this._=t}function p(t,e){return t.trim().split(/^|\\s+/).map((function(t){var n=\"\",i=t.indexOf(\".\");if(i>=0&&(n=t.slice(i+1),t=t.slice(0,i)),t&&!e.hasOwnProperty(t))throw new Error(\"unknown type: \"+t);return{type:t,name:n}}))}function f(t,e){for(var n,i=0,r=t.length;i<r;++i)if((n=t[i]).name===e)return n.value}function m(t,e,n){for(var i=0,r=t.length;i<r;++i)if(t[i].name===e){t[i]=h,t=t.slice(0,i).concat(t.slice(i+1));break}return null!=n&&t.push({name:e,value:n}),t}function g(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function v(t,e){var n=Object.create(t.prototype);for(var i in e)n[i]=e[i];return n}function y(){}d.prototype=u.prototype={constructor:d,on:function(t,e){var n,i=this._,r=p(t+\"\",i),a=-1,s=r.length;if(!(arguments.length<2)){if(null!=e&&\"function\"!=typeof e)throw new Error(\"invalid callback: \"+e);for(;++a<s;)if(n=(t=r[a]).type)i[n]=m(i[n],t.name,e);else if(null==e)for(n in i)i[n]=m(i[n],t.name,null);return this}for(;++a<s;)if((n=(t=r[a]).type)&&(n=f(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new d(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,i,r=new Array(n),a=0;a<n;++a)r[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error(\"unknown type: \"+t);for(a=0,n=(i=this._[t]).length;a<n;++a)i[a].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error(\"unknown type: \"+t);for(var i=this._[t],r=0,a=i.length;r<a;++r)i[r].value.apply(e,n)}};var x=.7,_=1/x,M=\"\\\\s*([+-]?\\\\d+)\\\\s*\",w=\"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",b=\"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",S=/^#([0-9a-f]{3,8})$/,T=new RegExp(\"^rgb\\\\(\"+[M,M,M]+\"\\\\)$\"),E=new RegExp(\"^rgb\\\\(\"+[b,b,b]+\"\\\\)$\"),A=new RegExp(\"^rgba\\\\(\"+[M,M,M,w]+\"\\\\)$\"),L=new RegExp(\"^rgba\\\\(\"+[b,b,b,w]+\"\\\\)$\"),C=new RegExp(\"^hsl\\\\(\"+[w,b,b]+\"\\\\)$\"),R=new RegExp(\"^hsla\\\\(\"+[w,b,b,w]+\"\\\\)$\"),P={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function D(){return this.rgb().formatHex()}function N(){return this.rgb().formatRgb()}function I(t){var e,n;return t=(t+\"\").trim().toLowerCase(),(e=S.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?O(e):3===n?new B(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?z(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?z(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=T.exec(t))?new B(e[1],e[2],e[3],1):(e=E.exec(t))?new B(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=A.exec(t))?z(e[1],e[2],e[3],e[4]):(e=L.exec(t))?z(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=C.exec(t))?V(e[1],e[2]/100,e[3]/100,1):(e=R.exec(t))?V(e[1],e[2]/100,e[3]/100,e[4]):P.hasOwnProperty(t)?O(P[t]):\"transparent\"===t?new B(NaN,NaN,NaN,0):null}function O(t){return new B(t>>16&255,t>>8&255,255&t,1)}function z(t,e,n,i){return i<=0&&(t=e=n=NaN),new B(t,e,n,i)}function U(t){return t instanceof y||(t=I(t)),t?new B((t=t.rgb()).r,t.g,t.b,t.opacity):new B}function F(t,e,n,i){return 1===arguments.length?U(t):new B(t,e,n,null==i?1:i)}function B(t,e,n,i){this.r=+t,this.g=+e,this.b=+n,this.opacity=+i}function H(){return\"#\"+G(this.r)+G(this.g)+G(this.b)}function k(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?\"rgb(\":\"rgba(\")+Math.max(0,Math.min(255,Math.round(this.r)||0))+\", \"+Math.max(0,Math.min(255,Math.round(this.g)||0))+\", \"+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?\")\":\", \"+t+\")\")}function G(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?\"0\":\"\")+t.toString(16)}function V(t,e,n,i){return i<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new q(t,e,n,i)}function W(t){if(t instanceof q)return new q(t.h,t.s,t.l,t.opacity);if(t instanceof y||(t=I(t)),!t)return new q;if(t instanceof q)return t;var e=(t=t.rgb()).r/255,n=t.g/255,i=t.b/255,r=Math.min(e,n,i),a=Math.max(e,n,i),s=NaN,o=a-r,l=(a+r)/2;return o?(s=e===a?(n-i)/o+6*(n<i):n===a?(i-e)/o+2:(e-n)/o+4,o/=l<.5?a+r:2-a-r,s*=60):o=l>0&&l<1?0:s,new q(s,o,l,t.opacity)}function j(t,e,n,i){return 1===arguments.length?W(t):new q(t,e,n,null==i?1:i)}function q(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}function X(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Y(t){return function(){return t}}function Z(t,e){return function(n){return t+n*e}}function J(t){return 1==(t=+t)?Q:function(e,n){return n-e?(function i(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(i){return Math.pow(t+i*e,n)}})(e,n,t):Y(isNaN(e)?n:e)}}function Q(t,e){var n=e-t;return n?Z(t,n):Y(isNaN(t)?e:t)}g(y,I,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:D,formatHex:D,formatHsl:function K(){return W(this).formatHsl()},formatRgb:N,toString:N}),g(B,F,v(y,{brighter:function(t){return t=null==t?_:Math.pow(_,t),new B(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?x:Math.pow(x,t),new B(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:H,formatHex:H,formatRgb:k,toString:k})),g(q,j,v(y,{brighter:function(t){return t=null==t?_:Math.pow(_,t),new q(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?x:Math.pow(x,t),new q(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,i=n+(n<.5?n:1-n)*e,r=2*n-i;return new B(X(t>=240?t-240:t+120,r,i),X(t,r,i),X(t<120?t+240:t-120,r,i),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?\"hsl(\":\"hsla(\")+(this.h||0)+\", \"+100*(this.s||0)+\"%, \"+100*(this.l||0)+\"%\"+(1===t?\")\":\", \"+t+\")\")}}));var $=(function t(e){var n=J(e);function i(t,e){var i=n((t=F(t)).r,(e=F(e)).r),r=n(t.g,e.g),a=n(t.b,e.b),s=Q(t.opacity,e.opacity);return function(e){return t.r=i(e),t.g=r(e),t.b=a(e),t.opacity=s(e),t+\"\"}}return i.gamma=t,i})(1);function tt(t,e){e||(e=[]);var n,i=t?Math.min(e.length,t.length):0,r=e.slice();return function(a){for(n=0;n<i;++n)r[n]=t[n]*(1-a)+e[n]*a;return r}}function et(t,e){var n,i=e?e.length:0,r=t?Math.min(i,t.length):0,a=new Array(r),s=new Array(i);for(n=0;n<r;++n)a[n]=lt(t[n],e[n]);for(;n<i;++n)s[n]=e[n];return function(t){for(n=0;n<r;++n)s[n]=a[n](t);return s}}function nt(t,e){var n=new Date;return t=+t,e=+e,function(i){return n.setTime(t*(1-i)+e*i),n}}function it(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function rt(t,e){var n,i={},r={};for(n in null!==t&&\"object\"==typeof t||(t={}),null!==e&&\"object\"==typeof e||(e={}),e)n in t?i[n]=lt(t[n],e[n]):r[n]=e[n];return function(t){for(n in i)r[n]=i[n](t);return r}}var at=/[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,st=new RegExp(at.source,\"g\");function ot(t,e){var n,i,r,a=at.lastIndex=st.lastIndex=0,s=-1,o=[],l=[];for(t+=\"\",e+=\"\";(n=at.exec(t))&&(i=st.exec(e));)(r=i.index)>a&&(r=e.slice(a,r),o[s]?o[s]+=r:o[++s]=r),(n=n[0])===(i=i[0])?o[s]?o[s]+=i:o[++s]=i:(o[++s]=null,l.push({i:s,x:it(n,i)})),a=st.lastIndex;return a<e.length&&(r=e.slice(a),o[s]?o[s]+=r:o[++s]=r),o.length<2?l[0]?(function c(t){return function(e){return t(e)+\"\"}})(l[0].x):(function h(t){return function(){return t}})(e):(e=l.length,function(t){for(var n,i=0;i<e;++i)o[(n=l[i]).i]=n.x(t);return o.join(\"\")})}function lt(t,e){var n,i=typeof e;return null==e||\"boolean\"===i?Y(e):(\"number\"===i?it:\"string\"===i?(n=I(e))?(e=n,$):ot:e instanceof I?$:e instanceof Date?nt:(function r(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)})(e)?tt:Array.isArray(e)?et:\"function\"!=typeof e.valueOf&&\"function\"!=typeof e.toString||isNaN(e)?rt:it)(t,e)}function ct(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}var ht=(function dt(t){return function(e,n){var i=t((e=j(e)).h,(n=j(n)).h),r=Q(e.s,n.s),a=Q(e.l,n.l),s=Q(e.opacity,n.opacity);return function(t){return e.h=i(t),e.s=r(t),e.l=a(t),e.opacity=s(t),e+\"\"}}})((function ut(t,e){var n=e-t;return n?Z(t,n>180||n<-180?n-360*Math.round(n/360):n):Y(isNaN(t)?e:t)}));u(\"start\",\"end\",\"cancel\",\"interrupt\");var pt=\"$\";function ft(){}function mt(t,e){var n=new ft;if(t instanceof ft)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var i,r=-1,a=t.length;if(null==e)for(;++r<a;)n.set(r,t[r]);else for(;++r<a;)n.set(e(i=t[r],r,t),i)}else if(t)for(var s in t)n.set(s,t[s]);return n}function gt(){}ft.prototype=mt.prototype={constructor:ft,has:function(t){return pt+t in this},get:function(t){return this[pt+t]},set:function(t,e){return this[pt+t]=e,this},remove:function(t){var e=pt+t;return e in this&&delete this[e]},clear:function(){for(var t in this)t[0]===pt&&delete this[t]},keys:function(){var t=[];for(var e in this)e[0]===pt&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)e[0]===pt&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)e[0]===pt&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)e[0]===pt&&++t;return t},empty:function(){for(var t in this)if(t[0]===pt)return!1;return!0},each:function(t){for(var e in this)e[0]===pt&&t(this[e],e.slice(1),this)}};var vt=mt.prototype;function yt(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf(\"e\"))<0)return null;var n,i=t.slice(0,n);return[i.length>1?i[0]+i.slice(2):i,+t.slice(n+1)]}function xt(t){return(t=yt(Math.abs(t)))?t[1]:NaN}gt.prototype={constructor:gt,has:vt.has,add:function(t){return this[pt+(t+=\"\")]=t,this},remove:vt.remove,clear:vt.clear,values:vt.keys,size:vt.size,empty:vt.empty,each:vt.each};var _t,Mt=/^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;function wt(t){if(!(e=Mt.exec(t)))throw new Error(\"invalid format: \"+t);var e;return new bt({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function bt(t){this.fill=void 0===t.fill?\" \":t.fill+\"\",this.align=void 0===t.align?\">\":t.align+\"\",this.sign=void 0===t.sign?\"-\":t.sign+\"\",this.symbol=void 0===t.symbol?\"\":t.symbol+\"\",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?\"\":t.type+\"\"}function St(t,e){var n=yt(t,e);if(!n)return t+\"\";var i=n[0],r=n[1];return r<0?\"0.\"+new Array(-r).join(\"0\")+i:i.length>r+1?i.slice(0,r+1)+\".\"+i.slice(r+1):i+new Array(r-i.length+2).join(\"0\")}wt.prototype=bt.prototype,bt.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?\"0\":\"\")+(void 0===this.width?\"\":Math.max(1,0|this.width))+(this.comma?\",\":\"\")+(void 0===this.precision?\"\":\".\"+Math.max(0,0|this.precision))+(this.trim?\"~\":\"\")+this.type};var Tt={\"%\":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+\"\"},d:function Et(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString(\"en\").replace(/,/g,\"\"):t.toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return St(100*t,e)},r:St,s:function At(t,e){var n=yt(t,e);if(!n)return t+\"\";var i=n[0],r=n[1],a=r-(_t=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,s=i.length;return a===s?i:a>s?i+new Array(a-s+1).join(\"0\"):a>0?i.slice(0,a)+\".\"+i.slice(a):\"0.\"+new Array(1-a).join(\"0\")+yt(t,Math.max(0,e+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function Lt(t){return t}var Ct,Rt,Pt,Dt=Array.prototype.map,Nt=[\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];function It(t){var e=void 0===t.grouping||void 0===t.thousands?Lt:(function n(t,e){return function(n,i){for(var r=n.length,a=[],s=0,o=t[0],l=0;r>0&&o>0&&(l+o+1>i&&(o=Math.max(1,i-l)),a.push(n.substring(r-=o,r+o)),!((l+=o+1)>i));)o=t[s=(s+1)%t.length];return a.reverse().join(e)}})(Dt.call(t.grouping,Number),t.thousands+\"\"),i=void 0===t.currency?\"\":t.currency[0]+\"\",r=void 0===t.currency?\"\":t.currency[1]+\"\",a=void 0===t.decimal?\".\":t.decimal+\"\",s=void 0===t.numerals?Lt:(function o(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}})(Dt.call(t.numerals,String)),l=void 0===t.percent?\"%\":t.percent+\"\",c=void 0===t.minus?\"-\":t.minus+\"\",h=void 0===t.nan?\"NaN\":t.nan+\"\";function u(t){var n=(t=wt(t)).fill,o=t.align,u=t.sign,d=t.symbol,p=t.zero,f=t.width,m=t.comma,g=t.precision,v=t.trim,y=t.type;\"n\"===y?(m=!0,y=\"g\"):Tt[y]||(void 0===g&&(g=12),v=!0,y=\"g\"),(p||\"0\"===n&&\"=\"===o)&&(p=!0,n=\"0\",o=\"=\");var x=\"$\"===d?i:\"#\"===d&&/[boxX]/.test(y)?\"0\"+y.toLowerCase():\"\",_=\"$\"===d?r:/[%p]/.test(y)?l:\"\",M=Tt[y],w=/[defgprs%]/.test(y);function b(t){var i,r,l,d=x,b=_;if(\"c\"===y)b=M(t)+b,t=\"\";else{var S=(t=+t)<0||1/t<0;if(t=isNaN(t)?h:M(Math.abs(t),g),v&&(t=(function T(t){t:for(var e,n=t.length,i=1,r=-1;i<n;++i)switch(t[i]){case\".\":r=e=i;break;case\"0\":0===r&&(r=i),e=i;break;default:if(!+t[i])break t;r>0&&(r=0)}return r>0?t.slice(0,r)+t.slice(e+1):t})(t)),S&&0==+t&&\"+\"!==u&&(S=!1),d=(S?\"(\"===u?u:c:\"-\"===u||\"(\"===u?\"\":u)+d,b=(\"s\"===y?Nt[8+_t/3]:\"\")+b+(S&&\"(\"===u?\")\":\"\"),w)for(i=-1,r=t.length;++i<r;)if(48>(l=t.charCodeAt(i))||l>57){b=(46===l?a+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}m&&!p&&(t=e(t,1/0));var E=d.length+t.length+b.length,A=E<f?new Array(f-E+1).join(n):\"\";switch(m&&p&&(t=e(A+t,A.length?f-b.length:1/0),A=\"\"),o){case\"<\":t=d+t+b+A;break;case\"=\":t=d+A+t+b;break;case\"^\":t=A.slice(0,E=A.length>>1)+d+t+b+A.slice(E);break;default:t=A+d+t+b}return s(t)}return g=void 0===g?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),b.toString=function(){return t+\"\"},b}return{format:u,formatPrefix:function d(t,e){var n=u(((t=wt(t)).type=\"f\",t)),i=3*Math.max(-8,Math.min(8,Math.floor(xt(e)/3))),r=Math.pow(10,-i),a=Nt[8+i/3];return function(t){return n(r*t)+a}}}}function Ot(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}!(function zt(t){return Ct=It(t),Rt=Ct.format,Pt=Ct.formatPrefix,Ct})({decimal:\".\",thousands:\",\",grouping:[3],currency:[\"$\",\"\"],minus:\"-\"});var Ut=Array.prototype,Ft=Ut.map,Bt=Ut.slice;function Ht(t){return+t}var kt=[0,1];function Gt(t){return t}function Vt(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(function n(t){return function(){return t}})(isNaN(e)?NaN:.5)}function Wt(t){var e,n=t[0],i=t[t.length-1];return n>i&&(e=n,n=i,i=e),function(t){return Math.max(n,Math.min(i,t))}}function jt(t,e,n){var i=t[0],r=t[1],a=e[0],s=e[1];return r<i?(i=Vt(r,i),a=n(s,a)):(i=Vt(i,r),a=n(a,s)),function(t){return a(i(t))}}function qt(t,e,n){var r=Math.min(t.length,e.length)-1,a=new Array(r),s=new Array(r),o=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++o<r;)a[o]=Vt(t[o],t[o+1]),s[o]=n(e[o],e[o+1]);return function(e){var n=i(t,e,1,r)-1;return s[n](a[n](e))}}function Xt(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Yt(){var t,e,n,i,r,a,s=kt,o=kt,l=lt,c=Gt;function h(){return i=Math.min(s.length,o.length)>2?qt:jt,r=a=null,u}function u(e){return isNaN(e=+e)?n:(r||(r=i(s.map(t),o,l)))(t(c(e)))}return u.invert=function(n){return c(e((a||(a=i(o,s.map(t),it)))(n)))},u.domain=function(t){return arguments.length?(s=Ft.call(t,Ht),c===Gt||(c=Wt(s)),h()):s.slice()},u.range=function(t){return arguments.length?(o=Bt.call(t),h()):o.slice()},u.rangeRound=function(t){return o=Bt.call(t),l=ct,h()},u.clamp=function(t){return arguments.length?(c=t?Wt(s):Gt,u):c!==Gt},u.interpolate=function(t){return arguments.length?(l=t,h()):l},u.unknown=function(t){return arguments.length?(n=t,u):n},function(n,i){return t=n,e=i,h()}}function Zt(t,e){return Yt()(t,e)}function Jt(t,e,n,i){var r,a=c(t,e,n);switch((i=wt(null==i?\",f\":i)).type){case\"s\":var s=Math.max(Math.abs(t),Math.abs(e));return null!=i.precision||isNaN(r=(function o(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(xt(e)/3)))-xt(Math.abs(t)))})(a,s))||(i.precision=r),Pt(i,s);case\"\":case\"e\":case\"g\":case\"p\":case\"r\":null!=i.precision||isNaN(r=(function l(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,xt(e)-xt(t))+1})(a,Math.max(Math.abs(t),Math.abs(e))))||(i.precision=r-(\"e\"===i.type));break;case\"f\":case\"%\":null!=i.precision||isNaN(r=(function h(t){return Math.max(0,-xt(Math.abs(t)))})(a))||(i.precision=r-2*(\"%\"===i.type))}return Rt(i)}function Qt(t){var e=t.domain;return t.ticks=function(t){var n=e();return o(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var i=e();return Jt(i[0],i[i.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var i,r=e(),a=0,s=r.length-1,o=r[a],c=r[s];return c<o&&(i=o,o=c,c=i,i=a,a=s,s=i),(i=l(o,c,n))>0?i=l(o=Math.floor(o/i)*i,c=Math.ceil(c/i)*i,n):i<0&&(i=l(o=Math.ceil(o*i)/i,c=Math.floor(c*i)/i,n)),i>0?(r[a]=Math.floor(o/i)*i,r[s]=Math.ceil(c/i)*i,e(r)):i<0&&(r[a]=Math.ceil(o*i)/i,r[s]=Math.floor(c*i)/i,e(r)),t},t}function Kt(){var t=Zt(Gt,Gt);return t.copy=function(){return Xt(t,Kt())},Ot.apply(t,arguments),Qt(t)}function $t(t,e){var n,i=0,r=(t=t.slice()).length-1,a=t[i],s=t[r];return s<a&&(n=i,i=r,r=n,n=a,a=s,s=n),t[i]=e.floor(a),t[r]=e.ceil(s),t}function te(t){return Math.log(t)}function ee(t){return Math.exp(t)}function ne(t){return-Math.log(-t)}function ie(t){return-Math.exp(-t)}function re(t){return isFinite(t)?+(\"1e\"+t):t<0?0:t}function ae(t){return function(e){return-t(-e)}}function se(t){var e,n,i=t(te,ee),r=i.domain,a=10;function s(){return e=(function s(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(e){return Math.log(e)/t})})(a),n=(function o(t){return 10===t?re:t===Math.E?Math.exp:function(e){return Math.pow(t,e)}})(a),r()[0]<0?(e=ae(e),n=ae(n),t(ne,ie)):t(te,ee),i}return i.base=function(t){return arguments.length?(a=+t,s()):a},i.domain=function(t){return arguments.length?(r(t),s()):r()},i.ticks=function(t){var i,s=r(),l=s[0],c=s[s.length-1];(i=c<l)&&(p=l,l=c,c=p);var h,u,d,p=e(l),f=e(c),m=null==t?10:+t,g=[];if(!(a%1)&&f-p<m){if(p=Math.round(p)-1,f=Math.round(f)+1,l>0){for(;p<f;++p)for(u=1,h=n(p);u<a;++u)if(!((d=h*u)<l)){if(d>c)break;g.push(d)}}else for(;p<f;++p)for(u=a-1,h=n(p);u>=1;--u)if(!((d=h*u)<l)){if(d>c)break;g.push(d)}}else g=o(p,f,Math.min(f-p,m)).map(n);return i?g.reverse():g},i.tickFormat=function(t,r){if(null==r&&(r=10===a?\".0e\":\",\"),\"function\"!=typeof r&&(r=Rt(r)),t===1/0)return r;null==t&&(t=10);var s=Math.max(1,a*t/i.ticks().length);return function(t){var i=t/n(Math.round(e(t)));return i*a<a-.5&&(i*=a),i<=s?r(t):\"\"}},i.nice=function(){return r($t(r(),{floor:function(t){return n(Math.floor(e(t)))},ceil:function(t){return n(Math.ceil(e(t)))}}))},i}function oe(){var t=se(Yt()).domain([1,10]);return t.copy=function(){return Xt(t,oe()).base(t.base())},Ot.apply(t,arguments),t}var le=new Date,ce=new Date;function he(t,e,n,i){function r(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return r.floor=function(e){return t(e=new Date(+e)),e},r.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},r.round=function(t){var e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},r.range=function(n,i,a){var s,o=[];if(n=r.ceil(n),a=null==a?1:Math.floor(a),!(n<i&&a>0))return o;do{o.push(s=new Date(+n)),e(n,a),t(n)}while(s<n&&n<i);return o},r.filter=function(n){return he((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,i){if(t>=t)if(i<0)for(;++i<=0;)for(;e(t,-1),!n(t););else for(;--i>=0;)for(;e(t,1),!n(t););}))},n&&(r.count=function(e,i){return le.setTime(+e),ce.setTime(+i),t(le),t(ce),Math.floor(n(le,ce))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(i?function(e){return i(e)%t==0}:function(e){return r.count(0,e)%t==0}):r:null}),r}var ue=he((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));ue.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?he((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):ue:null};var de=ue,pe=1e3,fe=6e4,me=36e5,ge=864e5,ve=6048e5,ye=he((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+e*pe)}),(function(t,e){return(e-t)/pe}),(function(t){return t.getUTCSeconds()})),xe=he((function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*pe)}),(function(t,e){t.setTime(+t+e*fe)}),(function(t,e){return(e-t)/fe}),(function(t){return t.getMinutes()})),_e=he((function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*pe-t.getMinutes()*fe)}),(function(t,e){t.setTime(+t+e*me)}),(function(t,e){return(e-t)/me}),(function(t){return t.getHours()})),Me=he((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*fe)/ge}),(function(t){return t.getDate()-1}));function we(t){return he((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*fe)/ve}))}var be=we(0),Se=we(1);we(2),we(3);var Te=we(4);we(5),we(6);var Ee=he((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),Ae=he((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Ae.every=function(t){return isFinite(t=Math.floor(t))&&t>0?he((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var Le=Ae,Ce=he((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/ge}),(function(t){return t.getUTCDate()-1}));function Re(t){return he((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/ve}))}var Pe=Re(0),De=Re(1);Re(2),Re(3);var Ne=Re(4);Re(5),Re(6);var Ie=he((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));Ie.every=function(t){return isFinite(t=Math.floor(t))&&t>0?he((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var Oe=Ie;function ze(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Ue(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Fe(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var Be,He,ke={\"-\":\"\",_:\" \",0:\"0\"},Ge=/^\\s*\\d+/,Ve=/^%/,We=/[\\\\^$*+?|[\\]().{}]/g;function je(t,e,n){var i=t<0?\"-\":\"\",r=(i?-t:t)+\"\",a=r.length;return i+(a<n?new Array(n-a+1).join(e)+r:r)}function qe(t){return t.replace(We,\"\\\\$&\")}function Xe(t){return new RegExp(\"^(?:\"+t.map(qe).join(\"|\")+\")\",\"i\")}function Ye(t){for(var e={},n=-1,i=t.length;++n<i;)e[t[n].toLowerCase()]=n;return e}function Ze(t,e,n){var i=Ge.exec(e.slice(n,n+1));return i?(t.w=+i[0],n+i[0].length):-1}function Je(t,e,n){var i=Ge.exec(e.slice(n,n+1));return i?(t.u=+i[0],n+i[0].length):-1}function Qe(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.U=+i[0],n+i[0].length):-1}function Ke(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.V=+i[0],n+i[0].length):-1}function $e(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.W=+i[0],n+i[0].length):-1}function tn(t,e,n){var i=Ge.exec(e.slice(n,n+4));return i?(t.y=+i[0],n+i[0].length):-1}function en(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.y=+i[0]+(+i[0]>68?1900:2e3),n+i[0].length):-1}function nn(t,e,n){var i=/^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(e.slice(n,n+6));return i?(t.Z=i[1]?0:-(i[2]+(i[3]||\"00\")),n+i[0].length):-1}function rn(t,e,n){var i=Ge.exec(e.slice(n,n+1));return i?(t.q=3*i[0]-3,n+i[0].length):-1}function an(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.m=i[0]-1,n+i[0].length):-1}function sn(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.d=+i[0],n+i[0].length):-1}function on(t,e,n){var i=Ge.exec(e.slice(n,n+3));return i?(t.m=0,t.d=+i[0],n+i[0].length):-1}function ln(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.H=+i[0],n+i[0].length):-1}function cn(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.M=+i[0],n+i[0].length):-1}function hn(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.S=+i[0],n+i[0].length):-1}function un(t,e,n){var i=Ge.exec(e.slice(n,n+3));return i?(t.L=+i[0],n+i[0].length):-1}function dn(t,e,n){var i=Ge.exec(e.slice(n,n+6));return i?(t.L=Math.floor(i[0]/1e3),n+i[0].length):-1}function pn(t,e,n){var i=Ve.exec(e.slice(n,n+1));return i?n+i[0].length:-1}function fn(t,e,n){var i=Ge.exec(e.slice(n));return i?(t.Q=+i[0],n+i[0].length):-1}function mn(t,e,n){var i=Ge.exec(e.slice(n));return i?(t.s=+i[0],n+i[0].length):-1}function gn(t,e){return je(t.getDate(),e,2)}function vn(t,e){return je(t.getHours(),e,2)}function yn(t,e){return je(t.getHours()%12||12,e,2)}function xn(t,e){return je(1+Me.count(Le(t),t),e,3)}function _n(t,e){return je(t.getMilliseconds(),e,3)}function Mn(t,e){return _n(t,e)+\"000\"}function wn(t,e){return je(t.getMonth()+1,e,2)}function bn(t,e){return je(t.getMinutes(),e,2)}function Sn(t,e){return je(t.getSeconds(),e,2)}function Tn(t){var e=t.getDay();return 0===e?7:e}function En(t,e){return je(be.count(Le(t)-1,t),e,2)}function An(t){var e=t.getDay();return e>=4||0===e?Te(t):Te.ceil(t)}function Ln(t,e){return t=An(t),je(Te.count(Le(t),t)+(4===Le(t).getDay()),e,2)}function Cn(t){return t.getDay()}function Rn(t,e){return je(Se.count(Le(t)-1,t),e,2)}function Pn(t,e){return je(t.getFullYear()%100,e,2)}function Dn(t,e){return je((t=An(t)).getFullYear()%100,e,2)}function Nn(t,e){return je(t.getFullYear()%1e4,e,4)}function In(t,e){var n=t.getDay();return je((t=n>=4||0===n?Te(t):Te.ceil(t)).getFullYear()%1e4,e,4)}function On(t){var e=t.getTimezoneOffset();return(e>0?\"-\":(e*=-1,\"+\"))+je(e/60|0,\"0\",2)+je(e%60,\"0\",2)}function zn(t,e){return je(t.getUTCDate(),e,2)}function Un(t,e){return je(t.getUTCHours(),e,2)}function Fn(t,e){return je(t.getUTCHours()%12||12,e,2)}function Bn(t,e){return je(1+Ce.count(Oe(t),t),e,3)}function Hn(t,e){return je(t.getUTCMilliseconds(),e,3)}function kn(t,e){return Hn(t,e)+\"000\"}function Gn(t,e){return je(t.getUTCMonth()+1,e,2)}function Vn(t,e){return je(t.getUTCMinutes(),e,2)}function Wn(t,e){return je(t.getUTCSeconds(),e,2)}function jn(t){var e=t.getUTCDay();return 0===e?7:e}function qn(t,e){return je(Pe.count(Oe(t)-1,t),e,2)}function Xn(t){var e=t.getUTCDay();return e>=4||0===e?Ne(t):Ne.ceil(t)}function Yn(t,e){return t=Xn(t),je(Ne.count(Oe(t),t)+(4===Oe(t).getUTCDay()),e,2)}function Zn(t){return t.getUTCDay()}function Jn(t,e){return je(De.count(Oe(t)-1,t),e,2)}function Qn(t,e){return je(t.getUTCFullYear()%100,e,2)}function Kn(t,e){return je((t=Xn(t)).getUTCFullYear()%100,e,2)}function $n(t,e){return je(t.getUTCFullYear()%1e4,e,4)}function ti(t,e){var n=t.getUTCDay();return je((t=n>=4||0===n?Ne(t):Ne.ceil(t)).getUTCFullYear()%1e4,e,4)}function ei(){return\"+0000\"}function ni(){return\"%\"}function ii(t){return+t}function ri(t){return Math.floor(+t/1e3)}!(function ai(t){return Be=(function e(t){var e=t.dateTime,n=t.date,i=t.time,r=t.periods,a=t.days,s=t.shortDays,o=t.months,l=t.shortMonths,c=Xe(r),h=Ye(r),u=Xe(a),d=Ye(a),p=Xe(s),f=Ye(s),m=Xe(o),g=Ye(o),v=Xe(l),y=Ye(l),x={a:function _(t){return s[t.getDay()]},A:function M(t){return a[t.getDay()]},b:function w(t){return l[t.getMonth()]},B:function b(t){return o[t.getMonth()]},c:null,d:gn,e:gn,f:Mn,g:Dn,G:In,H:vn,I:yn,j:xn,L:_n,m:wn,M:bn,p:function S(t){return r[+(t.getHours()>=12)]},q:function T(t){return 1+~~(t.getMonth()/3)},Q:ii,s:ri,S:Sn,u:Tn,U:En,V:Ln,w:Cn,W:Rn,x:null,X:null,y:Pn,Y:Nn,Z:On,\"%\":ni},E={a:function A(t){return s[t.getUTCDay()]},A:function L(t){return a[t.getUTCDay()]},b:function C(t){return l[t.getUTCMonth()]},B:function R(t){return o[t.getUTCMonth()]},c:null,d:zn,e:zn,f:kn,g:Kn,G:ti,H:Un,I:Fn,j:Bn,L:Hn,m:Gn,M:Vn,p:function P(t){return r[+(t.getUTCHours()>=12)]},q:function D(t){return 1+~~(t.getUTCMonth()/3)},Q:ii,s:ri,S:Wn,u:jn,U:qn,V:Yn,w:Zn,W:Jn,x:null,X:null,y:Qn,Y:$n,Z:ei,\"%\":ni},N={a:function I(t,e,n){var i=p.exec(e.slice(n));return i?(t.w=f[i[0].toLowerCase()],n+i[0].length):-1},A:function O(t,e,n){var i=u.exec(e.slice(n));return i?(t.w=d[i[0].toLowerCase()],n+i[0].length):-1},b:function z(t,e,n){var i=v.exec(e.slice(n));return i?(t.m=y[i[0].toLowerCase()],n+i[0].length):-1},B:function U(t,e,n){var i=m.exec(e.slice(n));return i?(t.m=g[i[0].toLowerCase()],n+i[0].length):-1},c:function F(t,n,i){return W(t,e,n,i)},d:sn,e:sn,f:dn,g:en,G:tn,H:ln,I:ln,j:on,L:un,m:an,M:cn,p:function B(t,e,n){var i=c.exec(e.slice(n));return i?(t.p=h[i[0].toLowerCase()],n+i[0].length):-1},q:rn,Q:fn,s:mn,S:hn,u:Je,U:Qe,V:Ke,w:Ze,W:$e,x:function H(t,e,i){return W(t,n,e,i)},X:function k(t,e,n){return W(t,i,e,n)},y:en,Y:tn,Z:nn,\"%\":pn};function G(t,e){return function(n){var i,r,a,s=[],o=-1,l=0,c=t.length;for(n instanceof Date||(n=new Date(+n));++o<c;)37===t.charCodeAt(o)&&(s.push(t.slice(l,o)),null!=(r=ke[i=t.charAt(++o)])?i=t.charAt(++o):r=\"e\"===i?\" \":\"0\",(a=e[i])&&(i=a(n,r)),s.push(i),l=o+1);return s.push(t.slice(l,o)),s.join(\"\")}}function V(t,e){return function(n){var i,r,a=Fe(1900,void 0,1);if(W(a,t,n+=\"\",0)!=n.length)return null;if(\"Q\"in a)return new Date(a.Q);if(\"s\"in a)return new Date(1e3*a.s+(\"L\"in a?a.L:0));if(e&&!(\"Z\"in a)&&(a.Z=0),\"p\"in a&&(a.H=a.H%12+12*a.p),void 0===a.m&&(a.m=\"q\"in a?a.q:0),\"V\"in a){if(a.V<1||a.V>53)return null;\"w\"in a||(a.w=1),\"Z\"in a?(r=(i=Ue(Fe(a.y,0,1))).getUTCDay(),i=r>4||0===r?De.ceil(i):De(i),i=Ce.offset(i,7*(a.V-1)),a.y=i.getUTCFullYear(),a.m=i.getUTCMonth(),a.d=i.getUTCDate()+(a.w+6)%7):(r=(i=ze(Fe(a.y,0,1))).getDay(),i=r>4||0===r?Se.ceil(i):Se(i),i=Me.offset(i,7*(a.V-1)),a.y=i.getFullYear(),a.m=i.getMonth(),a.d=i.getDate()+(a.w+6)%7)}else(\"W\"in a||\"U\"in a)&&(\"w\"in a||(a.w=\"u\"in a?a.u%7:\"W\"in a?1:0),r=\"Z\"in a?Ue(Fe(a.y,0,1)).getUTCDay():ze(Fe(a.y,0,1)).getDay(),a.m=0,a.d=\"W\"in a?(a.w+6)%7+7*a.W-(r+5)%7:a.w+7*a.U-(r+6)%7);return\"Z\"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,Ue(a)):ze(a)}}function W(t,e,n,i){for(var r,a,s=0,o=e.length,l=n.length;s<o;){if(i>=l)return-1;if(37===(r=e.charCodeAt(s++))){if(r=e.charAt(s++),!(a=N[r in ke?e.charAt(s++):r])||(i=a(t,n,i))<0)return-1}else if(r!=n.charCodeAt(i++))return-1}return i}return x.x=G(n,x),x.X=G(i,x),x.c=G(e,x),E.x=G(n,E),E.X=G(i,E),E.c=G(e,E),{format:function(t){var e=G(t+=\"\",x);return e.toString=function(){return t},e},parse:function(t){var e=V(t+=\"\",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=G(t+=\"\",E);return e.toString=function(){return t},e},utcParse:function(t){var e=V(t+=\"\",!0);return e.toString=function(){return t},e}}})(t),He=Be.format,Be})({dateTime:\"%x, %X\",date:\"%-m/%-d/%Y\",time:\"%-I:%M:%S %p\",periods:[\"AM\",\"PM\"],days:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],shortDays:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],months:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],shortMonths:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]});var si=1e3,oi=6e4,li=36e5,ci=864e5,hi=2592e6,ui=31536e6;function di(t){return new Date(t)}function pi(t){return t instanceof Date?+t:+new Date(+t)}function fi(t,e,i,r,a,s,o,l,h){var u=Zt(Gt,Gt),d=u.invert,p=u.domain,f=h(\".%L\"),m=h(\":%S\"),g=h(\"%I:%M\"),v=h(\"%I %p\"),y=h(\"%a %d\"),x=h(\"%b %d\"),_=h(\"%B\"),M=h(\"%Y\"),w=[[o,1,si],[o,5,5e3],[o,15,15e3],[o,30,3e4],[s,1,oi],[s,5,3e5],[s,15,9e5],[s,30,18e5],[a,1,li],[a,3,108e5],[a,6,216e5],[a,12,432e5],[r,1,ci],[r,2,1728e5],[i,1,6048e5],[e,1,hi],[e,3,7776e6],[t,1,ui]];function b(n){return(o(n)<n?f:s(n)<n?m:a(n)<n?g:r(n)<n?v:e(n)<n?i(n)<n?y:x:t(n)<n?_:M)(n)}function S(e,i,r,a){if(null==e&&(e=10),\"number\"==typeof e){var s=Math.abs(r-i)/e,o=n((function(t){return t[2]})).right(w,s);o===w.length?(a=c(i/ui,r/ui,e),e=t):o?(a=(o=w[s/w[o-1][2]<w[o][2]/s?o-1:o])[1],e=o[0]):(a=Math.max(c(i,r,e),1),e=l)}return null==a?e:e.every(a)}return u.invert=function(t){return new Date(d(t))},u.domain=function(t){return arguments.length?p(Ft.call(t,pi)):p().map(di)},u.ticks=function(t,e){var n,i=p(),r=i[0],a=i[i.length-1],s=a<r;return s&&(n=r,r=a,a=n),n=(n=S(t,r,a,e))?n.range(r,a+1):[],s?n.reverse():n},u.tickFormat=function(t,e){return null==e?b:h(e)},u.nice=function(t,e){var n=p();return(t=S(t,n[0],n[n.length-1],e))?p($t(n,t)):u},u.copy=function(){return Xt(u,fi(t,e,i,r,a,s,o,l,h))},u}function mi(){return Ot.apply(fi(Le,Ee,be,Me,_e,xe,ye,de,He).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}const gi=Rt(\".2~e\"),vi=Rt(\".4~r\"),yi=Rt(\",~\");function xi(t){if(0===t)return\"0\";const e=Math.abs(t);return e>=1e4||e<.001?gi(t):vi(t)}const _i={formatTick:xi,formatShort:xi,formatReadable(t){const e=Math.abs(t);return e>=1e4||e<.001?gi(t):yi(t)},formatLong:yi};Rt(\"0.3~s\"),Rt(\",.3~f\"),Rt(\".4~\");const Mi=mi().tickFormat();let wi;const bi={formatTick:t=>Mi(new Date(t)),formatShort:t=>new Date(t).toLocaleString(wi,{year:\"numeric\",month:\"short\",day:\"numeric\",hour:\"numeric\",minute:\"numeric\",second:\"numeric\"}),formatReadable:t=>new Date(t).toLocaleString(wi,{year:\"numeric\",month:\"short\",day:\"numeric\",hour:\"numeric\",minute:\"numeric\",second:\"numeric\",timeZoneName:\"short\"}),formatLong:t=>new Date(t).toLocaleString(wi,{year:\"numeric\",month:\"long\",day:\"numeric\",hour:\"numeric\",minute:\"numeric\",second:\"numeric\",timeZoneName:\"short\",fractionalSecondDigits:3})};function Si(e){switch(e){case t.LINEAR:return new Ti;case t.LOG10:return new Ei;case t.TIME:return new Ai;default:throw new RangeError(`ScaleType ${e} not supported.`)}}class Ti{constructor(){this.defaultFormatter=_i}transform(t,e,n){const[i,r]=t,a=r-i,[s,o]=e;return 0===a?s:(o-s)/a*(n-i)+s}forward(t,e,n){return this.transform(t,e,n)}reverse(t,e,n){return this.transform(e,t,n)}niceDomain(t){let[e,n]=t;if(n<e)throw new Error(\"Unexpected input: min is larger than max\");if(n===e)return 0===e?[-1,1]:e<0?[2*e,0]:[0,2*e];const i=Kt(),r=.05*(n-e+Number.EPSILON),[a,s]=i.domain([e-r,n+r]).nice().domain();return[a,s]}ticks(t,e){return Kt().domain(t).ticks(e)}isSafeNumber(t){return Number.isFinite(t)}}class Ei{constructor(){this.defaultFormatter=_i}transform(t){return Math.log10(t>0?t:Number.MIN_VALUE)}untransform(t){return Math.exp(t/Math.LOG10E)}forward(t,e,n){if(n<=0)return e[0];const[i,r]=t,[a,s]=e,o=this.transform(i),l=this.transform(r)-o,c=s-a;return n=this.transform(n),c/(l+Number.EPSILON)*(n-o)+a}reverse(t,e,n){const[i,r]=t,[a,s]=e,o=this.transform(i),l=this.transform(r);return this.untransform((l-o)/(s-a+Number.EPSILON)*(n-a)+o)}niceDomain(t){const[e,n]=t;if(e>n)throw new Error(\"Unexpected input: min is larger than max\");const i=Math.max(e,Number.MIN_VALUE),r=Math.max(n,Number.MIN_VALUE);return n<=0?[Number.MIN_VALUE,1]:[Math.max(Number.MIN_VALUE,.5*i),2*r]}ticks(t,e){const n=t[0]<=0?Number.MIN_VALUE:t[0],i=t[1]<=0?Number.MIN_VALUE:t[1],r=oe().domain([n,i]).ticks(e);return r.length?r:t}isSafeNumber(t){return Number.isFinite(t)&&t>0}}class Ai{constructor(){this.scale=mi(),this.defaultFormatter=bi}forward(t,e,n){return this.scale.domain(t).range(e)(n)}reverse(t,e,n){return this.scale.domain(t).range(e).invert(n).getTime()}niceDomain(t){const[e,n]=this.scale.domain(t).nice().domain();return[e.getTime(),n.getTime()]}ticks(t,e){return this.scale.domain(t).ticks(e).map((t=>t.getTime()))}isSafeNumber(t){return Number.isFinite(t)}}if(self.hasOwnProperty(\"WebGL2RenderingContext\")&&self.hasOwnProperty(\"document\")){const t=document.createElement(\"canvas\");t.addEventListener(\"webglcontextcreationerror\",(()=>{})),t.getContext(\"webgl2\")}function Li(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}class Ci{constructor(){this.xScale=Si(t.LINEAR),this.yScale=Si(t.LINEAR),this.domContainerRect={x:0,width:1,y:0,height:1},this.lastUpdated=0,this.currentViewBoxRect={x:0,width:1,y:0,height:1}}getUpdateIdentifier(){return this.lastUpdated}updateIdentifier(){this.lastUpdated++}isYAxisPointedDown(){return!0}setXScale(t){this.xScale=t,this.updateIdentifier()}setYScale(t){this.yScale=t,this.updateIdentifier()}getCurrentViewBoxRect(){return this.currentViewBoxRect}setViewBoxRect(t){this.currentViewBoxRect=t,this.updateIdentifier()}setDomContainerRect(t){this.domContainerRect=t,this.updateIdentifier()}transformDataToUiCoord(t,e){const n=t,i=(function r(t){return{x:[t.x,t.x+t.width],y:[t.y,t.y+t.height]}})(this.currentViewBoxRect);return[this.xScale.forward(i.x,[n.x,n.x+n.width],e[0]),this.yScale.forward(i.y,this.isYAxisPointedDown()?[n.y+n.height,n.y]:[n.y,n.y+n.height],e[1])]}}var Ri;function Pi(t,e,n,i){const{color:r,visible:a,opacity:s}=i;let o=t;return o||a?(o=null!=o?o:e(),o=n(o),o.style.display=a?\"\":\"none\",o.style.stroke=r,o.style.opacity=String(null!=s?s:1),o):null}!(function(t){t[t.SVG=0]=\"SVG\",t[t.WEBGL=1]=\"WEBGL\"})(Ri||(Ri={}));class Di{constructor(t){this.svg=t}flush(){}onResize(t){}destroyObject(t){this.svg.removeChild(t.dom)}setUseDarkMode(t){}createPathDString(t){if(!t.length)return\"\";const e=new Array(t.length/2);e[0]=`M${t[0]},${t[1]}`;for(let n=1;n<t.length/2;n++)e[n]=`L${t[2*n]},${t[2*n+1]}`;return e.join(\"\")}createOrUpdateLineObject(t,e,n){const i=Pi(null==t?void 0:t.dom,(()=>{const t=document.createElementNS(\"http://www.w3.org/2000/svg\",\"path\");t.style.fill=\"none\";const n=this.createPathDString(e);return t.setAttribute(\"d\",n),this.svg.appendChild(t),t}),(n=>{if(!(null==t?void 0:t.data)||!Li(e,null==t?void 0:t.data)){const t=this.createPathDString(e);n.setAttribute(\"d\",t)}return n}),n);return null===i?null:(i.style.strokeWidth=String(n.width),{dom:i,data:e})}createOrUpdateTriangleObject(t,e,n){const{size:i,color:r}=n,a=i*Math.sqrt(3)/2,s=new Float32Array([e.x-i/2,e.y+a/3,e.x+i/2,e.y+a/3,e.x,e.y-2*a/3]),o=Pi(null==t?void 0:t.dom,(()=>{const t=document.createElementNS(\"http://www.w3.org/2000/svg\",\"path\");t.classList.add(\"triangle\"),t.style.fill=\"none\";const e=this.createPathDString(s);return t.setAttribute(\"d\",e+\"Z\"),this.svg.appendChild(t),t}),(t=>{const e=this.createPathDString(s);return t.setAttribute(\"d\",e+\"Z\"),t}),n);return null===o?null:(o.style.fill=r,{dom:o,data:s})}createOrUpdateCircleObject(t,e,n){const{color:i,radius:r}=n,a=Pi(null==t?void 0:t.dom,(()=>{const t=document.createElementNS(\"http://www.w3.org/2000/svg\",\"circle\");return t.style.fill=i,t.setAttribute(\"cx\",String(e.x)),t.setAttribute(\"cy\",String(e.y)),t.setAttribute(\"r\",String(r)),this.svg.appendChild(t),t}),(t=>(t.style.fill=i,t.setAttribute(\"cx\",String(e.x)),t.setAttribute(\"cy\",String(e.y)),t.setAttribute(\"r\",String(r)),t)),n);return null===a?null:{dom:a,data:e}}createOrUpdateTrapezoidObject(t,e,n,i){if(e.y!==n.y)throw new RangeError(\"Input error: start.y != end.y.\");const{altitude:r,color:a}=i,s=2/Math.sqrt(3)*r,o=new Float32Array([e.x-s/2,e.y+r/2,e.x,e.y-r/2,n.x,n.y-r/2,n.x+s/2,n.y+r/2]),l=Pi(null==t?void 0:t.dom,(()=>{const t=document.createElementNS(\"http://www.w3.org/2000/svg\",\"path\");t.classList.add(\"trapezoid\"),t.style.fill=\"none\";const e=this.createPathDString(o);return t.setAttribute(\"d\",e+\"Z\"),this.svg.appendChild(t),t}),(t=>{const e=this.createPathDString(o);return t.setAttribute(\"d\",e+\"Z\"),t}),i);return null===l?null:(l.style.fill=a,{dom:l,data:o})}dispose(){}}\n/**\n     * @license\n     * Copyright 2010-2021 Three.js Authors\n     * SPDX-License-Identifier: MIT\n     */const Ni=100,Ii=301,Oi=302,zi=306,Ui=1e3,Fi=1001,Bi=1002,Hi=1003,ki=1006,Gi=1008,Vi=1009,Wi=1012,ji=1014,qi=1015,Xi=1016,Yi=1020,Zi=1022,Ji=1023,Qi=1026,Ki=1027,$i=2300,tr=2301,er=2302,nr=2400,ir=2401,rr=2402,ar=2500,sr=3e3,or=3001,lr=3007,cr=3002,hr=7680,ur=35044,dr=35048,pr=\"300 es\";class fr{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)}hasEventListener(t,e){if(void 0===this._listeners)return!1;const n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)}removeEventListener(t,e){if(void 0===this._listeners)return;const n=this._listeners[t];if(void 0!==n){const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}dispatchEvent(t){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const n=e.slice(0);for(let e=0,i=n.length;e<i;e++)n[e].call(this,t);t.target=null}}}const mr=[];for(let t=0;t<256;t++)mr[t]=(t<16?\"0\":\"\")+t.toString(16);const gr=Math.PI/180,vr=180/Math.PI;function yr(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(mr[255&t]+mr[t>>8&255]+mr[t>>16&255]+mr[t>>24&255]+\"-\"+mr[255&e]+mr[e>>8&255]+\"-\"+mr[e>>16&15|64]+mr[e>>24&255]+\"-\"+mr[63&n|128]+mr[n>>8&255]+\"-\"+mr[n>>16&255]+mr[n>>24&255]+mr[255&i]+mr[i>>8&255]+mr[i>>16&255]+mr[i>>24&255]).toUpperCase()}function xr(t,e,n){return Math.max(e,Math.min(n,t))}function _r(t,e,n){return(1-n)*t+n*e}function Mr(t){return 0==(t&t-1)&&0!==t}function wr(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}class br{constructor(t=0,e=0){this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error(\"index is out of range: \"+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error(\"index is out of range: \"+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t,e){return void 0!==e?(console.warn(\"THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t,e){return void 0!==e?(console.warn(\"THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn(\"THREE.Vector2: offset has been removed from .fromBufferAttribute().\"),this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),r=this.x-t.x,a=this.y-t.y;return this.x=r*n-a*i+t.x,this.y=r*i+a*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}}br.prototype.isVector2=!0;class Sr{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error(\"THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.\")}set(t,e,n,i,r,a,s,o,l){const c=this.elements;return c[0]=t,c[1]=i,c[2]=s,c[3]=e,c[4]=r,c[5]=o,c[6]=n,c[7]=a,c[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,a=n[0],s=n[3],o=n[6],l=n[1],c=n[4],h=n[7],u=n[2],d=n[5],p=n[8],f=i[0],m=i[3],g=i[6],v=i[1],y=i[4],x=i[7],_=i[2],M=i[5],w=i[8];return r[0]=a*f+s*v+o*_,r[3]=a*m+s*y+o*M,r[6]=a*g+s*x+o*w,r[1]=l*f+c*v+h*_,r[4]=l*m+c*y+h*M,r[7]=l*g+c*x+h*w,r[2]=u*f+d*v+p*_,r[5]=u*m+d*y+p*M,r[8]=u*g+d*x+p*w,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],s=t[5],o=t[6],l=t[7],c=t[8];return e*a*c-e*s*l-n*r*c+n*s*o+i*r*l-i*a*o}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],s=t[5],o=t[6],l=t[7],c=t[8],h=c*a-s*l,u=s*o-c*r,d=l*r-a*o,p=e*h+n*u+i*d;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const f=1/p;return t[0]=h*f,t[1]=(i*l-c*n)*f,t[2]=(s*n-i*a)*f,t[3]=u*f,t[4]=(c*e-i*o)*f,t[5]=(i*r-s*e)*f,t[6]=d*f,t[7]=(n*o-l*e)*f,t[8]=(a*e-n*r)*f,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,r,a,s){const o=Math.cos(r),l=Math.sin(r);return this.set(n*o,n*l,-n*(o*a+l*s)+a+t,-i*l,i*o,-i*(-l*a+o*s)+s+e,0,0,1),this}scale(t,e){const n=this.elements;return n[0]*=t,n[3]*=t,n[6]*=t,n[1]*=e,n[4]*=e,n[7]*=e,this}rotate(t){const e=Math.cos(t),n=Math.sin(t),i=this.elements,r=i[0],a=i[3],s=i[6],o=i[1],l=i[4],c=i[7];return i[0]=e*r+n*o,i[3]=e*a+n*l,i[6]=e*s+n*c,i[1]=-n*r+e*o,i[4]=-n*a+e*l,i[7]=-n*s+e*c,this}translate(t,e){const n=this.elements;return n[0]+=t*n[2],n[3]+=t*n[5],n[6]+=t*n[8],n[1]+=e*n[2],n[4]+=e*n[5],n[7]+=e*n[8],this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<9;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}let Tr;Sr.prototype.isMatrix3=!0;class Er{static getDataURL(t){if(/^data:/i.test(t.src))return t.src;if(\"undefined\"==typeof HTMLCanvasElement)return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{void 0===Tr&&(Tr=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\")),Tr.width=t.width,Tr.height=t.height;const n=Tr.getContext(\"2d\");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=Tr}return e.width>2048||e.height>2048?(console.warn(\"THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons\",t),e.toDataURL(\"image/jpeg\",.6)):e.toDataURL(\"image/png\")}}let Ar=0;class Lr extends fr{constructor(t=Lr.DEFAULT_IMAGE,e=Lr.DEFAULT_MAPPING,n=1001,i=1001,r=1006,a=1008,s=1023,o=1009,l=1,c=3e3){super(),Object.defineProperty(this,\"id\",{value:Ar++}),this.uuid=yr(),this.name=\"\",this.image=t,this.mipmaps=[],this.mapping=e,this.wrapS=n,this.wrapT=i,this.magFilter=r,this.minFilter=a,this.anisotropy=l,this.format=s,this.internalFormat=null,this.type=o,this.offset=new br(0,0),this.repeat=new br(1,1),this.center=new br(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Sr,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=c,this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this}toJSON(t){const e=void 0===t||\"string\"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const n={metadata:{version:4.5,type:\"Texture\",generator:\"Texture.toJSON\"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){const i=this.image;if(void 0===i.uuid&&(i.uuid=yr()),!e&&void 0===t.images[i.uuid]){let e;if(Array.isArray(i)){e=[];for(let t=0,n=i.length;t<n;t++)e.push(Cr(i[t].isDataTexture?i[t].image:i[t]))}else e=Cr(i);t.images[i.uuid]={uuid:i.uuid,url:e}}n.image=i.uuid}return e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:\"dispose\"})}transformUv(t){if(300!==this.mapping)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case Ui:t.x=t.x-Math.floor(t.x);break;case Fi:t.x=t.x<0?0:1;break;case Bi:t.x=1===Math.abs(Math.floor(t.x)%2)?Math.ceil(t.x)-t.x:t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case Ui:t.y=t.y-Math.floor(t.y);break;case Fi:t.y=t.y<0?0:1;break;case Bi:t.y=1===Math.abs(Math.floor(t.y)%2)?Math.ceil(t.y)-t.y:t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&this.version++}}function Cr(t){return\"undefined\"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||\"undefined\"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||\"undefined\"!=typeof ImageBitmap&&t instanceof ImageBitmap?Er.getDataURL(t):t.data?{data:Array.prototype.slice.call(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn(\"THREE.Texture: Unable to serialize Texture.\"),{})}Lr.DEFAULT_IMAGE=void 0,Lr.DEFAULT_MAPPING=300,Lr.prototype.isTexture=!0;class Rr{constructor(t=0,e=0,n=0,i=1){this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error(\"index is out of range: \"+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error(\"index is out of range: \"+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t,e){return void 0!==e?(console.warn(\"THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t,e){return void 0!==e?(console.warn(\"THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=this.w,a=t.elements;return this.x=a[0]*e+a[4]*n+a[8]*i+a[12]*r,this.y=a[1]*e+a[5]*n+a[9]*i+a[13]*r,this.z=a[2]*e+a[6]*n+a[10]*i+a[14]*r,this.w=a[3]*e+a[7]*n+a[11]*i+a[15]*r,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,r;const a=.01,s=.1,o=t.elements,l=o[0],c=o[4],h=o[8],u=o[1],d=o[5],p=o[9],f=o[2],m=o[6],g=o[10];if(Math.abs(c-u)<a&&Math.abs(h-f)<a&&Math.abs(p-m)<a){if(Math.abs(c+u)<s&&Math.abs(h+f)<s&&Math.abs(p+m)<s&&Math.abs(l+d+g-3)<s)return this.set(1,0,0,0),this;e=Math.PI;const t=(l+1)/2,o=(d+1)/2,v=(g+1)/2,y=(c+u)/4,x=(h+f)/4,_=(p+m)/4;return t>o&&t>v?t<a?(n=0,i=.707106781,r=.707106781):(n=Math.sqrt(t),i=y/n,r=x/n):o>v?o<a?(n=.707106781,i=0,r=.707106781):(i=Math.sqrt(o),n=y/i,r=_/i):v<a?(n=.707106781,i=.707106781,r=0):(r=Math.sqrt(v),n=x/r,i=_/r),this.set(n,i,r,e),this}let v=Math.sqrt((m-p)*(m-p)+(h-f)*(h-f)+(u-c)*(u-c));return Math.abs(v)<.001&&(v=1),this.x=(m-p)/v,this.y=(h-f)/v,this.z=(u-c)/v,this.w=Math.acos((l+d+g-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn(\"THREE.Vector4: offset has been removed from .fromBufferAttribute().\"),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}}Rr.prototype.isVector4=!0;class Pr extends fr{constructor(t,e,n={}){super(),this.width=t,this.height=e,this.depth=1,this.scissor=new Rr(0,0,t,e),this.scissorTest=!1,this.viewport=new Rr(0,0,t,e),this.texture=new Lr(void 0,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.isRenderTargetTexture=!0,this.texture.image={width:t,height:e,depth:1},this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:ki,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0!==n.stencilBuffer&&n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null}setTexture(t){t.image={width:this.width,height:this.height,depth:this.depth},this.texture=t}setSize(t,e,n=1){this.width===t&&this.height===e&&this.depth===n||(this.width=t,this.height=e,this.depth=n,this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.image={...this.texture.image},this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this}dispose(){this.dispatchEvent({type:\"dispose\"})}}Pr.prototype.isWebGLRenderTarget=!0;(class extends Pr{constructor(t,e,n){super(t,e);const i=this.texture;this.texture=[];for(let t=0;t<n;t++)this.texture[t]=i.clone()}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let i=0,r=this.texture.length;i<r;i++)this.texture[i].image.width=t,this.texture[i].image.height=e,this.texture[i].image.depth=n;this.dispose()}return this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e),this}copy(t){this.dispose(),this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this.texture.length=0;for(let e=0,n=t.texture.length;e<n;e++)this.texture[e]=t.texture[e].clone();return this}}).prototype.isWebGLMultipleRenderTargets=!0;class Dr extends Pr{constructor(t,e,n){super(t,e,n),this.samples=4}copy(t){return super.copy.call(this,t),this.samples=t.samples,this}}Dr.prototype.isWebGLMultisampleRenderTarget=!0;class Nr{constructor(t=0,e=0,n=0,i=1){this._x=t,this._y=e,this._z=n,this._w=i}static slerp(t,e,n,i){return console.warn(\"THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.\"),n.slerpQuaternions(t,e,i)}static slerpFlat(t,e,n,i,r,a,s){let o=n[i+0],l=n[i+1],c=n[i+2],h=n[i+3];const u=r[a+0],d=r[a+1],p=r[a+2],f=r[a+3];if(0===s)return t[e+0]=o,t[e+1]=l,t[e+2]=c,void(t[e+3]=h);if(1===s)return t[e+0]=u,t[e+1]=d,t[e+2]=p,void(t[e+3]=f);if(h!==f||o!==u||l!==d||c!==p){let t=1-s;const e=o*u+l*d+c*p+h*f,n=e>=0?1:-1,i=1-e*e;if(i>Number.EPSILON){const r=Math.sqrt(i),a=Math.atan2(r,e*n);t=Math.sin(t*a)/r,s=Math.sin(s*a)/r}const r=s*n;if(o=o*t+u*r,l=l*t+d*r,c=c*t+p*r,h=h*t+f*r,t===1-s){const t=1/Math.sqrt(o*o+l*l+c*c+h*h);o*=t,l*=t,c*=t,h*=t}}t[e]=o,t[e+1]=l,t[e+2]=c,t[e+3]=h}static multiplyQuaternionsFlat(t,e,n,i,r,a){const s=n[i],o=n[i+1],l=n[i+2],c=n[i+3],h=r[a],u=r[a+1],d=r[a+2],p=r[a+3];return t[e]=s*p+c*h+o*d-l*u,t[e+1]=o*p+c*u+l*h-s*d,t[e+2]=l*p+c*d+s*u-o*h,t[e+3]=c*p-s*h-o*u-l*d,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){if(!t||!t.isEuler)throw new Error(\"THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.\");const n=t._x,i=t._y,r=t._z,a=t._order,s=Math.cos,o=Math.sin,l=s(n/2),c=s(i/2),h=s(r/2),u=o(n/2),d=o(i/2),p=o(r/2);switch(a){case\"XYZ\":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case\"YXZ\":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case\"ZXY\":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case\"ZYX\":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case\"YZX\":this._x=u*c*h+l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h-u*d*p;break;case\"XZY\":this._x=u*c*h-l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h+u*d*p;break;default:console.warn(\"THREE.Quaternion: .setFromEuler() encountered an unknown order: \"+a)}return!1!==e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],r=e[8],a=e[1],s=e[5],o=e[9],l=e[2],c=e[6],h=e[10],u=n+s+h;if(u>0){const t=.5/Math.sqrt(u+1);this._w=.25/t,this._x=(c-o)*t,this._y=(r-l)*t,this._z=(a-i)*t}else if(n>s&&n>h){const t=2*Math.sqrt(1+n-s-h);this._w=(c-o)/t,this._x=.25*t,this._y=(i+a)/t,this._z=(r+l)/t}else if(s>h){const t=2*Math.sqrt(1+s-n-h);this._w=(r-l)/t,this._x=(i+a)/t,this._y=.25*t,this._z=(o+c)/t}else{const t=2*Math.sqrt(1+h-n-s);this._w=(a-i)/t,this._x=(r+l)/t,this._y=(o+c)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(xr(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(0===n)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t,e){return void 0!==e?(console.warn(\"THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.\"),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,r=t._z,a=t._w,s=e._x,o=e._y,l=e._z,c=e._w;return this._x=n*c+a*s+i*l-r*o,this._y=i*c+a*o+r*s-n*l,this._z=r*c+a*l+n*o-i*s,this._w=a*c-n*s-i*o-r*l,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const n=this._x,i=this._y,r=this._z,a=this._w;let s=a*t._w+n*t._x+i*t._y+r*t._z;if(s<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,s=-s):this.copy(t),s>=1)return this._w=a,this._x=n,this._y=i,this._z=r,this;const o=1-s*s;if(o<=Number.EPSILON){const t=1-e;return this._w=t*a+e*this._w,this._x=t*n+e*this._x,this._y=t*i+e*this._y,this._z=t*r+e*this._z,this.normalize(),this._onChangeCallback(),this}const l=Math.sqrt(o),c=Math.atan2(l,s),h=Math.sin((1-e)*c)/l,u=Math.sin(e*c)/l;return this._w=a*h+this._w*u,this._x=n*h+this._x*u,this._y=i*h+this._y*u,this._z=r*h+this._z*u,this._onChangeCallback(),this}slerpQuaternions(t,e,n){this.copy(t).slerp(e,n)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}Nr.prototype.isQuaternion=!0;class Ir{constructor(t=0,e=0,n=0){this.x=t,this.y=e,this.z=n}set(t,e,n){return void 0===n&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error(\"index is out of range: \"+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error(\"index is out of range: \"+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t,e){return void 0!==e?(console.warn(\"THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t,e){return void 0!==e?(console.warn(\"THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t,e){return void 0!==e?(console.warn(\"THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.\"),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return t&&t.isEuler||console.error(\"THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.\"),this.applyQuaternion(zr.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(zr.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6]*i,this.y=r[1]*e+r[4]*n+r[7]*i,this.z=r[2]*e+r[5]*n+r[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=t.elements,a=1/(r[3]*e+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*e+r[4]*n+r[8]*i+r[12])*a,this.y=(r[1]*e+r[5]*n+r[9]*i+r[13])*a,this.z=(r[2]*e+r[6]*n+r[10]*i+r[14])*a,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,r=t.x,a=t.y,s=t.z,o=t.w,l=o*e+a*i-s*n,c=o*n+s*e-r*i,h=o*i+r*n-a*e,u=-r*e-a*n-s*i;return this.x=l*o+u*-r+c*-s-h*-a,this.y=c*o+u*-a+h*-r-l*-s,this.z=h*o+u*-s+l*-a-c*-r,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[4]*n+r[8]*i,this.y=r[1]*e+r[5]*n+r[9]*i,this.z=r[2]*e+r[6]*n+r[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t,e){return void 0!==e?(console.warn(\"THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.\"),this.crossVectors(t,e)):this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,r=t.z,a=e.x,s=e.y,o=e.z;return this.x=i*o-r*s,this.y=r*a-n*o,this.z=n*s-i*a,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return Or.copy(this).projectOnVector(t),this.sub(Or)}reflect(t){return this.sub(Or.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(xr(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn(\"THREE.Vector3: offset has been removed from .fromBufferAttribute().\"),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}}Ir.prototype.isVector3=!0;const Or=new Ir,zr=new Nr;class Ur{constructor(t=new Ir(1/0,1/0,1/0),e=new Ir(-1/0,-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){let e=1/0,n=1/0,i=1/0,r=-1/0,a=-1/0,s=-1/0;for(let o=0,l=t.length;o<l;o+=3){const l=t[o],c=t[o+1],h=t[o+2];l<e&&(e=l),c<n&&(n=c),h<i&&(i=h),l>r&&(r=l),c>a&&(a=c),h>s&&(s=h)}return this.min.set(e,n,i),this.max.set(r,a,s),this}setFromBufferAttribute(t){let e=1/0,n=1/0,i=1/0,r=-1/0,a=-1/0,s=-1/0;for(let o=0,l=t.count;o<l;o++){const l=t.getX(o),c=t.getY(o),h=t.getZ(o);l<e&&(e=l),c<n&&(n=c),h<i&&(i=h),l>r&&(r=l),c>a&&(a=c),h>s&&(s=h)}return this.min.set(e,n,i),this.max.set(r,a,s),this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=Br.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t){return this.makeEmpty(),this.expandByObject(t)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t){t.updateWorldMatrix(!1,!1);const e=t.geometry;void 0!==e&&(null===e.boundingBox&&e.computeBoundingBox(),Hr.copy(e.boundingBox),Hr.applyMatrix4(t.matrixWorld),this.union(Hr));const n=t.children;for(let t=0,e=n.length;t<e;t++)this.expandByObject(n[t]);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,Br),Br.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Xr),Yr.subVectors(this.max,Xr),kr.subVectors(t.a,Xr),Gr.subVectors(t.b,Xr),Vr.subVectors(t.c,Xr),Wr.subVectors(Gr,kr),jr.subVectors(Vr,Gr),qr.subVectors(kr,Vr);let e=[0,-Wr.z,Wr.y,0,-jr.z,jr.y,0,-qr.z,qr.y,Wr.z,0,-Wr.x,jr.z,0,-jr.x,qr.z,0,-qr.x,-Wr.y,Wr.x,0,-jr.y,jr.x,0,-qr.y,qr.x,0];return!!Qr(e,kr,Gr,Vr,Yr)&&(e=[1,0,0,0,1,0,0,0,1],!!Qr(e,kr,Gr,Vr,Yr)&&(Zr.crossVectors(Wr,jr),e=[Zr.x,Zr.y,Zr.z],Qr(e,kr,Gr,Vr,Yr)))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return Br.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){return this.getCenter(t.center),t.radius=.5*this.getSize(Br).length(),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(Fr[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Fr[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Fr[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Fr[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Fr[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Fr[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Fr[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Fr[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Fr)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}Ur.prototype.isBox3=!0;const Fr=[new Ir,new Ir,new Ir,new Ir,new Ir,new Ir,new Ir,new Ir],Br=new Ir,Hr=new Ur,kr=new Ir,Gr=new Ir,Vr=new Ir,Wr=new Ir,jr=new Ir,qr=new Ir,Xr=new Ir,Yr=new Ir,Zr=new Ir,Jr=new Ir;function Qr(t,e,n,i,r){for(let a=0,s=t.length-3;a<=s;a+=3){Jr.fromArray(t,a);const s=r.x*Math.abs(Jr.x)+r.y*Math.abs(Jr.y)+r.z*Math.abs(Jr.z),o=e.dot(Jr),l=n.dot(Jr),c=i.dot(Jr);if(Math.max(-Math.max(o,l,c),Math.min(o,l,c))>s)return!1}return!0}const Kr=new Ur,$r=new Ir,ta=new Ir,ea=new Ir;class na{constructor(t=new Ir,e=-1){this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;void 0!==e?n.copy(e):Kr.setFromPoints(t).getCenter(n);let i=0;for(let e=0,r=t.length;e<r;e++)i=Math.max(i,n.distanceToSquared(t[e]));return this.radius=Math.sqrt(i),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){ea.subVectors(t,this.center);const e=ea.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),n=.5*(t-this.radius);this.center.add(ea.multiplyScalar(n/t)),this.radius+=n}return this}union(t){return ta.subVectors(t.center,this.center).normalize().multiplyScalar(t.radius),this.expandByPoint($r.copy(t.center).add(ta)),this.expandByPoint($r.copy(t.center).sub(ta)),this}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const ia=new Ir,ra=new Ir,aa=new Ir,sa=new Ir,oa=new Ir,la=new Ir,ca=new Ir;class ha{constructor(t=new Ir,e=new Ir(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,ia)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=ia.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(ia.copy(this.direction).multiplyScalar(e).add(this.origin),ia.distanceToSquared(t))}distanceSqToSegment(t,e,n,i){ra.copy(t).add(e).multiplyScalar(.5),aa.copy(e).sub(t).normalize(),sa.copy(this.origin).sub(ra);const r=.5*t.distanceTo(e),a=-this.direction.dot(aa),s=sa.dot(this.direction),o=-sa.dot(aa),l=sa.lengthSq(),c=Math.abs(1-a*a);let h,u,d,p;if(c>0)if(h=a*o-s,u=a*s-o,p=r*c,h>=0)if(u>=-p)if(u<=p){const t=1/c;h*=t,u*=t,d=h*(h+a*u+2*s)+u*(a*h+u+2*o)+l}else u=r,h=Math.max(0,-(a*u+s)),d=-h*h+u*(u+2*o)+l;else u=-r,h=Math.max(0,-(a*u+s)),d=-h*h+u*(u+2*o)+l;else u<=-p?(h=Math.max(0,-(-a*r+s)),u=h>0?-r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l):u<=p?(h=0,u=Math.min(Math.max(-r,-o),r),d=u*(u+2*o)+l):(h=Math.max(0,-(a*r+s)),u=h>0?r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l);else u=a>0?-r:r,h=Math.max(0,-(a*u+s)),d=-h*h+u*(u+2*o)+l;return n&&n.copy(this.direction).multiplyScalar(h).add(this.origin),i&&i.copy(aa).multiplyScalar(u).add(ra),d}intersectSphere(t,e){ia.subVectors(t.center,this.origin);const n=ia.dot(this.direction),i=ia.dot(ia)-n*n,r=t.radius*t.radius;if(i>r)return null;const a=Math.sqrt(r-i),s=n-a,o=n+a;return s<0&&o<0?null:this.at(s<0?o:s,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return null===n?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);if(0===e)return!0;return t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,i,r,a,s,o;const l=1/this.direction.x,c=1/this.direction.y,h=1/this.direction.z,u=this.origin;return l>=0?(n=(t.min.x-u.x)*l,i=(t.max.x-u.x)*l):(n=(t.max.x-u.x)*l,i=(t.min.x-u.x)*l),c>=0?(r=(t.min.y-u.y)*c,a=(t.max.y-u.y)*c):(r=(t.max.y-u.y)*c,a=(t.min.y-u.y)*c),n>a||r>i?null:((r>n||n!=n)&&(n=r),(a<i||i!=i)&&(i=a),h>=0?(s=(t.min.z-u.z)*h,o=(t.max.z-u.z)*h):(s=(t.max.z-u.z)*h,o=(t.min.z-u.z)*h),n>o||s>i?null:((s>n||n!=n)&&(n=s),(o<i||i!=i)&&(i=o),i<0?null:this.at(n>=0?n:i,e)))}intersectsBox(t){return null!==this.intersectBox(t,ia)}intersectTriangle(t,e,n,i,r){oa.subVectors(e,t),la.subVectors(n,t),ca.crossVectors(oa,la);let a,s=this.direction.dot(ca);if(s>0){if(i)return null;a=1}else{if(!(s<0))return null;a=-1,s=-s}sa.subVectors(this.origin,t);const o=a*this.direction.dot(la.crossVectors(sa,la));if(o<0)return null;const l=a*this.direction.dot(oa.cross(sa));if(l<0)return null;if(o+l>s)return null;const c=-a*sa.dot(ca);return c<0?null:this.at(c/s,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class ua{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error(\"THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.\")}set(t,e,n,i,r,a,s,o,l,c,h,u,d,p,f,m){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=i,g[1]=r,g[5]=a,g[9]=s,g[13]=o,g[2]=l,g[6]=c,g[10]=h,g[14]=u,g[3]=d,g[7]=p,g[11]=f,g[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new ua).fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/da.setFromMatrixColumn(t,0).length(),r=1/da.setFromMatrixColumn(t,1).length(),a=1/da.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*r,e[5]=n[5]*r,e[6]=n[6]*r,e[7]=0,e[8]=n[8]*a,e[9]=n[9]*a,e[10]=n[10]*a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){t&&t.isEuler||console.error(\"THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.\");const e=this.elements,n=t.x,i=t.y,r=t.z,a=Math.cos(n),s=Math.sin(n),o=Math.cos(i),l=Math.sin(i),c=Math.cos(r),h=Math.sin(r);if(\"XYZ\"===t.order){const t=a*c,n=a*h,i=s*c,r=s*h;e[0]=o*c,e[4]=-o*h,e[8]=l,e[1]=n+i*l,e[5]=t-r*l,e[9]=-s*o,e[2]=r-t*l,e[6]=i+n*l,e[10]=a*o}else if(\"YXZ\"===t.order){const t=o*c,n=o*h,i=l*c,r=l*h;e[0]=t+r*s,e[4]=i*s-n,e[8]=a*l,e[1]=a*h,e[5]=a*c,e[9]=-s,e[2]=n*s-i,e[6]=r+t*s,e[10]=a*o}else if(\"ZXY\"===t.order){const t=o*c,n=o*h,i=l*c,r=l*h;e[0]=t-r*s,e[4]=-a*h,e[8]=i+n*s,e[1]=n+i*s,e[5]=a*c,e[9]=r-t*s,e[2]=-a*l,e[6]=s,e[10]=a*o}else if(\"ZYX\"===t.order){const t=a*c,n=a*h,i=s*c,r=s*h;e[0]=o*c,e[4]=i*l-n,e[8]=t*l+r,e[1]=o*h,e[5]=r*l+t,e[9]=n*l-i,e[2]=-l,e[6]=s*o,e[10]=a*o}else if(\"YZX\"===t.order){const t=a*o,n=a*l,i=s*o,r=s*l;e[0]=o*c,e[4]=r-t*h,e[8]=i*h+n,e[1]=h,e[5]=a*c,e[9]=-s*c,e[2]=-l*c,e[6]=n*h+i,e[10]=t-r*h}else if(\"XZY\"===t.order){const t=a*o,n=a*l,i=s*o,r=s*l;e[0]=o*c,e[4]=-h,e[8]=l*c,e[1]=t*h+r,e[5]=a*c,e[9]=n*h-i,e[2]=i*h-n,e[6]=s*c,e[10]=r*h+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(fa,t,ma)}lookAt(t,e,n){const i=this.elements;return ya.subVectors(t,e),0===ya.lengthSq()&&(ya.z=1),ya.normalize(),ga.crossVectors(n,ya),0===ga.lengthSq()&&(1===Math.abs(n.z)?ya.x+=1e-4:ya.z+=1e-4,ya.normalize(),ga.crossVectors(n,ya)),ga.normalize(),va.crossVectors(ya,ga),i[0]=ga.x,i[4]=va.x,i[8]=ya.x,i[1]=ga.y,i[5]=va.y,i[9]=ya.y,i[2]=ga.z,i[6]=va.z,i[10]=ya.z,this}multiply(t,e){return void 0!==e?(console.warn(\"THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.\"),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,a=n[0],s=n[4],o=n[8],l=n[12],c=n[1],h=n[5],u=n[9],d=n[13],p=n[2],f=n[6],m=n[10],g=n[14],v=n[3],y=n[7],x=n[11],_=n[15],M=i[0],w=i[4],b=i[8],S=i[12],T=i[1],E=i[5],A=i[9],L=i[13],C=i[2],R=i[6],P=i[10],D=i[14],N=i[3],I=i[7],O=i[11],z=i[15];return r[0]=a*M+s*T+o*C+l*N,r[4]=a*w+s*E+o*R+l*I,r[8]=a*b+s*A+o*P+l*O,r[12]=a*S+s*L+o*D+l*z,r[1]=c*M+h*T+u*C+d*N,r[5]=c*w+h*E+u*R+d*I,r[9]=c*b+h*A+u*P+d*O,r[13]=c*S+h*L+u*D+d*z,r[2]=p*M+f*T+m*C+g*N,r[6]=p*w+f*E+m*R+g*I,r[10]=p*b+f*A+m*P+g*O,r[14]=p*S+f*L+m*D+g*z,r[3]=v*M+y*T+x*C+_*N,r[7]=v*w+y*E+x*R+_*I,r[11]=v*b+y*A+x*P+_*O,r[15]=v*S+y*L+x*D+_*z,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],r=t[12],a=t[1],s=t[5],o=t[9],l=t[13],c=t[2],h=t[6],u=t[10],d=t[14];return t[3]*(+r*o*h-i*l*h-r*s*u+n*l*u+i*s*d-n*o*d)+t[7]*(+e*o*d-e*l*u+r*a*u-i*a*d+i*l*c-r*o*c)+t[11]*(+e*l*h-e*s*d-r*a*h+n*a*d+r*s*c-n*l*c)+t[15]*(-i*s*c-e*o*h+e*s*u+i*a*h-n*a*u+n*o*c)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],s=t[5],o=t[6],l=t[7],c=t[8],h=t[9],u=t[10],d=t[11],p=t[12],f=t[13],m=t[14],g=t[15],v=h*m*l-f*u*l+f*o*d-s*m*d-h*o*g+s*u*g,y=p*u*l-c*m*l-p*o*d+a*m*d+c*o*g-a*u*g,x=c*f*l-p*h*l+p*s*d-a*f*d-c*s*g+a*h*g,_=p*h*o-c*f*o-p*s*u+a*f*u+c*s*m-a*h*m,M=e*v+n*y+i*x+r*_;if(0===M)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const w=1/M;return t[0]=v*w,t[1]=(f*u*r-h*m*r-f*i*d+n*m*d+h*i*g-n*u*g)*w,t[2]=(s*m*r-f*o*r+f*i*l-n*m*l-s*i*g+n*o*g)*w,t[3]=(h*o*r-s*u*r-h*i*l+n*u*l+s*i*d-n*o*d)*w,t[4]=y*w,t[5]=(c*m*r-p*u*r+p*i*d-e*m*d-c*i*g+e*u*g)*w,t[6]=(p*o*r-a*m*r-p*i*l+e*m*l+a*i*g-e*o*g)*w,t[7]=(a*u*r-c*o*r+c*i*l-e*u*l-a*i*d+e*o*d)*w,t[8]=x*w,t[9]=(p*h*r-c*f*r-p*n*d+e*f*d+c*n*g-e*h*g)*w,t[10]=(a*f*r-p*s*r+p*n*l-e*f*l-a*n*g+e*s*g)*w,t[11]=(c*s*r-a*h*r-c*n*l+e*h*l+a*n*d-e*s*d)*w,t[12]=_*w,t[13]=(c*f*i-p*h*i+p*n*u-e*f*u-c*n*m+e*h*m)*w,t[14]=(p*s*i-a*f*i-p*n*o+e*f*o+a*n*m-e*s*m)*w,t[15]=(a*h*i-c*s*i+c*n*o-e*h*o-a*n*u+e*s*u)*w,this}scale(t){const e=this.elements,n=t.x,i=t.y,r=t.z;return e[0]*=n,e[4]*=i,e[8]*=r,e[1]*=n,e[5]*=i,e[9]*=r,e[2]*=n,e[6]*=i,e[10]*=r,e[3]*=n,e[7]*=i,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements;return Math.sqrt(Math.max(t[0]*t[0]+t[1]*t[1]+t[2]*t[2],t[4]*t[4]+t[5]*t[5]+t[6]*t[6],t[8]*t[8]+t[9]*t[9]+t[10]*t[10]))}makeTranslation(t,e,n){return this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),r=1-n,a=t.x,s=t.y,o=t.z,l=r*a,c=r*s;return this.set(l*a+n,l*s-i*o,l*o+i*s,0,l*s+i*o,c*s+n,c*o-i*a,0,l*o-i*s,c*o+i*a,r*o*o+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,r,a){return this.set(1,n,r,0,t,1,a,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,r=e._x,a=e._y,s=e._z,o=e._w,l=r+r,c=a+a,h=s+s,u=r*l,d=r*c,p=r*h,f=a*c,m=a*h,g=s*h,v=o*l,y=o*c,x=o*h,_=n.x,M=n.y,w=n.z;return i[0]=(1-(f+g))*_,i[1]=(d+x)*_,i[2]=(p-y)*_,i[3]=0,i[4]=(d-x)*M,i[5]=(1-(u+g))*M,i[6]=(m+v)*M,i[7]=0,i[8]=(p+y)*w,i[9]=(m-v)*w,i[10]=(1-(u+f))*w,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let r=da.set(i[0],i[1],i[2]).length();const a=da.set(i[4],i[5],i[6]).length(),s=da.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),t.x=i[12],t.y=i[13],t.z=i[14],pa.copy(this);const o=1/r,l=1/a,c=1/s;return pa.elements[0]*=o,pa.elements[1]*=o,pa.elements[2]*=o,pa.elements[4]*=l,pa.elements[5]*=l,pa.elements[6]*=l,pa.elements[8]*=c,pa.elements[9]*=c,pa.elements[10]*=c,e.setFromRotationMatrix(pa),n.x=r,n.y=a,n.z=s,this}makePerspective(t,e,n,i,r,a){void 0===a&&console.warn(\"THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.\");const s=this.elements,o=2*r/(n-i),l=(e+t)/(e-t),c=(n+i)/(n-i),h=-(a+r)/(a-r),u=-2*a*r/(a-r);return s[0]=2*r/(e-t),s[4]=0,s[8]=l,s[12]=0,s[1]=0,s[5]=o,s[9]=c,s[13]=0,s[2]=0,s[6]=0,s[10]=h,s[14]=u,s[3]=0,s[7]=0,s[11]=-1,s[15]=0,this}makeOrthographic(t,e,n,i,r,a){const s=this.elements,o=1/(e-t),l=1/(n-i),c=1/(a-r),h=(e+t)*o,u=(n+i)*l,d=(a+r)*c;return s[0]=2*o,s[4]=0,s[8]=0,s[12]=-h,s[1]=0,s[5]=2*l,s[9]=0,s[13]=-u,s[2]=0,s[6]=0,s[10]=-2*c,s[14]=-d,s[3]=0,s[7]=0,s[11]=0,s[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<16;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}ua.prototype.isMatrix4=!0;const da=new Ir,pa=new ua,fa=new Ir(0,0,0),ma=new Ir(1,1,1),ga=new Ir,va=new Ir,ya=new Ir,xa=new ua,_a=new Nr;class Ma{constructor(t=0,e=0,n=0,i=Ma.DefaultOrder){this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,r=i[0],a=i[4],s=i[8],o=i[1],l=i[5],c=i[9],h=i[2],u=i[6],d=i[10];switch(e){case\"XYZ\":this._y=Math.asin(xr(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(-c,d),this._z=Math.atan2(-a,r)):(this._x=Math.atan2(u,l),this._z=0);break;case\"YXZ\":this._x=Math.asin(-xr(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(s,d),this._z=Math.atan2(o,l)):(this._y=Math.atan2(-h,r),this._z=0);break;case\"ZXY\":this._x=Math.asin(xr(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(-h,d),this._z=Math.atan2(-a,l)):(this._y=0,this._z=Math.atan2(o,r));break;case\"ZYX\":this._y=Math.asin(-xr(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(u,d),this._z=Math.atan2(o,r)):(this._x=0,this._z=Math.atan2(-a,l));break;case\"YZX\":this._z=Math.asin(xr(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-c,l),this._y=Math.atan2(-h,r)):(this._x=0,this._y=Math.atan2(s,d));break;case\"XZY\":this._z=Math.asin(-xr(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(u,l),this._y=Math.atan2(s,r)):(this._x=Math.atan2(-c,d),this._y=0);break;default:console.warn(\"THREE.Euler: .setFromRotationMatrix() encountered an unknown order: \"+e)}return this._order=e,!0===n&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return xa.makeRotationFromQuaternion(t),this.setFromRotationMatrix(xa,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return _a.setFromEuler(this),this.setFromQuaternion(_a,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}toVector3(t){return t?t.set(this._x,this._y,this._z):new Ir(this._x,this._y,this._z)}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}Ma.prototype.isEuler=!0,Ma.DefaultOrder=\"XYZ\",Ma.RotationOrders=[\"XYZ\",\"YZX\",\"ZXY\",\"XZY\",\"YXZ\",\"ZYX\"];class wa{constructor(){this.mask=1}set(t){this.mask=1<<t|0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return 0!=(this.mask&t.mask)}}let ba=0;const Sa=new Ir,Ta=new Nr,Ea=new ua,Aa=new Ir,La=new Ir,Ca=new Ir,Ra=new Nr,Pa=new Ir(1,0,0),Da=new Ir(0,1,0),Na=new Ir(0,0,1),Ia={type:\"added\"},Oa={type:\"removed\"};class za extends fr{constructor(){super(),Object.defineProperty(this,\"id\",{value:ba++}),this.uuid=yr(),this.name=\"\",this.type=\"Object3D\",this.parent=null,this.children=[],this.up=za.DefaultUp.clone();const t=new Ir,e=new Ma,n=new Nr,i=new Ir(1,1,1);e._onChange((function r(){n.setFromEuler(e,!1)})),n._onChange((function a(){e.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new ua},normalMatrix:{value:new Sr}}),this.matrix=new ua,this.matrixWorld=new ua,this.matrixAutoUpdate=za.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new wa,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return Ta.setFromAxisAngle(t,e),this.quaternion.multiply(Ta),this}rotateOnWorldAxis(t,e){return Ta.setFromAxisAngle(t,e),this.quaternion.premultiply(Ta),this}rotateX(t){return this.rotateOnAxis(Pa,t)}rotateY(t){return this.rotateOnAxis(Da,t)}rotateZ(t){return this.rotateOnAxis(Na,t)}translateOnAxis(t,e){return Sa.copy(t).applyQuaternion(this.quaternion),this.position.add(Sa.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(Pa,t)}translateY(t){return this.translateOnAxis(Da,t)}translateZ(t){return this.translateOnAxis(Na,t)}localToWorld(t){return t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return t.applyMatrix4(Ea.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?Aa.copy(t):Aa.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),La.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Ea.lookAt(La,Aa,this.up):Ea.lookAt(Aa,La,this.up),this.quaternion.setFromRotationMatrix(Ea),i&&(Ea.extractRotation(i.matrixWorld),Ta.setFromRotationMatrix(Ea),this.quaternion.premultiply(Ta.invert()))}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error(\"THREE.Object3D.add: object can't be added as a child of itself.\",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(Ia)):console.error(\"THREE.Object3D.add: object not an instance of THREE.Object3D.\",t),this)}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return-1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(Oa)),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){for(let t=0;t<this.children.length;t++){const e=this.children[t];e.parent=null,e.dispatchEvent(Oa)}return this.children.length=0,this}attach(t){return this.updateWorldMatrix(!0,!1),Ea.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),Ea.multiply(t.parent.matrixWorld)),t.applyMatrix4(Ea),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty(\"id\",t)}getObjectByName(t){return this.getObjectByProperty(\"name\",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const i=this.children[n].getObjectByProperty(t,e);if(void 0!==i)return i}}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(La,t,Ca),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(La,Ra,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(!0===t&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e){const t=this.children;for(let e=0,n=t.length;e<n;e++)t[e].updateWorldMatrix(!1,!0)}}toJSON(t){const e=void 0===t||\"string\"==typeof t,n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},n.metadata={version:4.5,type:\"Object\",generator:\"Object3D.toJSON\"});const i={};function r(e,n){return void 0===e[n.uuid]&&(e[n.uuid]=n.toJSON(t)),n.uuid}if(i.uuid=this.uuid,i.type=this.type,\"\"!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),\"{}\"!==JSON.stringify(this.userData)&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type=\"InstancedMesh\",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(i.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const n=e.shapes;if(Array.isArray(n))for(let e=0,i=n.length;e<i;e++){r(t.shapes,n[e])}else r(t.shapes,n)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let n=0,i=this.material.length;n<i;n++)e.push(r(t.materials,this.material[n]));i.material=e}else i.material=r(t.materials,this.material);if(this.children.length>0){i.children=[];for(let e=0;e<this.children.length;e++)i.children.push(this.children[e].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let e=0;e<this.animations.length;e++){i.animations.push(r(t.animations,this.animations[e]))}}if(e){const e=a(t.geometries),i=a(t.materials),r=a(t.textures),s=a(t.images),o=a(t.shapes),l=a(t.skeletons),c=a(t.animations);e.length>0&&(n.geometries=e),i.length>0&&(n.materials=i),r.length>0&&(n.textures=r),s.length>0&&(n.images=s),o.length>0&&(n.shapes=o),l.length>0&&(n.skeletons=l),c.length>0&&(n.animations=c)}return n.object=i,n;function a(t){const e=[];for(const n in t){const i=t[n];delete i.metadata,e.push(i)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){this.add(t.children[e].clone())}return this}}za.DefaultUp=new Ir(0,1,0),za.DefaultMatrixAutoUpdate=!0,za.prototype.isObject3D=!0;const Ua=new Ir,Fa=new Ir,Ba=new Ir,Ha=new Ir,ka=new Ir,Ga=new Ir,Va=new Ir,Wa=new Ir,ja=new Ir,qa=new Ir;class Xa{constructor(t=new Ir,e=new Ir,n=new Ir){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e),Ua.subVectors(t,e),i.cross(Ua);const r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}static getBarycoord(t,e,n,i,r){Ua.subVectors(i,e),Fa.subVectors(n,e),Ba.subVectors(t,e);const a=Ua.dot(Ua),s=Ua.dot(Fa),o=Ua.dot(Ba),l=Fa.dot(Fa),c=Fa.dot(Ba),h=a*l-s*s;if(0===h)return r.set(-2,-1,-1);const u=1/h,d=(l*o-s*c)*u,p=(a*c-s*o)*u;return r.set(1-d-p,p,d)}static containsPoint(t,e,n,i){return this.getBarycoord(t,e,n,i,Ha),Ha.x>=0&&Ha.y>=0&&Ha.x+Ha.y<=1}static getUV(t,e,n,i,r,a,s,o){return this.getBarycoord(t,e,n,i,Ha),o.set(0,0),o.addScaledVector(r,Ha.x),o.addScaledVector(a,Ha.y),o.addScaledVector(s,Ha.z),o}static isFrontFacing(t,e,n,i){return Ua.subVectors(n,e),Fa.subVectors(t,e),Ua.cross(Fa).dot(i)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return Ua.subVectors(this.c,this.b),Fa.subVectors(this.a,this.b),.5*Ua.cross(Fa).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Xa.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return Xa.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,n,i,r){return Xa.getUV(t,this.a,this.b,this.c,e,n,i,r)}containsPoint(t){return Xa.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Xa.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,r=this.c;let a,s;ka.subVectors(i,n),Ga.subVectors(r,n),Wa.subVectors(t,n);const o=ka.dot(Wa),l=Ga.dot(Wa);if(o<=0&&l<=0)return e.copy(n);ja.subVectors(t,i);const c=ka.dot(ja),h=Ga.dot(ja);if(c>=0&&h<=c)return e.copy(i);const u=o*h-c*l;if(u<=0&&o>=0&&c<=0)return a=o/(o-c),e.copy(n).addScaledVector(ka,a);qa.subVectors(t,r);const d=ka.dot(qa),p=Ga.dot(qa);if(p>=0&&d<=p)return e.copy(r);const f=d*l-o*p;if(f<=0&&l>=0&&p<=0)return s=l/(l-p),e.copy(n).addScaledVector(Ga,s);const m=c*p-d*h;if(m<=0&&h-c>=0&&d-p>=0)return Va.subVectors(r,i),s=(h-c)/(h-c+(d-p)),e.copy(i).addScaledVector(Va,s);const g=1/(m+f+u);return a=f*g,s=u*g,e.copy(n).addScaledVector(ka,a).addScaledVector(Ga,s)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let Ya=0;class Za extends fr{constructor(){super(),Object.defineProperty(this,\"id\",{value:Ya++}),this.uuid=yr(),this.name=\"\",this.type=\"Material\",this.fog=!0,this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=Ni,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=hr,this.stencilZFail=hr,this.stencilZPass=hr,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0}onBuild(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const n=t[e];if(void 0===n){console.warn(\"THREE.Material: '\"+e+\"' parameter is undefined.\");continue}if(\"shading\"===e){console.warn(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\"),this.flatShading=1===n;continue}const i=this[e];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]=n:console.warn(\"THREE.\"+this.type+\": '\"+e+\"' is not a property of this material.\")}}toJSON(t){const e=void 0===t||\"string\"==typeof t;e&&(t={textures:{},images:{}});const n={metadata:{version:4.5,type:\"Material\",generator:\"Material.toJSON\"}};function i(t){const e=[];for(const n in t){const i=t[n];delete i.metadata,e.push(i)}return e}if(n.uuid=this.uuid,n.type=this.type,\"\"!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(n.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(n.specularIntensity=this.specularIntensity),this.specularTint&&this.specularTint.isColor&&(n.specularTint=this.specularTint.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularTintMap&&this.specularTintMap.isTexture&&(n.specularTintMap=this.specularTintMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(n.combine=this.combine)),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(n.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.transmission&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),void 0!==this.thickness&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),void 0!==this.attenuationDistance&&(n.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationTint&&(n.attenuationTint=this.attenuationTint.getHex()),void 0!==this.size&&(n.size=this.size),null!==this.shadowSide&&(n.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(n.blending=this.blending),0!==this.side&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.colorWrite=this.colorWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(n.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),\"round\"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),\"round\"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(n.flatShading=this.flatShading),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),\"{}\"!==JSON.stringify(this.userData)&&(n.userData=this.userData),e){const e=i(t.textures),r=i(t.images);e.length>0&&(n.textures=e),r.length>0&&(n.images=r)}return n}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name,this.fog=t.fog,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(null!==e){const t=e.length;n=new Array(t);for(let i=0;i!==t;++i)n[i]=e[i].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:\"dispose\"})}set needsUpdate(t){!0===t&&this.version++}}Za.prototype.isMaterial=!0;const Ja={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Qa={h:0,s:0,l:0},Ka={h:0,s:0,l:0};function $a(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+6*(e-t)*(2/3-n):t}function ts(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function es(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}class ns{constructor(t,e,n){return void 0===e&&void 0===n?this.set(t):this.setRGB(t,e,n)}set(t){return t&&t.isColor?this.copy(t):\"number\"==typeof t?this.setHex(t):\"string\"==typeof t&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this}setRGB(t,e,n){return this.r=t,this.g=e,this.b=n,this}setHSL(t,e,n){if(t=(function i(t,e){return(t%e+e)%e})(t,1),e=xr(e,0,1),n=xr(n,0,1),0===e)this.r=this.g=this.b=n;else{const i=n<=.5?n*(1+e):n+e-n*e,r=2*n-i;this.r=$a(r,i,t+1/3),this.g=$a(r,i,t),this.b=$a(r,i,t-1/3)}return this}setStyle(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn(\"THREE.Color: Alpha component of \"+t+\" will be ignored.\")}let n;if(n=/^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec(t)){let t;const i=n[2];switch(n[1]){case\"rgb\":case\"rgba\":if(t=/^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(i))return this.r=Math.min(255,parseInt(t[1],10))/255,this.g=Math.min(255,parseInt(t[2],10))/255,this.b=Math.min(255,parseInt(t[3],10))/255,e(t[4]),this;if(t=/^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(i))return this.r=Math.min(100,parseInt(t[1],10))/100,this.g=Math.min(100,parseInt(t[2],10))/100,this.b=Math.min(100,parseInt(t[3],10))/100,e(t[4]),this;break;case\"hsl\":case\"hsla\":if(t=/^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(i)){const n=parseFloat(t[1])/360,i=parseInt(t[2],10)/100,r=parseInt(t[3],10)/100;return e(t[4]),this.setHSL(n,i,r)}}}else if(n=/^\\#([A-Fa-f\\d]+)$/.exec(t)){const t=n[1],e=t.length;if(3===e)return this.r=parseInt(t.charAt(0)+t.charAt(0),16)/255,this.g=parseInt(t.charAt(1)+t.charAt(1),16)/255,this.b=parseInt(t.charAt(2)+t.charAt(2),16)/255,this;if(6===e)return this.r=parseInt(t.charAt(0)+t.charAt(1),16)/255,this.g=parseInt(t.charAt(2)+t.charAt(3),16)/255,this.b=parseInt(t.charAt(4)+t.charAt(5),16)/255,this}return t&&t.length>0?this.setColorName(t):this}setColorName(t){const e=Ja[t.toLowerCase()];return void 0!==e?this.setHex(e):console.warn(\"THREE.Color: Unknown color \"+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copyGammaToLinear(t,e=2){return this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this}copyLinearToGamma(t,e=2){const n=e>0?1/e:1;return this.r=Math.pow(t.r,n),this.g=Math.pow(t.g,n),this.b=Math.pow(t.b,n),this}convertGammaToLinear(t){return this.copyGammaToLinear(this,t),this}convertLinearToGamma(t){return this.copyLinearToGamma(this,t),this}copySRGBToLinear(t){return this.r=ts(t.r),this.g=ts(t.g),this.b=ts(t.b),this}copyLinearToSRGB(t){return this.r=es(t.r),this.g=es(t.g),this.b=es(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0}getHexString(){return(\"000000\"+this.getHex().toString(16)).slice(-6)}getHSL(t){const e=this.r,n=this.g,i=this.b,r=Math.max(e,n,i),a=Math.min(e,n,i);let s,o;const l=(a+r)/2;if(a===r)s=0,o=0;else{const t=r-a;switch(o=l<=.5?t/(r+a):t/(2-r-a),r){case e:s=(n-i)/t+(n<i?6:0);break;case n:s=(i-e)/t+2;break;case i:s=(e-n)/t+4}s/=6}return t.h=s,t.s=o,t.l=l,t}getStyle(){return\"rgb(\"+(255*this.r|0)+\",\"+(255*this.g|0)+\",\"+(255*this.b|0)+\")\"}offsetHSL(t,e,n){return this.getHSL(Qa),Qa.h+=t,Qa.s+=e,Qa.l+=n,this.setHSL(Qa.h,Qa.s,Qa.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(Qa),t.getHSL(Ka);const n=_r(Qa.h,Ka.h,e),i=_r(Qa.s,Ka.s,e),r=_r(Qa.l,Ka.l,e);return this.setHSL(n,i,r),this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),!0===t.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}ns.NAMES=Ja,ns.prototype.isColor=!0,ns.prototype.r=1,ns.prototype.g=1,ns.prototype.b=1;class is extends Za{constructor(t){super(),this.type=\"MeshBasicMaterial\",this.color=new ns(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}is.prototype.isMeshBasicMaterial=!0;const rs=new Ir,as=new br;class ss{constructor(t,e,n){if(Array.isArray(t))throw new TypeError(\"THREE.BufferAttribute: array should be a Typed Array.\");this.name=\"\",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===n,this.usage=ur,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}copyColorsArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn(\"THREE.BufferAttribute.copyColorsArray(): color is undefined\",i),r=new ns),e[n++]=r.r,e[n++]=r.g,e[n++]=r.b}return this}copyVector2sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn(\"THREE.BufferAttribute.copyVector2sArray(): vector is undefined\",i),r=new br),e[n++]=r.x,e[n++]=r.y}return this}copyVector3sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn(\"THREE.BufferAttribute.copyVector3sArray(): vector is undefined\",i),r=new Ir),e[n++]=r.x,e[n++]=r.y,e[n++]=r.z}return this}copyVector4sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn(\"THREE.BufferAttribute.copyVector4sArray(): vector is undefined\",i),r=new Rr),e[n++]=r.x,e[n++]=r.y,e[n++]=r.z,e[n++]=r.w}return this}applyMatrix3(t){if(2===this.itemSize)for(let e=0,n=this.count;e<n;e++)as.fromBufferAttribute(this,e),as.applyMatrix3(t),this.setXY(e,as.x,as.y);else if(3===this.itemSize)for(let e=0,n=this.count;e<n;e++)rs.fromBufferAttribute(this,e),rs.applyMatrix3(t),this.setXYZ(e,rs.x,rs.y,rs.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)rs.x=this.getX(e),rs.y=this.getY(e),rs.z=this.getZ(e),rs.applyMatrix4(t),this.setXYZ(e,rs.x,rs.y,rs.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)rs.x=this.getX(e),rs.y=this.getY(e),rs.z=this.getZ(e),rs.applyNormalMatrix(t),this.setXYZ(e,rs.x,rs.y,rs.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)rs.x=this.getX(e),rs.y=this.getY(e),rs.z=this.getZ(e),rs.transformDirection(t),this.setXYZ(e,rs.x,rs.y,rs.z);return this}set(t,e=0){return this.array.set(t,e),this}getX(t){return this.array[t*this.itemSize]}setX(t,e){return this.array[t*this.itemSize]=e,this}getY(t){return this.array[t*this.itemSize+1]}setY(t,e){return this.array[t*this.itemSize+1]=e,this}getZ(t){return this.array[t*this.itemSize+2]}setZ(t,e){return this.array[t*this.itemSize+2]=e,this}getW(t){return this.array[t*this.itemSize+3]}setW(t,e){return this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return this.array[(t*=this.itemSize)+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return this.array[(t*=this.itemSize)+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,r){return this.array[(t*=this.itemSize)+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return\"\"!==this.name&&(t.name=this.name),this.usage!==ur&&(t.usage=this.usage),0===this.updateRange.offset&&-1===this.updateRange.count||(t.updateRange=this.updateRange),t}}ss.prototype.isBufferAttribute=!0;class os extends ss{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class ls extends ss{constructor(t,e,n){super(new Uint32Array(t),e,n)}}(class extends ss{constructor(t,e,n){super(new Uint16Array(t),e,n)}}).prototype.isFloat16BufferAttribute=!0;class cs extends ss{constructor(t,e,n){super(new Float32Array(t),e,n)}}function hs(t){if(0===t.length)return-1/0;let e=t[0];for(let n=1,i=t.length;n<i;++n)t[n]>e&&(e=t[n]);return e}let us=0;const ds=new ua,ps=new za,fs=new Ir,ms=new Ur,gs=new Ur,vs=new Ir;class ys extends fr{constructor(){super(),Object.defineProperty(this,\"id\",{value:us++}),this.uuid=yr(),this.name=\"\",this.type=\"BufferGeometry\",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return this.index=Array.isArray(t)?new(hs(t)>65535?ls:os)(t,1):t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(void 0!==n){const e=(new Sr).getNormalMatrix(t);n.applyNormalMatrix(e),n.needsUpdate=!0}const i=this.attributes.tangent;return void 0!==i&&(i.transformDirection(t),i.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(t){return ds.makeRotationFromQuaternion(t),this.applyMatrix4(ds),this}rotateX(t){return ds.makeRotationX(t),this.applyMatrix4(ds),this}rotateY(t){return ds.makeRotationY(t),this.applyMatrix4(ds),this}rotateZ(t){return ds.makeRotationZ(t),this.applyMatrix4(ds),this}translate(t,e,n){return ds.makeTranslation(t,e,n),this.applyMatrix4(ds),this}scale(t,e,n){return ds.makeScale(t,e,n),this.applyMatrix4(ds),this}lookAt(t){return ps.lookAt(t),ps.updateMatrix(),this.applyMatrix4(ps.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(fs).negate(),this.translate(fs.x,fs.y,fs.z),this}setFromPoints(t){const e=[];for(let n=0,i=t.length;n<i;n++){const i=t[n];e.push(i.x,i.y,i.z||0)}return this.setAttribute(\"position\",new cs(e,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new Ur);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".',this),void this.boundingBox.set(new Ir(-1/0,-1/0,-1/0),new Ir(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){ms.setFromBufferAttribute(e[t]),this.morphTargetsRelative?(vs.addVectors(this.boundingBox.min,ms.min),this.boundingBox.expandByPoint(vs),vs.addVectors(this.boundingBox.max,ms.max),this.boundingBox.expandByPoint(vs)):(this.boundingBox.expandByPoint(ms.min),this.boundingBox.expandByPoint(ms.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new na);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".',this),void this.boundingSphere.set(new Ir,1/0);if(t){const n=this.boundingSphere.center;if(ms.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){gs.setFromBufferAttribute(e[t]),this.morphTargetsRelative?(vs.addVectors(ms.min,gs.min),ms.expandByPoint(vs),vs.addVectors(ms.max,gs.max),ms.expandByPoint(vs)):(ms.expandByPoint(gs.min),ms.expandByPoint(gs.max))}ms.getCenter(n);let i=0;for(let e=0,r=t.count;e<r;e++)vs.fromBufferAttribute(t,e),i=Math.max(i,n.distanceToSquared(vs));if(e)for(let r=0,a=e.length;r<a;r++){const a=e[r],s=this.morphTargetsRelative;for(let e=0,r=a.count;e<r;e++)vs.fromBufferAttribute(a,e),s&&(fs.fromBufferAttribute(t,e),vs.add(fs)),i=Math.max(i,n.distanceToSquared(vs))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.',this)}}computeFaceNormals(){}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error(\"THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)\");const n=t.array,i=e.position.array,r=e.normal.array,a=e.uv.array,s=i.length/3;void 0===e.tangent&&this.setAttribute(\"tangent\",new ss(new Float32Array(4*s),4));const o=e.tangent.array,l=[],c=[];for(let t=0;t<s;t++)l[t]=new Ir,c[t]=new Ir;const h=new Ir,u=new Ir,d=new Ir,p=new br,f=new br,m=new br,g=new Ir,v=new Ir;function y(t,e,n){h.fromArray(i,3*t),u.fromArray(i,3*e),d.fromArray(i,3*n),p.fromArray(a,2*t),f.fromArray(a,2*e),m.fromArray(a,2*n),u.sub(h),d.sub(h),f.sub(p),m.sub(p);const r=1/(f.x*m.y-m.x*f.y);isFinite(r)&&(g.copy(u).multiplyScalar(m.y).addScaledVector(d,-f.y).multiplyScalar(r),v.copy(d).multiplyScalar(f.x).addScaledVector(u,-m.x).multiplyScalar(r),l[t].add(g),l[e].add(g),l[n].add(g),c[t].add(v),c[e].add(v),c[n].add(v))}let x=this.groups;0===x.length&&(x=[{start:0,count:n.length}]);for(let t=0,e=x.length;t<e;++t){const e=x[t],i=e.start;for(let t=i,r=i+e.count;t<r;t+=3)y(n[t+0],n[t+1],n[t+2])}const _=new Ir,M=new Ir,w=new Ir,b=new Ir;function S(t){w.fromArray(r,3*t),b.copy(w);const e=l[t];_.copy(e),_.sub(w.multiplyScalar(w.dot(e))).normalize(),M.crossVectors(b,e);const n=M.dot(c[t])<0?-1:1;o[4*t]=_.x,o[4*t+1]=_.y,o[4*t+2]=_.z,o[4*t+3]=n}for(let t=0,e=x.length;t<e;++t){const e=x[t],i=e.start;for(let t=i,r=i+e.count;t<r;t+=3)S(n[t+0]),S(n[t+1]),S(n[t+2])}}computeVertexNormals(){const t=this.index,e=this.getAttribute(\"position\");if(void 0!==e){let n=this.getAttribute(\"normal\");if(void 0===n)n=new ss(new Float32Array(3*e.count),3),this.setAttribute(\"normal\",n);else for(let t=0,e=n.count;t<e;t++)n.setXYZ(t,0,0,0);const i=new Ir,r=new Ir,a=new Ir,s=new Ir,o=new Ir,l=new Ir,c=new Ir,h=new Ir;if(t)for(let u=0,d=t.count;u<d;u+=3){const d=t.getX(u+0),p=t.getX(u+1),f=t.getX(u+2);i.fromBufferAttribute(e,d),r.fromBufferAttribute(e,p),a.fromBufferAttribute(e,f),c.subVectors(a,r),h.subVectors(i,r),c.cross(h),s.fromBufferAttribute(n,d),o.fromBufferAttribute(n,p),l.fromBufferAttribute(n,f),s.add(c),o.add(c),l.add(c),n.setXYZ(d,s.x,s.y,s.z),n.setXYZ(p,o.x,o.y,o.z),n.setXYZ(f,l.x,l.y,l.z)}else for(let t=0,s=e.count;t<s;t+=3)i.fromBufferAttribute(e,t+0),r.fromBufferAttribute(e,t+1),a.fromBufferAttribute(e,t+2),c.subVectors(a,r),h.subVectors(i,r),c.cross(h),n.setXYZ(t+0,c.x,c.y,c.z),n.setXYZ(t+1,c.x,c.y,c.z),n.setXYZ(t+2,c.x,c.y,c.z);this.normalizeNormals(),n.needsUpdate=!0}}merge(t,e){if(!t||!t.isBufferGeometry)return void console.error(\"THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.\",t);void 0===e&&(e=0,console.warn(\"THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.\"));const n=this.attributes;for(const i in n){if(void 0===t.attributes[i])continue;const r=n[i].array,a=t.attributes[i],s=a.array,o=a.itemSize*e,l=Math.min(s.length,r.length-o);for(let t=0,e=o;t<l;t++,e++)r[e]=s[t]}return this}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)vs.fromBufferAttribute(t,e),vs.normalize(),t.setXYZ(e,vs.x,vs.y,vs.z)}toNonIndexed(){function t(t,e){const n=t.array,i=t.itemSize,r=t.normalized,a=new n.constructor(e.length*i);let s=0,o=0;for(let r=0,l=e.length;r<l;r++){s=t.isInterleavedBufferAttribute?e[r]*t.data.stride+t.offset:e[r]*i;for(let t=0;t<i;t++)a[o++]=n[s++]}return new ss(a,i,r)}if(null===this.index)return console.warn(\"THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.\"),this;const e=new ys,n=this.index.array,i=this.attributes;for(const r in i){const a=t(i[r],n);e.setAttribute(r,a)}const r=this.morphAttributes;for(const i in r){const a=[],s=r[i];for(let e=0,i=s.length;e<i;e++){const i=t(s[e],n);a.push(i)}e.morphAttributes[i]=a}e.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let t=0,n=a.length;t<n;t++){const n=a[t];e.addGroup(n.start,n.count,n.materialIndex)}return e}toJSON(){const t={metadata:{version:4.5,type:\"BufferGeometry\",generator:\"BufferGeometry.toJSON\"}};if(t.uuid=this.uuid,t.type=this.type,\"\"!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const n in e)void 0!==e[n]&&(t[n]=e[n]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const e in n){t.data.attributes[e]=n[e].toJSON(t.data)}const i={};let r=!1;for(const e in this.morphAttributes){const n=this.morphAttributes[e],a=[];for(let e=0,i=n.length;e<i;e++){a.push(n[e].toJSON(t.data))}a.length>0&&(i[e]=a,r=!0)}r&&(t.data.morphAttributes=i,t.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(t.data.groups=JSON.parse(JSON.stringify(a)));const s=this.boundingSphere;return null!==s&&(t.data.boundingSphere={center:s.center.toArray(),radius:s.radius}),t}clone(){return(new ys).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;null!==n&&this.setIndex(n.clone(e));const i=t.attributes;for(const t in i){this.setAttribute(t,i[t].clone(e))}const r=t.morphAttributes;for(const t in r){const n=[],i=r[t];for(let t=0,r=i.length;t<r;t++)n.push(i[t].clone(e));this.morphAttributes[t]=n}this.morphTargetsRelative=t.morphTargetsRelative;const a=t.groups;for(let t=0,e=a.length;t<e;t++){const e=a[t];this.addGroup(e.start,e.count,e.materialIndex)}const s=t.boundingBox;null!==s&&(this.boundingBox=s.clone());const o=t.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:\"dispose\"})}}ys.prototype.isBufferGeometry=!0;const xs=new ua,_s=new ha,Ms=new na,ws=new Ir,bs=new Ir,Ss=new Ir,Ts=new Ir,Es=new Ir,As=new Ir,Ls=new Ir,Cs=new Ir,Rs=new Ir,Ps=new br,Ds=new br,Ns=new br,Is=new Ir,Os=new Ir;class zs extends za{constructor(t=new ys,e=new is){super(),this.type=\"Mesh\",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error(\"THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\")}}raycast(t,e){const n=this.geometry,i=this.material,r=this.matrixWorld;if(void 0===i)return;if(null===n.boundingSphere&&n.computeBoundingSphere(),Ms.copy(n.boundingSphere),Ms.applyMatrix4(r),!1===t.ray.intersectsSphere(Ms))return;if(xs.copy(r).invert(),_s.copy(t.ray).applyMatrix4(xs),null!==n.boundingBox&&!1===_s.intersectsBox(n.boundingBox))return;let a;if(n.isBufferGeometry){const r=n.index,s=n.attributes.position,o=n.morphAttributes.position,l=n.morphTargetsRelative,c=n.attributes.uv,h=n.attributes.uv2,u=n.groups,d=n.drawRange;if(null!==r)if(Array.isArray(i))for(let n=0,p=u.length;n<p;n++){const p=u[n],f=i[p.materialIndex];for(let n=Math.max(p.start,d.start),i=Math.min(p.start+p.count,d.start+d.count);n<i;n+=3){const i=r.getX(n),u=r.getX(n+1),d=r.getX(n+2);a=Us(this,f,t,_s,s,o,l,c,h,i,u,d),a&&(a.faceIndex=Math.floor(n/3),a.face.materialIndex=p.materialIndex,e.push(a))}}else{for(let n=Math.max(0,d.start),u=Math.min(r.count,d.start+d.count);n<u;n+=3){const u=r.getX(n),d=r.getX(n+1),p=r.getX(n+2);a=Us(this,i,t,_s,s,o,l,c,h,u,d,p),a&&(a.faceIndex=Math.floor(n/3),e.push(a))}}else if(void 0!==s)if(Array.isArray(i))for(let n=0,r=u.length;n<r;n++){const r=u[n],p=i[r.materialIndex];for(let n=Math.max(r.start,d.start),i=Math.min(r.start+r.count,d.start+d.count);n<i;n+=3){a=Us(this,p,t,_s,s,o,l,c,h,n,n+1,n+2),a&&(a.faceIndex=Math.floor(n/3),a.face.materialIndex=r.materialIndex,e.push(a))}}else{for(let n=Math.max(0,d.start),r=Math.min(s.count,d.start+d.count);n<r;n+=3){a=Us(this,i,t,_s,s,o,l,c,h,n,n+1,n+2),a&&(a.faceIndex=Math.floor(n/3),e.push(a))}}}else n.isGeometry&&console.error(\"THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\")}}function Us(t,e,n,i,r,a,s,o,l,c,h,u){ws.fromBufferAttribute(r,c),bs.fromBufferAttribute(r,h),Ss.fromBufferAttribute(r,u);const d=t.morphTargetInfluences;if(a&&d){Ls.set(0,0,0),Cs.set(0,0,0),Rs.set(0,0,0);for(let t=0,e=a.length;t<e;t++){const e=d[t],n=a[t];0!==e&&(Ts.fromBufferAttribute(n,c),Es.fromBufferAttribute(n,h),As.fromBufferAttribute(n,u),s?(Ls.addScaledVector(Ts,e),Cs.addScaledVector(Es,e),Rs.addScaledVector(As,e)):(Ls.addScaledVector(Ts.sub(ws),e),Cs.addScaledVector(Es.sub(bs),e),Rs.addScaledVector(As.sub(Ss),e)))}ws.add(Ls),bs.add(Cs),Ss.add(Rs)}t.isSkinnedMesh&&(t.boneTransform(c,ws),t.boneTransform(h,bs),t.boneTransform(u,Ss));const p=(function f(t,e,n,i,r,a,s,o){let l;if(l=1===e.side?i.intersectTriangle(s,a,r,!0,o):i.intersectTriangle(r,a,s,2!==e.side,o),null===l)return null;Os.copy(o),Os.applyMatrix4(t.matrixWorld);const c=n.ray.origin.distanceTo(Os);return c<n.near||c>n.far?null:{distance:c,point:Os.clone(),object:t}})(t,e,n,i,ws,bs,Ss,Is);if(p){o&&(Ps.fromBufferAttribute(o,c),Ds.fromBufferAttribute(o,h),Ns.fromBufferAttribute(o,u),p.uv=Xa.getUV(Is,ws,bs,Ss,Ps,Ds,Ns,new br)),l&&(Ps.fromBufferAttribute(l,c),Ds.fromBufferAttribute(l,h),Ns.fromBufferAttribute(l,u),p.uv2=Xa.getUV(Is,ws,bs,Ss,Ps,Ds,Ns,new br));const t={a:c,b:h,c:u,normal:new Ir,materialIndex:0};Xa.getNormal(ws,bs,Ss,t.normal),p.face=t}return p}zs.prototype.isMesh=!0;class Fs extends ys{constructor(t=1,e=1,n=1,i=1,r=1,a=1){super(),this.type=\"BoxGeometry\",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:r,depthSegments:a};const s=this;i=Math.floor(i),r=Math.floor(r),a=Math.floor(a);const o=[],l=[],c=[],h=[];let u=0,d=0;function p(t,e,n,i,r,a,p,f,m,g,v){const y=a/m,x=p/g,_=a/2,M=p/2,w=f/2,b=m+1,S=g+1;let T=0,E=0;const A=new Ir;for(let a=0;a<S;a++){const s=a*x-M;for(let o=0;o<b;o++){A[t]=(o*y-_)*i,A[e]=s*r,A[n]=w,l.push(A.x,A.y,A.z),A[t]=0,A[e]=0,A[n]=f>0?1:-1,c.push(A.x,A.y,A.z),h.push(o/m),h.push(1-a/g),T+=1}}for(let t=0;t<g;t++)for(let e=0;e<m;e++){const n=u+e+b*(t+1),i=u+(e+1)+b*(t+1),r=u+(e+1)+b*t;o.push(u+e+b*t,n,r),o.push(n,i,r),E+=6}s.addGroup(d,E,v),d+=E,u+=T}p(\"z\",\"y\",\"x\",-1,-1,n,e,t,a,r,0),p(\"z\",\"y\",\"x\",1,-1,n,e,-t,a,r,1),p(\"x\",\"z\",\"y\",1,1,t,n,e,i,a,2),p(\"x\",\"z\",\"y\",1,-1,t,n,-e,i,a,3),p(\"x\",\"y\",\"z\",1,-1,t,e,n,i,r,4),p(\"x\",\"y\",\"z\",-1,-1,t,e,-n,i,r,5),this.setIndex(o),this.setAttribute(\"position\",new cs(l,3)),this.setAttribute(\"normal\",new cs(c,3)),this.setAttribute(\"uv\",new cs(h,2))}static fromJSON(t){return new Fs(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function Bs(t){const e={};for(const n in t){e[n]={};for(const i in t[n]){const r=t[n][i];e[n][i]=r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?r.clone():Array.isArray(r)?r.slice():r}}return e}function Hs(t){const e={};for(let n=0;n<t.length;n++){const i=Bs(t[n]);for(const t in i)e[t]=i[t]}return e}const ks={clone:Bs,merge:Hs};class Gs extends Za{constructor(t){super(),this.type=\"ShaderMaterial\",this.defines={},this.uniforms={},this.vertexShader=\"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",this.fragmentShader=\"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&(void 0!==t.attributes&&console.error(\"THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.\"),this.setValues(t))}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=Bs(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const n in this.uniforms){const i=this.uniforms[n].value;e.uniforms[n]=i&&i.isTexture?{type:\"t\",value:i.toJSON(t).uuid}:i&&i.isColor?{type:\"c\",value:i.getHex()}:i&&i.isVector2?{type:\"v2\",value:i.toArray()}:i&&i.isVector3?{type:\"v3\",value:i.toArray()}:i&&i.isVector4?{type:\"v4\",value:i.toArray()}:i&&i.isMatrix3?{type:\"m3\",value:i.toArray()}:i&&i.isMatrix4?{type:\"m4\",value:i.toArray()}:{value:i}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;const n={};for(const t in this.extensions)!0===this.extensions[t]&&(n[t]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}Gs.prototype.isShaderMaterial=!0;class Vs extends za{constructor(){super(),this.type=\"Camera\",this.matrixWorldInverse=new ua,this.projectionMatrix=new ua,this.projectionMatrixInverse=new ua}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}Vs.prototype.isCamera=!0;class Ws extends Vs{constructor(t=50,e=1,n=.1,i=2e3){super(),this.type=\"PerspectiveCamera\",this.fov=t,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*vr*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*gr*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*vr*Math.atan(Math.tan(.5*gr*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,n,i,r,a){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*gr*this.fov)/this.zoom,n=2*e,i=this.aspect*n,r=-.5*i;const a=this.view;if(null!==this.view&&this.view.enabled){const t=a.fullWidth,s=a.fullHeight;r+=a.offsetX*i/t,e-=a.offsetY*n/s,i*=a.width/t,n*=a.height/s}const s=this.filmOffset;0!==s&&(r+=t*s/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,e,e-n,t,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}Ws.prototype.isPerspectiveCamera=!0;const js=90;class qs extends za{constructor(t,e,n){if(super(),this.type=\"CubeCamera\",!0!==n.isWebGLCubeRenderTarget)return void console.error(\"THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.\");this.renderTarget=n;const i=new Ws(js,1,t,e);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new Ir(1,0,0)),this.add(i);const r=new Ws(js,1,t,e);r.layers=this.layers,r.up.set(0,-1,0),r.lookAt(new Ir(-1,0,0)),this.add(r);const a=new Ws(js,1,t,e);a.layers=this.layers,a.up.set(0,0,1),a.lookAt(new Ir(0,1,0)),this.add(a);const s=new Ws(js,1,t,e);s.layers=this.layers,s.up.set(0,0,-1),s.lookAt(new Ir(0,-1,0)),this.add(s);const o=new Ws(js,1,t,e);o.layers=this.layers,o.up.set(0,-1,0),o.lookAt(new Ir(0,0,1)),this.add(o);const l=new Ws(js,1,t,e);l.layers=this.layers,l.up.set(0,-1,0),l.lookAt(new Ir(0,0,-1)),this.add(l)}update(t,e){null===this.parent&&this.updateMatrixWorld();const n=this.renderTarget,[i,r,a,s,o,l]=this.children,c=t.xr.enabled,h=t.getRenderTarget();t.xr.enabled=!1;const u=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0),t.render(e,i),t.setRenderTarget(n,1),t.render(e,r),t.setRenderTarget(n,2),t.render(e,a),t.setRenderTarget(n,3),t.render(e,s),t.setRenderTarget(n,4),t.render(e,o),n.texture.generateMipmaps=u,t.setRenderTarget(n,5),t.render(e,l),t.setRenderTarget(h),t.xr.enabled=c}}class Xs extends Lr{constructor(t,e,n,i,r,a,s,o,l,c){super(t=void 0!==t?t:[],e=void 0!==e?e:Ii,n,i,r,a,s=void 0!==s?s:Zi,o,l,c),this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}Xs.prototype.isCubeTexture=!0;class Ys extends Pr{constructor(t,e,n){Number.isInteger(e)&&(console.warn(\"THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )\"),e=n),super(t,t,e),this.texture=new Xs(void 0,(e=e||{}).mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:ki,this.texture._needsFlipEnvMap=!1}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.format=Ji,this.texture.encoding=e.encoding,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:\"\\n\\n\\t\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t\\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\n\\t\\t\\t\\t\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\n\\t\\t\\t\\t\\t#include <begin_vertex>\\n\\t\\t\\t\\t\\t#include <project_vertex>\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\",fragmentShader:\"\\n\\n\\t\\t\\t\\tuniform sampler2D tEquirect;\\n\\n\\t\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t\\t#include <common>\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvec3 direction = normalize( vWorldDirection );\\n\\n\\t\\t\\t\\t\\tvec2 sampleUV = equirectUv( direction );\\n\\n\\t\\t\\t\\t\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"},i=new Fs(5,5,5),r=new Gs({name:\"CubemapFromEquirect\",uniforms:Bs(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:1,blending:0});r.uniforms.tEquirect.value=e;const a=new zs(i,r),s=e.minFilter;e.minFilter===Gi&&(e.minFilter=ki);return new qs(1,10,this).update(t,a),e.minFilter=s,a.geometry.dispose(),a.material.dispose(),this}clear(t,e,n,i){const r=t.getRenderTarget();for(let r=0;r<6;r++)t.setRenderTarget(this,r),t.clear(e,n,i);t.setRenderTarget(r)}}Ys.prototype.isWebGLCubeRenderTarget=!0;const Zs=new Ir,Js=new Ir,Qs=new Sr;class Ks{constructor(t=new Ir(1,0,0),e=0){this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=Zs.subVectors(n,e).cross(Js.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){const n=t.delta(Zs),i=this.normal.dot(n);if(0===i)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/i;return r<0||r>1?null:e.copy(n).multiplyScalar(r).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||Qs.getNormalMatrix(t),i=this.coplanarPoint(Zs).applyMatrix4(t),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}Ks.prototype.isPlane=!0;const $s=new na,to=new Ir;class eo{constructor(t=new Ks,e=new Ks,n=new Ks,i=new Ks,r=new Ks,a=new Ks){this.planes=[t,e,n,i,r,a]}set(t,e,n,i,r,a){const s=this.planes;return s[0].copy(t),s[1].copy(e),s[2].copy(n),s[3].copy(i),s[4].copy(r),s[5].copy(a),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t){const e=this.planes,n=t.elements,i=n[0],r=n[1],a=n[2],s=n[3],o=n[4],l=n[5],c=n[6],h=n[7],u=n[8],d=n[9],p=n[10],f=n[11],m=n[12],g=n[13],v=n[14],y=n[15];return e[0].setComponents(s-i,h-o,f-u,y-m).normalize(),e[1].setComponents(s+i,h+o,f+u,y+m).normalize(),e[2].setComponents(s+r,h+l,f+d,y+g).normalize(),e[3].setComponents(s-r,h-l,f-d,y-g).normalize(),e[4].setComponents(s-a,h-c,f-p,y-v).normalize(),e[5].setComponents(s+a,h+c,f+p,y+v).normalize(),this}intersectsObject(t){const e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),$s.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere($s)}intersectsSprite(t){return $s.center.set(0,0,0),$s.radius=.7071067811865476,$s.applyMatrix4(t.matrixWorld),this.intersectsSphere($s)}intersectsSphere(t){const e=this.planes,n=t.center,i=-t.radius;for(let t=0;t<6;t++){if(e[t].distanceToPoint(n)<i)return!1}return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];if(to.x=i.normal.x>0?t.max.x:t.min.x,to.y=i.normal.y>0?t.max.y:t.min.y,to.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(to)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function no(){let t=null,e=!1,n=null,i=null;function r(e,a){n(e,a),i=t.requestAnimationFrame(r)}return{start:function(){!0!==e&&null!==n&&(i=t.requestAnimationFrame(r),e=!0)},stop:function(){t.cancelAnimationFrame(i),e=!1},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function io(t,e){const n=e.isWebGL2,i=new WeakMap;return{get:function r(t){return t.isInterleavedBufferAttribute&&(t=t.data),i.get(t)},remove:function a(e){e.isInterleavedBufferAttribute&&(e=e.data);const n=i.get(e);n&&(t.deleteBuffer(n.buffer),i.delete(e))},update:function s(e,r){if(e.isGLBufferAttribute){const t=i.get(e);return void((!t||t.version<e.version)&&i.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version}))}e.isInterleavedBufferAttribute&&(e=e.data);const a=i.get(e);void 0===a?i.set(e,(function s(e,i){const r=e.array,a=e.usage,s=t.createBuffer();t.bindBuffer(i,s),t.bufferData(i,r,a),e.onUploadCallback();let o=5126;return r instanceof Float32Array?o=5126:r instanceof Float64Array?console.warn(\"THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.\"):r instanceof Uint16Array?e.isFloat16BufferAttribute?n?o=5131:console.warn(\"THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.\"):o=5123:r instanceof Int16Array?o=5122:r instanceof Uint32Array?o=5125:r instanceof Int32Array?o=5124:r instanceof Int8Array?o=5120:(r instanceof Uint8Array||r instanceof Uint8ClampedArray)&&(o=5121),{buffer:s,type:o,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version}})(e,r)):a.version<e.version&&(!(function o(e,i,r){const a=i.array,s=i.updateRange;t.bindBuffer(r,e),-1===s.count?t.bufferSubData(r,0,a):(n?t.bufferSubData(r,s.offset*a.BYTES_PER_ELEMENT,a,s.offset,s.count):t.bufferSubData(r,s.offset*a.BYTES_PER_ELEMENT,a.subarray(s.offset,s.offset+s.count)),s.count=-1)})(a.buffer,e,r),a.version=e.version)}}}class ro extends ys{constructor(t=1,e=1,n=1,i=1){super(),this.type=\"PlaneGeometry\",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};const r=t/2,a=e/2,s=Math.floor(n),o=Math.floor(i),l=s+1,c=o+1,h=t/s,u=e/o,d=[],p=[],f=[],m=[];for(let t=0;t<c;t++){const e=t*u-a;for(let n=0;n<l;n++){p.push(n*h-r,-e,0),f.push(0,0,1),m.push(n/s),m.push(1-t/o)}}for(let t=0;t<o;t++)for(let e=0;e<s;e++){const n=e+l*(t+1),i=e+1+l*(t+1),r=e+1+l*t;d.push(e+l*t,n,r),d.push(n,i,r)}this.setIndex(d),this.setAttribute(\"position\",new cs(p,3)),this.setAttribute(\"normal\",new cs(f,3)),this.setAttribute(\"uv\",new cs(m,2))}static fromJSON(t){return new ro(t.width,t.height,t.widthSegments,t.heightSegments)}}const ao={alphamap_fragment:\"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\",alphamap_pars_fragment:\"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\",alphatest_fragment:\"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\",aomap_fragment:\"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\",aomap_pars_fragment:\"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\",begin_vertex:\"vec3 transformed = vec3( position );\",beginnormal_vertex:\"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\",bsdfs:\"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in vec3 f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn ( f90 - f0 ) * fresnel + f0;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in vec3 f90, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, vec3( 1.0 ), dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\",bumpmap_pars_fragment:\"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\",clipping_planes_fragment:\"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\",clipping_planes_pars_fragment:\"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\",clipping_planes_pars_vertex:\"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\",clipping_planes_vertex:\"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\",color_fragment:\"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\",color_pars_fragment:\"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\",color_pars_vertex:\"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\",color_vertex:\"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\",common:\"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\",cube_uv_reflection_fragment:\"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\",defaultnormal_vertex:\"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\",displacementmap_pars_vertex:\"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\",displacementmap_vertex:\"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\",emissivemap_fragment:\"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\",emissivemap_pars_fragment:\"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\",encodings_fragment:\"gl_FragColor = linearToOutputTexel( gl_FragColor );\",encodings_pars_fragment:\"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\",envmap_fragment:\"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\",envmap_common_pars_fragment:\"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\",envmap_pars_fragment:\"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\",envmap_pars_vertex:\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\",envmap_physical_pars_fragment:\"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\",envmap_vertex:\"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\",fog_vertex:\"#ifdef USE_FOG\\n\\tfogDepth = - mvPosition.z;\\n#endif\",fog_pars_vertex:\"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\",fog_fragment:\"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\",fog_pars_fragment:\"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\",gradientmap_pars_fragment:\"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\",lightmap_fragment:\"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\",lightmap_pars_fragment:\"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\",lights_lambert_vertex:\"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\",lights_pars_begin:\"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\",lights_toon_fragment:\"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\",lights_toon_pars_fragment:\"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\",lights_phong_fragment:\"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\",lights_phong_pars_fragment:\"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\",lights_physical_fragment:\"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\t#ifdef SPECULAR\\n\\t\\tvec3 specularIntensityFactor = vec3( specularIntensity );\\n\\t\\tvec3 specularTintFactor = specularTint;\\n\\t\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULARTINTMAP\\n\\t\\t\\tspecularTintFactor *= specularTintMapTexelToLinear( texture2D( specularTintMap, vUv ) ).rgb;\\n\\t\\t#endif\\n\\t\\tmaterial.specularColorF90 = mix( specularIntensityFactor, vec3( 1.0 ), metalnessFactor );\\n\\t#else\\n\\t\\tvec3 specularIntensityFactor = vec3( 1.0 );\\n\\t\\tvec3 specularTintFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularColorF90 = vec3( 1.0 );\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ) * specularTintFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularColorF90 = vec3( 1.0 );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\",lights_physical_pars_fragment:\"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularRoughness;\\n\\tvec3 specularColor;\\n\\tvec3 specularColorF90;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), vec3( 1.0 ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularColorF90, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\",lights_fragment_begin:\"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\",lights_fragment_maps:\"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\",lights_fragment_end:\"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\",logdepthbuf_fragment:\"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\",logdepthbuf_pars_fragment:\"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\",logdepthbuf_pars_vertex:\"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\",logdepthbuf_vertex:\"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\",map_fragment:\"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\",map_pars_fragment:\"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\",map_particle_fragment:\"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\",map_particle_pars_fragment:\"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\",metalnessmap_fragment:\"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\",metalnessmap_pars_fragment:\"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\",morphnormal_vertex:\"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\",morphtarget_pars_vertex:\"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\",morphtarget_vertex:\"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\",normal_fragment_begin:\"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\",normal_fragment_maps:\"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\",normalmap_pars_fragment:\"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\",clearcoat_normal_fragment_begin:\"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\",clearcoat_normal_fragment_maps:\"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\",clearcoat_pars_fragment:\"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\",packing:\"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\",premultiplied_alpha_fragment:\"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\",project_vertex:\"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\",dithering_fragment:\"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\",dithering_pars_fragment:\"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\",roughnessmap_fragment:\"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\",roughnessmap_pars_fragment:\"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\",shadowmap_pars_fragment:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\",shadowmap_pars_vertex:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\",shadowmap_vertex:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\",shadowmask_pars_fragment:\"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\",skinbase_vertex:\"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\",skinning_pars_vertex:\"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\",skinning_vertex:\"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\",skinnormal_vertex:\"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\",specularmap_fragment:\"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\",specularmap_pars_fragment:\"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\",tonemapping_fragment:\"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\",tonemapping_pars_fragment:\"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\",transmission_fragment:\"#ifdef USE_TRANSMISSION\\n\\tfloat transmissionFactor = transmission;\\n\\tfloat thicknessFactor = thickness;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition.xyz / vWorldPosition.w;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tfloat ior = ( 1.0 + 0.4 * reflectivity ) / ( 1.0 - 0.4 * reflectivity );\\n\\tvec3 transmission = transmissionFactor * getIBLVolumeRefraction(\\n\\t\\tn, v, roughnessFactor, material.diffuseColor, material.specularColor,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\\n\\t\\tattenuationTint, attenuationDistance );\\n\\ttotalDiffuse = mix( totalDiffuse, transmission, transmissionFactor );\\n#endif\",transmission_pars_fragment:\"#ifdef USE_TRANSMISSION\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec4 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay(vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix) {\\n\\t\\tvec3 refractionVector = refract(-v, normalize(n), 1.0 / ior);\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length(vec3(modelMatrix[0].xyz));\\n\\t\\tmodelScale.y = length(vec3(modelMatrix[1].xyz));\\n\\t\\tmodelScale.z = length(vec3(modelMatrix[2].xyz));\\n\\t\\treturn normalize(refractionVector) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness(float roughness, float ior) {\\n\\t\\treturn roughness * clamp(ior * 2.0 - 2.0, 0.0, 1.0);\\n\\t}\\n\\tvec3 getTransmissionSample(vec2 fragCoord, float roughness, float ior) {\\n\\t\\tfloat framebufferLod = log2(transmissionSamplerSize.x) * applyIorToRoughness(roughness, ior);\\n\\t\\treturn texture2DLodEXT(transmissionSamplerMap, fragCoord.xy, framebufferLod).rgb;\\n\\t}\\n\\tvec3 applyVolumeAttenuation(vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance) {\\n\\t\\tif (attenuationDistance == 0.0) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log(attenuationColor) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp(-attenuationCoefficient * transmissionDistance);\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec3 getIBLVolumeRefraction(vec3 n, vec3 v, float perceptualRoughness, vec3 baseColor, vec3 specularColor,\\n\\t\\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\\n\\t\\tvec3 attenuationColor, float attenuationDistance) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay(n, v, thickness, ior, modelMatrix);\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4(refractedRayExit, 1.0);\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec3 transmittedLight = getTransmissionSample(refractionCoords, perceptualRoughness, ior);\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation(transmittedLight, length(transmissionRay), attenuationColor, attenuationDistance);\\n\\t\\treturn (1.0 - specularColor) * attenuatedColor * baseColor;\\n\\t}\\n#endif\",uv_pars_fragment:\"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\",uv_pars_vertex:\"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\",uv_vertex:\"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\",uv2_pars_fragment:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\",uv2_pars_vertex:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\",uv2_vertex:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\",worldpos_vertex:\"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\",background_frag:\"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\",background_vert:\"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\",cube_frag:\"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\",cube_vert:\"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\",depth_frag:\"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\",depth_vert:\"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\",distanceRGBA_frag:\"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\",distanceRGBA_vert:\"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\",equirect_frag:\"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\",equirect_vert:\"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\",linedashed_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\",linedashed_vert:\"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\",meshbasic_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshbasic_vert:\"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\",meshlambert_frag:\"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshlambert_vert:\"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\",meshmatcap_frag:\"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshmatcap_vert:\"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t\\t#ifdef USE_TANGENT\\n\\t\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t\\t#endif\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\",meshtoon_frag:\"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshtoon_vert:\"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\",meshphong_frag:\"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshphong_vert:\"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\",meshphysical_frag:\"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationTint;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularTint;\\n\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULARTINTMAP\\n\\t\\tuniform sampler2D specularTintMap;\\n\\t#endif\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <transmission_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshphysical_vert:\"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec4 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition;\\n#endif\\n}\",normal_frag:\"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\",normal_vert:\"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\",points_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\",points_vert:\"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\",shadow_frag:\"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\",shadow_vert:\"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\",sprite_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\",sprite_vert:\"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\"},so={common:{diffuse:{value:new ns(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new Sr},uv2Transform:{value:new Sr},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new br(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new ns(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new ns(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Sr}},sprite:{diffuse:{value:new ns(16777215)},opacity:{value:1},center:{value:new br(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Sr}}},oo={basic:{uniforms:Hs([so.common,so.specularmap,so.envmap,so.aomap,so.lightmap,so.fog]),vertexShader:ao.meshbasic_vert,fragmentShader:ao.meshbasic_frag},lambert:{uniforms:Hs([so.common,so.specularmap,so.envmap,so.aomap,so.lightmap,so.emissivemap,so.fog,so.lights,{emissive:{value:new ns(0)}}]),vertexShader:ao.meshlambert_vert,fragmentShader:ao.meshlambert_frag},phong:{uniforms:Hs([so.common,so.specularmap,so.envmap,so.aomap,so.lightmap,so.emissivemap,so.bumpmap,so.normalmap,so.displacementmap,so.fog,so.lights,{emissive:{value:new ns(0)},specular:{value:new ns(1118481)},shininess:{value:30}}]),vertexShader:ao.meshphong_vert,fragmentShader:ao.meshphong_frag},standard:{uniforms:Hs([so.common,so.envmap,so.aomap,so.lightmap,so.emissivemap,so.bumpmap,so.normalmap,so.displacementmap,so.roughnessmap,so.metalnessmap,so.fog,so.lights,{emissive:{value:new ns(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:ao.meshphysical_vert,fragmentShader:ao.meshphysical_frag},toon:{uniforms:Hs([so.common,so.aomap,so.lightmap,so.emissivemap,so.bumpmap,so.normalmap,so.displacementmap,so.gradientmap,so.fog,so.lights,{emissive:{value:new ns(0)}}]),vertexShader:ao.meshtoon_vert,fragmentShader:ao.meshtoon_frag},matcap:{uniforms:Hs([so.common,so.bumpmap,so.normalmap,so.displacementmap,so.fog,{matcap:{value:null}}]),vertexShader:ao.meshmatcap_vert,fragmentShader:ao.meshmatcap_frag},points:{uniforms:Hs([so.points,so.fog]),vertexShader:ao.points_vert,fragmentShader:ao.points_frag},dashed:{uniforms:Hs([so.common,so.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ao.linedashed_vert,fragmentShader:ao.linedashed_frag},depth:{uniforms:Hs([so.common,so.displacementmap]),vertexShader:ao.depth_vert,fragmentShader:ao.depth_frag},normal:{uniforms:Hs([so.common,so.bumpmap,so.normalmap,so.displacementmap,{opacity:{value:1}}]),vertexShader:ao.normal_vert,fragmentShader:ao.normal_frag},sprite:{uniforms:Hs([so.sprite,so.fog]),vertexShader:ao.sprite_vert,fragmentShader:ao.sprite_frag},background:{uniforms:{uvTransform:{value:new Sr},t2D:{value:null}},vertexShader:ao.background_vert,fragmentShader:ao.background_frag},cube:{uniforms:Hs([so.envmap,{opacity:{value:1}}]),vertexShader:ao.cube_vert,fragmentShader:ao.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ao.equirect_vert,fragmentShader:ao.equirect_frag},distanceRGBA:{uniforms:Hs([so.common,so.displacementmap,{referencePosition:{value:new Ir},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:ao.distanceRGBA_vert,fragmentShader:ao.distanceRGBA_frag},shadow:{uniforms:Hs([so.lights,so.fog,{color:{value:new ns(0)},opacity:{value:1}}]),vertexShader:ao.shadow_vert,fragmentShader:ao.shadow_frag}};function lo(t,e,n,i,r){const a=new ns(0);let s,o,l=0,c=null,h=0,u=null;function d(t,e){n.buffers.color.setClear(t.r,t.g,t.b,e,r)}return{getClearColor:function(){return a},setClearColor:function(t,e=1){a.set(t),l=e,d(a,l)},getClearAlpha:function(){return l},setClearAlpha:function(t){l=t,d(a,l)},render:function p(n,r){let p=!1,f=!0===r.isScene?r.background:null;f&&f.isTexture&&(f=e.get(f));const m=t.xr,g=m.getSession&&m.getSession();g&&\"additive\"===g.environmentBlendMode&&(f=null),null===f?d(a,l):f&&f.isColor&&(d(f,1),p=!0),(t.autoClear||p)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),f&&(f.isCubeTexture||f.mapping===zi)?(void 0===o&&(o=new zs(new Fs(1,1,1),new Gs({name:\"BackgroundCubeMaterial\",uniforms:Bs(oo.cube.uniforms),vertexShader:oo.cube.vertexShader,fragmentShader:oo.cube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),o.geometry.deleteAttribute(\"normal\"),o.geometry.deleteAttribute(\"uv\"),o.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(o.material,\"envMap\",{get:function(){return this.uniforms.envMap.value}}),i.update(o)),o.material.uniforms.envMap.value=f,o.material.uniforms.flipEnvMap.value=f.isCubeTexture&&!1===f.isRenderTargetTexture?-1:1,c===f&&h===f.version&&u===t.toneMapping||(o.material.needsUpdate=!0,c=f,h=f.version,u=t.toneMapping),n.unshift(o,o.geometry,o.material,0,0,null)):f&&f.isTexture&&(void 0===s&&(s=new zs(new ro(2,2),new Gs({name:\"BackgroundMaterial\",uniforms:Bs(oo.background.uniforms),vertexShader:oo.background.vertexShader,fragmentShader:oo.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),s.geometry.deleteAttribute(\"normal\"),Object.defineProperty(s.material,\"map\",{get:function(){return this.uniforms.t2D.value}}),i.update(s)),s.material.uniforms.t2D.value=f,!0===f.matrixAutoUpdate&&f.updateMatrix(),s.material.uniforms.uvTransform.value.copy(f.matrix),c===f&&h===f.version&&u===t.toneMapping||(s.material.needsUpdate=!0,c=f,h=f.version,u=t.toneMapping),n.unshift(s,s.geometry,s.material,0,0,null))}}}function co(t,e,n,i){const r=t.getParameter(34921),a=i.isWebGL2?null:e.get(\"OES_vertex_array_object\"),s=i.isWebGL2||null!==a,o={},l=d(null);let c=l;function h(e){return i.isWebGL2?t.bindVertexArray(e):a.bindVertexArrayOES(e)}function u(e){return i.isWebGL2?t.deleteVertexArray(e):a.deleteVertexArrayOES(e)}function d(t){const e=[],n=[],i=[];for(let t=0;t<r;t++)e[t]=0,n[t]=0,i[t]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:e,enabledAttributes:n,attributeDivisors:i,object:t,attributes:{},index:null}}function p(){const t=c.newAttributes;for(let e=0,n=t.length;e<n;e++)t[e]=0}function f(t){m(t,0)}function m(n,r){const a=c.enabledAttributes,s=c.attributeDivisors;if(c.newAttributes[n]=1,0===a[n]&&(t.enableVertexAttribArray(n),a[n]=1),s[n]!==r){(i.isWebGL2?t:e.get(\"ANGLE_instanced_arrays\"))[i.isWebGL2?\"vertexAttribDivisor\":\"vertexAttribDivisorANGLE\"](n,r),s[n]=r}}function g(){const e=c.newAttributes,n=c.enabledAttributes;for(let i=0,r=n.length;i<r;i++)n[i]!==e[i]&&(t.disableVertexAttribArray(i),n[i]=0)}function v(e,n,r,a,s,o){!0!==i.isWebGL2||5124!==r&&5125!==r?t.vertexAttribPointer(e,n,r,a,s,o):t.vertexAttribIPointer(e,n,r,s,o)}function y(){x(),c!==l&&(c=l,h(c.object))}function x(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:function _(r,l,u,y,x){let _=!1;if(s){const e=(function M(e,n,r){const s=!0===r.wireframe;let l=o[e.id];void 0===l&&(l={},o[e.id]=l);let c=l[n.id];void 0===c&&(c={},l[n.id]=c);let h=c[s];void 0===h&&(h=d((function u(){return i.isWebGL2?t.createVertexArray():a.createVertexArrayOES()})()),c[s]=h);return h})(y,u,l);c!==e&&(c=e,h(c.object)),_=(function w(t,e){const n=c.attributes,i=t.attributes;let r=0;for(const t in i){const e=n[t],a=i[t];if(void 0===e)return!0;if(e.attribute!==a)return!0;if(e.data!==a.data)return!0;r++}return c.attributesNum!==r||c.index!==e})(y,x),_&&(function b(t,e){const n={},i=t.attributes;let r=0;for(const t in i){const e=i[t],a={};a.attribute=e,e.data&&(a.data=e.data),n[t]=a,r++}c.attributes=n,c.attributesNum=r,c.index=e})(y,x)}else{const t=!0===l.wireframe;c.geometry===y.id&&c.program===u.id&&c.wireframe===t||(c.geometry=y.id,c.program=u.id,c.wireframe=t,_=!0)}!0===r.isInstancedMesh&&(_=!0),null!==x&&n.update(x,34963),_&&(!(function S(r,a,s,o){if(!1===i.isWebGL2&&(r.isInstancedMesh||o.isInstancedBufferGeometry)&&null===e.get(\"ANGLE_instanced_arrays\"))return;p();const l=o.attributes,c=s.getAttributes(),h=a.defaultAttributeValues;for(const e in c){const i=c[e];if(i>=0){const a=l[e];if(void 0!==a){const e=a.normalized,r=a.itemSize,s=n.get(a);if(void 0===s)continue;const l=s.buffer,c=s.type,h=s.bytesPerElement;if(a.isInterleavedBufferAttribute){const n=a.data,s=n.stride,u=a.offset;n&&n.isInstancedInterleavedBuffer?(m(i,n.meshPerAttribute),void 0===o._maxInstanceCount&&(o._maxInstanceCount=n.meshPerAttribute*n.count)):f(i),t.bindBuffer(34962,l),v(i,r,c,e,s*h,u*h)}else a.isInstancedBufferAttribute?(m(i,a.meshPerAttribute),void 0===o._maxInstanceCount&&(o._maxInstanceCount=a.meshPerAttribute*a.count)):f(i),t.bindBuffer(34962,l),v(i,r,c,e,0,0)}else if(\"instanceMatrix\"===e){const e=n.get(r.instanceMatrix);if(void 0===e)continue;const a=e.buffer,s=e.type;m(i+0,1),m(i+1,1),m(i+2,1),m(i+3,1),t.bindBuffer(34962,a),t.vertexAttribPointer(i+0,4,s,!1,64,0),t.vertexAttribPointer(i+1,4,s,!1,64,16),t.vertexAttribPointer(i+2,4,s,!1,64,32),t.vertexAttribPointer(i+3,4,s,!1,64,48)}else if(\"instanceColor\"===e){const e=n.get(r.instanceColor);if(void 0===e)continue;const a=e.buffer,s=e.type;m(i,1),t.bindBuffer(34962,a),t.vertexAttribPointer(i,3,s,!1,12,0)}else if(void 0!==h){const n=h[e];if(void 0!==n)switch(n.length){case 2:t.vertexAttrib2fv(i,n);break;case 3:t.vertexAttrib3fv(i,n);break;case 4:t.vertexAttrib4fv(i,n);break;default:t.vertexAttrib1fv(i,n)}}}}g()})(r,l,u,y),null!==x&&t.bindBuffer(34963,n.get(x).buffer))},reset:y,resetDefaultState:x,dispose:function M(){y();for(const t in o){const e=o[t];for(const t in e){const n=e[t];for(const t in n)u(n[t].object),delete n[t];delete e[t]}delete o[t]}},releaseStatesOfGeometry:function w(t){if(void 0===o[t.id])return;const e=o[t.id];for(const t in e){const n=e[t];for(const t in n)u(n[t].object),delete n[t];delete e[t]}delete o[t.id]},releaseStatesOfProgram:function b(t){for(const e in o){const n=o[e];if(void 0===n[t.id])continue;const i=n[t.id];for(const t in i)u(i[t].object),delete i[t];delete n[t.id]}},initAttributes:p,enableAttribute:f,disableUnusedAttributes:g}}function ho(t,e,n,i){const r=i.isWebGL2;let a;this.setMode=function s(t){a=t},this.render=function o(e,i){t.drawArrays(a,e,i),n.update(i,a,1)},this.renderInstances=function l(i,s,o){if(0===o)return;let l,c;if(r)l=t,c=\"drawArraysInstanced\";else if(l=e.get(\"ANGLE_instanced_arrays\"),c=\"drawArraysInstancedANGLE\",null===l)return void console.error(\"THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");l[c](a,i,s,o),n.update(s,a,o)}}function uo(t,e,n){let i;function r(e){if(\"highp\"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return\"highp\";e=\"mediump\"}return\"mediump\"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?\"mediump\":\"lowp\"}const a=\"undefined\"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||\"undefined\"!=typeof WebGL2ComputeRenderingContext&&t instanceof WebGL2ComputeRenderingContext;let s=void 0!==n.precision?n.precision:\"highp\";const o=r(s);o!==s&&(console.warn(\"THREE.WebGLRenderer:\",s,\"not supported, using\",o,\"instead.\"),s=o);const l=a||e.has(\"WEBGL_draw_buffers\"),c=!0===n.logarithmicDepthBuffer,h=t.getParameter(34930),u=t.getParameter(35660),d=t.getParameter(3379),p=t.getParameter(34076),f=t.getParameter(34921),m=t.getParameter(36347),g=t.getParameter(36348),v=t.getParameter(36349),y=u>0,x=a||e.has(\"OES_texture_float\");return{isWebGL2:a,drawBuffers:l,getMaxAnisotropy:function _(){if(void 0!==i)return i;if(!0===e.has(\"EXT_texture_filter_anisotropic\")){const n=e.get(\"EXT_texture_filter_anisotropic\");i=t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i},getMaxPrecision:r,precision:s,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:u,maxTextureSize:d,maxCubemapSize:p,maxAttributes:f,maxVertexUniforms:m,maxVaryings:g,maxFragmentUniforms:v,vertexTextures:y,floatFragmentTextures:x,floatVertexTextures:y&&x,maxSamples:a?t.getParameter(36183):0}}function po(t){const e=this;let n=null,i=0,r=!1,a=!1;const s=new Ks,o=new Sr,l={value:null,needsUpdate:!1};function c(){l.value!==n&&(l.value=n,l.needsUpdate=i>0),e.numPlanes=i,e.numIntersection=0}function h(t,n,i,r){const a=null!==t?t.length:0;let c=null;if(0!==a){if(c=l.value,!0!==r||null===c){const e=i+4*a,r=n.matrixWorldInverse;o.getNormalMatrix(r),(null===c||c.length<e)&&(c=new Float32Array(e));for(let e=0,n=i;e!==a;++e,n+=4)s.copy(t[e]).applyMatrix4(r,o),s.normal.toArray(c,n),c[n+3]=s.constant}l.value=c,l.needsUpdate=!0}return e.numPlanes=a,e.numIntersection=0,c}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(t,e,a){const s=0!==t.length||e||0!==i||r;return r=e,n=h(t,a,0),i=t.length,s},this.beginShadows=function(){a=!0,h(null)},this.endShadows=function(){a=!1,c()},this.setState=function(e,s,o){const u=e.clippingPlanes,d=e.clipIntersection,p=e.clipShadows,f=t.get(e);if(!r||null===u||0===u.length||a&&!p)a?h(null):c();else{const t=a?0:i,e=4*t;let r=f.clippingState||null;l.value=r,r=h(u,s,e,o);for(let t=0;t!==e;++t)r[t]=n[t];f.clippingState=r,this.numIntersection=d?this.numPlanes:0,this.numPlanes+=t}}}function fo(t){let e=new WeakMap;function n(t,e){return 303===e?t.mapping=Ii:304===e&&(t.mapping=Oi),t}function i(t){const n=t.target;n.removeEventListener(\"dispose\",i);const r=e.get(n);void 0!==r&&(e.delete(n),r.dispose())}return{get:function r(a){if(a&&a.isTexture&&!1===a.isRenderTargetTexture){const r=a.mapping;if(303===r||304===r){if(e.has(a)){return n(e.get(a).texture,a.mapping)}{const r=a.image;if(r&&r.height>0){const s=t.getRenderTarget(),o=new Ys(r.height/2);return o.fromEquirectangularTexture(t,a),e.set(a,o),t.setRenderTarget(s),a.addEventListener(\"dispose\",i),n(o.texture,a.mapping)}return null}}}return a},dispose:function a(){e=new WeakMap}}}oo.physical={uniforms:Hs([oo.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new br(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new ns(0)},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new br},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationTint:{value:new ns(0)},specularIntensity:{value:0},specularIntensityMap:{value:null},specularTint:{value:new ns(1,1,1)},specularTintMap:{value:null}}]),vertexShader:ao.meshphysical_vert,fragmentShader:ao.meshphysical_frag};class mo extends Vs{constructor(t=-1,e=1,n=1,i=-1,r=.1,a=2e3){super(),this.type=\"OrthographicCamera\",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=i,this.near=r,this.far=a,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,n,i,r,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-t,a=n+t,s=i+e,o=i-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=t*this.view.offsetX,a=r+t*this.view.width,s-=e*this.view.offsetY,o=s-e*this.view.height}this.projectionMatrix.makeOrthographic(r,a,s,o,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}mo.prototype.isOrthographicCamera=!0;class go extends Gs{constructor(t){super(t),this.type=\"RawShaderMaterial\"}}go.prototype.isRawShaderMaterial=!0;const vo=Math.pow(2,8),yo=[.125,.215,.35,.446,.526,.582],xo=5+yo.length,_o=20,Mo={[sr]:0,[or]:1,[cr]:2,3004:3,3005:4,3006:5,[lr]:6},wo=new is({side:1,depthWrite:!1,depthTest:!1}),bo=new zs(new Fs,wo),So=new mo,{_lodPlanes:To,_sizeLods:Eo,_sigmas:Ao}=zo(),Lo=new ns;let Co=null;const Ro=(1+Math.sqrt(5))/2,Po=1/Ro,Do=[new Ir(1,1,1),new Ir(-1,1,1),new Ir(1,1,-1),new Ir(-1,1,-1),new Ir(0,Ro,Po),new Ir(0,Ro,-Po),new Ir(Po,0,Ro),new Ir(-Po,0,Ro),new Ir(Ro,Po,0),new Ir(-Ro,Po,0)];function No(t){const e=Math.max(t.r,t.g,t.b),n=Math.min(Math.max(Math.ceil(Math.log2(e)),-128),127);t.multiplyScalar(Math.pow(2,-n));return(n+128)/255}class Io{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._blurMaterial=(function e(t){const e=new Float32Array(t),n=new Ir(0,1,0);return new go({name:\"SphericalGaussianBlur\",defines:{n:t},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:e},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:n},inputEncoding:{value:Mo[3e3]},outputEncoding:{value:Mo[3e3]}},vertexShader:ko(),fragmentShader:`\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform int samples;\\n\\t\\t\\tuniform float weights[ n ];\\n\\t\\t\\tuniform bool latitudinal;\\n\\t\\t\\tuniform float dTheta;\\n\\t\\t\\tuniform float mipInt;\\n\\t\\t\\tuniform vec3 poleAxis;\\n\\n\\t\\t\\t${Go()}\\n\\n\\t\\t\\t#define ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\t#include <cube_uv_reflection_fragment>\\n\\n\\t\\t\\tvec3 getSample( float theta, vec3 axis ) {\\n\\n\\t\\t\\t\\tfloat cosTheta = cos( theta );\\n\\t\\t\\t\\t// Rodrigues' axis-angle rotation\\n\\t\\t\\t\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t\\t\\t\\t+ cross( axis, vOutputDirection ) * sin( theta )\\n\\t\\t\\t\\t\\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\\n\\n\\t\\t\\t\\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\\n\\n\\t\\t\\t\\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\\n\\n\\t\\t\\t\\t\\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\taxis = normalize( axis );\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\\n\\n\\t\\t\\t\\tfor ( int i = 1; i < n; i++ ) {\\n\\n\\t\\t\\t\\t\\tif ( i >= samples ) {\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfloat theta = dTheta * float( i );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t`,blending:0,depthTest:!1,depthWrite:!1})})(_o),this._equirectShader=null,this._cubemapShader=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,i=100){Co=this._renderer.getRenderTarget();const r=this._allocateTargets();return this._sceneToCubeUV(t,n,i,r),e>0&&this._blur(r,0,0,e),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(t){return this._fromTexture(t)}fromCubemap(t){return this._fromTexture(t)}compileCubemapShader(){null===this._cubemapShader&&(this._cubemapShader=Ho(),this._compileMaterial(this._cubemapShader))}compileEquirectangularShader(){null===this._equirectShader&&(this._equirectShader=Bo(),this._compileMaterial(this._equirectShader))}dispose(){this._blurMaterial.dispose(),null!==this._cubemapShader&&this._cubemapShader.dispose(),null!==this._equirectShader&&this._equirectShader.dispose();for(let t=0;t<To.length;t++)To[t].dispose()}_cleanup(t){this._pingPongRenderTarget.dispose(),this._renderer.setRenderTarget(Co),t.scissorTest=!1,Fo(t,0,0,t.width,t.height)}_fromTexture(t){Co=this._renderer.getRenderTarget();const e=this._allocateTargets(t);return this._textureToCubeUV(t,e),this._applyPMREM(e),this._cleanup(e),e}_allocateTargets(t){const e={magFilter:Hi,minFilter:Hi,generateMipmaps:!1,type:Vi,format:1023,encoding:Oo(t)?t.encoding:cr,depthBuffer:!1},n=Uo(e);return n.depthBuffer=!t,this._pingPongRenderTarget=Uo(e),n}_compileMaterial(t){const e=new zs(To[0],t);this._renderer.compile(e,So)}_sceneToCubeUV(t,e,n,i){const r=new Ws(90,1,e,n),a=[1,-1,1,1,1,1],s=[1,1,1,-1,-1,-1],o=this._renderer,l=o.autoClear,c=o.outputEncoding,h=o.toneMapping;o.getClearColor(Lo),o.toneMapping=0,o.outputEncoding=sr,o.autoClear=!1;let u=!1;const d=t.background;if(d){if(d.isColor){wo.color.copy(d).convertSRGBToLinear(),t.background=null;const e=No(wo.color);wo.opacity=e,u=!0}}else{wo.color.copy(Lo).convertSRGBToLinear();const t=No(wo.color);wo.opacity=t,u=!0}for(let e=0;e<6;e++){const n=e%3;0==n?(r.up.set(0,a[e],0),r.lookAt(s[e],0,0)):1==n?(r.up.set(0,0,a[e]),r.lookAt(0,s[e],0)):(r.up.set(0,a[e],0),r.lookAt(0,0,s[e])),Fo(i,n*vo,e>2?vo:0,vo,vo),o.setRenderTarget(i),u&&o.render(bo,r),o.render(t,r)}o.toneMapping=h,o.outputEncoding=c,o.autoClear=l}_textureToCubeUV(t,e){const n=this._renderer;t.isCubeTexture?null==this._cubemapShader&&(this._cubemapShader=Ho()):null==this._equirectShader&&(this._equirectShader=Bo());const i=t.isCubeTexture?this._cubemapShader:this._equirectShader,r=new zs(To[0],i),a=i.uniforms;a.envMap.value=t,t.isCubeTexture||a.texelSize.value.set(1/t.image.width,1/t.image.height),a.inputEncoding.value=Mo[t.encoding],a.outputEncoding.value=Mo[e.texture.encoding],Fo(e,0,0,3*vo,2*vo),n.setRenderTarget(e),n.render(r,So)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;for(let e=1;e<xo;e++){const n=Math.sqrt(Ao[e]*Ao[e]-Ao[e-1]*Ao[e-1]);this._blur(t,e-1,e,n,Do[(e-1)%Do.length])}e.autoClear=n}_blur(t,e,n,i,r){const a=this._pingPongRenderTarget;this._halfBlur(t,a,e,n,i,\"latitudinal\",r),this._halfBlur(a,t,n,n,i,\"longitudinal\",r)}_halfBlur(t,e,n,i,r,a,s){const o=this._renderer,l=this._blurMaterial;\"latitudinal\"!==a&&\"longitudinal\"!==a&&console.error(\"blur direction must be either latitudinal or longitudinal!\");const c=new zs(To[i],l),h=l.uniforms,u=Eo[n]-1,d=isFinite(r)?Math.PI/(2*u):2*Math.PI/39,p=r/d,f=isFinite(r)?1+Math.floor(3*p):_o;f>_o&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${f} samples when the maximum is set to 20`);const m=[];let g=0;for(let t=0;t<_o;++t){const e=t/p,n=Math.exp(-e*e/2);m.push(n),0==t?g+=n:t<f&&(g+=2*n)}for(let t=0;t<m.length;t++)m[t]=m[t]/g;h.envMap.value=t.texture,h.samples.value=f,h.weights.value=m,h.latitudinal.value=\"latitudinal\"===a,s&&(h.poleAxis.value=s),h.dTheta.value=d,h.mipInt.value=8-n,h.inputEncoding.value=Mo[t.texture.encoding],h.outputEncoding.value=Mo[t.texture.encoding];const v=Eo[i];Fo(e,3*Math.max(0,vo-2*v),(0===i?0:2*vo)+2*v*(i>4?i-8+4:0),3*v,2*v),o.setRenderTarget(e),o.render(c,So)}}function Oo(t){return void 0!==t&&t.type===Vi&&(t.encoding===sr||t.encoding===or||t.encoding===lr)}function zo(){const t=[],e=[],n=[];let i=8;for(let r=0;r<xo;r++){const a=Math.pow(2,i);e.push(a);let s=1/a;r>4?s=yo[r-8+4-1]:0==r&&(s=0),n.push(s);const o=1/(a-1),l=-o/2,c=1+o/2,h=[l,l,c,l,c,c,l,l,c,c,l,c],u=6,d=6,p=3,f=2,m=1,g=new Float32Array(p*d*u),v=new Float32Array(f*d*u),y=new Float32Array(m*d*u);for(let t=0;t<u;t++){const e=t%3*2/3-1,n=t>2?0:-1;g.set([e,n,0,e+2/3,n,0,e+2/3,n+1,0,e,n,0,e+2/3,n+1,0,e,n+1,0],p*d*t),v.set(h,f*d*t);y.set([t,t,t,t,t,t],m*d*t)}const x=new ys;x.setAttribute(\"position\",new ss(g,p)),x.setAttribute(\"uv\",new ss(v,f)),x.setAttribute(\"faceIndex\",new ss(y,m)),t.push(x),i>4&&i--}return{_lodPlanes:t,_sizeLods:e,_sigmas:n}}function Uo(t){const e=new Pr(3*vo,3*vo,t);return e.texture.mapping=zi,e.texture.name=\"PMREM.cubeUv\",e.scissorTest=!0,e}function Fo(t,e,n,i,r){t.viewport.set(e,n,i,r),t.scissor.set(e,n,i,r)}function Bo(){const t=new br(1,1);return new go({name:\"EquirectangularToCubeUV\",uniforms:{envMap:{value:null},texelSize:{value:t},inputEncoding:{value:Mo[3e3]},outputEncoding:{value:Mo[3e3]}},vertexShader:ko(),fragmentShader:`\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform vec2 texelSize;\\n\\n\\t\\t\\t${Go()}\\n\\n\\t\\t\\t#include <common>\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\n\\t\\t\\t\\tvec3 outputDirection = normalize( vOutputDirection );\\n\\t\\t\\t\\tvec2 uv = equirectUv( outputDirection );\\n\\n\\t\\t\\t\\tvec2 f = fract( uv / texelSize - 0.5 );\\n\\t\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\t\\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x += texelSize.x;\\n\\t\\t\\t\\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.y += texelSize.y;\\n\\t\\t\\t\\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x -= texelSize.x;\\n\\t\\t\\t\\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\n\\t\\t\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\t\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\t\\t\\tgl_FragColor.rgb = mix( tm, bm, f.y );\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t`,blending:0,depthTest:!1,depthWrite:!1})}function Ho(){return new go({name:\"CubemapToCubeUV\",uniforms:{envMap:{value:null},inputEncoding:{value:Mo[3e3]},outputEncoding:{value:Mo[3e3]}},vertexShader:ko(),fragmentShader:`\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform samplerCube envMap;\\n\\n\\t\\t\\t${Go()}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t`,blending:0,depthTest:!1,depthWrite:!1})}function ko(){return\"\\n\\n\\t\\tprecision mediump float;\\n\\t\\tprecision mediump int;\\n\\n\\t\\tattribute vec3 position;\\n\\t\\tattribute vec2 uv;\\n\\t\\tattribute float faceIndex;\\n\\n\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t// RH coordinate system; PMREM face-indexing convention\\n\\t\\tvec3 getDirection( vec2 uv, float face ) {\\n\\n\\t\\t\\tuv = 2.0 * uv - 1.0;\\n\\n\\t\\t\\tvec3 direction = vec3( uv, 1.0 );\\n\\n\\t\\t\\tif ( face == 0.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx; // ( 1, v, u ) pos x\\n\\n\\t\\t\\t} else if ( face == 1.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\\n\\n\\t\\t\\t} else if ( face == 2.0 ) {\\n\\n\\t\\t\\t\\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\\n\\n\\t\\t\\t} else if ( face == 3.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\\n\\n\\t\\t\\t} else if ( face == 4.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\\n\\n\\t\\t\\t} else if ( face == 5.0 ) {\\n\\n\\t\\t\\t\\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn direction;\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvOutputDirection = getDirection( uv, faceIndex );\\n\\t\\t\\tgl_Position = vec4( position, 1.0 );\\n\\n\\t\\t}\\n\\t\"}function Go(){return\"\\n\\n\\t\\tuniform int inputEncoding;\\n\\t\\tuniform int outputEncoding;\\n\\n\\t\\t#include <encodings_pars_fragment>\\n\\n\\t\\tvec4 inputTexelToLinear( vec4 value ) {\\n\\n\\t\\t\\tif ( inputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( inputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn sRGBToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn RGBEToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 7.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 16.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn RGBDToLinear( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn GammaToLinear( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 linearToOutputTexel( vec4 value ) {\\n\\n\\t\\t\\tif ( outputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( outputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn LinearTosRGB( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBE( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 7.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 16.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBD( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn LinearToGamma( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 envMapTexelToLinear( vec4 color ) {\\n\\n\\t\\t\\treturn inputTexelToLinear( color );\\n\\n\\t\\t}\\n\\t\"}function Vo(t){let e=new WeakMap,n=null;function i(t){const n=t.target;n.removeEventListener(\"dispose\",i);const r=e.get(n);void 0!==r&&(r.delete(n),r.dispose())}return{get:function r(a){if(a&&a.isTexture&&!1===a.isRenderTargetTexture){const r=a.mapping,s=303===r||304===r,o=r===Ii||r===Oi;if(s||o){if(e.has(a))return e.get(a).texture;{const r=a.image;if(s&&r&&r.height>0||o&&r&&(function s(t){let e=0;const n=6;for(let i=0;i<n;i++)void 0!==t[i]&&e++;return e===n})(r)){const r=t.getRenderTarget();null===n&&(n=new Io(t));const o=s?n.fromEquirectangular(a):n.fromCubemap(a);return e.set(a,o),t.setRenderTarget(r),a.addEventListener(\"dispose\",i),o.texture}return null}}}return a},dispose:function a(){e=new WeakMap,null!==n&&(n.dispose(),n=null)}}}function Wo(t){const e={};function n(n){if(void 0!==e[n])return e[n];let i;switch(n){case\"WEBGL_depth_texture\":i=t.getExtension(\"WEBGL_depth_texture\")||t.getExtension(\"MOZ_WEBGL_depth_texture\")||t.getExtension(\"WEBKIT_WEBGL_depth_texture\");break;case\"EXT_texture_filter_anisotropic\":i=t.getExtension(\"EXT_texture_filter_anisotropic\")||t.getExtension(\"MOZ_EXT_texture_filter_anisotropic\")||t.getExtension(\"WEBKIT_EXT_texture_filter_anisotropic\");break;case\"WEBGL_compressed_texture_s3tc\":i=t.getExtension(\"WEBGL_compressed_texture_s3tc\")||t.getExtension(\"MOZ_WEBGL_compressed_texture_s3tc\")||t.getExtension(\"WEBKIT_WEBGL_compressed_texture_s3tc\");break;case\"WEBGL_compressed_texture_pvrtc\":i=t.getExtension(\"WEBGL_compressed_texture_pvrtc\")||t.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\");break;default:i=t.getExtension(n)}return e[n]=i,i}return{has:function(t){return null!==n(t)},init:function(t){t.isWebGL2?n(\"EXT_color_buffer_float\"):(n(\"WEBGL_depth_texture\"),n(\"OES_texture_float\"),n(\"OES_texture_half_float\"),n(\"OES_texture_half_float_linear\"),n(\"OES_standard_derivatives\"),n(\"OES_element_index_uint\"),n(\"OES_vertex_array_object\"),n(\"ANGLE_instanced_arrays\")),n(\"OES_texture_float_linear\"),n(\"EXT_color_buffer_half_float\")},get:function(t){const e=n(t);return null===e&&console.warn(\"THREE.WebGLRenderer: \"+t+\" extension not supported.\"),e}}}function jo(t,e,n,i){const r={},a=new WeakMap;function s(t){const o=t.target;null!==o.index&&e.remove(o.index);for(const t in o.attributes)e.remove(o.attributes[t]);o.removeEventListener(\"dispose\",s),delete r[o.id];const l=a.get(o);l&&(e.remove(l),a.delete(o)),i.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,n.memory.geometries--}function o(t){const n=[],i=t.index,r=t.attributes.position;let s=0;if(null!==i){const t=i.array;s=i.version;for(let e=0,i=t.length;e<i;e+=3){const i=t[e+0],r=t[e+1],a=t[e+2];n.push(i,r,r,a,a,i)}}else{s=r.version;for(let t=0,e=r.array.length/3-1;t<e;t+=3){const e=t+0,i=t+1,r=t+2;n.push(e,i,i,r,r,e)}}const o=new(hs(n)>65535?ls:os)(n,1);o.version=s;const l=a.get(t);l&&e.remove(l),a.set(t,o)}return{get:function l(t,e){return!0===r[e.id]||(e.addEventListener(\"dispose\",s),r[e.id]=!0,n.memory.geometries++),e},update:function c(t){const n=t.attributes;for(const t in n)e.update(n[t],34962);const i=t.morphAttributes;for(const t in i){const n=i[t];for(let t=0,i=n.length;t<i;t++)e.update(n[t],34962)}},getWireframeAttribute:function h(t){const e=a.get(t);if(e){const n=t.index;null!==n&&e.version<n.version&&o(t)}else o(t);return a.get(t)}}}function qo(t,e,n,i){const r=i.isWebGL2;let a,s,o;this.setMode=function l(t){a=t},this.setIndex=function c(t){s=t.type,o=t.bytesPerElement},this.render=function h(e,i){t.drawElements(a,i,s,e*o),n.update(i,a,1)},this.renderInstances=function u(i,l,c){if(0===c)return;let h,u;if(r)h=t,u=\"drawElementsInstanced\";else if(h=e.get(\"ANGLE_instanced_arrays\"),u=\"drawElementsInstancedANGLE\",null===h)return void console.error(\"THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");h[u](a,l,s,i*o,c),n.update(l,a,c)}}function Xo(t){const e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function n(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function i(t,n,r){switch(e.calls++,n){case 4:e.triangles+=r*(t/3);break;case 1:e.lines+=r*(t/2);break;case 3:e.lines+=r*(t-1);break;case 2:e.lines+=r*t;break;case 0:e.points+=r*t;break;default:console.error(\"THREE.WebGLInfo: Unknown draw mode:\",n)}}}}function Yo(t,e){return t[0]-e[0]}function Zo(t,e){return Math.abs(e[1])-Math.abs(t[1])}function Jo(t){const e={},n=new Float32Array(8),i=[];for(let t=0;t<8;t++)i[t]=[t,0];return{update:function r(a,s,o,l){const c=a.morphTargetInfluences,h=void 0===c?0:c.length;let u=e[s.id];if(void 0===u||u.length!==h){u=[];for(let t=0;t<h;t++)u[t]=[t,0];e[s.id]=u}for(let t=0;t<h;t++){const e=u[t];e[0]=t,e[1]=c[t]}u.sort(Zo);for(let t=0;t<8;t++)t<h&&u[t][1]?(i[t][0]=u[t][0],i[t][1]=u[t][1]):(i[t][0]=Number.MAX_SAFE_INTEGER,i[t][1]=0);i.sort(Yo);const d=s.morphAttributes.position,p=s.morphAttributes.normal;let f=0;for(let t=0;t<8;t++){const e=i[t],r=e[0],a=e[1];r!==Number.MAX_SAFE_INTEGER&&a?(d&&s.getAttribute(\"morphTarget\"+t)!==d[r]&&s.setAttribute(\"morphTarget\"+t,d[r]),p&&s.getAttribute(\"morphNormal\"+t)!==p[r]&&s.setAttribute(\"morphNormal\"+t,p[r]),n[t]=a,f+=a):(d&&!0===s.hasAttribute(\"morphTarget\"+t)&&s.deleteAttribute(\"morphTarget\"+t),p&&!0===s.hasAttribute(\"morphNormal\"+t)&&s.deleteAttribute(\"morphNormal\"+t),n[t]=0)}const m=s.morphTargetsRelative?1:1-f;l.getUniforms().setValue(t,\"morphTargetBaseInfluence\",m),l.getUniforms().setValue(t,\"morphTargetInfluences\",n)}}}function Qo(t,e,n,i){let r=new WeakMap;function a(t){const e=t.target;e.removeEventListener(\"dispose\",a),n.remove(e.instanceMatrix),null!==e.instanceColor&&n.remove(e.instanceColor)}return{update:function s(t){const s=i.render.frame,o=e.get(t,t.geometry);return r.get(o)!==s&&(e.update(o),r.set(o,s)),t.isInstancedMesh&&(!1===t.hasEventListener(\"dispose\",a)&&t.addEventListener(\"dispose\",a),n.update(t.instanceMatrix,34962),null!==t.instanceColor&&n.update(t.instanceColor,34962)),o},dispose:function o(){r=new WeakMap}}}class Ko extends Lr{constructor(t=null,e=1,n=1,i=1){super(null),this.image={data:t,width:e,height:n,depth:i},this.magFilter=Hi,this.minFilter=Hi,this.wrapR=Fi,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}Ko.prototype.isDataTexture2DArray=!0;class $o extends Lr{constructor(t=null,e=1,n=1,i=1){super(null),this.image={data:t,width:e,height:n,depth:i},this.magFilter=Hi,this.minFilter=Hi,this.wrapR=Fi,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}$o.prototype.isDataTexture3D=!0;const tl=new Lr,el=new Ko,nl=new $o,il=new Xs,rl=[],al=[],sl=new Float32Array(16),ol=new Float32Array(9),ll=new Float32Array(4);function cl(t,e,n){const i=t[0];if(i<=0||i>0)return t;const r=e*n;let a=rl[r];if(void 0===a&&(a=new Float32Array(r),rl[r]=a),0!==e){i.toArray(a,0);for(let i=1,r=0;i!==e;++i)r+=n,t[i].toArray(a,r)}return a}function hl(t,e){if(t.length!==e.length)return!1;for(let n=0,i=t.length;n<i;n++)if(t[n]!==e[n])return!1;return!0}function ul(t,e){for(let n=0,i=e.length;n<i;n++)t[n]=e[n]}function dl(t,e){let n=al[e];void 0===n&&(n=new Int32Array(e),al[e]=n);for(let i=0;i!==e;++i)n[i]=t.allocateTextureUnit();return n}function pl(t,e){const n=this.cache;n[0]!==e&&(t.uniform1f(this.addr,e),n[0]=e)}function fl(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(hl(n,e))return;t.uniform2fv(this.addr,e),ul(n,e)}}function ml(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(void 0!==e.r)n[0]===e.r&&n[1]===e.g&&n[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(hl(n,e))return;t.uniform3fv(this.addr,e),ul(n,e)}}function gl(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(hl(n,e))return;t.uniform4fv(this.addr,e),ul(n,e)}}function vl(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(hl(n,e))return;t.uniformMatrix2fv(this.addr,!1,e),ul(n,e)}else{if(hl(n,i))return;ll.set(i),t.uniformMatrix2fv(this.addr,!1,ll),ul(n,i)}}function yl(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(hl(n,e))return;t.uniformMatrix3fv(this.addr,!1,e),ul(n,e)}else{if(hl(n,i))return;ol.set(i),t.uniformMatrix3fv(this.addr,!1,ol),ul(n,i)}}function xl(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(hl(n,e))return;t.uniformMatrix4fv(this.addr,!1,e),ul(n,e)}else{if(hl(n,i))return;sl.set(i),t.uniformMatrix4fv(this.addr,!1,sl),ul(n,i)}}function _l(t,e){const n=this.cache;n[0]!==e&&(t.uniform1i(this.addr,e),n[0]=e)}function Ml(t,e){const n=this.cache;hl(n,e)||(t.uniform2iv(this.addr,e),ul(n,e))}function wl(t,e){const n=this.cache;hl(n,e)||(t.uniform3iv(this.addr,e),ul(n,e))}function bl(t,e){const n=this.cache;hl(n,e)||(t.uniform4iv(this.addr,e),ul(n,e))}function Sl(t,e){const n=this.cache;n[0]!==e&&(t.uniform1ui(this.addr,e),n[0]=e)}function Tl(t,e){const n=this.cache;hl(n,e)||(t.uniform2uiv(this.addr,e),ul(n,e))}function El(t,e){const n=this.cache;hl(n,e)||(t.uniform3uiv(this.addr,e),ul(n,e))}function Al(t,e){const n=this.cache;hl(n,e)||(t.uniform4uiv(this.addr,e),ul(n,e))}function Ll(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.safeSetTexture2D(e||tl,r)}function Cl(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture3D(e||nl,r)}function Rl(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.safeSetTextureCube(e||il,r)}function Pl(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture2DArray(e||el,r)}function Dl(t,e){t.uniform1fv(this.addr,e)}function Nl(t,e){const n=cl(e,this.size,2);t.uniform2fv(this.addr,n)}function Il(t,e){const n=cl(e,this.size,3);t.uniform3fv(this.addr,n)}function Ol(t,e){const n=cl(e,this.size,4);t.uniform4fv(this.addr,n)}function zl(t,e){const n=cl(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,n)}function Ul(t,e){const n=cl(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,n)}function Fl(t,e){const n=cl(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,n)}function Bl(t,e){t.uniform1iv(this.addr,e)}function Hl(t,e){t.uniform2iv(this.addr,e)}function kl(t,e){t.uniform3iv(this.addr,e)}function Gl(t,e){t.uniform4iv(this.addr,e)}function Vl(t,e){t.uniform1uiv(this.addr,e)}function Wl(t,e){t.uniform2uiv(this.addr,e)}function jl(t,e){t.uniform3uiv(this.addr,e)}function ql(t,e){t.uniform4uiv(this.addr,e)}function Xl(t,e,n){const i=e.length,r=dl(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t)n.safeSetTexture2D(e[t]||tl,r[t])}function Yl(t,e,n){const i=e.length,r=dl(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t)n.safeSetTextureCube(e[t]||il,r[t])}function Zl(t,e,n){this.id=t,this.addr=n,this.cache=[],this.setValue=(function i(t){switch(t){case 5126:return pl;case 35664:return fl;case 35665:return ml;case 35666:return gl;case 35674:return vl;case 35675:return yl;case 35676:return xl;case 5124:case 35670:return _l;case 35667:case 35671:return Ml;case 35668:case 35672:return wl;case 35669:case 35673:return bl;case 5125:return Sl;case 36294:return Tl;case 36295:return El;case 36296:return Al;case 35678:case 36198:case 36298:case 36306:case 35682:return Ll;case 35679:case 36299:case 36307:return Cl;case 35680:case 36300:case 36308:case 36293:return Rl;case 36289:case 36303:case 36311:case 36292:return Pl}})(e.type)}function Jl(t,e,n){this.id=t,this.addr=n,this.cache=[],this.size=e.size,this.setValue=(function i(t){switch(t){case 5126:return Dl;case 35664:return Nl;case 35665:return Il;case 35666:return Ol;case 35674:return zl;case 35675:return Ul;case 35676:return Fl;case 5124:case 35670:return Bl;case 35667:case 35671:return Hl;case 35668:case 35672:return kl;case 35669:case 35673:return Gl;case 5125:return Vl;case 36294:return Wl;case 36295:return jl;case 36296:return ql;case 35678:case 36198:case 36298:case 36306:case 35682:return Xl;case 35680:case 36300:case 36308:case 36293:return Yl}})(e.type)}function Ql(t){this.id=t,this.seq=[],this.map={}}Jl.prototype.updateCache=function(t){const e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),ul(e,t)},Ql.prototype.setValue=function(t,e,n){const i=this.seq;for(let r=0,a=i.length;r!==a;++r){const a=i[r];a.setValue(t,e[a.id],n)}};const Kl=/(\\w+)(\\])?(\\[|\\.)?/g;function $l(t,e){t.seq.push(e),t.map[e.id]=e}function tc(t,e,n){const i=t.name,r=i.length;for(Kl.lastIndex=0;;){const a=Kl.exec(i),s=Kl.lastIndex;let o=a[1];const l=a[3];if(\"]\"===a[2]&&(o|=0),void 0===l||\"[\"===l&&s+2===r){$l(n,void 0===l?new Zl(o,t,e):new Jl(o,t,e));break}{let t=n.map[o];void 0===t&&(t=new Ql(o),$l(n,t)),n=t}}}function ec(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,35718);for(let i=0;i<n;++i){const n=t.getActiveUniform(e,i);tc(n,t.getUniformLocation(e,n.name),this)}}function nc(t,e,n){const i=t.createShader(e);return t.shaderSource(i,n),t.compileShader(i),i}ec.prototype.setValue=function(t,e,n,i){const r=this.map[e];void 0!==r&&r.setValue(t,n,i)},ec.prototype.setOptional=function(t,e,n){const i=e[n];void 0!==i&&this.setValue(t,n,i)},ec.upload=function(t,e,n,i){for(let r=0,a=e.length;r!==a;++r){const a=e[r],s=n[a.id];!1!==s.needsUpdate&&a.setValue(t,s.value,i)}},ec.seqWithValue=function(t,e){const n=[];for(let i=0,r=t.length;i!==r;++i){const r=t[i];r.id in e&&n.push(r)}return n};let ic=0;function rc(t){switch(t){case sr:return[\"Linear\",\"( value )\"];case or:return[\"sRGB\",\"( value )\"];case cr:return[\"RGBE\",\"( value )\"];case 3004:return[\"RGBM\",\"( value, 7.0 )\"];case 3005:return[\"RGBM\",\"( value, 16.0 )\"];case 3006:return[\"RGBD\",\"( value, 256.0 )\"];case lr:return[\"Gamma\",\"( value, float( GAMMA_FACTOR ) )\"];case 3003:return[\"LogLuv\",\"( value )\"];default:return console.warn(\"THREE.WebGLProgram: Unsupported encoding:\",t),[\"Linear\",\"( value )\"]}}function ac(t,e,n){const i=t.getShaderParameter(e,35713),r=t.getShaderInfoLog(e).trim();if(i&&\"\"===r)return\"\";return\"THREE.WebGLShader: gl.getShaderInfoLog() \"+n+\"\\n\"+r+(function a(t){const e=t.split(\"\\n\");for(let t=0;t<e.length;t++)e[t]=t+1+\": \"+e[t];return e.join(\"\\n\")})(t.getShaderSource(e))}function sc(t,e){const n=rc(e);return\"vec4 \"+t+\"( vec4 value ) { return \"+n[0]+\"ToLinear\"+n[1]+\"; }\"}function oc(t,e){const n=rc(e);return\"vec4 \"+t+\"( vec4 value ) { return LinearTo\"+n[0]+n[1]+\"; }\"}function lc(t,e){let n;switch(e){case 1:n=\"Linear\";break;case 2:n=\"Reinhard\";break;case 3:n=\"OptimizedCineon\";break;case 4:n=\"ACESFilmic\";break;case 5:n=\"Custom\";break;default:console.warn(\"THREE.WebGLProgram: Unsupported toneMapping:\",e),n=\"Linear\"}return\"vec3 \"+t+\"( vec3 color ) { return \"+n+\"ToneMapping( color ); }\"}function cc(t){return\"\"!==t}function hc(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function uc(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const dc=/^[ \\t]*#include +<([\\w\\d./]+)>/gm;function pc(t){return t.replace(dc,fc)}function fc(t,e){const n=ao[e];if(void 0===n)throw new Error(\"Can not resolve #include <\"+e+\">\");return pc(n)}const mc=/#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g,gc=/#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;function vc(t){return t.replace(gc,xc).replace(mc,yc)}function yc(t,e,n,i){return console.warn(\"WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.\"),xc(t,e,n,i)}function xc(t,e,n,i){let r=\"\";for(let t=parseInt(e);t<parseInt(n);t++)r+=i.replace(/\\[\\s*i\\s*\\]/g,\"[ \"+t+\" ]\").replace(/UNROLLED_LOOP_INDEX/g,t);return r}function _c(t){let e=\"precision \"+t.precision+\" float;\\nprecision \"+t.precision+\" int;\";return\"highp\"===t.precision?e+=\"\\n#define HIGH_PRECISION\":\"mediump\"===t.precision?e+=\"\\n#define MEDIUM_PRECISION\":\"lowp\"===t.precision&&(e+=\"\\n#define LOW_PRECISION\"),e}function Mc(t,e,n,i){const r=t.getContext(),a=n.defines;let s=n.vertexShader,o=n.fragmentShader;const l=(function c(t){let e=\"SHADOWMAP_TYPE_BASIC\";return 1===t.shadowMapType?e=\"SHADOWMAP_TYPE_PCF\":2===t.shadowMapType?e=\"SHADOWMAP_TYPE_PCF_SOFT\":3===t.shadowMapType&&(e=\"SHADOWMAP_TYPE_VSM\"),e})(n),h=(function u(t){let e=\"ENVMAP_TYPE_CUBE\";if(t.envMap)switch(t.envMapMode){case Ii:case Oi:e=\"ENVMAP_TYPE_CUBE\";break;case zi:case 307:e=\"ENVMAP_TYPE_CUBE_UV\"}return e})(n),d=(function p(t){let e=\"ENVMAP_MODE_REFLECTION\";if(t.envMap)switch(t.envMapMode){case Oi:case 307:e=\"ENVMAP_MODE_REFRACTION\"}return e})(n),f=(function m(t){let e=\"ENVMAP_BLENDING_NONE\";if(t.envMap)switch(t.combine){case 0:e=\"ENVMAP_BLENDING_MULTIPLY\";break;case 1:e=\"ENVMAP_BLENDING_MIX\";break;case 2:e=\"ENVMAP_BLENDING_ADD\"}return e})(n),g=t.gammaFactor>0?t.gammaFactor:1,v=n.isWebGL2?\"\":(function y(t){return[t.extensionDerivatives||t.envMapCubeUV||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading||\"physical\"===t.shaderID?\"#extension GL_OES_standard_derivatives : enable\":\"\",(t.extensionFragDepth||t.logarithmicDepthBuffer)&&t.rendererExtensionFragDepth?\"#extension GL_EXT_frag_depth : enable\":\"\",t.extensionDrawBuffers&&t.rendererExtensionDrawBuffers?\"#extension GL_EXT_draw_buffers : require\":\"\",(t.extensionShaderTextureLOD||t.envMap||t.transmission>0)&&t.rendererExtensionShaderTextureLod?\"#extension GL_EXT_shader_texture_lod : enable\":\"\"].filter(cc).join(\"\\n\")})(n),x=(function _(t){const e=[];for(const n in t){const i=t[n];!1!==i&&e.push(\"#define \"+n+\" \"+i)}return e.join(\"\\n\")})(a),M=r.createProgram();let w,b,S=n.glslVersion?\"#version \"+n.glslVersion+\"\\n\":\"\";n.isRawShaderMaterial?(w=[x].filter(cc).join(\"\\n\"),w.length>0&&(w+=\"\\n\"),b=[v,x].filter(cc).join(\"\\n\"),b.length>0&&(b+=\"\\n\")):(w=[_c(n),\"#define SHADER_NAME \"+n.shaderName,x,n.instancing?\"#define USE_INSTANCING\":\"\",n.instancingColor?\"#define USE_INSTANCING_COLOR\":\"\",n.supportsVertexTextures?\"#define VERTEX_TEXTURES\":\"\",\"#define GAMMA_FACTOR \"+g,\"#define MAX_BONES \"+n.maxBones,n.useFog&&n.fog?\"#define USE_FOG\":\"\",n.useFog&&n.fogExp2?\"#define FOG_EXP2\":\"\",n.map?\"#define USE_MAP\":\"\",n.envMap?\"#define USE_ENVMAP\":\"\",n.envMap?\"#define \"+d:\"\",n.lightMap?\"#define USE_LIGHTMAP\":\"\",n.aoMap?\"#define USE_AOMAP\":\"\",n.emissiveMap?\"#define USE_EMISSIVEMAP\":\"\",n.bumpMap?\"#define USE_BUMPMAP\":\"\",n.normalMap?\"#define USE_NORMALMAP\":\"\",n.normalMap&&n.objectSpaceNormalMap?\"#define OBJECTSPACE_NORMALMAP\":\"\",n.normalMap&&n.tangentSpaceNormalMap?\"#define TANGENTSPACE_NORMALMAP\":\"\",n.clearcoatMap?\"#define USE_CLEARCOATMAP\":\"\",n.clearcoatRoughnessMap?\"#define USE_CLEARCOAT_ROUGHNESSMAP\":\"\",n.clearcoatNormalMap?\"#define USE_CLEARCOAT_NORMALMAP\":\"\",n.displacementMap&&n.supportsVertexTextures?\"#define USE_DISPLACEMENTMAP\":\"\",n.specularMap?\"#define USE_SPECULARMAP\":\"\",n.specularIntensityMap?\"#define USE_SPECULARINTENSITYMAP\":\"\",n.specularTintMap?\"#define USE_SPECULARTINTMAP\":\"\",n.roughnessMap?\"#define USE_ROUGHNESSMAP\":\"\",n.metalnessMap?\"#define USE_METALNESSMAP\":\"\",n.alphaMap?\"#define USE_ALPHAMAP\":\"\",n.transmission?\"#define USE_TRANSMISSION\":\"\",n.transmissionMap?\"#define USE_TRANSMISSIONMAP\":\"\",n.thicknessMap?\"#define USE_THICKNESSMAP\":\"\",n.vertexTangents?\"#define USE_TANGENT\":\"\",n.vertexColors?\"#define USE_COLOR\":\"\",n.vertexAlphas?\"#define USE_COLOR_ALPHA\":\"\",n.vertexUvs?\"#define USE_UV\":\"\",n.uvsVertexOnly?\"#define UVS_VERTEX_ONLY\":\"\",n.flatShading?\"#define FLAT_SHADED\":\"\",n.skinning?\"#define USE_SKINNING\":\"\",n.useVertexTexture?\"#define BONE_TEXTURE\":\"\",n.morphTargets?\"#define USE_MORPHTARGETS\":\"\",n.morphNormals&&!1===n.flatShading?\"#define USE_MORPHNORMALS\":\"\",n.doubleSided?\"#define DOUBLE_SIDED\":\"\",n.flipSided?\"#define FLIP_SIDED\":\"\",n.shadowMapEnabled?\"#define USE_SHADOWMAP\":\"\",n.shadowMapEnabled?\"#define \"+l:\"\",n.sizeAttenuation?\"#define USE_SIZEATTENUATION\":\"\",n.logarithmicDepthBuffer?\"#define USE_LOGDEPTHBUF\":\"\",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?\"#define USE_LOGDEPTHBUF_EXT\":\"\",\"uniform mat4 modelMatrix;\",\"uniform mat4 modelViewMatrix;\",\"uniform mat4 projectionMatrix;\",\"uniform mat4 viewMatrix;\",\"uniform mat3 normalMatrix;\",\"uniform vec3 cameraPosition;\",\"uniform bool isOrthographic;\",\"#ifdef USE_INSTANCING\",\"\\tattribute mat4 instanceMatrix;\",\"#endif\",\"#ifdef USE_INSTANCING_COLOR\",\"\\tattribute vec3 instanceColor;\",\"#endif\",\"attribute vec3 position;\",\"attribute vec3 normal;\",\"attribute vec2 uv;\",\"#ifdef USE_TANGENT\",\"\\tattribute vec4 tangent;\",\"#endif\",\"#if defined( USE_COLOR_ALPHA )\",\"\\tattribute vec4 color;\",\"#elif defined( USE_COLOR )\",\"\\tattribute vec3 color;\",\"#endif\",\"#ifdef USE_MORPHTARGETS\",\"\\tattribute vec3 morphTarget0;\",\"\\tattribute vec3 morphTarget1;\",\"\\tattribute vec3 morphTarget2;\",\"\\tattribute vec3 morphTarget3;\",\"\\t#ifdef USE_MORPHNORMALS\",\"\\t\\tattribute vec3 morphNormal0;\",\"\\t\\tattribute vec3 morphNormal1;\",\"\\t\\tattribute vec3 morphNormal2;\",\"\\t\\tattribute vec3 morphNormal3;\",\"\\t#else\",\"\\t\\tattribute vec3 morphTarget4;\",\"\\t\\tattribute vec3 morphTarget5;\",\"\\t\\tattribute vec3 morphTarget6;\",\"\\t\\tattribute vec3 morphTarget7;\",\"\\t#endif\",\"#endif\",\"#ifdef USE_SKINNING\",\"\\tattribute vec4 skinIndex;\",\"\\tattribute vec4 skinWeight;\",\"#endif\",\"\\n\"].filter(cc).join(\"\\n\"),b=[v,_c(n),\"#define SHADER_NAME \"+n.shaderName,x,n.alphaTest?\"#define ALPHATEST \"+n.alphaTest+(n.alphaTest%1?\"\":\".0\"):\"\",\"#define GAMMA_FACTOR \"+g,n.useFog&&n.fog?\"#define USE_FOG\":\"\",n.useFog&&n.fogExp2?\"#define FOG_EXP2\":\"\",n.map?\"#define USE_MAP\":\"\",n.matcap?\"#define USE_MATCAP\":\"\",n.envMap?\"#define USE_ENVMAP\":\"\",n.envMap?\"#define \"+h:\"\",n.envMap?\"#define \"+d:\"\",n.envMap?\"#define \"+f:\"\",n.lightMap?\"#define USE_LIGHTMAP\":\"\",n.aoMap?\"#define USE_AOMAP\":\"\",n.emissiveMap?\"#define USE_EMISSIVEMAP\":\"\",n.bumpMap?\"#define USE_BUMPMAP\":\"\",n.normalMap?\"#define USE_NORMALMAP\":\"\",n.normalMap&&n.objectSpaceNormalMap?\"#define OBJECTSPACE_NORMALMAP\":\"\",n.normalMap&&n.tangentSpaceNormalMap?\"#define TANGENTSPACE_NORMALMAP\":\"\",n.clearcoatMap?\"#define USE_CLEARCOATMAP\":\"\",n.clearcoatRoughnessMap?\"#define USE_CLEARCOAT_ROUGHNESSMAP\":\"\",n.clearcoatNormalMap?\"#define USE_CLEARCOAT_NORMALMAP\":\"\",n.specularMap?\"#define USE_SPECULARMAP\":\"\",n.specularIntensityMap?\"#define USE_SPECULARINTENSITYMAP\":\"\",n.specularTintMap?\"#define USE_SPECULARTINTMAP\":\"\",n.roughnessMap?\"#define USE_ROUGHNESSMAP\":\"\",n.metalnessMap?\"#define USE_METALNESSMAP\":\"\",n.alphaMap?\"#define USE_ALPHAMAP\":\"\",n.sheen?\"#define USE_SHEEN\":\"\",n.transmission?\"#define USE_TRANSMISSION\":\"\",n.transmissionMap?\"#define USE_TRANSMISSIONMAP\":\"\",n.thicknessMap?\"#define USE_THICKNESSMAP\":\"\",n.vertexTangents?\"#define USE_TANGENT\":\"\",n.vertexColors||n.instancingColor?\"#define USE_COLOR\":\"\",n.vertexAlphas?\"#define USE_COLOR_ALPHA\":\"\",n.vertexUvs?\"#define USE_UV\":\"\",n.uvsVertexOnly?\"#define UVS_VERTEX_ONLY\":\"\",n.gradientMap?\"#define USE_GRADIENTMAP\":\"\",n.flatShading?\"#define FLAT_SHADED\":\"\",n.doubleSided?\"#define DOUBLE_SIDED\":\"\",n.flipSided?\"#define FLIP_SIDED\":\"\",n.shadowMapEnabled?\"#define USE_SHADOWMAP\":\"\",n.shadowMapEnabled?\"#define \"+l:\"\",n.premultipliedAlpha?\"#define PREMULTIPLIED_ALPHA\":\"\",n.physicallyCorrectLights?\"#define PHYSICALLY_CORRECT_LIGHTS\":\"\",n.logarithmicDepthBuffer?\"#define USE_LOGDEPTHBUF\":\"\",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?\"#define USE_LOGDEPTHBUF_EXT\":\"\",(n.extensionShaderTextureLOD||n.envMap)&&n.rendererExtensionShaderTextureLod?\"#define TEXTURE_LOD_EXT\":\"\",\"uniform mat4 viewMatrix;\",\"uniform vec3 cameraPosition;\",\"uniform bool isOrthographic;\",0!==n.toneMapping?\"#define TONE_MAPPING\":\"\",0!==n.toneMapping?ao.tonemapping_pars_fragment:\"\",0!==n.toneMapping?lc(\"toneMapping\",n.toneMapping):\"\",n.dithering?\"#define DITHERING\":\"\",ao.encodings_pars_fragment,n.map?sc(\"mapTexelToLinear\",n.mapEncoding):\"\",n.matcap?sc(\"matcapTexelToLinear\",n.matcapEncoding):\"\",n.envMap?sc(\"envMapTexelToLinear\",n.envMapEncoding):\"\",n.emissiveMap?sc(\"emissiveMapTexelToLinear\",n.emissiveMapEncoding):\"\",n.specularTintMap?sc(\"specularTintMapTexelToLinear\",n.specularTintMapEncoding):\"\",n.lightMap?sc(\"lightMapTexelToLinear\",n.lightMapEncoding):\"\",oc(\"linearToOutputTexel\",n.outputEncoding),n.depthPacking?\"#define DEPTH_PACKING \"+n.depthPacking:\"\",\"\\n\"].filter(cc).join(\"\\n\")),s=pc(s),s=hc(s,n),s=uc(s,n),o=pc(o),o=hc(o,n),o=uc(o,n),s=vc(s),o=vc(o),n.isWebGL2&&!0!==n.isRawShaderMaterial&&(S=\"#version 300 es\\n\",w=[\"#define attribute in\",\"#define varying out\",\"#define texture2D texture\"].join(\"\\n\")+\"\\n\"+w,b=[\"#define varying in\",n.glslVersion===pr?\"\":\"out highp vec4 pc_fragColor;\",n.glslVersion===pr?\"\":\"#define gl_FragColor pc_fragColor\",\"#define gl_FragDepthEXT gl_FragDepth\",\"#define texture2D texture\",\"#define textureCube texture\",\"#define texture2DProj textureProj\",\"#define texture2DLodEXT textureLod\",\"#define texture2DProjLodEXT textureProjLod\",\"#define textureCubeLodEXT textureLod\",\"#define texture2DGradEXT textureGrad\",\"#define texture2DProjGradEXT textureProjGrad\",\"#define textureCubeGradEXT textureGrad\"].join(\"\\n\")+\"\\n\"+b);const T=S+b+o,E=nc(r,35633,S+w+s),A=nc(r,35632,T);if(r.attachShader(M,E),r.attachShader(M,A),void 0!==n.index0AttributeName?r.bindAttribLocation(M,0,n.index0AttributeName):!0===n.morphTargets&&r.bindAttribLocation(M,0,\"position\"),r.linkProgram(M),t.debug.checkShaderErrors){const t=r.getProgramInfoLog(M).trim(),e=r.getShaderInfoLog(E).trim(),n=r.getShaderInfoLog(A).trim();let i=!0,a=!0;if(!1===r.getProgramParameter(M,35714)){i=!1;const e=ac(r,E,\"vertex\"),n=ac(r,A,\"fragment\");console.error(\"THREE.WebGLProgram: shader error: \",r.getError(),\"35715\",r.getProgramParameter(M,35715),\"gl.getProgramInfoLog\",t,e,n)}else\"\"!==t?console.warn(\"THREE.WebGLProgram: gl.getProgramInfoLog()\",t):\"\"!==e&&\"\"!==n||(a=!1);a&&(this.diagnostics={runnable:i,programLog:t,vertexShader:{log:e,prefix:w},fragmentShader:{log:n,prefix:b}})}let L,C;return r.deleteShader(E),r.deleteShader(A),this.getUniforms=function(){return void 0===L&&(L=new ec(r,M)),L},this.getAttributes=function(){return void 0===C&&(C=(function t(e,n){const i={},r=e.getProgramParameter(n,35721);for(let t=0;t<r;t++){const r=e.getActiveAttrib(n,t).name;i[r]=e.getAttribLocation(n,r)}return i})(r,M)),C},this.destroy=function(){i.releaseStatesOfProgram(this),r.deleteProgram(M),this.program=void 0},this.name=n.shaderName,this.id=ic++,this.cacheKey=e,this.usedTimes=1,this.program=M,this.vertexShader=E,this.fragmentShader=A,this}function wc(t,e,n,i,r,a,s){const o=[],l=r.isWebGL2,c=r.logarithmicDepthBuffer,h=r.floatVertexTextures,u=r.maxVertexUniforms,d=r.vertexTextures;let p=r.precision;const f={MeshDepthMaterial:\"depth\",MeshDistanceMaterial:\"distanceRGBA\",MeshNormalMaterial:\"normal\",MeshBasicMaterial:\"basic\",MeshLambertMaterial:\"lambert\",MeshPhongMaterial:\"phong\",MeshToonMaterial:\"toon\",MeshStandardMaterial:\"physical\",MeshPhysicalMaterial:\"physical\",MeshMatcapMaterial:\"matcap\",LineBasicMaterial:\"basic\",LineDashedMaterial:\"dashed\",PointsMaterial:\"points\",ShadowMaterial:\"shadow\",SpriteMaterial:\"sprite\"},m=[\"precision\",\"isWebGL2\",\"supportsVertexTextures\",\"outputEncoding\",\"instancing\",\"instancingColor\",\"map\",\"mapEncoding\",\"matcap\",\"matcapEncoding\",\"envMap\",\"envMapMode\",\"envMapEncoding\",\"envMapCubeUV\",\"lightMap\",\"lightMapEncoding\",\"aoMap\",\"emissiveMap\",\"emissiveMapEncoding\",\"bumpMap\",\"normalMap\",\"objectSpaceNormalMap\",\"tangentSpaceNormalMap\",\"clearcoatMap\",\"clearcoatRoughnessMap\",\"clearcoatNormalMap\",\"displacementMap\",\"specularMap\",\"specularIntensityMap\",\"specularTintMap\",\"specularTintMapEncoding\",\"roughnessMap\",\"metalnessMap\",\"gradientMap\",\"alphaMap\",\"combine\",\"vertexColors\",\"vertexAlphas\",\"vertexTangents\",\"vertexUvs\",\"uvsVertexOnly\",\"fog\",\"useFog\",\"fogExp2\",\"flatShading\",\"sizeAttenuation\",\"logarithmicDepthBuffer\",\"skinning\",\"maxBones\",\"useVertexTexture\",\"morphTargets\",\"morphNormals\",\"premultipliedAlpha\",\"numDirLights\",\"numPointLights\",\"numSpotLights\",\"numHemiLights\",\"numRectAreaLights\",\"numDirLightShadows\",\"numPointLightShadows\",\"numSpotLightShadows\",\"shadowMapEnabled\",\"shadowMapType\",\"toneMapping\",\"physicallyCorrectLights\",\"alphaTest\",\"doubleSided\",\"flipSided\",\"numClippingPlanes\",\"numClipIntersection\",\"depthPacking\",\"dithering\",\"sheen\",\"transmission\",\"transmissionMap\",\"thicknessMap\"];function g(t){let e;return t&&t.isTexture?e=t.encoding:t&&t.isWebGLRenderTarget?(console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\"),e=t.texture.encoding):e=sr,e}return{getParameters:function v(a,o,m,y,x){const _=y.fog,M=(a.isMeshStandardMaterial?n:e).get(a.envMap||(a.isMeshStandardMaterial?y.environment:null)),w=f[a.type],b=x.isSkinnedMesh?(function S(t){const e=t.skeleton.bones;if(h)return 1024;{const t=Math.floor((u-20)/4),n=Math.min(t,e.length);return n<e.length?(console.warn(\"THREE.WebGLRenderer: Skeleton has \"+e.length+\" bones. This GPU supports \"+n+\".\"),0):n}})(x):0;let T,E;if(null!==a.precision&&(p=r.getMaxPrecision(a.precision),p!==a.precision&&console.warn(\"THREE.WebGLProgram.getParameters:\",a.precision,\"not supported, using\",p,\"instead.\")),w){const t=oo[w];T=t.vertexShader,E=t.fragmentShader}else T=a.vertexShader,E=a.fragmentShader;const A=t.getRenderTarget();return{isWebGL2:l,shaderID:w,shaderName:a.type,vertexShader:T,fragmentShader:E,defines:a.defines,isRawShaderMaterial:!0===a.isRawShaderMaterial,glslVersion:a.glslVersion,precision:p,instancing:!0===x.isInstancedMesh,instancingColor:!0===x.isInstancedMesh&&null!==x.instanceColor,supportsVertexTextures:d,outputEncoding:null!==A?g(A.texture):t.outputEncoding,map:!!a.map,mapEncoding:g(a.map),matcap:!!a.matcap,matcapEncoding:g(a.matcap),envMap:!!M,envMapMode:M&&M.mapping,envMapEncoding:g(M),envMapCubeUV:!!M&&(M.mapping===zi||307===M.mapping),lightMap:!!a.lightMap,lightMapEncoding:g(a.lightMap),aoMap:!!a.aoMap,emissiveMap:!!a.emissiveMap,emissiveMapEncoding:g(a.emissiveMap),bumpMap:!!a.bumpMap,normalMap:!!a.normalMap,objectSpaceNormalMap:1===a.normalMapType,tangentSpaceNormalMap:0===a.normalMapType,clearcoatMap:!!a.clearcoatMap,clearcoatRoughnessMap:!!a.clearcoatRoughnessMap,clearcoatNormalMap:!!a.clearcoatNormalMap,displacementMap:!!a.displacementMap,roughnessMap:!!a.roughnessMap,metalnessMap:!!a.metalnessMap,specularMap:!!a.specularMap,specularIntensityMap:!!a.specularIntensityMap,specularTintMap:!!a.specularTintMap,specularTintMapEncoding:g(a.specularTintMap),alphaMap:!!a.alphaMap,gradientMap:!!a.gradientMap,sheen:!!a.sheen,transmission:!!a.transmission,transmissionMap:!!a.transmissionMap,thicknessMap:!!a.thicknessMap,combine:a.combine,vertexTangents:!!a.normalMap&&!!x.geometry&&!!x.geometry.attributes.tangent,vertexColors:a.vertexColors,vertexAlphas:!0===a.vertexColors&&!!x.geometry&&!!x.geometry.attributes.color&&4===x.geometry.attributes.color.itemSize,vertexUvs:!!(a.map||a.bumpMap||a.normalMap||a.specularMap||a.alphaMap||a.emissiveMap||a.roughnessMap||a.metalnessMap||a.clearcoatMap||a.clearcoatRoughnessMap||a.clearcoatNormalMap||a.displacementMap||a.transmissionMap||a.thicknessMap||a.specularIntensityMap||a.specularTintMap),uvsVertexOnly:!(a.map||a.bumpMap||a.normalMap||a.specularMap||a.alphaMap||a.emissiveMap||a.roughnessMap||a.metalnessMap||a.clearcoatNormalMap||a.transmission||a.transmissionMap||a.thicknessMap||a.specularIntensityMap||a.specularTintMap||!a.displacementMap),fog:!!_,useFog:a.fog,fogExp2:_&&_.isFogExp2,flatShading:!!a.flatShading,sizeAttenuation:a.sizeAttenuation,logarithmicDepthBuffer:c,skinning:!0===x.isSkinnedMesh&&b>0,maxBones:b,useVertexTexture:h,morphTargets:!!x.geometry&&!!x.geometry.morphAttributes.position,morphNormals:!!x.geometry&&!!x.geometry.morphAttributes.normal,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numClippingPlanes:s.numPlanes,numClipIntersection:s.numIntersection,dithering:a.dithering,shadowMapEnabled:t.shadowMap.enabled&&m.length>0,shadowMapType:t.shadowMap.type,toneMapping:a.toneMapped?t.toneMapping:0,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:a.premultipliedAlpha,alphaTest:a.alphaTest,doubleSided:2===a.side,flipSided:1===a.side,depthPacking:void 0!==a.depthPacking&&a.depthPacking,index0AttributeName:a.index0AttributeName,extensionDerivatives:a.extensions&&a.extensions.derivatives,extensionFragDepth:a.extensions&&a.extensions.fragDepth,extensionDrawBuffers:a.extensions&&a.extensions.drawBuffers,extensionShaderTextureLOD:a.extensions&&a.extensions.shaderTextureLOD,rendererExtensionFragDepth:l||i.has(\"EXT_frag_depth\"),rendererExtensionDrawBuffers:l||i.has(\"WEBGL_draw_buffers\"),rendererExtensionShaderTextureLod:l||i.has(\"EXT_shader_texture_lod\"),customProgramCacheKey:a.customProgramCacheKey()}},getProgramCacheKey:function y(e){const n=[];if(e.shaderID?n.push(e.shaderID):(n.push(e.fragmentShader),n.push(e.vertexShader)),void 0!==e.defines)for(const t in e.defines)n.push(t),n.push(e.defines[t]);if(!1===e.isRawShaderMaterial){for(let t=0;t<m.length;t++)n.push(e[m[t]]);n.push(t.outputEncoding),n.push(t.gammaFactor)}return n.push(e.customProgramCacheKey),n.join()},getUniforms:function x(t){const e=f[t.type];let n;if(e){n=ks.clone(oo[e].uniforms)}else n=t.uniforms;return n},acquireProgram:function _(e,n){let i;for(let t=0,e=o.length;t<e;t++){const e=o[t];if(e.cacheKey===n){i=e,++i.usedTimes;break}}return void 0===i&&(i=new Mc(t,n,e,a),o.push(i)),i},releaseProgram:function M(t){if(0==--t.usedTimes){const e=o.indexOf(t);o[e]=o[o.length-1],o.pop(),t.destroy()}},programs:o}}function bc(){let t=new WeakMap;return{get:function e(n){let i=t.get(n);return void 0===i&&(i={},t.set(n,i)),i},remove:function n(e){t.delete(e)},update:function i(e,n,r){t.get(e)[n]=r},dispose:function r(){t=new WeakMap}}}function Sc(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program!==e.program?t.program.id-e.program.id:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function Tc(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function Ec(t){const e=[];let n=0;const i=[],r=[],a=[],s={id:-1};function o(i,r,a,o,l,c){let h=e[n];const u=t.get(a);return void 0===h?(h={id:i.id,object:i,geometry:r,material:a,program:u.program||s,groupOrder:o,renderOrder:i.renderOrder,z:l,group:c},e[n]=h):(h.id=i.id,h.object=i,h.geometry=r,h.material=a,h.program=u.program||s,h.groupOrder=o,h.renderOrder=i.renderOrder,h.z=l,h.group=c),n++,h}return{opaque:i,transmissive:r,transparent:a,init:function l(){n=0,i.length=0,r.length=0,a.length=0},push:function c(t,e,n,s,l,h){const u=o(t,e,n,s,l,h);n.transmission>0?r.push(u):!0===n.transparent?a.push(u):i.push(u)},unshift:function h(t,e,n,s,l,c){const h=o(t,e,n,s,l,c);n.transmission>0?r.unshift(h):!0===n.transparent?a.unshift(h):i.unshift(h)},finish:function u(){for(let t=n,i=e.length;t<i;t++){const n=e[t];if(null===n.id)break;n.id=null,n.object=null,n.geometry=null,n.material=null,n.program=null,n.group=null}},sort:function d(t,e){i.length>1&&i.sort(t||Sc),r.length>1&&r.sort(e||Tc),a.length>1&&a.sort(e||Tc)}}}function Ac(t){let e=new WeakMap;return{get:function n(i,r){let a;return!1===e.has(i)?(a=new Ec(t),e.set(i,[a])):r>=e.get(i).length?(a=new Ec(t),e.get(i).push(a)):a=e.get(i)[r],a},dispose:function i(){e=new WeakMap}}}function Lc(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case\"DirectionalLight\":n={direction:new Ir,color:new ns};break;case\"SpotLight\":n={position:new Ir,direction:new Ir,color:new ns,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case\"PointLight\":n={position:new Ir,color:new ns,distance:0,decay:0};break;case\"HemisphereLight\":n={direction:new Ir,skyColor:new ns,groundColor:new ns};break;case\"RectAreaLight\":n={color:new ns,position:new Ir,halfWidth:new Ir,halfHeight:new Ir}}return t[e.id]=n,n}}}let Cc=0;function Rc(t,e){return(e.castShadow?1:0)-(t.castShadow?1:0)}function Pc(t,e){const n=new Lc,i=(function r(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case\"DirectionalLight\":case\"SpotLight\":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new br};break;case\"PointLight\":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new br,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=n,n}}})(),a={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let t=0;t<9;t++)a.probe.push(new Ir);const s=new Ir,o=new ua,l=new ua;return{setup:function c(r){let s=0,o=0,l=0;for(let t=0;t<9;t++)a.probe[t].set(0,0,0);let c=0,h=0,u=0,d=0,p=0,f=0,m=0,g=0;r.sort(Rc);for(let t=0,e=r.length;t<e;t++){const e=r[t],v=e.color,y=e.intensity,x=e.distance,_=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight)s+=v.r*y,o+=v.g*y,l+=v.b*y;else if(e.isLightProbe)for(let t=0;t<9;t++)a.probe[t].addScaledVector(e.sh.coefficients[t],y);else if(e.isDirectionalLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity),e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,a.directionalShadow[c]=n,a.directionalShadowMap[c]=_,a.directionalShadowMatrix[c]=e.shadow.matrix,f++}a.directional[c]=t,c++}else if(e.isSpotLight){const t=n.get(e);if(t.position.setFromMatrixPosition(e.matrixWorld),t.color.copy(v).multiplyScalar(y),t.distance=x,t.coneCos=Math.cos(e.angle),t.penumbraCos=Math.cos(e.angle*(1-e.penumbra)),t.decay=e.decay,e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,a.spotShadow[u]=n,a.spotShadowMap[u]=_,a.spotShadowMatrix[u]=e.shadow.matrix,g++}a.spot[u]=t,u++}else if(e.isRectAreaLight){const t=n.get(e);t.color.copy(v).multiplyScalar(y),t.halfWidth.set(.5*e.width,0,0),t.halfHeight.set(0,.5*e.height,0),a.rectArea[d]=t,d++}else if(e.isPointLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity),t.distance=e.distance,t.decay=e.decay,e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,n.shadowCameraNear=t.camera.near,n.shadowCameraFar=t.camera.far,a.pointShadow[h]=n,a.pointShadowMap[h]=_,a.pointShadowMatrix[h]=e.shadow.matrix,m++}a.point[h]=t,h++}else if(e.isHemisphereLight){const t=n.get(e);t.skyColor.copy(e.color).multiplyScalar(y),t.groundColor.copy(e.groundColor).multiplyScalar(y),a.hemi[p]=t,p++}}d>0&&(e.isWebGL2||!0===t.has(\"OES_texture_float_linear\")?(a.rectAreaLTC1=so.LTC_FLOAT_1,a.rectAreaLTC2=so.LTC_FLOAT_2):!0===t.has(\"OES_texture_half_float_linear\")?(a.rectAreaLTC1=so.LTC_HALF_1,a.rectAreaLTC2=so.LTC_HALF_2):console.error(\"THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.\")),a.ambient[0]=s,a.ambient[1]=o,a.ambient[2]=l;const v=a.hash;v.directionalLength===c&&v.pointLength===h&&v.spotLength===u&&v.rectAreaLength===d&&v.hemiLength===p&&v.numDirectionalShadows===f&&v.numPointShadows===m&&v.numSpotShadows===g||(a.directional.length=c,a.spot.length=u,a.rectArea.length=d,a.point.length=h,a.hemi.length=p,a.directionalShadow.length=f,a.directionalShadowMap.length=f,a.pointShadow.length=m,a.pointShadowMap.length=m,a.spotShadow.length=g,a.spotShadowMap.length=g,a.directionalShadowMatrix.length=f,a.pointShadowMatrix.length=m,a.spotShadowMatrix.length=g,v.directionalLength=c,v.pointLength=h,v.spotLength=u,v.rectAreaLength=d,v.hemiLength=p,v.numDirectionalShadows=f,v.numPointShadows=m,v.numSpotShadows=g,a.version=Cc++)},setupView:function h(t,e){let n=0,i=0,r=0,c=0,h=0;const u=e.matrixWorldInverse;for(let e=0,d=t.length;e<d;e++){const d=t[e];if(d.isDirectionalLight){const t=a.directional[n];t.direction.setFromMatrixPosition(d.matrixWorld),s.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(s),t.direction.transformDirection(u),n++}else if(d.isSpotLight){const t=a.spot[r];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),t.direction.setFromMatrixPosition(d.matrixWorld),s.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(s),t.direction.transformDirection(u),r++}else if(d.isRectAreaLight){const t=a.rectArea[c];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),l.identity(),o.copy(d.matrixWorld),o.premultiply(u),l.extractRotation(o),t.halfWidth.set(.5*d.width,0,0),t.halfHeight.set(0,.5*d.height,0),t.halfWidth.applyMatrix4(l),t.halfHeight.applyMatrix4(l),c++}else if(d.isPointLight){const t=a.point[i];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),i++}else if(d.isHemisphereLight){const t=a.hemi[h];t.direction.setFromMatrixPosition(d.matrixWorld),t.direction.transformDirection(u),t.direction.normalize(),h++}}},state:a}}function Dc(t,e){const n=new Pc(t,e),i=[],r=[];return{init:function a(){i.length=0,r.length=0},state:{lightsArray:i,shadowsArray:r,lights:n},setupLights:function s(){n.setup(i)},setupLightsView:function o(t){n.setupView(i,t)},pushLight:function l(t){i.push(t)},pushShadow:function c(t){r.push(t)}}}function Nc(t,e){let n=new WeakMap;return{get:function i(r,a=0){let s;return!1===n.has(r)?(s=new Dc(t,e),n.set(r,[s])):a>=n.get(r).length?(s=new Dc(t,e),n.get(r).push(s)):s=n.get(r)[a],s},dispose:function r(){n=new WeakMap}}}class Ic extends Za{constructor(t){super(),this.type=\"MeshDepthMaterial\",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}Ic.prototype.isMeshDepthMaterial=!0;class Oc extends Za{constructor(t){super(),this.type=\"MeshDistanceMaterial\",this.referencePosition=new Ir,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}Oc.prototype.isMeshDistanceMaterial=!0;function zc(t,e,n){let i=new eo;const r=new br,a=new br,s=new Rr,o=new Ic({depthPacking:3201}),l=new Oc,c={},h=n.maxTextureSize,u={0:1,1:0,2:2},d=new Gs({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new br},radius:{value:4}},vertexShader:\"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\",fragmentShader:\"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\\n\\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean * HALF_SAMPLE_RATE;\\n\\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\"}),p=d.clone();p.defines.HORIZONTAL_PASS=1;const f=new ys;f.setAttribute(\"position\",new ss(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const m=new zs(f,d),g=this;function v(n,i){const r=e.update(m);d.uniforms.shadow_pass.value=n.map.texture,d.uniforms.resolution.value=n.mapSize,d.uniforms.radius.value=n.radius,t.setRenderTarget(n.mapPass),t.clear(),t.renderBufferDirect(i,null,r,d,m,null),p.uniforms.shadow_pass.value=n.mapPass.texture,p.uniforms.resolution.value=n.mapSize,p.uniforms.radius.value=n.radius,t.setRenderTarget(n.map),t.clear(),t.renderBufferDirect(i,null,r,p,m,null)}function y(e,n,i,r,a,s,h){let d=null;const p=!0===r.isPointLight?e.customDistanceMaterial:e.customDepthMaterial;if(d=void 0!==p?p:!0===r.isPointLight?l:o,t.localClippingEnabled&&!0===i.clipShadows&&0!==i.clippingPlanes.length){const t=d.uuid,e=i.uuid;let n=c[t];void 0===n&&(n={},c[t]=n);let r=n[e];void 0===r&&(r=d.clone(),n[e]=r),d=r}return d.visible=i.visible,d.wireframe=i.wireframe,d.side=3===h?null!==i.shadowSide?i.shadowSide:i.side:null!==i.shadowSide?i.shadowSide:u[i.side],d.clipShadows=i.clipShadows,d.clippingPlanes=i.clippingPlanes,d.clipIntersection=i.clipIntersection,d.wireframeLinewidth=i.wireframeLinewidth,d.linewidth=i.linewidth,!0===r.isPointLight&&!0===d.isMeshDistanceMaterial&&(d.referencePosition.setFromMatrixPosition(r.matrixWorld),d.nearDistance=a,d.farDistance=s),d}function x(n,r,a,s,o){if(!1===n.visible)return;if(n.layers.test(r.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&3===o)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,n.matrixWorld);const i=e.update(n),r=n.material;if(Array.isArray(r)){const e=i.groups;for(let l=0,c=e.length;l<c;l++){const c=e[l],h=r[c.materialIndex];if(h&&h.visible){const e=y(n,0,h,s,a.near,a.far,o);t.renderBufferDirect(a,null,i,e,n,c)}}}else if(r.visible){const e=y(n,0,r,s,a.near,a.far,o);t.renderBufferDirect(a,null,i,e,n,null)}}const l=n.children;for(let t=0,e=l.length;t<e;t++)x(l[t],r,a,s,o)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(e,n,o){if(!1===g.enabled)return;if(!1===g.autoUpdate&&!1===g.needsUpdate)return;if(0===e.length)return;const l=t.getRenderTarget(),c=t.getActiveCubeFace(),u=t.getActiveMipmapLevel(),d=t.state;d.setBlending(0),d.buffers.color.setClear(1,1,1,1),d.buffers.depth.setTest(!0),d.setScissorTest(!1);for(let l=0,c=e.length;l<c;l++){const c=e[l],u=c.shadow;if(void 0===u){console.warn(\"THREE.WebGLShadowMap:\",c,\"has no shadow.\");continue}if(!1===u.autoUpdate&&!1===u.needsUpdate)continue;r.copy(u.mapSize);const p=u.getFrameExtents();if(r.multiply(p),a.copy(u.mapSize),(r.x>h||r.y>h)&&(r.x>h&&(a.x=Math.floor(h/p.x),r.x=a.x*p.x,u.mapSize.x=a.x),r.y>h&&(a.y=Math.floor(h/p.y),r.y=a.y*p.y,u.mapSize.y=a.y)),null===u.map&&!u.isPointLightShadow&&3===this.type){const t={minFilter:ki,magFilter:ki,format:Ji};u.map=new Pr(r.x,r.y,t),u.map.texture.name=c.name+\".shadowMap\",u.mapPass=new Pr(r.x,r.y,t),u.camera.updateProjectionMatrix()}if(null===u.map){u.map=new Pr(r.x,r.y,{minFilter:Hi,magFilter:Hi,format:Ji}),u.map.texture.name=c.name+\".shadowMap\",u.camera.updateProjectionMatrix()}t.setRenderTarget(u.map),t.clear();const f=u.getViewportCount();for(let t=0;t<f;t++){const e=u.getViewport(t);s.set(a.x*e.x,a.y*e.y,a.x*e.z,a.y*e.w),d.viewport(s),u.updateMatrices(c,t),i=u.getFrustum(),x(n,o,u.camera,c,this.type)}u.isPointLightShadow||3!==this.type||v(u,o),u.needsUpdate=!1}g.needsUpdate=!1,t.setRenderTarget(l,c,u)}}function Uc(t,e,n){const i=n.isWebGL2;const r=new(function a(){let e=!1;const n=new Rr;let i=null;const r=new Rr(0,0,0,0);return{setMask:function(n){i===n||e||(t.colorMask(n,n,n,n),i=n)},setLocked:function(t){e=t},setClear:function(e,i,a,s,o){!0===o&&(e*=s,i*=s,a*=s),n.set(e,i,a,s),!1===r.equals(n)&&(t.clearColor(e,i,a,s),r.copy(n))},reset:function(){e=!1,i=null,r.set(-1,0,0,0)}}}),s=new(function o(){let e=!1,n=null,i=null,r=null;return{setTest:function(t){t?H(2929):k(2929)},setMask:function(i){n===i||e||(t.depthMask(i),n=i)},setFunc:function(e){if(i!==e){if(e)switch(e){case 0:t.depthFunc(512);break;case 1:t.depthFunc(519);break;case 2:t.depthFunc(513);break;case 3:t.depthFunc(515);break;case 4:t.depthFunc(514);break;case 5:t.depthFunc(518);break;case 6:t.depthFunc(516);break;case 7:t.depthFunc(517);break;default:t.depthFunc(515)}else t.depthFunc(515);i=e}},setLocked:function(t){e=t},setClear:function(e){r!==e&&(t.clearDepth(e),r=e)},reset:function(){e=!1,n=null,i=null,r=null}}}),l=new(function c(){let e=!1,n=null,i=null,r=null,a=null,s=null,o=null,l=null,c=null;return{setTest:function(t){e||(t?H(2960):k(2960))},setMask:function(i){n===i||e||(t.stencilMask(i),n=i)},setFunc:function(e,n,s){i===e&&r===n&&a===s||(t.stencilFunc(e,n,s),i=e,r=n,a=s)},setOp:function(e,n,i){s===e&&o===n&&l===i||(t.stencilOp(e,n,i),s=e,o=n,l=i)},setLocked:function(t){e=t},setClear:function(e){c!==e&&(t.clearStencil(e),c=e)},reset:function(){e=!1,n=null,i=null,r=null,a=null,s=null,o=null,l=null,c=null}}});let h={},u=null,d={},p=null,f=!1,m=null,g=null,v=null,y=null,x=null,_=null,M=null,w=!1,b=null,S=null,T=null,E=null,A=null;const L=t.getParameter(35661);let C=!1,R=0;const P=t.getParameter(7938);-1!==P.indexOf(\"WebGL\")?(R=parseFloat(/^WebGL (\\d)/.exec(P)[1]),C=R>=1):-1!==P.indexOf(\"OpenGL ES\")&&(R=parseFloat(/^OpenGL ES (\\d)/.exec(P)[1]),C=R>=2);let D=null,N={};const I=t.getParameter(3088),O=t.getParameter(2978),z=(new Rr).fromArray(I),U=(new Rr).fromArray(O);function F(e,n,i){const r=new Uint8Array(4),a=t.createTexture();t.bindTexture(e,a),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(let e=0;e<i;e++)t.texImage2D(n+e,0,6408,1,1,0,6408,5121,r);return a}const B={};function H(e){!0!==h[e]&&(t.enable(e),h[e]=!0)}function k(e){!1!==h[e]&&(t.disable(e),h[e]=!1)}B[3553]=F(3553,3553,1),B[34067]=F(34067,34069,6),r.setClear(0,0,0,1),s.setClear(1),l.setClear(0),H(2929),s.setFunc(3),j(!1),q(1),H(2884),W(0);const G={[Ni]:32774,101:32778,102:32779};if(i)G[103]=32775,G[104]=32776;else{const t=e.get(\"EXT_blend_minmax\");null!==t&&(G[103]=t.MIN_EXT,G[104]=t.MAX_EXT)}const V={200:0,201:1,202:768,204:770,210:776,208:774,206:772,203:769,205:771,209:775,207:773};function W(e,n,i,r,a,s,o,l){if(0!==e){if(!1===f&&(H(3042),f=!0),5===e)a=a||n,s=s||i,o=o||r,n===g&&a===x||(t.blendEquationSeparate(G[n],G[a]),g=n,x=a),i===v&&r===y&&s===_&&o===M||(t.blendFuncSeparate(V[i],V[r],V[s],V[o]),v=i,y=r,_=s,M=o),m=e,w=null;else if(e!==m||l!==w){if(g===Ni&&x===Ni||(t.blendEquation(32774),g=Ni,x=Ni),l)switch(e){case 1:t.blendFuncSeparate(1,771,1,771);break;case 2:t.blendFunc(1,1);break;case 3:t.blendFuncSeparate(0,0,769,771);break;case 4:t.blendFuncSeparate(0,768,0,770);break;default:console.error(\"THREE.WebGLState: Invalid blending: \",e)}else switch(e){case 1:t.blendFuncSeparate(770,771,1,771);break;case 2:t.blendFunc(770,1);break;case 3:t.blendFunc(0,769);break;case 4:t.blendFunc(0,768);break;default:console.error(\"THREE.WebGLState: Invalid blending: \",e)}v=null,y=null,_=null,M=null,m=e,w=l}}else!0===f&&(k(3042),f=!1)}function j(e){b!==e&&(t.frontFace(e?2304:2305),b=e)}function q(e){0!==e?(H(2884),e!==S&&t.cullFace(1===e?1029:2===e?1028:1032)):k(2884),S=e}function X(e,n,i){e?(H(32823),E===n&&A===i||(t.polygonOffset(n,i),E=n,A=i)):k(32823)}function Y(e){void 0===e&&(e=33984+L-1),D!==e&&(t.activeTexture(e),D=e)}return{buffers:{color:r,depth:s,stencil:l},enable:H,disable:k,bindFramebuffer:function Z(e,n){return null===n&&null!==u&&(n=u),d[e]!==n&&(t.bindFramebuffer(e,n),d[e]=n,i&&(36009===e&&(d[36160]=n),36160===e&&(d[36009]=n)),!0)},bindXRFramebuffer:function J(e){e!==u&&(t.bindFramebuffer(36160,e),u=e)},useProgram:function Q(e){return p!==e&&(t.useProgram(e),p=e,!0)},setBlending:W,setMaterial:function K(t,e){2===t.side?k(2884):H(2884);let n=1===t.side;e&&(n=!n),j(n),1===t.blending&&!1===t.transparent?W(0):W(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),s.setFunc(t.depthFunc),s.setTest(t.depthTest),s.setMask(t.depthWrite),r.setMask(t.colorWrite);const i=t.stencilWrite;l.setTest(i),i&&(l.setMask(t.stencilWriteMask),l.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),l.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),X(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?H(32926):k(32926)},setFlipSided:j,setCullFace:q,setLineWidth:function $(e){e!==T&&(C&&t.lineWidth(e),T=e)},setPolygonOffset:X,setScissorTest:function tt(t){t?H(3089):k(3089)},activeTexture:Y,bindTexture:function et(e,n){null===D&&Y();let i=N[D];void 0===i&&(i={type:void 0,texture:void 0},N[D]=i),i.type===e&&i.texture===n||(t.bindTexture(e,n||B[e]),i.type=e,i.texture=n)},unbindTexture:function nt(){const e=N[D];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function it(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error(\"THREE.WebGLState:\",t)}},texImage2D:function rt(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error(\"THREE.WebGLState:\",t)}},texImage3D:function at(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error(\"THREE.WebGLState:\",t)}},scissor:function st(e){!1===z.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),z.copy(e))},viewport:function ot(e){!1===U.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),U.copy(e))},reset:function lt(){t.disable(3042),t.disable(2884),t.disable(2929),t.disable(32823),t.disable(3089),t.disable(2960),t.disable(32926),t.blendEquation(32774),t.blendFunc(1,0),t.blendFuncSeparate(1,0,1,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(513),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(519,0,4294967295),t.stencilOp(7680,7680,7680),t.clearStencil(0),t.cullFace(1029),t.frontFace(2305),t.polygonOffset(0,0),t.activeTexture(33984),t.bindFramebuffer(36160,null),!0===i&&(t.bindFramebuffer(36009,null),t.bindFramebuffer(36008,null)),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),h={},D=null,N={},u=null,d={},p=null,f=!1,m=null,g=null,v=null,y=null,x=null,_=null,M=null,w=!1,b=null,S=null,T=null,E=null,A=null,z.set(0,0,t.canvas.width,t.canvas.height),U.set(0,0,t.canvas.width,t.canvas.height),r.reset(),s.reset(),l.reset()}}}function Fc(t,e,n,i,r,a,s){const o=r.isWebGL2,l=r.maxTextures,c=r.maxCubemapSize,h=r.maxTextureSize,u=r.maxSamples,d=new WeakMap;let p,f=!1;try{f=\"undefined\"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext(\"2d\")}catch(t){}function m(t,e){return f?new OffscreenCanvas(t,e):document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\")}function g(t,e,n,i){let r=1;if((t.width>i||t.height>i)&&(r=i/Math.max(t.width,t.height)),r<1||!0===e){if(\"undefined\"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||\"undefined\"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||\"undefined\"!=typeof ImageBitmap&&t instanceof ImageBitmap){const i=e?wr:Math.floor,a=i(r*t.width),s=i(r*t.height);void 0===p&&(p=m(a,s));const o=n?m(a,s):p;o.width=a,o.height=s;return o.getContext(\"2d\").drawImage(t,0,0,a,s),console.warn(\"THREE.WebGLRenderer: Texture has been resized from (\"+t.width+\"x\"+t.height+\") to (\"+a+\"x\"+s+\").\"),o}return\"data\"in t&&console.warn(\"THREE.WebGLRenderer: Image in DataTexture is too big (\"+t.width+\"x\"+t.height+\").\"),t}return t}function v(t){return Mr(t.width)&&Mr(t.height)}function y(t,e){return t.generateMipmaps&&e&&t.minFilter!==Hi&&t.minFilter!==ki}function x(e,n,r,a,s=1){t.generateMipmap(e);i.get(n).__maxMipLevel=Math.log2(Math.max(r,a,s))}function _(n,i,r){if(!1===o)return i;if(null!==n){if(void 0!==t[n])return t[n];console.warn(\"THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '\"+n+\"'\")}let a=i;return 6403===i&&(5126===r&&(a=33326),5131===r&&(a=33325),5121===r&&(a=33321)),6407===i&&(5126===r&&(a=34837),5131===r&&(a=34843),5121===r&&(a=32849)),6408===i&&(5126===r&&(a=34836),5131===r&&(a=34842),5121===r&&(a=32856)),33325!==a&&33326!==a&&34842!==a&&34836!==a||e.get(\"EXT_color_buffer_float\"),a}function M(t){return t===Hi||1004===t||1005===t?9728:9729}function w(e){const n=e.target;n.removeEventListener(\"dispose\",w),(function r(e){const n=i.get(e);if(void 0===n.__webglInit)return;t.deleteTexture(n.__webglTexture),i.remove(e)})(n),n.isVideoTexture&&d.delete(n),s.memory.textures--}function b(e){const n=e.target;n.removeEventListener(\"dispose\",b),(function r(e){const n=e.texture,r=i.get(e),a=i.get(n);if(!e)return;void 0!==a.__webglTexture&&(t.deleteTexture(a.__webglTexture),s.memory.textures--);e.depthTexture&&e.depthTexture.dispose();if(e.isWebGLCubeRenderTarget)for(let e=0;e<6;e++)t.deleteFramebuffer(r.__webglFramebuffer[e]),r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer[e]);else t.deleteFramebuffer(r.__webglFramebuffer),r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer),r.__webglMultisampledFramebuffer&&t.deleteFramebuffer(r.__webglMultisampledFramebuffer),r.__webglColorRenderbuffer&&t.deleteRenderbuffer(r.__webglColorRenderbuffer),r.__webglDepthRenderbuffer&&t.deleteRenderbuffer(r.__webglDepthRenderbuffer);if(e.isWebGLMultipleRenderTargets)for(let e=0,r=n.length;e<r;e++){const r=i.get(n[e]);r.__webglTexture&&(t.deleteTexture(r.__webglTexture),s.memory.textures--),i.remove(n[e])}i.remove(n),i.remove(e)})(n)}let S=0;function T(t,e){const r=i.get(t);if(t.isVideoTexture&&(function a(t){const e=s.render.frame;d.get(t)!==e&&(d.set(t,e),t.update())})(t),t.version>0&&r.__version!==t.version){const n=t.image;if(void 0===n)console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is undefined\");else{if(!1!==n.complete)return void P(r,t,e);console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is incomplete\")}}n.activeTexture(33984+e),n.bindTexture(3553,r.__webglTexture)}function E(e,r){const s=i.get(e);e.version>0&&s.__version!==e.version?(function l(e,i,r){if(6!==i.image.length)return;R(e,i),n.activeTexture(33984+r),n.bindTexture(34067,e.__webglTexture),t.pixelStorei(37440,i.flipY),t.pixelStorei(37441,i.premultiplyAlpha),t.pixelStorei(3317,i.unpackAlignment),t.pixelStorei(37443,0);const s=i&&(i.isCompressedTexture||i.image[0].isCompressedTexture),l=i.image[0]&&i.image[0].isDataTexture,h=[];for(let t=0;t<6;t++)h[t]=s||l?l?i.image[t].image:i.image[t]:g(i.image[t],!1,!0,c);const u=h[0],d=v(u)||o,p=a.convert(i.format),f=a.convert(i.type),m=_(i.internalFormat,p,f);let M;if(C(34067,i,d),s){for(let t=0;t<6;t++){M=h[t].mipmaps;for(let e=0;e<M.length;e++){const r=M[e];i.format!==Ji&&i.format!==Zi?null!==p?n.compressedTexImage2D(34069+t,e,m,r.width,r.height,0,r.data):console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\"):n.texImage2D(34069+t,e,m,r.width,r.height,0,p,f,r.data)}}e.__maxMipLevel=M.length-1}else{M=i.mipmaps;for(let t=0;t<6;t++)if(l){n.texImage2D(34069+t,0,m,h[t].width,h[t].height,0,p,f,h[t].data);for(let e=0;e<M.length;e++){const i=M[e].image[t].image;n.texImage2D(34069+t,e+1,m,i.width,i.height,0,p,f,i.data)}}else{n.texImage2D(34069+t,0,m,p,f,h[t]);for(let e=0;e<M.length;e++){n.texImage2D(34069+t,e+1,m,p,f,M[e].image[t])}}e.__maxMipLevel=M.length}y(i,d)&&x(34067,i,u.width,u.height);e.__version=i.version,i.onUpdate&&i.onUpdate(i)})(s,e,r):(n.activeTexture(33984+r),n.bindTexture(34067,s.__webglTexture))}const A={[Ui]:10497,[Fi]:33071,[Bi]:33648},L={[Hi]:9728,1004:9984,1005:9986,[ki]:9729,1007:9985,[Gi]:9987};function C(n,a,s){if(s?(t.texParameteri(n,10242,A[a.wrapS]),t.texParameteri(n,10243,A[a.wrapT]),32879!==n&&35866!==n||t.texParameteri(n,32882,A[a.wrapR]),t.texParameteri(n,10240,L[a.magFilter]),t.texParameteri(n,10241,L[a.minFilter])):(t.texParameteri(n,10242,33071),t.texParameteri(n,10243,33071),32879!==n&&35866!==n||t.texParameteri(n,32882,33071),a.wrapS===Fi&&a.wrapT===Fi||console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.\"),t.texParameteri(n,10240,M(a.magFilter)),t.texParameteri(n,10241,M(a.minFilter)),a.minFilter!==Hi&&a.minFilter!==ki&&console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.\")),!0===e.has(\"EXT_texture_filter_anisotropic\")){const s=e.get(\"EXT_texture_filter_anisotropic\");if(a.type===qi&&!1===e.has(\"OES_texture_float_linear\"))return;if(!1===o&&a.type===Xi&&!1===e.has(\"OES_texture_half_float_linear\"))return;(a.anisotropy>1||i.get(a).__currentAnisotropy)&&(t.texParameterf(n,s.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,r.getMaxAnisotropy())),i.get(a).__currentAnisotropy=a.anisotropy)}}function R(e,n){void 0===e.__webglInit&&(e.__webglInit=!0,n.addEventListener(\"dispose\",w),e.__webglTexture=t.createTexture(),s.memory.textures++)}function P(e,i,r){let s=3553;i.isDataTexture2DArray&&(s=35866),i.isDataTexture3D&&(s=32879),R(e,i),n.activeTexture(33984+r),n.bindTexture(s,e.__webglTexture),t.pixelStorei(37440,i.flipY),t.pixelStorei(37441,i.premultiplyAlpha),t.pixelStorei(3317,i.unpackAlignment),t.pixelStorei(37443,0);const l=(function c(t){return!o&&(t.wrapS!==Fi||t.wrapT!==Fi||t.minFilter!==Hi&&t.minFilter!==ki)})(i)&&!1===v(i.image),u=g(i.image,l,!1,h),d=v(u)||o,p=a.convert(i.format);let f,m=a.convert(i.type),M=_(i.internalFormat,p,m);C(s,i,d);const w=i.mipmaps;if(i.isDepthTexture)M=6402,o?M=i.type===qi?36012:i.type===ji?33190:i.type===Yi?35056:33189:i.type===qi&&console.error(\"WebGLRenderer: Floating point depth texture requires WebGL2.\"),i.format===Qi&&6402===M&&i.type!==Wi&&i.type!==ji&&(console.warn(\"THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.\"),i.type=Wi,m=a.convert(i.type)),i.format===Ki&&6402===M&&(M=34041,i.type!==Yi&&(console.warn(\"THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.\"),i.type=Yi,m=a.convert(i.type))),n.texImage2D(3553,0,M,u.width,u.height,0,p,m,null);else if(i.isDataTexture)if(w.length>0&&d){for(let t=0,e=w.length;t<e;t++)f=w[t],n.texImage2D(3553,t,M,f.width,f.height,0,p,m,f.data);i.generateMipmaps=!1,e.__maxMipLevel=w.length-1}else n.texImage2D(3553,0,M,u.width,u.height,0,p,m,u.data),e.__maxMipLevel=0;else if(i.isCompressedTexture){for(let t=0,e=w.length;t<e;t++)f=w[t],i.format!==Ji&&i.format!==Zi?null!==p?n.compressedTexImage2D(3553,t,M,f.width,f.height,0,f.data):console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\"):n.texImage2D(3553,t,M,f.width,f.height,0,p,m,f.data);e.__maxMipLevel=w.length-1}else if(i.isDataTexture2DArray)n.texImage3D(35866,0,M,u.width,u.height,u.depth,0,p,m,u.data),e.__maxMipLevel=0;else if(i.isDataTexture3D)n.texImage3D(32879,0,M,u.width,u.height,u.depth,0,p,m,u.data),e.__maxMipLevel=0;else if(w.length>0&&d){for(let t=0,e=w.length;t<e;t++)f=w[t],n.texImage2D(3553,t,M,p,m,f);i.generateMipmaps=!1,e.__maxMipLevel=w.length-1}else n.texImage2D(3553,0,M,p,m,u),e.__maxMipLevel=0;y(i,d)&&x(s,i,u.width,u.height),e.__version=i.version,i.onUpdate&&i.onUpdate(i)}function D(e,r,s,o,l){const c=a.convert(s.format),h=a.convert(s.type),u=_(s.internalFormat,c,h);32879===l||35866===l?n.texImage3D(l,0,u,r.width,r.height,r.depth,0,c,h,null):n.texImage2D(l,0,u,r.width,r.height,0,c,h,null),n.bindFramebuffer(36160,e),t.framebufferTexture2D(36160,o,l,i.get(s).__webglTexture,0),n.bindFramebuffer(36160,null)}function N(e,n,i){if(t.bindRenderbuffer(36161,e),n.depthBuffer&&!n.stencilBuffer){let r=33189;if(i){const e=n.depthTexture;e&&e.isDepthTexture&&(e.type===qi?r=36012:e.type===ji&&(r=33190));const i=O(n);t.renderbufferStorageMultisample(36161,i,r,n.width,n.height)}else t.renderbufferStorage(36161,r,n.width,n.height);t.framebufferRenderbuffer(36160,36096,36161,e)}else if(n.depthBuffer&&n.stencilBuffer){if(i){const e=O(n);t.renderbufferStorageMultisample(36161,e,35056,n.width,n.height)}else t.renderbufferStorage(36161,34041,n.width,n.height);t.framebufferRenderbuffer(36160,33306,36161,e)}else{const e=!0===n.isWebGLMultipleRenderTargets?n.texture[0]:n.texture,r=a.convert(e.format),s=a.convert(e.type),o=_(e.internalFormat,r,s);if(i){const e=O(n);t.renderbufferStorageMultisample(36161,e,o,n.width,n.height)}else t.renderbufferStorage(36161,o,n.width,n.height)}t.bindRenderbuffer(36161,null)}function I(e){const r=i.get(e),a=!0===e.isWebGLCubeRenderTarget;if(e.depthTexture){if(a)throw new Error(\"target.depthTexture not supported in Cube render targets\");!(function s(e,r){if(r&&r.isWebGLCubeRenderTarget)throw new Error(\"Depth Texture with cube render targets is not supported\");if(n.bindFramebuffer(36160,e),!r.depthTexture||!r.depthTexture.isDepthTexture)throw new Error(\"renderTarget.depthTexture must be an instance of THREE.DepthTexture\");i.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),T(r.depthTexture,0);const a=i.get(r.depthTexture).__webglTexture;if(r.depthTexture.format===Qi)t.framebufferTexture2D(36160,36096,3553,a,0);else{if(r.depthTexture.format!==Ki)throw new Error(\"Unknown depthTexture format\");t.framebufferTexture2D(36160,33306,3553,a,0)}})(r.__webglFramebuffer,e)}else if(a){r.__webglDepthbuffer=[];for(let i=0;i<6;i++)n.bindFramebuffer(36160,r.__webglFramebuffer[i]),r.__webglDepthbuffer[i]=t.createRenderbuffer(),N(r.__webglDepthbuffer[i],e,!1)}else n.bindFramebuffer(36160,r.__webglFramebuffer),r.__webglDepthbuffer=t.createRenderbuffer(),N(r.__webglDepthbuffer,e,!1);n.bindFramebuffer(36160,null)}function O(t){return o&&t.isWebGLMultisampleRenderTarget?Math.min(u,t.samples):0}let z=!1,U=!1;this.allocateTextureUnit=function F(){const t=S;return t>=l&&console.warn(\"THREE.WebGLTextures: Trying to use \"+t+\" texture units while this GPU supports only \"+l),S+=1,t},this.resetTextureUnits=function B(){S=0},this.setTexture2D=T,this.setTexture2DArray=function H(t,e){const r=i.get(t);t.version>0&&r.__version!==t.version?P(r,t,e):(n.activeTexture(33984+e),n.bindTexture(35866,r.__webglTexture))},this.setTexture3D=function k(t,e){const r=i.get(t);t.version>0&&r.__version!==t.version?P(r,t,e):(n.activeTexture(33984+e),n.bindTexture(32879,r.__webglTexture))},this.setTextureCube=E,this.setupRenderTarget=function G(e){const l=e.texture,c=i.get(e),h=i.get(l);e.addEventListener(\"dispose\",b),!0!==e.isWebGLMultipleRenderTargets&&(h.__webglTexture=t.createTexture(),h.__version=l.version,s.memory.textures++);const u=!0===e.isWebGLCubeRenderTarget,d=!0===e.isWebGLMultipleRenderTargets,p=!0===e.isWebGLMultisampleRenderTarget,f=l.isDataTexture3D||l.isDataTexture2DArray,m=v(e)||o;if(!o||l.format!==Zi||l.type!==qi&&l.type!==Xi||(l.format=Ji,console.warn(\"THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.\")),u){c.__webglFramebuffer=[];for(let e=0;e<6;e++)c.__webglFramebuffer[e]=t.createFramebuffer()}else if(c.__webglFramebuffer=t.createFramebuffer(),d)if(r.drawBuffers){const n=e.texture;for(let e=0,r=n.length;e<r;e++){const r=i.get(n[e]);void 0===r.__webglTexture&&(r.__webglTexture=t.createTexture(),s.memory.textures++)}}else console.warn(\"THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.\");else if(p)if(o){c.__webglMultisampledFramebuffer=t.createFramebuffer(),c.__webglColorRenderbuffer=t.createRenderbuffer(),t.bindRenderbuffer(36161,c.__webglColorRenderbuffer);const i=a.convert(l.format),r=a.convert(l.type),s=_(l.internalFormat,i,r),o=O(e);t.renderbufferStorageMultisample(36161,o,s,e.width,e.height),n.bindFramebuffer(36160,c.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064,36161,c.__webglColorRenderbuffer),t.bindRenderbuffer(36161,null),e.depthBuffer&&(c.__webglDepthRenderbuffer=t.createRenderbuffer(),N(c.__webglDepthRenderbuffer,e,!0)),n.bindFramebuffer(36160,null)}else console.warn(\"THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.\");if(u){n.bindTexture(34067,h.__webglTexture),C(34067,l,m);for(let t=0;t<6;t++)D(c.__webglFramebuffer[t],e,l,36064,34069+t);y(l,m)&&x(34067,l,e.width,e.height),n.bindTexture(34067,null)}else if(d){const t=e.texture;for(let r=0,a=t.length;r<a;r++){const a=t[r],s=i.get(a);n.bindTexture(3553,s.__webglTexture),C(3553,a,m),D(c.__webglFramebuffer,e,a,36064+r,3553),y(a,m)&&x(3553,a,e.width,e.height)}n.bindTexture(3553,null)}else{let t=3553;if(f)if(o){t=l.isDataTexture3D?32879:35866}else console.warn(\"THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.\");n.bindTexture(t,h.__webglTexture),C(t,l,m),D(c.__webglFramebuffer,e,l,36064,t),y(l,m)&&x(t,l,e.width,e.height,e.depth),n.bindTexture(t,null)}e.depthBuffer&&I(e)},this.updateRenderTargetMipmap=function V(t){const e=v(t)||o,r=!0===t.isWebGLMultipleRenderTargets?t.texture:[t.texture];for(let a=0,s=r.length;a<s;a++){const s=r[a];if(y(s,e)){const e=t.isWebGLCubeRenderTarget?34067:3553,r=i.get(s).__webglTexture;n.bindTexture(e,r),x(e,s,t.width,t.height),n.bindTexture(e,null)}}},this.updateMultisampleRenderTarget=function W(e){if(e.isWebGLMultisampleRenderTarget)if(o){const r=e.width,a=e.height;let s=16384;e.depthBuffer&&(s|=256),e.stencilBuffer&&(s|=1024);const o=i.get(e);n.bindFramebuffer(36008,o.__webglMultisampledFramebuffer),n.bindFramebuffer(36009,o.__webglFramebuffer),t.blitFramebuffer(0,0,r,a,0,0,r,a,s,9728),n.bindFramebuffer(36008,null),n.bindFramebuffer(36009,o.__webglMultisampledFramebuffer)}else console.warn(\"THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.\")},this.safeSetTexture2D=function j(t,e){t&&t.isWebGLRenderTarget&&(!1===z&&(console.warn(\"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\"),z=!0),t=t.texture),T(t,e)},this.safeSetTextureCube=function q(t,e){t&&t.isWebGLCubeRenderTarget&&(!1===U&&(console.warn(\"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\"),U=!0),t=t.texture),E(t,e)}}function Bc(t,e,n){const i=n.isWebGL2;return{convert:function r(t){let n;if(t===Vi)return 5121;if(1017===t)return 32819;if(1018===t)return 32820;if(1019===t)return 33635;if(1010===t)return 5120;if(1011===t)return 5122;if(t===Wi)return 5123;if(1013===t)return 5124;if(t===ji)return 5125;if(t===qi)return 5126;if(t===Xi)return i?5131:(n=e.get(\"OES_texture_half_float\"),null!==n?n.HALF_FLOAT_OES:null);if(1021===t)return 6406;if(t===Zi)return 6407;if(t===Ji)return 6408;if(1024===t)return 6409;if(1025===t)return 6410;if(t===Qi)return 6402;if(t===Ki)return 34041;if(1028===t)return 6403;if(1029===t)return 36244;if(1030===t)return 33319;if(1031===t)return 33320;if(1032===t)return 36248;if(1033===t)return 36249;if(33776===t||33777===t||33778===t||33779===t){if(n=e.get(\"WEBGL_compressed_texture_s3tc\"),null===n)return null;if(33776===t)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===t)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===t)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===t)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===t||35841===t||35842===t||35843===t){if(n=e.get(\"WEBGL_compressed_texture_pvrtc\"),null===n)return null;if(35840===t)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===t)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===t)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===t)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===t)return n=e.get(\"WEBGL_compressed_texture_etc1\"),null!==n?n.COMPRESSED_RGB_ETC1_WEBGL:null;if((37492===t||37496===t)&&(n=e.get(\"WEBGL_compressed_texture_etc\"),null!==n)){if(37492===t)return n.COMPRESSED_RGB8_ETC2;if(37496===t)return n.COMPRESSED_RGBA8_ETC2_EAC}return 37808===t||37809===t||37810===t||37811===t||37812===t||37813===t||37814===t||37815===t||37816===t||37817===t||37818===t||37819===t||37820===t||37821===t||37840===t||37841===t||37842===t||37843===t||37844===t||37845===t||37846===t||37847===t||37848===t||37849===t||37850===t||37851===t||37852===t||37853===t?(n=e.get(\"WEBGL_compressed_texture_astc\"),null!==n?t:null):36492===t?(n=e.get(\"EXT_texture_compression_bptc\"),null!==n?t:null):t===Yi?i?34042:(n=e.get(\"WEBGL_depth_texture\"),null!==n?n.UNSIGNED_INT_24_8_WEBGL:null):void 0}}}class Hc extends Ws{constructor(t=[]){super(),this.cameras=t}}Hc.prototype.isArrayCamera=!0;class kc extends za{constructor(){super(),this.type=\"Group\"}}kc.prototype.isGroup=!0;const Gc={type:\"move\"};class Vc{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new kc,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new kc,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Ir,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Ir),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new kc,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Ir,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Ir),this._grip}dispatchEvent(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this}disconnect(t){return this.dispatchEvent({type:\"disconnected\",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(t,e,n){let i=null,r=null,a=null;const s=this._targetRay,o=this._grip,l=this._hand;if(t&&\"visible-blurred\"!==e.session.visibilityState)if(null!==s&&(i=e.getPose(t.targetRaySpace,n),null!==i&&(s.matrix.fromArray(i.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale),i.linearVelocity?(s.hasLinearVelocity=!0,s.linearVelocity.copy(i.linearVelocity)):s.hasLinearVelocity=!1,i.angularVelocity?(s.hasAngularVelocity=!0,s.angularVelocity.copy(i.angularVelocity)):s.hasAngularVelocity=!1,this.dispatchEvent(Gc))),l&&t.hand){a=!0;for(const i of t.hand.values()){const t=e.getJointPose(i,n);if(void 0===l.joints[i.jointName]){const t=new kc;t.matrixAutoUpdate=!1,t.visible=!1,l.joints[i.jointName]=t,l.add(t)}const r=l.joints[i.jointName];null!==t&&(r.matrix.fromArray(t.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.jointRadius=t.radius),r.visible=null!==t}const i=l.joints[\"index-finger-tip\"].position.distanceTo(l.joints[\"thumb-tip\"].position),r=.02,s=.005;l.inputState.pinching&&i>r+s?(l.inputState.pinching=!1,this.dispatchEvent({type:\"pinchend\",handedness:t.handedness,target:this})):!l.inputState.pinching&&i<=r-s&&(l.inputState.pinching=!0,this.dispatchEvent({type:\"pinchstart\",handedness:t.handedness,target:this}))}else null!==o&&t.gripSpace&&(r=e.getPose(t.gripSpace,n),null!==r&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1));return null!==s&&(s.visible=null!==i),null!==o&&(o.visible=null!==r),null!==l&&(l.visible=null!==a),this}}class Wc extends fr{constructor(t,e){super();const n=this,i=t.state;let r=null,a=1,s=null,o=\"local-floor\",l=null,c=null,h=null,u=null,d=null;const p=[],f=new Map,m=new Ws;m.layers.enable(1),m.viewport=new Rr;const g=new Ws;g.layers.enable(2),g.viewport=new Rr;const v=[m,g],y=new Hc;y.layers.enable(1),y.layers.enable(2);let x=null,_=null;function M(t){const e=f.get(t.inputSource);e&&e.dispatchEvent({type:t.type,data:t.inputSource})}function w(){f.forEach((function(t,e){t.disconnect(e)})),f.clear(),x=null,_=null,i.bindXRFramebuffer(null),t.setRenderTarget(t.getRenderTarget()),L.stop(),n.isPresenting=!1,n.dispatchEvent({type:\"sessionend\"})}function b(t){const e=r.inputSources;for(let t=0;t<p.length;t++)f.set(e[t],p[t]);for(let e=0;e<t.removed.length;e++){const n=t.removed[e],i=f.get(n);i&&(i.dispatchEvent({type:\"disconnected\",data:n}),f.delete(n))}for(let e=0;e<t.added.length;e++){const n=t.added[e],i=f.get(n);i&&i.dispatchEvent({type:\"connected\",data:n})}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(t){let e=p[t];return void 0===e&&(e=new Vc,p[t]=e),e.getTargetRaySpace()},this.getControllerGrip=function(t){let e=p[t];return void 0===e&&(e=new Vc,p[t]=e),e.getGripSpace()},this.getHand=function(t){let e=p[t];return void 0===e&&(e=new Vc,p[t]=e),e.getHandSpace()},this.setFramebufferScaleFactor=function(t){a=t,!0===n.isPresenting&&console.warn(\"THREE.WebXRManager: Cannot change framebuffer scale while presenting.\")},this.setReferenceSpaceType=function(t){o=t,!0===n.isPresenting&&console.warn(\"THREE.WebXRManager: Cannot change reference space type while presenting.\")},this.getReferenceSpace=function(){return s},this.getSession=function(){return r},this.setSession=async function(t){if(r=t,null!==r){r.addEventListener(\"select\",M),r.addEventListener(\"selectstart\",M),r.addEventListener(\"selectend\",M),r.addEventListener(\"squeeze\",M),r.addEventListener(\"squeezestart\",M),r.addEventListener(\"squeezeend\",M),r.addEventListener(\"end\",w),r.addEventListener(\"inputsourceschange\",b);const t=e.getContextAttributes();if(!0!==t.xrCompatible&&await e.makeXRCompatible(),void 0===r.renderState.layers){d=new XRWebGLLayer(r,e,{antialias:t.antialias,alpha:t.alpha,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:a}),r.updateRenderState({baseLayer:d})}else{let n=0;if(t.antialias){d=new XRWebGLLayer(r,e,{antialias:!0,alpha:t.alpha,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:a}),r.updateRenderState({layers:[d]})}else{t.depth&&(n=t.stencil?34041:6402);const i={colorFormat:t.alpha?6408:6407,depthFormat:n,scaleFactor:a};c=new XRWebGLBinding(r,e),u=c.createProjectionLayer(i),h=e.createFramebuffer(),r.updateRenderState({layers:[u]})}}s=await r.requestReferenceSpace(o),L.setContext(r),L.start(),n.isPresenting=!0,n.dispatchEvent({type:\"sessionstart\"})}};const S=new Ir,T=new Ir;function E(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.updateCamera=function(t){if(null===r)return;y.near=g.near=m.near=t.near,y.far=g.far=m.far=t.far,x===y.near&&_===y.far||(r.updateRenderState({depthNear:y.near,depthFar:y.far}),x=y.near,_=y.far);const e=t.parent,n=y.cameras;E(y,e);for(let t=0;t<n.length;t++)E(n[t],e);y.matrixWorld.decompose(y.position,y.quaternion,y.scale),t.position.copy(y.position),t.quaternion.copy(y.quaternion),t.scale.copy(y.scale),t.matrix.copy(y.matrix),t.matrixWorld.copy(y.matrixWorld);const i=t.children;for(let t=0,e=i.length;t<e;t++)i[t].updateMatrixWorld(!0);2===n.length?(function a(t,e,n){S.setFromMatrixPosition(e.matrixWorld),T.setFromMatrixPosition(n.matrixWorld);const i=S.distanceTo(T),r=e.projectionMatrix.elements,a=n.projectionMatrix.elements,s=r[14]/(r[10]-1),o=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],h=(r[8]-1)/r[0],u=(a[8]+1)/a[0],d=s*h,p=s*u,f=i/(-h+u),m=f*-h;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(m),t.translateZ(f),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert();const g=s+f,v=o+f;t.projectionMatrix.makePerspective(d-m,p+(i-m),l*o/v*g,c*o/v*g,g,v)})(y,m,g):y.projectionMatrix.copy(m.projectionMatrix)},this.getCamera=function(){return y},this.getFoveation=function(){return null!==u?u.fixedFoveation:null!==d?d.fixedFoveation:void 0},this.setFoveation=function(t){null!==u&&(u.fixedFoveation=t),null!==d&&void 0!==d.fixedFoveation&&(d.fixedFoveation=t)};let A=null;const L=new no;L.setAnimationLoop((function C(t,n){if(l=n.getViewerPose(s),null!==l){const t=l.views;null!==d&&i.bindXRFramebuffer(d.framebuffer);let n=!1;t.length!==y.cameras.length&&(y.cameras.length=0,n=!0);for(let r=0;r<t.length;r++){const a=t[r];let s=null;if(null!==d)s=d.getViewport(a);else{const t=c.getViewSubImage(u,a);i.bindXRFramebuffer(h),void 0!==t.depthStencilTexture&&e.framebufferTexture2D(36160,36096,3553,t.depthStencilTexture,0),e.framebufferTexture2D(36160,36064,3553,t.colorTexture,0),s=t.viewport}const o=v[r];o.matrix.fromArray(a.transform.matrix),o.projectionMatrix.fromArray(a.projectionMatrix),o.viewport.set(s.x,s.y,s.width,s.height),0===r&&y.matrix.copy(o.matrix),!0===n&&y.cameras.push(o)}}const a=r.inputSources;for(let t=0;t<p.length;t++){p[t].update(a[t],n,s)}A&&A(t,n)})),this.setAnimationLoop=function(t){A=t},this.dispose=function(){}}}function jc(t){function e(e,n){e.opacity.value=n.opacity,n.color&&e.diffuse.value.copy(n.color),n.emissive&&e.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity),n.map&&(e.map.value=n.map),n.alphaMap&&(e.alphaMap.value=n.alphaMap),n.specularMap&&(e.specularMap.value=n.specularMap);const i=t.get(n).envMap;if(i){e.envMap.value=i,e.flipEnvMap.value=i.isCubeTexture&&!1===i.isRenderTargetTexture?-1:1,e.reflectivity.value=n.reflectivity,e.refractionRatio.value=n.refractionRatio;const r=t.get(i).__maxMipLevel;void 0!==r&&(e.maxMipLevel.value=r)}let r,a;n.lightMap&&(e.lightMap.value=n.lightMap,e.lightMapIntensity.value=n.lightMapIntensity),n.aoMap&&(e.aoMap.value=n.aoMap,e.aoMapIntensity.value=n.aoMapIntensity),n.map?r=n.map:n.specularMap?r=n.specularMap:n.displacementMap?r=n.displacementMap:n.normalMap?r=n.normalMap:n.bumpMap?r=n.bumpMap:n.roughnessMap?r=n.roughnessMap:n.metalnessMap?r=n.metalnessMap:n.alphaMap?r=n.alphaMap:n.emissiveMap?r=n.emissiveMap:n.clearcoatMap?r=n.clearcoatMap:n.clearcoatNormalMap?r=n.clearcoatNormalMap:n.clearcoatRoughnessMap?r=n.clearcoatRoughnessMap:n.specularIntensityMap?r=n.specularIntensityMap:n.specularTintMap&&(r=n.specularTintMap),void 0!==r&&(r.isWebGLRenderTarget&&(r=r.texture),!0===r.matrixAutoUpdate&&r.updateMatrix(),e.uvTransform.value.copy(r.matrix)),n.aoMap?a=n.aoMap:n.lightMap&&(a=n.lightMap),void 0!==a&&(a.isWebGLRenderTarget&&(a=a.texture),!0===a.matrixAutoUpdate&&a.updateMatrix(),e.uv2Transform.value.copy(a.matrix))}function n(e,n){e.roughness.value=n.roughness,e.metalness.value=n.metalness,n.roughnessMap&&(e.roughnessMap.value=n.roughnessMap),n.metalnessMap&&(e.metalnessMap.value=n.metalnessMap),n.emissiveMap&&(e.emissiveMap.value=n.emissiveMap),n.bumpMap&&(e.bumpMap.value=n.bumpMap,e.bumpScale.value=n.bumpScale,1===n.side&&(e.bumpScale.value*=-1)),n.normalMap&&(e.normalMap.value=n.normalMap,e.normalScale.value.copy(n.normalScale),1===n.side&&e.normalScale.value.negate()),n.displacementMap&&(e.displacementMap.value=n.displacementMap,e.displacementScale.value=n.displacementScale,e.displacementBias.value=n.displacementBias);t.get(n).envMap&&(e.envMapIntensity.value=n.envMapIntensity)}return{refreshFogUniforms:function i(t,e){t.fogColor.value.copy(e.color),e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)},refreshMaterialUniforms:function r(t,i,a,s,o){i.isMeshBasicMaterial?e(t,i):i.isMeshLambertMaterial?(e(t,i),(function l(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)})(t,i)):i.isMeshToonMaterial?(e(t,i),(function c(t,e){e.gradientMap&&(t.gradientMap.value=e.gradientMap);e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)})(t,i)):i.isMeshPhongMaterial?(e(t,i),(function h(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)})(t,i)):i.isMeshStandardMaterial?(e(t,i),i.isMeshPhysicalMaterial?(function u(t,e,i){n(t,e),t.reflectivity.value=e.reflectivity,t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.sheen&&t.sheen.value.copy(e.sheen);e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap);e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap);e.clearcoatNormalMap&&(t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),t.clearcoatNormalMap.value=e.clearcoatNormalMap,1===e.side&&t.clearcoatNormalScale.value.negate());t.transmission.value=e.transmission,e.transmissionMap&&(t.transmissionMap.value=e.transmissionMap);e.transmission>0&&(t.transmissionSamplerMap.value=i.texture,t.transmissionSamplerSize.value.set(i.width,i.height));t.thickness.value=e.thickness,e.thicknessMap&&(t.thicknessMap.value=e.thicknessMap);t.attenuationDistance.value=e.attenuationDistance,t.attenuationTint.value.copy(e.attenuationTint),t.specularIntensity.value=e.specularIntensity,t.specularTint.value.copy(e.specularTint),e.specularIntensityMap&&(t.specularIntensityMap.value=e.specularIntensityMap);e.specularTintMap&&(t.specularTintMap.value=e.specularTintMap)})(t,i,o):n(t,i)):i.isMeshMatcapMaterial?(e(t,i),(function d(t,e){e.matcap&&(t.matcap.value=e.matcap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)})(t,i)):i.isMeshDepthMaterial?(e(t,i),(function p(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)})(t,i)):i.isMeshDistanceMaterial?(e(t,i),(function f(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias);t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance})(t,i)):i.isMeshNormalMaterial?(e(t,i),(function m(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)})(t,i)):i.isLineBasicMaterial?(!(function g(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity})(t,i),i.isLineDashedMaterial&&(function v(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale})(t,i)):i.isPointsMaterial?(function y(t,e,n,i){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*n,t.scale.value=.5*i,e.map&&(t.map.value=e.map);e.alphaMap&&(t.alphaMap.value=e.alphaMap);let r;e.map?r=e.map:e.alphaMap&&(r=e.alphaMap);void 0!==r&&(!0===r.matrixAutoUpdate&&r.updateMatrix(),t.uvTransform.value.copy(r.matrix))})(t,i,a,s):i.isSpriteMaterial?(function x(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map);e.alphaMap&&(t.alphaMap.value=e.alphaMap);let n;e.map?n=e.map:e.alphaMap&&(n=e.alphaMap);void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix))})(t,i):i.isShadowMaterial?(t.color.value.copy(i.color),t.opacity.value=i.opacity):i.isShaderMaterial&&(i.uniformsNeedUpdate=!1)}}}function qc(t={}){const e=void 0!==t.canvas?t.canvas:(function n(){const t=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\");return t.style.display=\"block\",t})(),i=void 0!==t.context?t.context:null,r=void 0!==t.alpha&&t.alpha,a=void 0===t.depth||t.depth,s=void 0===t.stencil||t.stencil,o=void 0!==t.antialias&&t.antialias,l=void 0===t.premultipliedAlpha||t.premultipliedAlpha,c=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,h=void 0!==t.powerPreference?t.powerPreference:\"default\",u=void 0!==t.failIfMajorPerformanceCaveat&&t.failIfMajorPerformanceCaveat;let d=null,p=null;const f=[],m=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=sr,this.physicallyCorrectLights=!1,this.toneMapping=0,this.toneMappingExposure=1;const g=this;let v=!1,y=0,x=0,_=null,M=-1,w=null;const b=new Rr,S=new Rr;let T=null,E=e.width,A=e.height,L=1,C=null,R=null;const P=new Rr(0,0,E,A),D=new Rr(0,0,E,A);let N=!1;const I=[],O=new eo;let z=!1,U=!1,F=null;const B=new ua,H=new Ir,k={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function G(){return null===_?L:1}let V,W,j,q,X,Y,Z,J,Q,K,$,tt,et,nt,it,rt,at,st,ot,lt,ct,ht,ut,dt=i;function pt(t,n){for(let i=0;i<t.length;i++){const r=e.getContext(t[i],n);if(null!==r)return r}return null}try{const t={alpha:r,depth:a,stencil:s,antialias:o,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:h,failIfMajorPerformanceCaveat:u};if(e.addEventListener(\"webglcontextlost\",gt,!1),e.addEventListener(\"webglcontextrestored\",vt,!1),null===dt){const e=[\"webgl2\",\"webgl\",\"experimental-webgl\"];if(!0===g.isWebGL1Renderer&&e.shift(),dt=pt(e,t),null===dt)throw pt(e)?new Error(\"Error creating WebGL context with your selected attributes.\"):new Error(\"Error creating WebGL context.\")}void 0===dt.getShaderPrecisionFormat&&(dt.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error(\"THREE.WebGLRenderer: \"+t.message),t}function ft(){V=new Wo(dt),W=new uo(dt,V,t),V.init(W),ht=new Bc(dt,V,W),j=new Uc(dt,V,W),I[0]=1029,q=new Xo(dt),X=new bc,Y=new Fc(dt,V,j,X,W,ht,q),Z=new fo(g),J=new Vo(g),Q=new io(dt,W),ut=new co(dt,V,Q,W),K=new jo(dt,Q,q,ut),$=new Qo(dt,K,Q,q),ot=new Jo(dt),rt=new po(X),tt=new wc(g,Z,J,V,W,ut,rt),et=new jc(X),nt=new Ac(X),it=new Nc(V,W),st=new lo(g,Z,j,$,l),at=new zc(g,$,W),lt=new ho(dt,V,q,W),ct=new qo(dt,V,q,W),q.programs=tt.programs,g.capabilities=W,g.extensions=V,g.properties=X,g.renderLists=nt,g.shadowMap=at,g.state=j,g.info=q}ft();const mt=new Wc(g,dt);function gt(t){t.preventDefault(),console.log(\"THREE.WebGLRenderer: Context Lost.\"),v=!0}function vt(){console.log(\"THREE.WebGLRenderer: Context Restored.\"),v=!1;const t=q.autoReset,e=at.enabled,n=at.autoUpdate,i=at.needsUpdate,r=at.type;ft(),q.autoReset=t,at.enabled=e,at.autoUpdate=n,at.needsUpdate=i,at.type=r}function yt(t){const e=t.target;e.removeEventListener(\"dispose\",yt),(function n(t){(function e(t){const e=X.get(t).programs;void 0!==e&&e.forEach((function(t){tt.releaseProgram(t)}))})(t),X.remove(t)})(e)}this.xr=mt,this.getContext=function(){return dt},this.getContextAttributes=function(){return dt.getContextAttributes()},this.forceContextLoss=function(){const t=V.get(\"WEBGL_lose_context\");t&&t.loseContext()},this.forceContextRestore=function(){const t=V.get(\"WEBGL_lose_context\");t&&t.restoreContext()},this.getPixelRatio=function(){return L},this.setPixelRatio=function(t){void 0!==t&&(L=t,this.setSize(E,A,!1))},this.getSize=function(t){return t.set(E,A)},this.setSize=function(t,n,i){mt.isPresenting?console.warn(\"THREE.WebGLRenderer: Can't change size while VR device is presenting.\"):(E=t,A=n,e.width=Math.floor(t*L),e.height=Math.floor(n*L),!1!==i&&(e.style.width=t+\"px\",e.style.height=n+\"px\"),this.setViewport(0,0,t,n))},this.getDrawingBufferSize=function(t){return t.set(E*L,A*L).floor()},this.setDrawingBufferSize=function(t,n,i){E=t,A=n,L=i,e.width=Math.floor(t*i),e.height=Math.floor(n*i),this.setViewport(0,0,t,n)},this.getCurrentViewport=function(t){return t.copy(b)},this.getViewport=function(t){return t.copy(P)},this.setViewport=function(t,e,n,i){t.isVector4?P.set(t.x,t.y,t.z,t.w):P.set(t,e,n,i),j.viewport(b.copy(P).multiplyScalar(L).floor())},this.getScissor=function(t){return t.copy(D)},this.setScissor=function(t,e,n,i){t.isVector4?D.set(t.x,t.y,t.z,t.w):D.set(t,e,n,i),j.scissor(S.copy(D).multiplyScalar(L).floor())},this.getScissorTest=function(){return N},this.setScissorTest=function(t){j.setScissorTest(N=t)},this.setOpaqueSort=function(t){C=t},this.setTransparentSort=function(t){R=t},this.getClearColor=function(t){return t.copy(st.getClearColor())},this.setClearColor=function(){st.setClearColor.apply(st,arguments)},this.getClearAlpha=function(){return st.getClearAlpha()},this.setClearAlpha=function(){st.setClearAlpha.apply(st,arguments)},this.clear=function(t,e,n){let i=0;(void 0===t||t)&&(i|=16384),(void 0===e||e)&&(i|=256),(void 0===n||n)&&(i|=1024),dt.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener(\"webglcontextlost\",gt,!1),e.removeEventListener(\"webglcontextrestored\",vt,!1),nt.dispose(),it.dispose(),X.dispose(),Z.dispose(),J.dispose(),$.dispose(),ut.dispose(),mt.dispose(),mt.removeEventListener(\"sessionstart\",_t),mt.removeEventListener(\"sessionend\",Mt),F&&(F.dispose(),F=null),wt.stop()},this.renderBufferImmediate=function(t,e){ut.initAttributes();const n=X.get(t);t.hasPositions&&!n.position&&(n.position=dt.createBuffer()),t.hasNormals&&!n.normal&&(n.normal=dt.createBuffer()),t.hasUvs&&!n.uv&&(n.uv=dt.createBuffer()),t.hasColors&&!n.color&&(n.color=dt.createBuffer());const i=e.getAttributes();t.hasPositions&&(dt.bindBuffer(34962,n.position),dt.bufferData(34962,t.positionArray,35048),ut.enableAttribute(i.position),dt.vertexAttribPointer(i.position,3,5126,!1,0,0)),t.hasNormals&&(dt.bindBuffer(34962,n.normal),dt.bufferData(34962,t.normalArray,35048),ut.enableAttribute(i.normal),dt.vertexAttribPointer(i.normal,3,5126,!1,0,0)),t.hasUvs&&(dt.bindBuffer(34962,n.uv),dt.bufferData(34962,t.uvArray,35048),ut.enableAttribute(i.uv),dt.vertexAttribPointer(i.uv,2,5126,!1,0,0)),t.hasColors&&(dt.bindBuffer(34962,n.color),dt.bufferData(34962,t.colorArray,35048),ut.enableAttribute(i.color),dt.vertexAttribPointer(i.color,3,5126,!1,0,0)),ut.disableUnusedAttributes(),dt.drawArrays(4,0,t.count),t.count=0},this.renderBufferDirect=function(t,e,n,i,r,a){null===e&&(e=k);const s=r.isMesh&&r.matrixWorld.determinant()<0,o=Lt(t,e,i,r);j.setMaterial(i,s);let l=n.index;const c=n.attributes.position;if(null===l){if(void 0===c||0===c.count)return}else if(0===l.count)return;let h,u=1;!0===i.wireframe&&(l=K.getWireframeAttribute(n),u=2),void 0===n.morphAttributes.position&&void 0===n.morphAttributes.normal||ot.update(r,n,i,o),ut.setup(r,i,o,n,l);let d=lt;null!==l&&(h=Q.get(l),d=ct,d.setIndex(h));const p=null!==l?l.count:c.count,f=n.drawRange.start*u,m=n.drawRange.count*u,g=null!==a?a.start*u:0,v=null!==a?a.count*u:1/0,y=Math.max(f,g),x=Math.min(p,f+m,g+v)-1,_=Math.max(0,x-y+1);if(0!==_){if(r.isMesh)!0===i.wireframe?(j.setLineWidth(i.wireframeLinewidth*G()),d.setMode(1)):d.setMode(4);else if(r.isLine){let t=i.linewidth;void 0===t&&(t=1),j.setLineWidth(t*G()),d.setMode(r.isLineSegments?1:r.isLineLoop?2:3)}else r.isPoints?d.setMode(0):r.isSprite&&d.setMode(4);if(r.isInstancedMesh)d.renderInstances(y,_,r.count);else if(n.isInstancedBufferGeometry){const t=Math.min(n.instanceCount,n._maxInstanceCount);d.renderInstances(y,_,t)}else d.render(y,_)}},this.compile=function(t,e){p=it.get(t),p.init(),m.push(p),t.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(p.pushLight(t),t.castShadow&&p.pushShadow(t))})),p.setupLights(),t.traverse((function(e){const n=e.material;if(n)if(Array.isArray(n))for(let i=0;i<n.length;i++){Et(n[i],t,e)}else Et(n,t,e)})),m.pop(),p=null};let xt=null;function _t(){wt.stop()}function Mt(){wt.start()}const wt=new no;function bt(t,e,n,i){if(!1===t.visible)return;if(t.layers.test(e.layers))if(t.isGroup)n=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)p.pushLight(t),t.castShadow&&p.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||O.intersectsSprite(t)){i&&H.setFromMatrixPosition(t.matrixWorld).applyMatrix4(B);const e=$.update(t),r=t.material;r.visible&&d.push(t,e,r,n,H.z,null)}}else if(t.isImmediateRenderObject)i&&H.setFromMatrixPosition(t.matrixWorld).applyMatrix4(B),d.push(t,null,t.material,n,H.z,null);else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.frame!==q.render.frame&&(t.skeleton.update(),t.skeleton.frame=q.render.frame),!t.frustumCulled||O.intersectsObject(t))){i&&H.setFromMatrixPosition(t.matrixWorld).applyMatrix4(B);const e=$.update(t),r=t.material;if(Array.isArray(r)){const i=e.groups;for(let a=0,s=i.length;a<s;a++){const s=i[a],o=r[s.materialIndex];o&&o.visible&&d.push(t,e,o,n,H.z,s)}}else r.visible&&d.push(t,e,r,n,H.z,null)}const r=t.children;for(let t=0,a=r.length;t<a;t++)bt(r[t],e,n,i)}function St(t,e,n){const i=!0===e.isScene?e.overrideMaterial:null;if(n.isArrayCamera){const r=n.cameras;for(let n=0,a=r.length;n<a;n++){const a=r[n];j.viewport(b.copy(a.viewport)),p.setupLightsView(a);for(let n=0,r=t.length;n<r;n++){const r=t[n],s=r.object,o=r.geometry,l=null===i?r.material:i,c=r.group;s.layers.test(a.layers)&&Tt(s,e,a,o,l,c)}}}else for(let r=0,a=t.length;r<a;r++){const a=t[r];Tt(a.object,e,n,a.geometry,null===i?a.material:i,a.group)}}function Tt(t,e,n,i,r,a){if(t.onBeforeRender(g,e,n,i,r,a),t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),t.isImmediateRenderObject){const i=Lt(n,e,r,t);j.setMaterial(r),ut.reset(),(function s(t,e){t.render((function(t){g.renderBufferImmediate(t,e)}))})(t,i)}else!0===r.transparent&&2===r.side?(r.side=1,r.needsUpdate=!0,g.renderBufferDirect(n,e,i,r,t,a),r.side=0,r.needsUpdate=!0,g.renderBufferDirect(n,e,i,r,t,a),r.side=2):g.renderBufferDirect(n,e,i,r,t,a);t.onAfterRender(g,e,n,i,r,a)}function Et(t,e,n){!0!==e.isScene&&(e=k);const i=X.get(t),r=p.state.lights,a=r.state.version,s=tt.getParameters(t,r.state,p.state.shadowsArray,e,n),o=tt.getProgramCacheKey(s);let l=i.programs;i.environment=t.isMeshStandardMaterial?e.environment:null,i.fog=e.fog,i.envMap=(t.isMeshStandardMaterial?J:Z).get(t.envMap||i.environment),void 0===l&&(t.addEventListener(\"dispose\",yt),l=new Map,i.programs=l);let c=l.get(o);if(void 0!==c){if(i.currentProgram===c&&i.lightsStateVersion===a)return At(t,s),c}else s.uniforms=tt.getUniforms(t),t.onBuild(s,g),t.onBeforeCompile(s,g),c=tt.acquireProgram(s,o),l.set(o,c),i.uniforms=s.uniforms;const h=i.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(h.clippingPlanes=rt.uniform),At(t,s),i.needsLights=(function u(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights})(t),i.lightsStateVersion=a,i.needsLights&&(h.ambientLightColor.value=r.state.ambient,h.lightProbe.value=r.state.probe,h.directionalLights.value=r.state.directional,h.directionalLightShadows.value=r.state.directionalShadow,h.spotLights.value=r.state.spot,h.spotLightShadows.value=r.state.spotShadow,h.rectAreaLights.value=r.state.rectArea,h.ltc_1.value=r.state.rectAreaLTC1,h.ltc_2.value=r.state.rectAreaLTC2,h.pointLights.value=r.state.point,h.pointLightShadows.value=r.state.pointShadow,h.hemisphereLights.value=r.state.hemi,h.directionalShadowMap.value=r.state.directionalShadowMap,h.directionalShadowMatrix.value=r.state.directionalShadowMatrix,h.spotShadowMap.value=r.state.spotShadowMap,h.spotShadowMatrix.value=r.state.spotShadowMatrix,h.pointShadowMap.value=r.state.pointShadowMap,h.pointShadowMatrix.value=r.state.pointShadowMatrix);const d=c.getUniforms(),f=ec.seqWithValue(d.seq,h);return i.currentProgram=c,i.uniformsList=f,c}function At(t,e){const n=X.get(t);n.outputEncoding=e.outputEncoding,n.instancing=e.instancing,n.skinning=e.skinning,n.morphTargets=e.morphTargets,n.morphNormals=e.morphNormals,n.numClippingPlanes=e.numClippingPlanes,n.numIntersection=e.numClipIntersection,n.vertexAlphas=e.vertexAlphas,n.vertexTangents=e.vertexTangents}function Lt(t,e,n,i){!0!==e.isScene&&(e=k),Y.resetTextureUnits();const r=e.fog,a=null===_?g.outputEncoding:_.texture.encoding,s=(n.isMeshStandardMaterial?J:Z).get(n.envMap||(n.isMeshStandardMaterial?e.environment:null)),o=!0===n.vertexColors&&!!i.geometry&&!!i.geometry.attributes.color&&4===i.geometry.attributes.color.itemSize,l=!!i.geometry&&!!i.geometry.attributes.tangent,c=!!i.geometry&&!!i.geometry.morphAttributes.position,h=!!i.geometry&&!!i.geometry.morphAttributes.normal,u=X.get(n),d=p.state.lights;if(!0===z&&(!0===U||t!==w)){rt.setState(n,t,t===w&&n.id===M)}let f=!1;n.version===u.__version?u.needsLights&&u.lightsStateVersion!==d.state.version||u.outputEncoding!==a||i.isInstancedMesh&&!1===u.instancing?f=!0:i.isInstancedMesh||!0!==u.instancing?i.isSkinnedMesh&&!1===u.skinning?f=!0:i.isSkinnedMesh||!0!==u.skinning?u.envMap!==s||n.fog&&u.fog!==r?f=!0:void 0===u.numClippingPlanes||u.numClippingPlanes===rt.numPlanes&&u.numIntersection===rt.numIntersection?(u.vertexAlphas!==o||u.vertexTangents!==l||u.morphTargets!==c||u.morphNormals!==h)&&(f=!0):f=!0:f=!0:f=!0:(f=!0,u.__version=n.version);let m=u.currentProgram;!0===f&&(m=Et(n,e,i));let v=!1,y=!1,x=!1;const b=m.getUniforms(),S=u.uniforms;if(j.useProgram(m.program)&&(v=!0,y=!0,x=!0),n.id!==M&&(M=n.id,y=!0),v||w!==t){if(b.setValue(dt,\"projectionMatrix\",t.projectionMatrix),W.logarithmicDepthBuffer&&b.setValue(dt,\"logDepthBufFC\",2/(Math.log(t.far+1)/Math.LN2)),w!==t&&(w=t,y=!0,x=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshStandardMaterial||n.envMap){const e=b.map.cameraPosition;void 0!==e&&e.setValue(dt,H.setFromMatrixPosition(t.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial)&&b.setValue(dt,\"isOrthographic\",!0===t.isOrthographicCamera),(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.isShadowMaterial||i.isSkinnedMesh)&&b.setValue(dt,\"viewMatrix\",t.matrixWorldInverse)}if(i.isSkinnedMesh){b.setOptional(dt,i,\"bindMatrix\"),b.setOptional(dt,i,\"bindMatrixInverse\");const t=i.skeleton;t&&(W.floatVertexTextures?(null===t.boneTexture&&t.computeBoneTexture(),b.setValue(dt,\"boneTexture\",t.boneTexture,Y),b.setValue(dt,\"boneTextureSize\",t.boneTextureSize)):b.setOptional(dt,t,\"boneMatrices\"))}return(y||u.receiveShadow!==i.receiveShadow)&&(u.receiveShadow=i.receiveShadow,b.setValue(dt,\"receiveShadow\",i.receiveShadow)),y&&(b.setValue(dt,\"toneMappingExposure\",g.toneMappingExposure),u.needsLights&&(function T(t,e){t.ambientLightColor.needsUpdate=e,t.lightProbe.needsUpdate=e,t.directionalLights.needsUpdate=e,t.directionalLightShadows.needsUpdate=e,t.pointLights.needsUpdate=e,t.pointLightShadows.needsUpdate=e,t.spotLights.needsUpdate=e,t.spotLightShadows.needsUpdate=e,t.rectAreaLights.needsUpdate=e,t.hemisphereLights.needsUpdate=e})(S,x),r&&n.fog&&et.refreshFogUniforms(S,r),et.refreshMaterialUniforms(S,n,L,A,F),ec.upload(dt,u.uniformsList,S,Y)),n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(ec.upload(dt,u.uniformsList,S,Y),n.uniformsNeedUpdate=!1),n.isSpriteMaterial&&b.setValue(dt,\"center\",i.center),b.setValue(dt,\"modelViewMatrix\",i.modelViewMatrix),b.setValue(dt,\"normalMatrix\",i.normalMatrix),b.setValue(dt,\"modelMatrix\",i.matrixWorld),m}wt.setAnimationLoop((function Ct(t){xt&&xt(t)})),\"undefined\"!=typeof window&&wt.setContext(window),this.setAnimationLoop=function(t){xt=t,mt.setAnimationLoop(t),null===t?wt.stop():wt.start()},mt.addEventListener(\"sessionstart\",_t),mt.addEventListener(\"sessionend\",Mt),this.render=function(t,e){if(void 0!==e&&!0!==e.isCamera)return void console.error(\"THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.\");if(!0===v)return;!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),!0===mt.enabled&&!0===mt.isPresenting&&(!0===mt.cameraAutoUpdate&&mt.updateCamera(e),e=mt.getCamera()),!0===t.isScene&&t.onBeforeRender(g,t,e,_),p=it.get(t,m.length),p.init(),m.push(p),B.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),O.setFromProjectionMatrix(B),U=this.localClippingEnabled,z=rt.init(this.clippingPlanes,U,e),d=nt.get(t,f.length),d.init(),f.push(d),bt(t,e,0,g.sortObjects),d.finish(),!0===g.sortObjects&&d.sort(C,R),!0===z&&rt.beginShadows();at.render(p.state.shadowsArray,t,e),p.setupLights(),p.setupLightsView(e),!0===z&&rt.endShadows(),!0===this.info.autoReset&&this.info.reset(),st.render(d,t);const n=d.opaque,i=d.transmissive,r=d.transparent;n.length>0&&St(n,t,e),i.length>0&&(function a(t,e,n,i){if(null===F){F=new(!0===o&&!0===W.isWebGL2?Dr:Pr)(1024,1024,{generateMipmaps:!0,type:null!==ht.convert(Xi)?Xi:Vi,minFilter:Gi,magFilter:Hi,wrapS:Fi,wrapT:Fi})}const r=g.getRenderTarget();g.setRenderTarget(F),g.clear();const a=g.toneMapping;g.toneMapping=0,St(t,n,i),g.toneMapping=a,Y.updateMultisampleRenderTarget(F),Y.updateRenderTargetMipmap(F),g.setRenderTarget(r),St(e,n,i)})(n,i,t,e),r.length>0&&St(r,t,e),null!==_&&(Y.updateMultisampleRenderTarget(_),Y.updateRenderTargetMipmap(_)),!0===t.isScene&&t.onAfterRender(g,t,e),j.buffers.depth.setTest(!0),j.buffers.depth.setMask(!0),j.buffers.color.setMask(!0),j.setPolygonOffset(!1),ut.resetDefaultState(),M=-1,w=null,m.pop(),p=m.length>0?m[m.length-1]:null,f.pop(),d=f.length>0?f[f.length-1]:null},this.getActiveCubeFace=function(){return y},this.getActiveMipmapLevel=function(){return x},this.getRenderTarget=function(){return _},this.setRenderTarget=function(t,e=0,n=0){_=t,y=e,x=n,t&&void 0===X.get(t).__webglFramebuffer&&Y.setupRenderTarget(t);let i=null,r=!1,a=!1;if(t){const n=t.texture;(n.isDataTexture3D||n.isDataTexture2DArray)&&(a=!0);const s=X.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(i=s[e],r=!0):i=t.isWebGLMultisampleRenderTarget?X.get(t).__webglMultisampledFramebuffer:s,b.copy(t.viewport),S.copy(t.scissor),T=t.scissorTest}else b.copy(P).multiplyScalar(L).floor(),S.copy(D).multiplyScalar(L).floor(),T=N;if(j.bindFramebuffer(36160,i)&&W.drawBuffers){let e=!1;if(t)if(t.isWebGLMultipleRenderTargets){const n=t.texture;if(I.length!==n.length||36064!==I[0]){for(let t=0,e=n.length;t<e;t++)I[t]=36064+t;I.length=n.length,e=!0}}else 1===I.length&&36064===I[0]||(I[0]=36064,I.length=1,e=!0);else 1===I.length&&1029===I[0]||(I[0]=1029,I.length=1,e=!0);e&&(W.isWebGL2?dt.drawBuffers(I):V.get(\"WEBGL_draw_buffers\").drawBuffersWEBGL(I))}if(j.viewport(b),j.scissor(S),j.setScissorTest(T),r){const i=X.get(t.texture);dt.framebufferTexture2D(36160,36064,34069+e,i.__webglTexture,n)}else if(a){const i=X.get(t.texture);dt.framebufferTextureLayer(36160,36064,i.__webglTexture,n||0,e||0)}},this.readRenderTargetPixels=function(t,e,n,i,r,a,s){if(!t||!t.isWebGLRenderTarget)return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.\");let o=X.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==s&&(o=o[s]),o){j.bindFramebuffer(36160,o);try{const s=t.texture,o=s.format,l=s.type;if(o!==Ji&&ht.convert(o)!==dt.getParameter(35739))return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.\");const c=l===Xi&&(V.has(\"EXT_color_buffer_half_float\")||W.isWebGL2&&V.has(\"EXT_color_buffer_float\"));if(!(l===Vi||ht.convert(l)===dt.getParameter(35738)||l===qi&&(W.isWebGL2||V.has(\"OES_texture_float\")||V.has(\"WEBGL_color_buffer_float\"))||c))return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.\");36053===dt.checkFramebufferStatus(36160)?e>=0&&e<=t.width-i&&n>=0&&n<=t.height-r&&dt.readPixels(e,n,i,r,ht.convert(o),ht.convert(l),a):console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.\")}finally{const t=null!==_?X.get(_).__webglFramebuffer:null;j.bindFramebuffer(36160,t)}}},this.copyFramebufferToTexture=function(t,e,n=0){const i=Math.pow(2,-n),r=Math.floor(e.image.width*i),a=Math.floor(e.image.height*i);let s=ht.convert(e.format);W.isWebGL2&&(6407===s&&(s=32849),6408===s&&(s=32856)),Y.setTexture2D(e,0),dt.copyTexImage2D(3553,n,s,t.x,t.y,r,a,0),j.unbindTexture()},this.copyTextureToTexture=function(t,e,n,i=0){const r=e.image.width,a=e.image.height,s=ht.convert(n.format),o=ht.convert(n.type);Y.setTexture2D(n,0),dt.pixelStorei(37440,n.flipY),dt.pixelStorei(37441,n.premultiplyAlpha),dt.pixelStorei(3317,n.unpackAlignment),e.isDataTexture?dt.texSubImage2D(3553,i,t.x,t.y,r,a,s,o,e.image.data):e.isCompressedTexture?dt.compressedTexSubImage2D(3553,i,t.x,t.y,e.mipmaps[0].width,e.mipmaps[0].height,s,e.mipmaps[0].data):dt.texSubImage2D(3553,i,t.x,t.y,s,o,e.image),0===i&&n.generateMipmaps&&dt.generateMipmap(3553),j.unbindTexture()},this.copyTextureToTexture3D=function(t,e,n,i,r=0){if(g.isWebGL1Renderer)return void console.warn(\"THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.\");const a=t.max.x-t.min.x+1,s=t.max.y-t.min.y+1,o=t.max.z-t.min.z+1,l=ht.convert(i.format),c=ht.convert(i.type);let h;if(i.isDataTexture3D)Y.setTexture3D(i,0),h=32879;else{if(!i.isDataTexture2DArray)return void console.warn(\"THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.\");Y.setTexture2DArray(i,0),h=35866}dt.pixelStorei(37440,i.flipY),dt.pixelStorei(37441,i.premultiplyAlpha),dt.pixelStorei(3317,i.unpackAlignment);const u=dt.getParameter(3314),d=dt.getParameter(32878),p=dt.getParameter(3316),f=dt.getParameter(3315),m=dt.getParameter(32877),v=n.isCompressedTexture?n.mipmaps[0]:n.image;dt.pixelStorei(3314,v.width),dt.pixelStorei(32878,v.height),dt.pixelStorei(3316,t.min.x),dt.pixelStorei(3315,t.min.y),dt.pixelStorei(32877,t.min.z),n.isDataTexture||n.isDataTexture3D?dt.texSubImage3D(h,r,e.x,e.y,e.z,a,s,o,l,c,v.data):n.isCompressedTexture?(console.warn(\"THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.\"),dt.compressedTexSubImage3D(h,r,e.x,e.y,e.z,a,s,o,l,v.data)):dt.texSubImage3D(h,r,e.x,e.y,e.z,a,s,o,l,c,v),dt.pixelStorei(3314,u),dt.pixelStorei(32878,d),dt.pixelStorei(3316,p),dt.pixelStorei(3315,f),dt.pixelStorei(32877,m),0===r&&i.generateMipmaps&&dt.generateMipmap(h),j.unbindTexture()},this.initTexture=function(t){Y.setTexture2D(t,0),j.unbindTexture()},this.resetState=function(){y=0,x=0,_=null,j.reset(),ut.reset()},\"undefined\"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent(\"observe\",{detail:this}))}(class extends qc{}).prototype.isWebGL1Renderer=!0;class Xc extends za{constructor(){super(),this.type=\"Scene\",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,\"undefined\"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent(\"observe\",{detail:this}))}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.fog&&(e.object.fog=this.fog.toJSON()),e}}Xc.prototype.isScene=!0;class Yc{constructor(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=ur,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=yr()}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,n){t*=this.stride,n*=e.stride;for(let i=0,r=this.stride;i<r;i++)this.array[t+i]=e.array[n+i];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=yr()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(e,this.stride);return n.setUsage(this.usage),n}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=yr()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}Yc.prototype.isInterleavedBuffer=!0;const Zc=new Ir;class Jc{constructor(t,e,n,i=!1){this.name=\"\",this.data=t,this.itemSize=e,this.offset=n,this.normalized=!0===i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,n=this.data.count;e<n;e++)Zc.x=this.getX(e),Zc.y=this.getY(e),Zc.z=this.getZ(e),Zc.applyMatrix4(t),this.setXYZ(e,Zc.x,Zc.y,Zc.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)Zc.x=this.getX(e),Zc.y=this.getY(e),Zc.z=this.getZ(e),Zc.applyNormalMatrix(t),this.setXYZ(e,Zc.x,Zc.y,Zc.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)Zc.x=this.getX(e),Zc.y=this.getY(e),Zc.z=this.getZ(e),Zc.transformDirection(t),this.setXYZ(e,Zc.x,Zc.y,Zc.z);return this}setX(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){return this.data.array[t*this.data.stride+this.offset]}getY(t){return this.data.array[t*this.data.stride+this.offset+1]}getZ(t){return this.data.array[t*this.data.stride+this.offset+2]}getW(t){return this.data.array[t*this.data.stride+this.offset+3]}setXY(t,e,n){return this.data.array[(t=t*this.data.stride+this.offset)+0]=e,this.data.array[t+1]=n,this}setXYZ(t,e,n,i){return this.data.array[(t=t*this.data.stride+this.offset)+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this}setXYZW(t,e,n,i,r){return this.data.array[(t=t*this.data.stride+this.offset)+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this.data.array[t+3]=r,this}clone(t){if(void 0===t){console.log(\"THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.\");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[n+e])}return new ss(new this.array.constructor(t),this.itemSize,this.normalized)}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new Jc(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(void 0===t){console.log(\"THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.\");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[n+e])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}Jc.prototype.isInterleavedBufferAttribute=!0;class Qc extends Za{constructor(t){super(),this.type=\"SpriteMaterial\",this.color=new ns(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this}}let Kc;Qc.prototype.isSpriteMaterial=!0;const $c=new Ir,th=new Ir,eh=new Ir,nh=new br,ih=new br,rh=new ua,ah=new Ir,sh=new Ir,oh=new Ir,lh=new br,ch=new br,hh=new br;function uh(t,e,n,i,r,a){nh.subVectors(t,n).addScalar(.5).multiply(i),void 0!==r?(ih.x=a*nh.x-r*nh.y,ih.y=r*nh.x+a*nh.y):ih.copy(nh),t.copy(e),t.x+=ih.x,t.y+=ih.y,t.applyMatrix4(rh)}(class extends za{constructor(t){if(super(),this.type=\"Sprite\",void 0===Kc){Kc=new ys;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),e=new Yc(t,5);Kc.setIndex([0,1,2,0,2,3]),Kc.setAttribute(\"position\",new Jc(e,3,0,!1)),Kc.setAttribute(\"uv\",new Jc(e,2,3,!1))}this.geometry=Kc,this.material=void 0!==t?t:new Qc,this.center=new br(.5,.5)}raycast(t,e){null===t.camera&&console.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.'),th.setFromMatrixScale(this.matrixWorld),rh.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),eh.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&th.multiplyScalar(-eh.z);const n=this.material.rotation;let i,r;0!==n&&(r=Math.cos(n),i=Math.sin(n));const a=this.center;uh(ah.set(-.5,-.5,0),eh,a,th,i,r),uh(sh.set(.5,-.5,0),eh,a,th,i,r),uh(oh.set(.5,.5,0),eh,a,th,i,r),lh.set(0,0),ch.set(1,0),hh.set(1,1);let s=t.ray.intersectTriangle(ah,sh,oh,!1,$c);if(null===s&&(uh(sh.set(-.5,.5,0),eh,a,th,i,r),ch.set(0,1),s=t.ray.intersectTriangle(ah,oh,sh,!1,$c),null===s))return;const o=t.ray.origin.distanceTo($c);o<t.near||o>t.far||e.push({distance:o,point:$c.clone(),uv:Xa.getUV($c,ah,sh,oh,lh,ch,hh,new br),face:null,object:this})}copy(t){return super.copy(t),void 0!==t.center&&this.center.copy(t.center),this.material=t.material,this}}).prototype.isSprite=!0;const dh=new Ir,ph=new Rr,fh=new Rr,mh=new Ir,gh=new ua;class vh extends zs{constructor(t,e){super(t,e),this.type=\"SkinnedMesh\",this.bindMode=\"attached\",this.bindMatrix=new ua,this.bindMatrixInverse=new ua}copy(t){return super.copy(t),this.bindMode=t.bindMode,this.bindMatrix.copy(t.bindMatrix),this.bindMatrixInverse.copy(t.bindMatrixInverse),this.skeleton=t.skeleton,this}bind(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new Rr,e=this.geometry.attributes.skinWeight;for(let n=0,i=e.count;n<i;n++){t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.w=e.getW(n);const i=1/t.manhattanLength();i!==1/0?t.multiplyScalar(i):t.set(1,0,0,0),e.setXYZW(n,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t),\"attached\"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():\"detached\"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn(\"THREE.SkinnedMesh: Unrecognized bindMode: \"+this.bindMode)}boneTransform(t,e){const n=this.skeleton,i=this.geometry;ph.fromBufferAttribute(i.attributes.skinIndex,t),fh.fromBufferAttribute(i.attributes.skinWeight,t),dh.fromBufferAttribute(i.attributes.position,t).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let t=0;t<4;t++){const i=fh.getComponent(t);if(0!==i){const r=ph.getComponent(t);gh.multiplyMatrices(n.bones[r].matrixWorld,n.boneInverses[r]),e.addScaledVector(mh.copy(dh).applyMatrix4(gh),i)}}return e.applyMatrix4(this.bindMatrixInverse)}}vh.prototype.isSkinnedMesh=!0;(class extends za{constructor(){super(),this.type=\"Bone\"}}).prototype.isBone=!0;(class extends Lr{constructor(t=null,e=1,n=1,i,r,a,s,o,l=1003,c=1003,h,u){super(null,a,s,o,l,c,i,r,h,u),this.image={data:t,width:e,height:n},this.magFilter=l,this.minFilter=c,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}).prototype.isDataTexture=!0;const yh=new ua,xh=new ua,_h=[],Mh=new zs;(class extends zs{constructor(t,e,n){super(t,e),this.instanceMatrix=new ss(new Float32Array(16*n),16),this.instanceColor=null,this.count=n,this.frustumCulled=!1}copy(t){return super.copy(t),this.instanceMatrix.copy(t.instanceMatrix),null!==t.instanceColor&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,this}getColorAt(t,e){e.fromArray(this.instanceColor.array,3*t)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,16*t)}raycast(t,e){const n=this.matrixWorld,i=this.count;if(Mh.geometry=this.geometry,Mh.material=this.material,void 0!==Mh.material)for(let r=0;r<i;r++){this.getMatrixAt(r,yh),xh.multiplyMatrices(n,yh),Mh.matrixWorld=xh,Mh.raycast(t,_h);for(let t=0,n=_h.length;t<n;t++){const n=_h[t];n.instanceId=r,n.object=this,e.push(n)}_h.length=0}}setColorAt(t,e){null===this.instanceColor&&(this.instanceColor=new ss(new Float32Array(3*this.instanceMatrix.count),3)),e.toArray(this.instanceColor.array,3*t)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,16*t)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:\"dispose\"})}}).prototype.isInstancedMesh=!0;class wh extends Za{constructor(t){super(),this.type=\"LineBasicMaterial\",this.color=new ns(16777215),this.linewidth=1,this.linecap=\"round\",this.linejoin=\"round\",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this}}wh.prototype.isLineBasicMaterial=!0;const bh=new Ir,Sh=new Ir,Th=new ua,Eh=new ha,Ah=new na;class Lh extends za{constructor(t=new ys,e=new wh){super(),this.type=\"Line\",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,n=[0];for(let t=1,i=e.count;t<i;t++)bh.fromBufferAttribute(e,t-1),Sh.fromBufferAttribute(e,t),n[t]=n[t-1],n[t]+=bh.distanceTo(Sh);t.setAttribute(\"lineDistance\",new cs(n,1))}else console.warn(\"THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.\");else t.isGeometry&&console.error(\"THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\");return this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,r=t.params.Line.threshold,a=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),Ah.copy(n.boundingSphere),Ah.applyMatrix4(i),Ah.radius+=r,!1===t.ray.intersectsSphere(Ah))return;Th.copy(i).invert(),Eh.copy(t.ray).applyMatrix4(Th);const s=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=s*s,l=new Ir,c=new Ir,h=new Ir,u=new Ir,d=this.isLineSegments?2:1;if(n.isBufferGeometry){const i=n.index,r=n.attributes.position;if(null!==i){for(let n=Math.max(0,a.start),s=Math.min(i.count,a.start+a.count)-1;n<s;n+=d){const a=i.getX(n),s=i.getX(n+1);l.fromBufferAttribute(r,a),c.fromBufferAttribute(r,s);if(Eh.distanceSqToSegment(l,c,u,h)>o)continue;u.applyMatrix4(this.matrixWorld);const d=t.ray.origin.distanceTo(u);d<t.near||d>t.far||e.push({distance:d,point:h.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}}else{for(let n=Math.max(0,a.start),i=Math.min(r.count,a.start+a.count)-1;n<i;n+=d){l.fromBufferAttribute(r,n),c.fromBufferAttribute(r,n+1);if(Eh.distanceSqToSegment(l,c,u,h)>o)continue;u.applyMatrix4(this.matrixWorld);const i=t.ray.origin.distanceTo(u);i<t.near||i>t.far||e.push({distance:i,point:h.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}}}else n.isGeometry&&console.error(\"THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error(\"THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.\")}}}Lh.prototype.isLine=!0;const Ch=new Ir,Rh=new Ir;class Ph extends Lh{constructor(t,e){super(t,e),this.type=\"LineSegments\"}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,n=[];for(let t=0,i=e.count;t<i;t+=2)Ch.fromBufferAttribute(e,t),Rh.fromBufferAttribute(e,t+1),n[t]=0===t?0:n[t-1],n[t+1]=n[t]+Ch.distanceTo(Rh);t.setAttribute(\"lineDistance\",new cs(n,1))}else console.warn(\"THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.\");else t.isGeometry&&console.error(\"THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\");return this}}Ph.prototype.isLineSegments=!0;(class extends Lh{constructor(t,e){super(t,e),this.type=\"LineLoop\"}}).prototype.isLineLoop=!0;class Dh extends Za{constructor(t){super(),this.type=\"PointsMaterial\",this.color=new ns(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this}}Dh.prototype.isPointsMaterial=!0;const Nh=new ua,Ih=new ha,Oh=new na,zh=new Ir;function Uh(t,e,n,i,r,a,s){const o=Ih.distanceSqToPoint(t);if(o<n){const n=new Ir;Ih.closestPointToPoint(t,n),n.applyMatrix4(i);const l=r.ray.origin.distanceTo(n);if(l<r.near||l>r.far)return;a.push({distance:l,distanceToRay:Math.sqrt(o),point:n,index:e,face:null,object:s})}}(class extends za{constructor(t=new ys,e=new Dh){super(),this.type=\"Points\",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,r=t.params.Points.threshold,a=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),Oh.copy(n.boundingSphere),Oh.applyMatrix4(i),Oh.radius+=r,!1===t.ray.intersectsSphere(Oh))return;Nh.copy(i).invert(),Ih.copy(t.ray).applyMatrix4(Nh);const s=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=s*s;if(n.isBufferGeometry){const r=n.index,s=n.attributes.position;if(null!==r){for(let n=Math.max(0,a.start),l=Math.min(r.count,a.start+a.count);n<l;n++){const a=r.getX(n);zh.fromBufferAttribute(s,a),Uh(zh,a,o,i,t,e,this)}}else{for(let n=Math.max(0,a.start),r=Math.min(s.count,a.start+a.count);n<r;n++)zh.fromBufferAttribute(s,n),Uh(zh,n,o,i,t,e,this)}}else console.error(\"THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error(\"THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.\")}}}).prototype.isPoints=!0;(class extends Lr{constructor(t,e,n,i,r,a,s,o,l){super(t,e,n,i,r,a,s,o,l),this.format=void 0!==s?s:Zi,this.minFilter=void 0!==a?a:ki,this.magFilter=void 0!==r?r:ki,this.generateMipmaps=!1;const c=this;\"requestVideoFrameCallback\"in t&&t.requestVideoFrameCallback((function e(){c.needsUpdate=!0,t.requestVideoFrameCallback(e)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;!1===\"requestVideoFrameCallback\"in t&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}).prototype.isVideoTexture=!0;(class extends Lr{constructor(t,e,n,i,r,a,s,o,l,c,h,u){super(null,a,s,o,l,c,i,r,h,u),this.image={width:e,height:n},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}).prototype.isCompressedTexture=!0;(class extends Lr{constructor(t,e,n,i,r,a,s,o,l){super(t,e,n,i,r,a,s,o,l),this.needsUpdate=!0}}).prototype.isCanvasTexture=!0;(class extends Lr{constructor(t,e,n,i,r,a,s,o,l,c){if((c=void 0!==c?c:Qi)!==Qi&&c!==Ki)throw new Error(\"DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat\");void 0===n&&c===Qi&&(n=Wi),void 0===n&&c===Ki&&(n=Yi),super(null,i,r,a,s,o,c,n,l),this.image={width:t,height:e},this.magFilter=void 0!==s?s:Hi,this.minFilter=void 0!==o?o:Hi,this.flipY=!1,this.generateMipmaps=!1}}).prototype.isDepthTexture=!0;class Fh extends ys{constructor(t=1,e=8,n=0,i=2*Math.PI){super(),this.type=\"CircleGeometry\",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:i},e=Math.max(3,e);const r=[],a=[],s=[],o=[],l=new Ir,c=new br;a.push(0,0,0),s.push(0,0,1),o.push(.5,.5);for(let r=0,h=3;r<=e;r++,h+=3){const u=n+r/e*i;l.x=t*Math.cos(u),l.y=t*Math.sin(u),a.push(l.x,l.y,l.z),s.push(0,0,1),c.x=(a[h]/t+1)/2,c.y=(a[h+1]/t+1)/2,o.push(c.x,c.y)}for(let t=1;t<=e;t++)r.push(t,t+1,0);this.setIndex(r),this.setAttribute(\"position\",new cs(a,3)),this.setAttribute(\"normal\",new cs(s,3)),this.setAttribute(\"uv\",new cs(o,2))}static fromJSON(t){return new Fh(t.radius,t.segments,t.thetaStart,t.thetaLength)}}new Ir,new Ir,new Ir,new Xa;class Bh{constructor(){this.type=\"Curve\",this.arcLengthDivisions=200}getPoint(){return console.warn(\"THREE.Curve: .getPoint() not implemented.\"),null}getPointAt(t,e){const n=this.getUtoTmapping(t);return this.getPoint(n,e)}getPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return e}getSpacedPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPointAt(n/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let n,i=this.getPoint(0),r=0;e.push(0);for(let a=1;a<=t;a++)n=this.getPoint(a/t),r+=n.distanceTo(i),e.push(r),i=n;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(t,e){const n=this.getLengths();let i=0;const r=n.length;let a;a=e||t*n[r-1];let s,o=0,l=r-1;for(;o<=l;)if(i=Math.floor(o+(l-o)/2),s=n[i]-a,s<0)o=i+1;else{if(!(s>0)){l=i;break}l=i-1}if(i=l,n[i]===a)return i/(r-1);const c=n[i];return(i+(a-c)/(n[i+1]-c))/(r-1)}getTangent(t,e){const n=1e-4;let i=t-n,r=t+n;i<0&&(i=0),r>1&&(r=1);const a=this.getPoint(i),s=this.getPoint(r),o=e||(a.isVector2?new br:new Ir);return o.copy(s).sub(a).normalize(),o}getTangentAt(t,e){const n=this.getUtoTmapping(t);return this.getTangent(n,e)}computeFrenetFrames(t,e){const n=new Ir,i=[],r=[],a=[],s=new Ir,o=new ua;for(let e=0;e<=t;e++){i[e]=this.getTangentAt(e/t,new Ir),i[e].normalize()}r[0]=new Ir,a[0]=new Ir;let l=Number.MAX_VALUE;const c=Math.abs(i[0].x),h=Math.abs(i[0].y),u=Math.abs(i[0].z);c<=l&&(l=c,n.set(1,0,0)),h<=l&&(l=h,n.set(0,1,0)),u<=l&&n.set(0,0,1),s.crossVectors(i[0],n).normalize(),r[0].crossVectors(i[0],s),a[0].crossVectors(i[0],r[0]);for(let e=1;e<=t;e++){if(r[e]=r[e-1].clone(),a[e]=a[e-1].clone(),s.crossVectors(i[e-1],i[e]),s.length()>Number.EPSILON){s.normalize();const t=Math.acos(xr(i[e-1].dot(i[e]),-1,1));r[e].applyMatrix4(o.makeRotationAxis(s,t))}a[e].crossVectors(i[e],r[e])}if(!0===e){let e=Math.acos(xr(r[0].dot(r[t]),-1,1));e/=t,i[0].dot(s.crossVectors(r[0],r[t]))>0&&(e=-e);for(let n=1;n<=t;n++)r[n].applyMatrix4(o.makeRotationAxis(i[n],e*n)),a[n].crossVectors(i[n],r[n])}return{tangents:i,normals:r,binormals:a}}clone(){return(new this.constructor).copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.5,type:\"Curve\",generator:\"Curve.toJSON\"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}class Hh extends Bh{constructor(t=0,e=0,n=1,i=1,r=0,a=2*Math.PI,s=!1,o=0){super(),this.type=\"EllipseCurve\",this.aX=t,this.aY=e,this.xRadius=n,this.yRadius=i,this.aStartAngle=r,this.aEndAngle=a,this.aClockwise=s,this.aRotation=o}getPoint(t,e){const n=e||new br,i=2*Math.PI;let r=this.aEndAngle-this.aStartAngle;const a=Math.abs(r)<Number.EPSILON;for(;r<0;)r+=i;for(;r>i;)r-=i;r<Number.EPSILON&&(r=a?0:i),!0!==this.aClockwise||a||(r===i?r=-i:r-=i);const s=this.aStartAngle+t*r;let o=this.aX+this.xRadius*Math.cos(s),l=this.aY+this.yRadius*Math.sin(s);if(0!==this.aRotation){const t=Math.cos(this.aRotation),e=Math.sin(this.aRotation),n=o-this.aX,i=l-this.aY;o=n*t-i*e+this.aX,l=n*e+i*t+this.aY}return n.set(o,l)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}Hh.prototype.isEllipseCurve=!0;class kh extends Hh{constructor(t,e,n,i,r,a){super(t,e,n,n,i,r,a),this.type=\"ArcCurve\"}}function Gh(){let t=0,e=0,n=0,i=0;function r(r,a,s,o){t=r,e=s,n=-3*r+3*a-2*s-o,i=2*r-2*a+s+o}return{initCatmullRom:function(t,e,n,i,a){r(e,n,a*(n-t),a*(i-e))},initNonuniformCatmullRom:function(t,e,n,i,a,s,o){let l=(e-t)/a-(n-t)/(a+s)+(n-e)/s,c=(n-e)/s-(i-e)/(s+o)+(i-n)/o;l*=s,c*=s,r(e,n,l,c)},calc:function(r){const a=r*r;return t+e*r+n*a+i*(a*r)}}}kh.prototype.isArcCurve=!0;const Vh=new Ir,Wh=new Gh,jh=new Gh,qh=new Gh;class Xh extends Bh{constructor(t=[],e=!1,n=\"centripetal\",i=.5){super(),this.type=\"CatmullRomCurve3\",this.points=t,this.closed=e,this.curveType=n,this.tension=i}getPoint(t,e=new Ir){const n=e,i=this.points,r=i.length,a=(r-(this.closed?0:1))*t;let s,o,l=Math.floor(a),c=a-l;this.closed?l+=l>0?0:(Math.floor(Math.abs(l)/r)+1)*r:0===c&&l===r-1&&(l=r-2,c=1),this.closed||l>0?s=i[(l-1)%r]:(Vh.subVectors(i[0],i[1]).add(i[0]),s=Vh);const h=i[l%r],u=i[(l+1)%r];if(this.closed||l+2<r?o=i[(l+2)%r]:(Vh.subVectors(i[r-1],i[r-2]).add(i[r-1]),o=Vh),\"centripetal\"===this.curveType||\"chordal\"===this.curveType){const t=\"chordal\"===this.curveType?.5:.25;let e=Math.pow(s.distanceToSquared(h),t),n=Math.pow(h.distanceToSquared(u),t),i=Math.pow(u.distanceToSquared(o),t);n<1e-4&&(n=1),e<1e-4&&(e=n),i<1e-4&&(i=n),Wh.initNonuniformCatmullRom(s.x,h.x,u.x,o.x,e,n,i),jh.initNonuniformCatmullRom(s.y,h.y,u.y,o.y,e,n,i),qh.initNonuniformCatmullRom(s.z,h.z,u.z,o.z,e,n,i)}else\"catmullrom\"===this.curveType&&(Wh.initCatmullRom(s.x,h.x,u.x,o.x,this.tension),jh.initCatmullRom(s.y,h.y,u.y,o.y,this.tension),qh.initCatmullRom(s.z,h.z,u.z,o.z,this.tension));return n.set(Wh.calc(c),jh.calc(c),qh.calc(c)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){this.points.push(t.points[e].clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){t.points.push(this.points[e].toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new Ir).fromArray(n))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}function Yh(t,e,n,i,r){const a=.5*(i-e),s=.5*(r-n),o=t*t;return(2*n-2*i+a+s)*(t*o)+(-3*n+3*i-2*a-s)*o+a*t+n}function Zh(t,e,n,i){return(function r(t,e){const n=1-t;return n*n*e})(t,e)+(function a(t,e){return 2*(1-t)*t*e})(t,n)+(function s(t,e){return t*t*e})(t,i)}function Jh(t,e,n,i,r){return(function a(t,e){const n=1-t;return n*n*n*e})(t,e)+(function s(t,e){const n=1-t;return 3*n*n*t*e})(t,n)+(function o(t,e){return 3*(1-t)*t*t*e})(t,i)+(function l(t,e){return t*t*t*e})(t,r)}Xh.prototype.isCatmullRomCurve3=!0;class Qh extends Bh{constructor(t=new br,e=new br,n=new br,i=new br){super(),this.type=\"CubicBezierCurve\",this.v0=t,this.v1=e,this.v2=n,this.v3=i}getPoint(t,e=new br){const n=e,i=this.v0,r=this.v1,a=this.v2,s=this.v3;return n.set(Jh(t,i.x,r.x,a.x,s.x),Jh(t,i.y,r.y,a.y,s.y)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}Qh.prototype.isCubicBezierCurve=!0;class Kh extends Bh{constructor(t=new Ir,e=new Ir,n=new Ir,i=new Ir){super(),this.type=\"CubicBezierCurve3\",this.v0=t,this.v1=e,this.v2=n,this.v3=i}getPoint(t,e=new Ir){const n=e,i=this.v0,r=this.v1,a=this.v2,s=this.v3;return n.set(Jh(t,i.x,r.x,a.x,s.x),Jh(t,i.y,r.y,a.y,s.y),Jh(t,i.z,r.z,a.z,s.z)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}Kh.prototype.isCubicBezierCurve3=!0;class $h extends Bh{constructor(t=new br,e=new br){super(),this.type=\"LineCurve\",this.v1=t,this.v2=e}getPoint(t,e=new br){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e){const n=e||new br;return n.copy(this.v2).sub(this.v1).normalize(),n}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}$h.prototype.isLineCurve=!0;class tu extends Bh{constructor(t=new br,e=new br,n=new br){super(),this.type=\"QuadraticBezierCurve\",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new br){const n=e,i=this.v0,r=this.v1,a=this.v2;return n.set(Zh(t,i.x,r.x,a.x),Zh(t,i.y,r.y,a.y)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}tu.prototype.isQuadraticBezierCurve=!0;class eu extends Bh{constructor(t=new Ir,e=new Ir,n=new Ir){super(),this.type=\"QuadraticBezierCurve3\",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new Ir){const n=e,i=this.v0,r=this.v1,a=this.v2;return n.set(Zh(t,i.x,r.x,a.x),Zh(t,i.y,r.y,a.y),Zh(t,i.z,r.z,a.z)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}eu.prototype.isQuadraticBezierCurve3=!0;class nu extends Bh{constructor(t=[]){super(),this.type=\"SplineCurve\",this.points=t}getPoint(t,e=new br){const n=e,i=this.points,r=(i.length-1)*t,a=Math.floor(r),s=r-a,o=i[0===a?a:a-1],l=i[a],c=i[a>i.length-2?i.length-1:a+1],h=i[a>i.length-3?i.length-1:a+2];return n.set(Yh(s,o.x,l.x,c.x,h.x),Yh(s,o.y,l.y,c.y,h.y)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){this.points.push(t.points[e].clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){t.points.push(this.points[e].toArray())}return t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new br).fromArray(n))}return this}}nu.prototype.isSplineCurve=!0;var iu=Object.freeze({__proto__:null,ArcCurve:kh,CatmullRomCurve3:Xh,CubicBezierCurve:Qh,CubicBezierCurve3:Kh,EllipseCurve:Hh,LineCurve:$h,LineCurve3:class extends Bh{constructor(t=new Ir,e=new Ir){super(),this.type=\"LineCurve3\",this.isLineCurve3=!0,this.v1=t,this.v2=e}getPoint(t,e=new Ir){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(t,e){return this.getPoint(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}},QuadraticBezierCurve:tu,QuadraticBezierCurve3:eu,SplineCurve:nu});const ru=function(t,e,n=2){const i=e&&e.length,r=i?e[0]*n:t.length;let a=au(t,0,r,n,!0);const s=[];if(!a||a.next===a.prev)return s;let o,l,c,h,u,d,p;if(i&&(a=(function f(t,e,n,i){const r=[];let a,s,o,l,c;for(a=0,s=e.length;a<s;a++)o=e[a]*i,l=a<s-1?e[a+1]*i:t.length,c=au(t,o,l,i,!1),c===c.next&&(c.steiner=!0),r.push(gu(c));for(r.sort(du),a=0;a<r.length;a++)pu(r[a],n),n=su(n,n.next);return n})(t,e,a,n)),t.length>80*n){o=c=t[0],l=h=t[1];for(let e=n;e<r;e+=n)u=t[e],d=t[e+1],u<o&&(o=u),d<l&&(l=d),u>c&&(c=u),d>h&&(h=d);p=Math.max(c-o,h-l),p=0!==p?1/p:0}return ou(a,s,n,o,l,p),s};function au(t,e,n,i,r){let a,s;if(r===(function o(t,e,n,i){let r=0;for(let a=e,s=n-i;a<n;a+=i)r+=(t[s]-t[a])*(t[a+1]+t[s+1]),s=a;return r})(t,e,n,i)>0)for(a=e;a<n;a+=i)s=Eu(a,t[a],t[a+1],s);else for(a=n-i;a>=e;a-=i)s=Eu(a,t[a],t[a+1],s);return s&&_u(s,s.next)&&(Au(s),s=s.next),s}function su(t,e){if(!t)return t;e||(e=t);let n,i=t;do{if(n=!1,i.steiner||!_u(i,i.next)&&0!==xu(i.prev,i,i.next))i=i.next;else{if(Au(i),i=e=i.prev,i===i.next)break;n=!0}}while(n||i!==e);return e}function ou(t,e,n,i,r,a,s){if(!t)return;!s&&a&&(function o(t,e,n,i){let r=t;do{null===r.z&&(r.z=mu(r.x,r.y,e,n,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,(function a(t){let e,n,i,r,a,s,o,l,c=1;do{for(n=t,t=null,a=null,s=0;n;){for(s++,i=n,o=0,e=0;e<c&&(o++,i=i.nextZ,i);e++);for(l=c;o>0||l>0&&i;)0!==o&&(0===l||!i||n.z<=i.z)?(r=n,n=n.nextZ,o--):(r=i,i=i.nextZ,l--),a?a.nextZ=r:t=r,r.prevZ=a,a=r;n=i}a.nextZ=null,c*=2}while(s>1);return t})(r)})(t,i,r,a);let l,c,h=t;for(;t.prev!==t.next;)if(l=t.prev,c=t.next,a?cu(t,i,r,a):lu(t))e.push(l.i/n),e.push(t.i/n),e.push(c.i/n),Au(t),t=c.next,h=c.next;else if((t=c)===h){s?1===s?ou(t=hu(su(t),e,n),e,n,i,r,a,2):2===s&&uu(t,e,n,i,r,a):ou(su(t),e,n,i,r,a,1);break}}function lu(t){const e=t.prev,n=t,i=t.next;if(xu(e,n,i)>=0)return!1;let r=t.next.next;for(;r!==t.prev;){if(vu(e.x,e.y,n.x,n.y,i.x,i.y,r.x,r.y)&&xu(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function cu(t,e,n,i){const r=t.prev,a=t,s=t.next;if(xu(r,a,s)>=0)return!1;const o=r.x>a.x?r.x>s.x?r.x:s.x:a.x>s.x?a.x:s.x,l=r.y>a.y?r.y>s.y?r.y:s.y:a.y>s.y?a.y:s.y,c=mu(r.x<a.x?r.x<s.x?r.x:s.x:a.x<s.x?a.x:s.x,r.y<a.y?r.y<s.y?r.y:s.y:a.y<s.y?a.y:s.y,e,n,i),h=mu(o,l,e,n,i);let u=t.prevZ,d=t.nextZ;for(;u&&u.z>=c&&d&&d.z<=h;){if(u!==t.prev&&u!==t.next&&vu(r.x,r.y,a.x,a.y,s.x,s.y,u.x,u.y)&&xu(u.prev,u,u.next)>=0)return!1;if(u=u.prevZ,d!==t.prev&&d!==t.next&&vu(r.x,r.y,a.x,a.y,s.x,s.y,d.x,d.y)&&xu(d.prev,d,d.next)>=0)return!1;d=d.nextZ}for(;u&&u.z>=c;){if(u!==t.prev&&u!==t.next&&vu(r.x,r.y,a.x,a.y,s.x,s.y,u.x,u.y)&&xu(u.prev,u,u.next)>=0)return!1;u=u.prevZ}for(;d&&d.z<=h;){if(d!==t.prev&&d!==t.next&&vu(r.x,r.y,a.x,a.y,s.x,s.y,d.x,d.y)&&xu(d.prev,d,d.next)>=0)return!1;d=d.nextZ}return!0}function hu(t,e,n){let i=t;do{const r=i.prev,a=i.next.next;!_u(r,a)&&Mu(r,i,i.next,a)&&Su(r,a)&&Su(a,r)&&(e.push(r.i/n),e.push(i.i/n),e.push(a.i/n),Au(i),Au(i.next),i=t=a),i=i.next}while(i!==t);return su(i)}function uu(t,e,n,i,r,a){let s=t;do{let t=s.next.next;for(;t!==s.prev;){if(s.i!==t.i&&yu(s,t)){let o=Tu(s,t);return s=su(s,s.next),o=su(o,o.next),ou(s,e,n,i,r,a),void ou(o,e,n,i,r,a)}t=t.next}s=s.next}while(s!==t)}function du(t,e){return t.x-e.x}function pu(t,e){if(e=(function n(t,e){let n=e;const i=t.x,r=t.y;let a,s=-1/0;do{if(r<=n.y&&r>=n.next.y&&n.next.y!==n.y){const t=n.x+(r-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(t<=i&&t>s){if(s=t,t===i){if(r===n.y)return n;if(r===n.next.y)return n.next}a=n.x<n.next.x?n:n.next}}n=n.next}while(n!==e);if(!a)return null;if(i===s)return a;const o=a,l=a.x,c=a.y;let h,u=1/0;n=a;do{i>=n.x&&n.x>=l&&i!==n.x&&vu(r<c?i:s,r,l,c,r<c?s:i,r,n.x,n.y)&&(h=Math.abs(r-n.y)/(i-n.x),Su(n,t)&&(h<u||h===u&&(n.x>a.x||n.x===a.x&&fu(a,n)))&&(a=n,u=h)),n=n.next}while(n!==o);return a})(t,e)){const n=Tu(e,t);su(e,e.next),su(n,n.next)}}function fu(t,e){return xu(t.prev,t,e.prev)<0&&xu(e.next,t,t.next)<0}function mu(t,e,n,i,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*r)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-i)*r)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function gu(t){let e=t,n=t;do{(e.x<n.x||e.x===n.x&&e.y<n.y)&&(n=e),e=e.next}while(e!==t);return n}function vu(t,e,n,i,r,a,s,o){return(r-s)*(e-o)-(t-s)*(a-o)>=0&&(t-s)*(i-o)-(n-s)*(e-o)>=0&&(n-s)*(a-o)-(r-s)*(i-o)>=0}function yu(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!(function n(t,e){let n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&Mu(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1})(t,e)&&(Su(t,e)&&Su(e,t)&&(function i(t,e){let n=t,i=!1;const r=(t.x+e.x)/2,a=(t.y+e.y)/2;do{n.y>a!=n.next.y>a&&n.next.y!==n.y&&r<(n.next.x-n.x)*(a-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==t);return i})(t,e)&&(xu(t.prev,t,e.prev)||xu(t,e.prev,e))||_u(t,e)&&xu(t.prev,t,t.next)>0&&xu(e.prev,e,e.next)>0)}function xu(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function _u(t,e){return t.x===e.x&&t.y===e.y}function Mu(t,e,n,i){const r=bu(xu(t,e,n)),a=bu(xu(t,e,i)),s=bu(xu(n,i,t)),o=bu(xu(n,i,e));return r!==a&&s!==o||(!(0!==r||!wu(t,n,e))||(!(0!==a||!wu(t,i,e))||(!(0!==s||!wu(n,t,i))||!(0!==o||!wu(n,e,i)))))}function wu(t,e,n){return e.x<=Math.max(t.x,n.x)&&e.x>=Math.min(t.x,n.x)&&e.y<=Math.max(t.y,n.y)&&e.y>=Math.min(t.y,n.y)}function bu(t){return t>0?1:t<0?-1:0}function Su(t,e){return xu(t.prev,t,t.next)<0?xu(t,e,t.next)>=0&&xu(t,t.prev,e)>=0:xu(t,e,t.prev)<0||xu(t,t.next,e)<0}function Tu(t,e){const n=new Lu(t.i,t.x,t.y),i=new Lu(e.i,e.x,e.y),r=t.next,a=e.prev;return t.next=e,e.prev=t,n.next=r,r.prev=n,i.next=n,n.prev=i,a.next=i,i.prev=a,i}function Eu(t,e,n,i){const r=new Lu(t,e,n);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function Au(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function Lu(t,e,n){this.i=t,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}class Cu{static area(t){const e=t.length;let n=0;for(let i=e-1,r=0;r<e;i=r++)n+=t[i].x*t[r].y-t[r].x*t[i].y;return.5*n}static isClockWise(t){return Cu.area(t)<0}static triangulateShape(t,e){const n=[],i=[],r=[];Ru(t),Pu(n,t);let a=t.length;e.forEach(Ru);for(let t=0;t<e.length;t++)i.push(a),a+=e[t].length,Pu(n,e[t]);const s=ru(n,i);for(let t=0;t<s.length;t+=3)r.push(s.slice(t,t+3));return r}}function Ru(t){const e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function Pu(t,e){for(let n=0;n<e.length;n++)t.push(e[n].x),t.push(e[n].y)}class Du extends ys{constructor(t,e){super(),this.type=\"ExtrudeGeometry\",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const n=this,i=[],r=[];for(let e=0,n=t.length;e<n;e++){a(t[e])}function a(t){const a=[],s=void 0!==e.curveSegments?e.curveSegments:12,o=void 0!==e.steps?e.steps:1;let l=void 0!==e.depth?e.depth:100,c=void 0===e.bevelEnabled||e.bevelEnabled,h=void 0!==e.bevelThickness?e.bevelThickness:6,u=void 0!==e.bevelSize?e.bevelSize:h-2,d=void 0!==e.bevelOffset?e.bevelOffset:0,p=void 0!==e.bevelSegments?e.bevelSegments:3;const f=e.extrudePath,m=void 0!==e.UVGenerator?e.UVGenerator:Nu;void 0!==e.amount&&(console.warn(\"THREE.ExtrudeBufferGeometry: amount has been renamed to depth.\"),l=e.amount);let g,v,y,x,_,M=!1;f&&(g=f.getSpacedPoints(o),M=!0,c=!1,v=f.computeFrenetFrames(o,!1),y=new Ir,x=new Ir,_=new Ir),c||(p=0,h=0,u=0,d=0);const w=t.extractPoints(s);let b=w.shape;const S=w.holes;if(!Cu.isClockWise(b)){b=b.reverse();for(let t=0,e=S.length;t<e;t++){const e=S[t];Cu.isClockWise(e)&&(S[t]=e.reverse())}}const T=Cu.triangulateShape(b,S),E=b;for(let t=0,e=S.length;t<e;t++){b=b.concat(S[t])}function A(t,e,n){return e||console.error(\"THREE.ExtrudeGeometry: vec does not exist\"),e.clone().multiplyScalar(n).add(t)}const L=b.length,C=T.length;function R(t,e,n){let i,r,a;const s=t.x-e.x,o=t.y-e.y,l=n.x-t.x,c=n.y-t.y,h=s*s+o*o;if(Math.abs(s*c-o*l)>Number.EPSILON){const u=Math.sqrt(h),d=Math.sqrt(l*l+c*c),p=e.x-o/u,f=e.y+s/u,m=((n.x-c/d-p)*c-(n.y+l/d-f)*l)/(s*c-o*l);i=p+s*m-t.x,r=f+o*m-t.y;const g=i*i+r*r;if(g<=2)return new br(i,r);a=Math.sqrt(g/2)}else{let t=!1;s>Number.EPSILON?l>Number.EPSILON&&(t=!0):s<-Number.EPSILON?l<-Number.EPSILON&&(t=!0):Math.sign(o)===Math.sign(c)&&(t=!0),t?(i=-o,r=s,a=Math.sqrt(h)):(i=s,r=o,a=Math.sqrt(h/2))}return new br(i/a,r/a)}const P=[];for(let t=0,e=E.length,n=e-1,i=t+1;t<e;t++,n++,i++)n===e&&(n=0),i===e&&(i=0),P[t]=R(E[t],E[n],E[i]);const D=[];let N,I=P.concat();for(let t=0,e=S.length;t<e;t++){const e=S[t];N=[];for(let t=0,n=e.length,i=n-1,r=t+1;t<n;t++,i++,r++)i===n&&(i=0),r===n&&(r=0),N[t]=R(e[t],e[i],e[r]);D.push(N),I=I.concat(N)}for(let t=0;t<p;t++){const e=t/p,n=h*Math.cos(e*Math.PI/2),i=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=E.length;t<e;t++){const e=A(E[t],P[t],i);U(e.x,e.y,-n)}for(let t=0,e=S.length;t<e;t++){const e=S[t];N=D[t];for(let t=0,r=e.length;t<r;t++){const r=A(e[t],N[t],i);U(r.x,r.y,-n)}}}const O=u+d;for(let t=0;t<L;t++){const e=c?A(b[t],I[t],O):b[t];M?(x.copy(v.normals[0]).multiplyScalar(e.x),y.copy(v.binormals[0]).multiplyScalar(e.y),_.copy(g[0]).add(x).add(y),U(_.x,_.y,_.z)):U(e.x,e.y,0)}for(let t=1;t<=o;t++)for(let e=0;e<L;e++){const n=c?A(b[e],I[e],O):b[e];M?(x.copy(v.normals[t]).multiplyScalar(n.x),y.copy(v.binormals[t]).multiplyScalar(n.y),_.copy(g[t]).add(x).add(y),U(_.x,_.y,_.z)):U(n.x,n.y,l/o*t)}for(let t=p-1;t>=0;t--){const e=t/p,n=h*Math.cos(e*Math.PI/2),i=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=E.length;t<e;t++){const e=A(E[t],P[t],i);U(e.x,e.y,l+n)}for(let t=0,e=S.length;t<e;t++){const e=S[t];N=D[t];for(let t=0,r=e.length;t<r;t++){const r=A(e[t],N[t],i);M?U(r.x,r.y+g[o-1].y,g[o-1].x+n):U(r.x,r.y,l+n)}}}function z(t,e){let n=t.length;for(;--n>=0;){const i=n;let r=n-1;r<0&&(r=t.length-1);for(let t=0,n=o+2*p;t<n;t++){const n=L*t,a=L*(t+1);B(e+i+n,e+r+n,e+r+a,e+i+a)}}}function U(t,e,n){a.push(t),a.push(e),a.push(n)}function F(t,e,r){H(t),H(e),H(r);const a=i.length/3,s=m.generateTopUV(n,i,a-3,a-2,a-1);k(s[0]),k(s[1]),k(s[2])}function B(t,e,r,a){H(t),H(e),H(a),H(e),H(r),H(a);const s=i.length/3,o=m.generateSideWallUV(n,i,s-6,s-3,s-2,s-1);k(o[0]),k(o[1]),k(o[3]),k(o[1]),k(o[2]),k(o[3])}function H(t){i.push(a[3*t+0]),i.push(a[3*t+1]),i.push(a[3*t+2])}function k(t){r.push(t.x),r.push(t.y)}!(function G(){const t=i.length/3;if(c){let t=0,e=L*t;for(let t=0;t<C;t++){const n=T[t];F(n[2]+e,n[1]+e,n[0]+e)}t=o+2*p,e=L*t;for(let t=0;t<C;t++){const n=T[t];F(n[0]+e,n[1]+e,n[2]+e)}}else{for(let t=0;t<C;t++){const e=T[t];F(e[2],e[1],e[0])}for(let t=0;t<C;t++){const e=T[t];F(e[0]+L*o,e[1]+L*o,e[2]+L*o)}}n.addGroup(t,i.length/3-t,0)})(),(function V(){const t=i.length/3;let e=0;z(E,e),e+=E.length;for(let t=0,n=S.length;t<n;t++){const n=S[t];z(n,e),e+=n.length}n.addGroup(t,i.length/3-t,1)})()}this.setAttribute(\"position\",new cs(i,3)),this.setAttribute(\"uv\",new cs(r,2)),this.computeVertexNormals()}toJSON(){const t=super.toJSON();return(function e(t,n,i){if(i.shapes=[],Array.isArray(t))for(let e=0,n=t.length;e<n;e++){i.shapes.push(t[e].uuid)}else i.shapes.push(t.uuid);void 0!==n.extrudePath&&(i.options.extrudePath=n.extrudePath.toJSON());return i})(this.parameters.shapes,this.parameters.options,t)}static fromJSON(t,e){const n=[];for(let i=0,r=t.shapes.length;i<r;i++){n.push(e[t.shapes[i]])}const i=t.options.extrudePath;return void 0!==i&&(t.options.extrudePath=(new iu[i.type]).fromJSON(i)),new Du(n,t.options)}}const Nu={generateTopUV:function(t,e,n,i,r){const a=e[3*i],s=e[3*i+1],o=e[3*r],l=e[3*r+1];return[new br(e[3*n],e[3*n+1]),new br(a,s),new br(o,l)]},generateSideWallUV:function(t,e,n,i,r,a){const s=e[3*n],o=e[3*n+1],l=e[3*n+2],c=e[3*i],h=e[3*i+1],u=e[3*i+2],d=e[3*r],p=e[3*r+1],f=e[3*r+2],m=e[3*a],g=e[3*a+1],v=e[3*a+2];return Math.abs(o-h)<Math.abs(s-c)?[new br(s,1-l),new br(c,1-u),new br(d,1-f),new br(m,1-v)]:[new br(o,1-l),new br(h,1-u),new br(p,1-f),new br(g,1-v)]}};class Iu extends ys{constructor(t,e=12){super(),this.type=\"ShapeGeometry\",this.parameters={shapes:t,curveSegments:e};const n=[],i=[],r=[],a=[];let s=0,o=0;if(!1===Array.isArray(t))l(t);else for(let e=0;e<t.length;e++)l(t[e]),this.addGroup(s,o,e),s+=o,o=0;function l(t){const s=i.length/3,l=t.extractPoints(e);let c=l.shape;const h=l.holes;!1===Cu.isClockWise(c)&&(c=c.reverse());for(let t=0,e=h.length;t<e;t++){const e=h[t];!0===Cu.isClockWise(e)&&(h[t]=e.reverse())}const u=Cu.triangulateShape(c,h);for(let t=0,e=h.length;t<e;t++){c=c.concat(h[t])}for(let t=0,e=c.length;t<e;t++){const e=c[t];i.push(e.x,e.y,0),r.push(0,0,1),a.push(e.x,e.y)}for(let t=0,e=u.length;t<e;t++){const e=u[t];n.push(e[0]+s,e[1]+s,e[2]+s),o+=3}}this.setIndex(n),this.setAttribute(\"position\",new cs(i,3)),this.setAttribute(\"normal\",new cs(r,3)),this.setAttribute(\"uv\",new cs(a,2))}toJSON(){const t=super.toJSON();return(function e(t,n){if(n.shapes=[],Array.isArray(t))for(let e=0,i=t.length;e<i;e++){n.shapes.push(t[e].uuid)}else n.shapes.push(t.uuid);return n})(this.parameters.shapes,t)}static fromJSON(t,e){const n=[];for(let i=0,r=t.shapes.length;i<r;i++){n.push(e[t.shapes[i]])}return new Iu(n,t.curveSegments)}}(class extends Za{constructor(t){super(),this.type=\"ShadowMaterial\",this.color=new ns(0),this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this}}).prototype.isShadowMaterial=!0;class Ou extends Za{constructor(t){super(),this.defines={STANDARD:\"\"},this.type=\"MeshStandardMaterial\",this.color=new ns(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ns(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new br(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:\"\"},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this}}Ou.prototype.isMeshStandardMaterial=!0;(class extends Ou{constructor(t){super(),this.defines={STANDARD:\"\",PHYSICAL:\"\"},this.type=\"MeshPhysicalMaterial\",this.clearcoat=0,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new br(1,1),this.clearcoatNormalMap=null,this.reflectivity=.5,Object.defineProperty(this,\"ior\",{get:function(){return(1+.4*this.reflectivity)/(1-.4*this.reflectivity)},set:function(t){this.reflectivity=xr(2.5*(t-1)/(t+1),0,1)}}),this.sheen=null,this.transmission=0,this.transmissionMap=null,this.thickness=.01,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationTint=new ns(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularTint=new ns(1,1,1),this.specularTintMap=null,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:\"\",PHYSICAL:\"\"},this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.reflectivity=t.reflectivity,this.sheen=t.sheen?(this.sheen||new ns).copy(t.sheen):null,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationTint.copy(t.attenuationTint),this.specularIntensity=t.specularIntensity,this.specularIntensityMap=t.specularIntensityMap,this.specularTint.copy(t.specularTint),this.specularTintMap=t.specularTintMap,this}}).prototype.isMeshPhysicalMaterial=!0;(class extends Za{constructor(t){super(),this.type=\"MeshPhongMaterial\",this.color=new ns(16777215),this.specular=new ns(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ns(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new br(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this}}).prototype.isMeshPhongMaterial=!0;(class extends Za{constructor(t){super(),this.defines={TOON:\"\"},this.type=\"MeshToonMaterial\",this.color=new ns(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ns(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new br(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}).prototype.isMeshToonMaterial=!0;(class extends Za{constructor(t){super(),this.type=\"MeshNormalMaterial\",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new br(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.flatShading=t.flatShading,this}}).prototype.isMeshNormalMaterial=!0;(class extends Za{constructor(t){super(),this.type=\"MeshLambertMaterial\",this.color=new ns(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ns(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}).prototype.isMeshLambertMaterial=!0;(class extends Za{constructor(t){super(),this.defines={MATCAP:\"\"},this.type=\"MeshMatcapMaterial\",this.color=new ns(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new br(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:\"\"},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.flatShading=t.flatShading,this}}).prototype.isMeshMatcapMaterial=!0;(class extends wh{constructor(t){super(),this.type=\"LineDashedMaterial\",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}).prototype.isLineDashedMaterial=!0;const zu={arraySlice:function(t,e,n){return zu.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==n?n:t.length)):t.slice(e,n)},convertArray:function(t,e,n){return!t||!n&&t.constructor===e?t:\"number\"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){const e=t.length,n=new Array(e);for(let t=0;t!==e;++t)n[t]=t;return n.sort((function i(e,n){return t[e]-t[n]})),n},sortedArray:function(t,e,n){const i=t.length,r=new t.constructor(i);for(let a=0,s=0;s!==i;++a){const i=n[a]*e;for(let n=0;n!==e;++n)r[s++]=t[i+n]}return r},flattenJSON:function(t,e,n,i){let r=1,a=t[0];for(;void 0!==a&&void 0===a[i];)a=t[r++];if(void 0===a)return;let s=a[i];if(void 0!==s)if(Array.isArray(s))do{s=a[i],void 0!==s&&(e.push(a.time),n.push.apply(n,s)),a=t[r++]}while(void 0!==a);else if(void 0!==s.toArray)do{s=a[i],void 0!==s&&(e.push(a.time),s.toArray(n,n.length)),a=t[r++]}while(void 0!==a);else do{s=a[i],void 0!==s&&(e.push(a.time),n.push(s)),a=t[r++]}while(void 0!==a)},subclip:function(t,e,n,i,r=30){const a=t.clone();a.name=e;const s=[];for(let t=0;t<a.tracks.length;++t){const e=a.tracks[t],o=e.getValueSize(),l=[],c=[];for(let t=0;t<e.times.length;++t){const a=e.times[t]*r;if(!(a<n||a>=i)){l.push(e.times[t]);for(let n=0;n<o;++n)c.push(e.values[t*o+n])}}0!==l.length&&(e.times=zu.convertArray(l,e.times.constructor),e.values=zu.convertArray(c,e.values.constructor),s.push(e))}a.tracks=s;let o=1/0;for(let t=0;t<a.tracks.length;++t)o>a.tracks[t].times[0]&&(o=a.tracks[t].times[0]);for(let t=0;t<a.tracks.length;++t)a.tracks[t].shift(-1*o);return a.resetDuration(),a},makeClipAdditive:function(t,e=0,n=t,i=30){i<=0&&(i=30);const r=n.tracks.length,a=e/i;for(let e=0;e<r;++e){const i=n.tracks[e],r=i.ValueTypeName;if(\"bool\"===r||\"string\"===r)continue;const s=t.tracks.find((function(t){return t.name===i.name&&t.ValueTypeName===r}));if(void 0===s)continue;let o=0;const l=i.getValueSize();i.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(o=l/3);let c=0;const h=s.getValueSize();s.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(c=h/3);const u=i.times.length-1;let d;if(a<=i.times[0]){d=zu.arraySlice(i.values,o,l-o)}else if(a>=i.times[u]){const t=u*l+o;d=zu.arraySlice(i.values,t,t+l-o)}else{const t=i.createInterpolant(),e=o,n=l-o;t.evaluate(a),d=zu.arraySlice(t.resultBuffer,e,n)}if(\"quaternion\"===r){(new Nr).fromArray(d).normalize().conjugate().toArray(d)}const p=s.times.length;for(let t=0;t<p;++t){const e=t*h+c;if(\"quaternion\"===r)Nr.multiplyQuaternionsFlat(s.values,e,d,0,s.values,e);else{const t=h-2*c;for(let n=0;n<t;++n)s.values[e+n]-=d[n]}}}return t.blendMode=2501,t}};class Uu{constructor(t,e,n,i){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==i?i:new e.constructor(n),this.sampleValues=e,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let n=this._cachedIndex,i=e[n],r=e[n-1];t:{e:{let a;n:{i:if(!(t<i)){for(let a=n+2;;){if(void 0===i){if(t<r)break i;return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,t,r)}if(n===a)break;if(r=i,i=e[++n],t<i)break e}a=e.length;break n}if(t>=r)break t;{const s=e[1];t<s&&(n=2,r=s);for(let a=n-2;;){if(void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,i);if(n===a)break;if(i=r,r=e[--n-1],t>=r)break e}a=n,n=0}}for(;n<a;){const i=n+a>>>1;t<e[i]?a=i:n=i+1}if(i=e[n],r=e[n-1],void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,i);if(void 0===i)return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,r,t)}this._cachedIndex=n,this.intervalChanged_(n,r,i)}return this.interpolate_(n,r,t,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,n=this.sampleValues,i=this.valueSize,r=t*i;for(let t=0;t!==i;++t)e[t]=n[r+t];return e}interpolate_(){throw new Error(\"call to abstract method\")}intervalChanged_(){}}Uu.prototype.beforeStart_=Uu.prototype.copySampleValue_,Uu.prototype.afterEnd_=Uu.prototype.copySampleValue_;class Fu extends Uu{constructor(t,e,n,i){super(t,e,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:nr,endingEnd:nr}}intervalChanged_(t,e,n){const i=this.parameterPositions;let r=t-2,a=t+1,s=i[r],o=i[a];if(void 0===s)switch(this.getSettings_().endingStart){case ir:r=t,s=2*e-n;break;case rr:r=i.length-2,s=e+i[r]-i[r+1];break;default:r=t,s=n}if(void 0===o)switch(this.getSettings_().endingEnd){case ir:a=t,o=2*n-e;break;case rr:a=1,o=n+i[1]-i[0];break;default:a=t-1,o=e}const l=.5*(n-e),c=this.valueSize;this._weightPrev=l/(e-s),this._weightNext=l/(o-n),this._offsetPrev=r*c,this._offsetNext=a*c}interpolate_(t,e,n,i){const r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=t*s,l=o-s,c=this._offsetPrev,h=this._offsetNext,u=this._weightPrev,d=this._weightNext,p=(n-e)/(i-e),f=p*p,m=f*p,g=-u*m+2*u*f-u*p,v=(1+u)*m+(-1.5-2*u)*f+(-.5+u)*p+1,y=(-1-d)*m+(1.5+d)*f+.5*p,x=d*m-d*f;for(let t=0;t!==s;++t)r[t]=g*a[c+t]+v*a[l+t]+y*a[o+t]+x*a[h+t];return r}}class Bu extends Uu{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=t*s,l=o-s,c=(n-e)/(i-e),h=1-c;for(let t=0;t!==s;++t)r[t]=a[l+t]*h+a[o+t]*c;return r}}class Hu extends Uu{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t){return this.copySampleValue_(t-1)}}class ku{constructor(t,e,n,i){if(void 0===t)throw new Error(\"THREE.KeyframeTrack: track name is undefined\");if(void 0===e||0===e.length)throw new Error(\"THREE.KeyframeTrack: no keyframes in track named \"+t);this.name=t,this.times=zu.convertArray(e,this.TimeBufferType),this.values=zu.convertArray(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let n;if(e.toJSON!==this.toJSON)n=e.toJSON(t);else{n={name:t.name,times:zu.convertArray(t.times,Array),values:zu.convertArray(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(n.interpolation=e)}return n.type=t.ValueTypeName,n}InterpolantFactoryMethodDiscrete(t){return new Hu(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new Bu(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new Fu(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case $i:e=this.InterpolantFactoryMethodDiscrete;break;case tr:e=this.InterpolantFactoryMethodLinear;break;case er:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e=\"unsupported interpolation for \"+this.ValueTypeName+\" keyframe track named \"+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn(\"THREE.KeyframeTrack:\",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return $i;case this.InterpolantFactoryMethodLinear:return tr;case this.InterpolantFactoryMethodSmooth:return er}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let n=0,i=e.length;n!==i;++n)e[n]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let n=0,i=e.length;n!==i;++n)e[n]*=t}return this}trim(t,e){const n=this.times,i=n.length;let r=0,a=i-1;for(;r!==i&&n[r]<t;)++r;for(;-1!==a&&n[a]>e;)--a;if(++a,0!==r||a!==i){r>=a&&(a=Math.max(a,1),r=a-1);const t=this.getValueSize();this.times=zu.arraySlice(n,r,a),this.values=zu.arraySlice(this.values,r*t,a*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error(\"THREE.KeyframeTrack: Invalid value size in track.\",this),t=!1);const n=this.times,i=this.values,r=n.length;0===r&&(console.error(\"THREE.KeyframeTrack: Track is empty.\",this),t=!1);let a=null;for(let e=0;e!==r;e++){const i=n[e];if(\"number\"==typeof i&&isNaN(i)){console.error(\"THREE.KeyframeTrack: Time is not a valid number.\",this,e,i),t=!1;break}if(null!==a&&a>i){console.error(\"THREE.KeyframeTrack: Out of order keys.\",this,e,i,a),t=!1;break}a=i}if(void 0!==i&&zu.isTypedArray(i))for(let e=0,n=i.length;e!==n;++e){const n=i[e];if(isNaN(n)){console.error(\"THREE.KeyframeTrack: Value is not a valid number.\",this,e,n),t=!1;break}}return t}optimize(){const t=zu.arraySlice(this.times),e=zu.arraySlice(this.values),n=this.getValueSize(),i=this.getInterpolation()===er,r=t.length-1;let a=1;for(let s=1;s<r;++s){let r=!1;const o=t[s];if(o!==t[s+1]&&(1!==s||o!==t[0]))if(i)r=!0;else{const t=s*n,i=t-n,a=t+n;for(let s=0;s!==n;++s){const n=e[t+s];if(n!==e[i+s]||n!==e[a+s]){r=!0;break}}}if(r){if(s!==a){t[a]=t[s];const i=s*n,r=a*n;for(let t=0;t!==n;++t)e[r+t]=e[i+t]}++a}}if(r>0){t[a]=t[r];for(let t=r*n,i=a*n,s=0;s!==n;++s)e[i+s]=e[t+s];++a}return a!==t.length?(this.times=zu.arraySlice(t,0,a),this.values=zu.arraySlice(e,0,a*n)):(this.times=t,this.values=e),this}clone(){const t=zu.arraySlice(this.times,0),e=zu.arraySlice(this.values,0),n=new(0,this.constructor)(this.name,t,e);return n.createInterpolant=this.createInterpolant,n}}ku.prototype.TimeBufferType=Float32Array,ku.prototype.ValueBufferType=Float32Array,ku.prototype.DefaultInterpolation=tr;class Gu extends ku{}Gu.prototype.ValueTypeName=\"bool\",Gu.prototype.ValueBufferType=Array,Gu.prototype.DefaultInterpolation=$i,Gu.prototype.InterpolantFactoryMethodLinear=void 0,Gu.prototype.InterpolantFactoryMethodSmooth=void 0;class Vu extends ku{}Vu.prototype.ValueTypeName=\"color\";class Wu extends ku{}Wu.prototype.ValueTypeName=\"number\";class ju extends Uu{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=(n-e)/(i-e);let l=t*s;for(let t=l+s;l!==t;l+=4)Nr.slerpFlat(r,0,a,l-s,a,l,o);return r}}class qu extends ku{InterpolantFactoryMethodLinear(t){return new ju(this.times,this.values,this.getValueSize(),t)}}qu.prototype.ValueTypeName=\"quaternion\",qu.prototype.DefaultInterpolation=tr,qu.prototype.InterpolantFactoryMethodSmooth=void 0;class Xu extends ku{}Xu.prototype.ValueTypeName=\"string\",Xu.prototype.ValueBufferType=Array,Xu.prototype.DefaultInterpolation=$i,Xu.prototype.InterpolantFactoryMethodLinear=void 0,Xu.prototype.InterpolantFactoryMethodSmooth=void 0;class Yu extends ku{}Yu.prototype.ValueTypeName=\"vector\";class Zu{constructor(t,e=-1,n,i=2500){this.name=t,this.tracks=n,this.duration=e,this.blendMode=i,this.uuid=yr(),this.duration<0&&this.resetDuration()}static parse(t){const e=[],n=t.tracks,i=1/(t.fps||1);for(let t=0,r=n.length;t!==r;++t)e.push(Ju(n[t]).scale(i));const r=new this(t.name,t.duration,e,t.blendMode);return r.uuid=t.uuid,r}static toJSON(t){const e=[],n=t.tracks,i={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,i=n.length;t!==i;++t)e.push(ku.toJSON(n[t]));return i}static CreateFromMorphTargetSequence(t,e,n,i){const r=e.length,a=[];for(let t=0;t<r;t++){let s=[],o=[];s.push((t+r-1)%r,t,(t+1)%r),o.push(0,1,0);const l=zu.getKeyframeOrder(s);s=zu.sortedArray(s,1,l),o=zu.sortedArray(o,1,l),i||0!==s[0]||(s.push(r),o.push(o[0])),a.push(new Wu(\".morphTargetInfluences[\"+e[t].name+\"]\",s,o).scale(1/n))}return new this(t,-1,a)}static findByName(t,e){let n=t;if(!Array.isArray(t)){const e=t;n=e.geometry&&e.geometry.animations||e.animations}for(let t=0;t<n.length;t++)if(n[t].name===e)return n[t];return null}static CreateClipsFromMorphTargetSequences(t,e,n){const i={},r=/^([\\w-]*?)([\\d]+)$/;for(let e=0,n=t.length;e<n;e++){const n=t[e],a=n.name.match(r);if(a&&a.length>1){const t=a[1];let e=i[t];e||(i[t]=e=[]),e.push(n)}}const a=[];for(const t in i)a.push(this.CreateFromMorphTargetSequence(t,i[t],e,n));return a}static parseAnimation(t,e){if(!t)return console.error(\"THREE.AnimationClip: No animation in JSONLoader data.\"),null;const n=function(t,e,n,i,r){if(0!==n.length){const a=[],s=[];zu.flattenJSON(n,a,s,i),0!==a.length&&r.push(new t(e,a,s))}},i=[],r=t.name||\"default\",a=t.fps||30,s=t.blendMode;let o=t.length||-1;const l=t.hierarchy||[];for(let t=0;t<l.length;t++){const r=l[t].keys;if(r&&0!==r.length)if(r[0].morphTargets){const t={};let e;for(e=0;e<r.length;e++)if(r[e].morphTargets)for(let n=0;n<r[e].morphTargets.length;n++)t[r[e].morphTargets[n]]=-1;for(const n in t){const t=[],a=[];for(let i=0;i!==r[e].morphTargets.length;++i){const i=r[e];t.push(i.time),a.push(i.morphTarget===n?1:0)}i.push(new Wu(\".morphTargetInfluence[\"+n+\"]\",t,a))}o=t.length*(a||1)}else{const a=\".bones[\"+e[t].name+\"]\";n(Yu,a+\".position\",r,\"pos\",i),n(qu,a+\".quaternion\",r,\"rot\",i),n(Yu,a+\".scale\",r,\"scl\",i)}}if(0===i.length)return null;return new this(r,o,i,s)}resetDuration(){let t=0;for(let e=0,n=this.tracks.length;e!==n;++e){const n=this.tracks[e];t=Math.max(t,n.times[n.times.length-1])}return this.duration=t,this}trim(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this}validate(){let t=!0;for(let e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t}optimize(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function Ju(t){if(void 0===t.type)throw new Error(\"THREE.KeyframeTrack: track type undefined, can not parse\");const e=(function n(t){switch(t.toLowerCase()){case\"scalar\":case\"double\":case\"float\":case\"number\":case\"integer\":return Wu;case\"vector\":case\"vector2\":case\"vector3\":case\"vector4\":return Yu;case\"color\":return Vu;case\"quaternion\":return qu;case\"bool\":case\"boolean\":return Gu;case\"string\":return Xu}throw new Error(\"THREE.KeyframeTrack: Unsupported typeName: \"+t)})(t.type);if(void 0===t.times){const e=[],n=[];zu.flattenJSON(t.keys,e,n,\"value\"),t.times=e,t.values=n}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}const Qu={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};const Ku=new class{constructor(t,e,n){const i=this;let r,a=!1,s=0,o=0;const l=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=n,this.itemStart=function(t){o++,!1===a&&void 0!==i.onStart&&i.onStart(t,s,o),a=!0},this.itemEnd=function(t){s++,void 0!==i.onProgress&&i.onProgress(t,s,o),s===o&&(a=!1,void 0!==i.onLoad&&i.onLoad())},this.itemError=function(t){void 0!==i.onError&&i.onError(t)},this.resolveURL=function(t){return r?r(t):t},this.setURLModifier=function(t){return r=t,this},this.addHandler=function(t,e){return l.push(t,e),this},this.removeHandler=function(t){const e=l.indexOf(t);return-1!==e&&l.splice(e,2),this},this.getHandler=function(t){for(let e=0,n=l.length;e<n;e+=2){const n=l[e],i=l[e+1];if(n.global&&(n.lastIndex=0),n.test(t))return i}return null}}};class $u{constructor(t){this.manager=void 0!==t?t:Ku,this.crossOrigin=\"anonymous\",this.withCredentials=!1,this.path=\"\",this.resourcePath=\"\",this.requestHeader={}}load(){}loadAsync(t,e){const n=this;return new Promise((function(i,r){n.load(t,i,e,r)}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}const td={};class ed extends $u{constructor(t){super(t)}load(t,e,n,i){void 0===t&&(t=\"\"),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,a=Qu.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout((function(){e&&e(a),r.manager.itemEnd(t)}),0),a;if(void 0!==td[t])return void td[t].push({onLoad:e,onProgress:n,onError:i});const s=t.match(/^data:(.*?)(;base64)?,(.*)$/);let o;if(s){const n=s[1],a=!!s[2];let o=s[3];o=decodeURIComponent(o),a&&(o=atob(o));try{let i;const a=(this.responseType||\"\").toLowerCase();switch(a){case\"arraybuffer\":case\"blob\":const t=new Uint8Array(o.length);for(let e=0;e<o.length;e++)t[e]=o.charCodeAt(e);i=\"blob\"===a?new Blob([t.buffer],{type:n}):t.buffer;break;case\"document\":const e=new DOMParser;i=e.parseFromString(o,n);break;case\"json\":i=JSON.parse(o);break;default:i=o}setTimeout((function(){e&&e(i),r.manager.itemEnd(t)}),0)}catch(e){setTimeout((function(){i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)}),0)}}else{td[t]=[],td[t].push({onLoad:e,onProgress:n,onError:i}),o=new XMLHttpRequest,o.open(\"GET\",t,!0),o.addEventListener(\"load\",(function(e){const n=this.response,i=td[t];if(delete td[t],200===this.status||0===this.status){0===this.status&&console.warn(\"THREE.FileLoader: HTTP Status 0 received.\"),Qu.add(t,n);for(let t=0,e=i.length;t<e;t++){const e=i[t];e.onLoad&&e.onLoad(n)}r.manager.itemEnd(t)}else{for(let t=0,n=i.length;t<n;t++){const n=i[t];n.onError&&n.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}}),!1),o.addEventListener(\"progress\",(function(e){const n=td[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];i.onProgress&&i.onProgress(e)}}),!1),o.addEventListener(\"error\",(function(e){const n=td[t];delete td[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];i.onError&&i.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}),!1),o.addEventListener(\"abort\",(function(e){const n=td[t];delete td[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];i.onError&&i.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}),!1),void 0!==this.responseType&&(o.responseType=this.responseType),void 0!==this.withCredentials&&(o.withCredentials=this.withCredentials),o.overrideMimeType&&o.overrideMimeType(void 0!==this.mimeType?this.mimeType:\"text/plain\");for(const t in this.requestHeader)o.setRequestHeader(t,this.requestHeader[t]);o.send(null)}return r.manager.itemStart(t),o}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class nd extends $u{constructor(t){super(t)}load(t,e,n,i){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,a=Qu.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout((function(){e&&e(a),r.manager.itemEnd(t)}),0),a;const s=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"img\");function o(){s.removeEventListener(\"load\",o,!1),s.removeEventListener(\"error\",l,!1),Qu.add(t,this),e&&e(this),r.manager.itemEnd(t)}function l(e){s.removeEventListener(\"load\",o,!1),s.removeEventListener(\"error\",l,!1),i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)}return s.addEventListener(\"load\",o,!1),s.addEventListener(\"error\",l,!1),\"data:\"!==t.substr(0,5)&&void 0!==this.crossOrigin&&(s.crossOrigin=this.crossOrigin),r.manager.itemStart(t),s.src=t,s}}class id extends $u{constructor(t){super(t)}load(t,e,n,i){const r=new Xs,a=new nd(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);let s=0;function o(n){a.load(t[n],(function(t){r.images[n]=t,s++,6===s&&(r.needsUpdate=!0,e&&e(r))}),void 0,i)}for(let e=0;e<t.length;++e)o(e);return r}}class rd extends $u{constructor(t){super(t)}load(t,e,n,i){const r=new Lr,a=new nd(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(t,(function(n){r.image=n;const i=t.search(/\\.jpe?g($|\\?)/i)>0||0===t.search(/^data\\:image\\/jpeg/);r.format=i?Zi:Ji,r.needsUpdate=!0,void 0!==e&&e(r)}),n,i),r}}class ad extends Bh{constructor(){super(),this.type=\"CurvePath\",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new $h(e,t))}getPoint(t){const e=t*this.getLength(),n=this.getCurveLengths();let i=0;for(;i<n.length;){if(n[i]>=e){const t=n[i]-e,r=this.curves[i],a=r.getLength();return r.getPointAt(0===a?0:1-t/a)}i++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let n=0,i=this.curves.length;n<i;n++)e+=this.curves[n].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let n;for(let i=0,r=this.curves;i<r.length;i++){const a=r[i],s=a.getPoints(a&&a.isEllipseCurve?2*t:a&&(a.isLineCurve||a.isLineCurve3)?1:a&&a.isSplineCurve?t*a.points.length:t);for(let t=0;t<s.length;t++){const i=s[t];n&&n.equals(i)||(e.push(i),n=i)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(t){super.copy(t),this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){this.curves.push(t.curves[e].clone())}return this.autoClose=t.autoClose,this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose,t.curves=[];for(let e=0,n=this.curves.length;e<n;e++){t.curves.push(this.curves[e].toJSON())}return t}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push((new iu[n.type]).fromJSON(n))}return this}}class sd extends ad{constructor(t){super(),this.type=\"Path\",this.currentPoint=new br,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,n=t.length;e<n;e++)this.lineTo(t[e].x,t[e].y);return this}moveTo(t,e){return this.currentPoint.set(t,e),this}lineTo(t,e){const n=new $h(this.currentPoint.clone(),new br(t,e));return this.curves.push(n),this.currentPoint.set(t,e),this}quadraticCurveTo(t,e,n,i){const r=new tu(this.currentPoint.clone(),new br(t,e),new br(n,i));return this.curves.push(r),this.currentPoint.set(n,i),this}bezierCurveTo(t,e,n,i,r,a){const s=new Qh(this.currentPoint.clone(),new br(t,e),new br(n,i),new br(r,a));return this.curves.push(s),this.currentPoint.set(r,a),this}splineThru(t){const e=[this.currentPoint.clone()].concat(t),n=new nu(e);return this.curves.push(n),this.currentPoint.copy(t[t.length-1]),this}arc(t,e,n,i,r,a){return this.absarc(t+this.currentPoint.x,e+this.currentPoint.y,n,i,r,a),this}absarc(t,e,n,i,r,a){return this.absellipse(t,e,n,n,i,r,a),this}ellipse(t,e,n,i,r,a,s,o){return this.absellipse(t+this.currentPoint.x,e+this.currentPoint.y,n,i,r,a,s,o),this}absellipse(t,e,n,i,r,a,s,o){const l=new Hh(t,e,n,i,r,a,s,o);if(this.curves.length>0){const t=l.getPoint(0);t.equals(this.currentPoint)||this.lineTo(t.x,t.y)}this.curves.push(l);const c=l.getPoint(1);return this.currentPoint.copy(c),this}copy(t){return super.copy(t),this.currentPoint.copy(t.currentPoint),this}toJSON(){const t=super.toJSON();return t.currentPoint=this.currentPoint.toArray(),t}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}class od extends sd{constructor(t){super(t),this.uuid=yr(),this.type=\"Shape\",this.holes=[]}getPointsHoles(t){const e=[];for(let n=0,i=this.holes.length;n<i;n++)e[n]=this.holes[n].getPoints(t);return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t),this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){this.holes.push(t.holes[e].clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid,t.holes=[];for(let e=0,n=this.holes.length;e<n;e++){t.holes.push(this.holes[e].toJSON())}return t}fromJSON(t){super.fromJSON(t),this.uuid=t.uuid,this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push((new sd).fromJSON(n))}return this}}class ld extends za{constructor(t,e=1){super(),this.type=\"Light\",this.color=new ns(t),this.intensity=e}dispose(){}copy(t){return super.copy(t),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}ld.prototype.isLight=!0;(class extends ld{constructor(t,e,n){super(t,n),this.type=\"HemisphereLight\",this.position.copy(za.DefaultUp),this.updateMatrix(),this.groundColor=new ns(e)}copy(t){return ld.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}).prototype.isHemisphereLight=!0;const cd=new ua,hd=new Ir,ud=new Ir;class dd{constructor(t){this.camera=t,this.bias=0,this.normalBias=0,this.radius=1,this.mapSize=new br(512,512),this.map=null,this.mapPass=null,this.matrix=new ua,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new eo,this._frameExtents=new br(1,1),this._viewportCount=1,this._viewports=[new Rr(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;hd.setFromMatrixPosition(t.matrixWorld),e.position.copy(hd),ud.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(ud),e.updateMatrixWorld(),cd.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(cd),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(e.projectionMatrix),n.multiply(e.matrixWorldInverse)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};return 0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class pd extends dd{constructor(){super(new Ws(50,1,.5,500)),this.focus=1}updateMatrices(t){const e=this.camera,n=2*vr*t.angle*this.focus,i=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;n===e.fov&&i===e.aspect&&r===e.far||(e.fov=n,e.aspect=i,e.far=r,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}pd.prototype.isSpotLightShadow=!0;(class extends ld{constructor(t,e,n=0,i=Math.PI/3,r=0,a=1){super(t,e),this.type=\"SpotLight\",this.position.copy(za.DefaultUp),this.updateMatrix(),this.target=new za,this.distance=n,this.angle=i,this.penumbra=r,this.decay=a,this.shadow=new pd}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}).prototype.isSpotLight=!0;const fd=new ua,md=new Ir,gd=new Ir;class vd extends dd{constructor(){super(new Ws(90,1,.5,500)),this._frameExtents=new br(4,2),this._viewportCount=6,this._viewports=[new Rr(2,1,1,1),new Rr(0,1,1,1),new Rr(3,1,1,1),new Rr(1,1,1,1),new Rr(3,0,1,1),new Rr(1,0,1,1)],this._cubeDirections=[new Ir(1,0,0),new Ir(-1,0,0),new Ir(0,0,1),new Ir(0,0,-1),new Ir(0,1,0),new Ir(0,-1,0)],this._cubeUps=[new Ir(0,1,0),new Ir(0,1,0),new Ir(0,1,0),new Ir(0,1,0),new Ir(0,0,1),new Ir(0,0,-1)]}updateMatrices(t,e=0){const n=this.camera,i=this.matrix,r=t.distance||n.far;r!==n.far&&(n.far=r,n.updateProjectionMatrix()),md.setFromMatrixPosition(t.matrixWorld),n.position.copy(md),gd.copy(n.position),gd.add(this._cubeDirections[e]),n.up.copy(this._cubeUps[e]),n.lookAt(gd),n.updateMatrixWorld(),i.makeTranslation(-md.x,-md.y,-md.z),fd.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(fd)}}vd.prototype.isPointLightShadow=!0;(class extends ld{constructor(t,e,n=0,i=1){super(t,e),this.type=\"PointLight\",this.distance=n,this.decay=i,this.shadow=new vd}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}).prototype.isPointLight=!0;class yd extends dd{constructor(){super(new mo(-5,5,5,-5,.5,500))}}yd.prototype.isDirectionalLightShadow=!0;(class extends ld{constructor(t,e){super(t,e),this.type=\"DirectionalLight\",this.position.copy(za.DefaultUp),this.updateMatrix(),this.target=new za,this.shadow=new yd}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}).prototype.isDirectionalLight=!0;(class extends ld{constructor(t,e){super(t,e),this.type=\"AmbientLight\"}}).prototype.isAmbientLight=!0;(class extends ld{constructor(t,e,n=10,i=10){super(t,e),this.type=\"RectAreaLight\",this.width=n,this.height=i}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}).prototype.isRectAreaLight=!0;class xd{constructor(){this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new Ir)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const n=t.x,i=t.y,r=t.z,a=this.coefficients;return e.copy(a[0]).multiplyScalar(.282095),e.addScaledVector(a[1],.488603*i),e.addScaledVector(a[2],.488603*r),e.addScaledVector(a[3],.488603*n),e.addScaledVector(a[4],n*i*1.092548),e.addScaledVector(a[5],i*r*1.092548),e.addScaledVector(a[6],.315392*(3*r*r-1)),e.addScaledVector(a[7],n*r*1.092548),e.addScaledVector(a[8],.546274*(n*n-i*i)),e}getIrradianceAt(t,e){const n=t.x,i=t.y,r=t.z,a=this.coefficients;return e.copy(a[0]).multiplyScalar(.886227),e.addScaledVector(a[1],1.023328*i),e.addScaledVector(a[2],1.023328*r),e.addScaledVector(a[3],1.023328*n),e.addScaledVector(a[4],.858086*n*i),e.addScaledVector(a[5],.858086*i*r),e.addScaledVector(a[6],.743125*r*r-.247708),e.addScaledVector(a[7],.858086*n*r),e.addScaledVector(a[8],.429043*(n*n-i*i)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(t.coefficients[n],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let n=0;n<9;n++)this.coefficients[n].lerp(t.coefficients[n],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(t,e+3*i);return this}toArray(t=[],e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(t,e+3*i);return t}static getBasisAt(t,e){const n=t.x,i=t.y,r=t.z;e[0]=.282095,e[1]=.488603*i,e[2]=.488603*r,e[3]=.488603*n,e[4]=1.092548*n*i,e[5]=1.092548*i*r,e[6]=.315392*(3*r*r-1),e[7]=1.092548*n*r,e[8]=.546274*(n*n-i*i)}}xd.prototype.isSphericalHarmonics3=!0;class _d extends ld{constructor(t=new xd,e=1){super(void 0,e),this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}_d.prototype.isLightProbe=!0;(class extends ys{constructor(){super(),this.type=\"InstancedBufferGeometry\",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}clone(){return(new this.constructor).copy(this)}toJSON(){const t=super.toJSON(this);return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}).prototype.isInstancedBufferGeometry=!0;(class extends ss{constructor(t,e,n,i=1){\"number\"==typeof n&&(i=n,n=!1,console.error(\"THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.\")),super(t,e,n),this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}).prototype.isInstancedBufferAttribute=!0;let Md;(class extends $u{constructor(t){super(t),\"undefined\"==typeof createImageBitmap&&console.warn(\"THREE.ImageBitmapLoader: createImageBitmap() not supported.\"),\"undefined\"==typeof fetch&&console.warn(\"THREE.ImageBitmapLoader: fetch() not supported.\"),this.options={premultiplyAlpha:\"none\"}}setOptions(t){return this.options=t,this}load(t,e,n,i){void 0===t&&(t=\"\"),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,a=Qu.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout((function(){e&&e(a),r.manager.itemEnd(t)}),0),a;const s={};s.credentials=\"anonymous\"===this.crossOrigin?\"same-origin\":\"include\",s.headers=this.requestHeader,fetch(t,s).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,Object.assign(r.options,{colorSpaceConversion:\"none\"}))})).then((function(n){Qu.add(t,n),e&&e(n),r.manager.itemEnd(t)})).catch((function(e){i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)})),r.manager.itemStart(t)}}).prototype.isImageBitmapLoader=!0;const wd=function(){return void 0===Md&&(Md=new(window.AudioContext||window.webkitAudioContext)),Md};class bd extends $u{constructor(t){super(t)}load(t,e,n,i){const r=this,a=new ed(this.manager);a.setResponseType(\"arraybuffer\"),a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(t,(function(n){try{const t=n.slice(0);wd().decodeAudioData(t,(function(t){e(t)}))}catch(e){i?i(e):console.error(e),r.manager.itemError(t)}}),n,i)}}(class extends _d{constructor(t,e,n=1){super(void 0,n);const i=(new ns).set(t),r=(new ns).set(e),a=new Ir(i.r,i.g,i.b),s=new Ir(r.r,r.g,r.b),o=Math.sqrt(Math.PI),l=o*Math.sqrt(.75);this.sh.coefficients[0].copy(a).add(s).multiplyScalar(o),this.sh.coefficients[1].copy(a).sub(s).multiplyScalar(l)}}).prototype.isHemisphereLightProbe=!0;(class extends _d{constructor(t,e=1){super(void 0,e);const n=(new ns).set(t);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}}).prototype.isAmbientLightProbe=!0;class Sd{constructor(t,e,n){let i,r,a;switch(this.binding=t,this.valueSize=n,e){case\"quaternion\":i=this._slerp,r=this._slerpAdditive,a=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*n),this._workIndex=5;break;case\"string\":case\"bool\":i=this._select,r=this._select,a=this._setAdditiveIdentityOther,this.buffer=new Array(5*n);break;default:i=this._lerp,r=this._lerpAdditive,a=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*n)}this._mixBufferRegion=i,this._mixBufferRegionAdditive=r,this._setIdentity=a,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,e){const n=this.buffer,i=this.valueSize,r=t*i+i;let a=this.cumulativeWeight;if(0===a){for(let t=0;t!==i;++t)n[r+t]=n[t];a=e}else{a+=e;this._mixBufferRegion(n,r,0,e/a,i)}this.cumulativeWeight=a}accumulateAdditive(t){const e=this.buffer,n=this.valueSize,i=n*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(e,i,0,t,n),this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,n=this.buffer,i=t*e+e,r=this.cumulativeWeight,a=this.cumulativeWeightAdditive,s=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,r<1){this._mixBufferRegion(n,i,e*this._origIndex,1-r,e)}a>0&&this._mixBufferRegionAdditive(n,i,this._addIndex*e,1,e);for(let t=e,r=e+e;t!==r;++t)if(n[t]!==n[t+e]){s.setValue(n,i);break}}saveOriginalState(){const t=this.buffer,e=this.valueSize,n=e*this._origIndex;this.binding.getValue(t,n);for(let i=e,r=n;i!==r;++i)t[i]=t[n+i%e];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){this.binding.setValue(this.buffer,3*this.valueSize)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let n=t;n<e;n++)this.buffer[n]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++)this.buffer[e+n]=this.buffer[t+n]}_select(t,e,n,i,r){if(i>=.5)for(let i=0;i!==r;++i)t[e+i]=t[n+i]}_slerp(t,e,n,i){Nr.slerpFlat(t,e,t,e,t,n,i)}_slerpAdditive(t,e,n,i,r){const a=this._workIndex*r;Nr.multiplyQuaternionsFlat(t,a,t,e,t,n),Nr.slerpFlat(t,e,t,e,t,a,i)}_lerp(t,e,n,i,r){const a=1-i;for(let s=0;s!==r;++s){const r=e+s;t[r]=t[r]*a+t[n+s]*i}}_lerpAdditive(t,e,n,i,r){for(let a=0;a!==r;++a){const r=e+a;t[r]=t[r]+t[n+a]*i}}}const Td=\"\\\\[\\\\]\\\\.:\\\\/\",Ed=new RegExp(\"[\\\\[\\\\]\\\\.:\\\\/]\",\"g\"),Ad=\"[^\\\\[\\\\]\\\\.:\\\\/]\",Ld=\"[^\"+Td.replace(\"\\\\.\",\"\")+\"]\",Cd=/((?:WC+[\\/:])*)/.source.replace(\"WC\",Ad),Rd=/(WCOD+)?/.source.replace(\"WCOD\",Ld),Pd=/(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace(\"WC\",Ad),Dd=/\\.(WC+)(?:\\[(.+)\\])?/.source.replace(\"WC\",Ad),Nd=new RegExp(\"^\"+Cd+Rd+Pd+Dd+\"$\"),Id=[\"material\",\"materials\",\"bones\"];class Od{constructor(t,e,n){this.path=e,this.parsedPath=n||Od.parseTrackName(e),this.node=Od.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,e,n){return t&&t.isAnimationObjectGroup?new Od.Composite(t,e,n):new Od(t,e,n)}static sanitizeNodeName(t){return t.replace(/\\s/g,\"_\").replace(Ed,\"\")}static parseTrackName(t){const e=Nd.exec(t);if(!e)throw new Error(\"PropertyBinding: Cannot parse trackName: \"+t);const n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},i=n.nodeName&&n.nodeName.lastIndexOf(\".\");if(void 0!==i&&-1!==i){const t=n.nodeName.substring(i+1);-1!==Id.indexOf(t)&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=t)}if(null===n.propertyName||0===n.propertyName.length)throw new Error(\"PropertyBinding: can not parse propertyName from trackName: \"+t);return n}static findNode(t,e){if(!e||\"\"===e||\".\"===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const n=t.skeleton.getBoneByName(e);if(void 0!==n)return n}if(t.children){const n=function(t){for(let i=0;i<t.length;i++){const r=t[i];if(r.name===e||r.uuid===e)return r;const a=n(r.children);if(a)return a}return null},i=n(t.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.node[this.propertyName]}_getValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)t[e++]=n[i]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,n=e.objectName,i=e.propertyName;let r=e.propertyIndex;if(t||(t=Od.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.error(\"THREE.PropertyBinding: Trying to update node for track: \"+this.path+\" but it wasn't found.\");if(n){let i=e.objectIndex;switch(n){case\"materials\":if(!t.material)return void console.error(\"THREE.PropertyBinding: Can not bind to material as node does not have a material.\",this);if(!t.material.materials)return void console.error(\"THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.\",this);t=t.material.materials;break;case\"bones\":if(!t.skeleton)return void console.error(\"THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.\",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===i){i=e;break}break;default:if(void 0===t[n])return void console.error(\"THREE.PropertyBinding: Can not bind to objectName of node undefined.\",this);t=t[n]}if(void 0!==i){if(void 0===t[i])return void console.error(\"THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.\",this,t);t=t[i]}}const a=t[i];if(void 0===a){return void console.error(\"THREE.PropertyBinding: Trying to update property for track: \"+e.nodeName+\".\"+i+\" but it wasn't found.\",t)}let s=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?s=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(s=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(void 0!==r){if(\"morphTargetInfluences\"===i){if(!t.geometry)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.\",this);if(!t.geometry.isBufferGeometry)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.\",this);if(!t.geometry.morphAttributes)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.\",this);void 0!==t.morphTargetDictionary[r]&&(r=t.morphTargetDictionary[r])}o=this.BindingType.ArrayElement,this.resolvedProperty=a,this.propertyIndex=r}else void 0!==a.fromArray&&void 0!==a.toArray?(o=this.BindingType.HasFromToArray,this.resolvedProperty=a):Array.isArray(a)?(o=this.BindingType.EntireArray,this.resolvedProperty=a):this.propertyName=i;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][s]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Od.Composite=class{constructor(t,e,n){const i=n||Od.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,i)}getValue(t,e){this.bind();const n=this._bindings[this._targetGroup.nCachedObjects_];void 0!==n&&n.getValue(t,e)}setValue(t,e){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i)n[i].setValue(t,e)}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].bind()}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].unbind()}},Od.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Od.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Od.prototype.GetterByBindingType=[Od.prototype._getValue_direct,Od.prototype._getValue_array,Od.prototype._getValue_arrayElement,Od.prototype._getValue_toArray],Od.prototype.SetterByBindingTypeAndVersioning=[[Od.prototype._setValue_direct,Od.prototype._setValue_direct_setNeedsUpdate,Od.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Od.prototype._setValue_array,Od.prototype._setValue_array_setNeedsUpdate,Od.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Od.prototype._setValue_arrayElement,Od.prototype._setValue_arrayElement_setNeedsUpdate,Od.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Od.prototype._setValue_fromArray,Od.prototype._setValue_fromArray_setNeedsUpdate,Od.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class zd{constructor(t,e,n=null,i=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=n,this.blendMode=i;const r=e.tracks,a=r.length,s=new Array(a),o={endingStart:nr,endingEnd:nr};for(let t=0;t!==a;++t){const e=r[t].createInterpolant(null);s[t]=e,e.settings=o}this._interpolantSettings=o,this._interpolants=s,this._propertyBindings=new Array(a),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,n){if(t.fadeOut(e),this.fadeIn(e),n){const n=this._clip.duration,i=t._clip.duration,r=n/i;t.warp(1,i/n,e),this.warp(r,1,e)}return this}crossFadeTo(t,e,n){return t.crossFadeFrom(this,e,n)}stopFading(){const t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,n){const i=this._mixer,r=i.time,a=this.timeScale;let s=this._timeScaleInterpolant;null===s&&(s=i._lendControlInterpolant(),this._timeScaleInterpolant=s);const o=s.parameterPositions,l=s.sampleValues;return o[0]=r,o[1]=r+n,l[0]=t/a,l[1]=e/a,this}stopWarping(){const t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,n,i){if(!this.enabled)return void this._updateWeight(t);const r=this._startTime;if(null!==r){const i=(t-r)*n;if(i<0||0===n)return;this._startTime=null,e=n*i}e*=this._updateTimeScale(t);const a=this._updateTime(e),s=this._updateWeight(t);if(s>0){const t=this._interpolants,e=this._propertyBindings;switch(this.blendMode){case 2501:for(let n=0,i=t.length;n!==i;++n)t[n].evaluate(a),e[n].accumulateAdditive(s);break;case ar:default:for(let n=0,r=t.length;n!==r;++n)t[n].evaluate(a),e[n].accumulate(i,s)}}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const n=this._weightInterpolant;if(null!==n){const i=n.evaluate(t)[0];e*=i,t>n.parameterPositions[1]&&(this.stopFading(),0===i&&(this.enabled=!1))}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const n=this._timeScaleInterpolant;if(null!==n){e*=n.evaluate(t)[0],t>n.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e)}}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,n=this.loop;let i=this.time+t,r=this._loopCount;const a=2202===n;if(0===t)return-1===r?i:a&&1==(1&r)?e-i:i;if(2200===n){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(i>=e)i=e;else{if(!(i<0)){this.time=i;break t}i=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=i,this._mixer.dispatchEvent({type:\"finished\",action:this,direction:t<0?-1:1})}}else{if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),i>=e||i<0){const n=Math.floor(i/e);i-=e*n,r+=Math.abs(n);const s=this.repetitions-r;if(s<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,i=t>0?e:0,this.time=i,this._mixer.dispatchEvent({type:\"finished\",action:this,direction:t>0?1:-1});else{if(1===s){const e=t<0;this._setEndings(e,!e,a)}else this._setEndings(!1,!1,a);this._loopCount=r,this.time=i,this._mixer.dispatchEvent({type:\"loop\",action:this,loopDelta:n})}}else this.time=i;if(a&&1==(1&r))return e-i}return i}_setEndings(t,e,n){const i=this._interpolantSettings;n?(i.endingStart=ir,i.endingEnd=ir):(i.endingStart=t?this.zeroSlopeAtStart?ir:nr:rr,i.endingEnd=e?this.zeroSlopeAtEnd?ir:nr:rr)}_scheduleFading(t,e,n){const i=this._mixer,r=i.time;let a=this._weightInterpolant;null===a&&(a=i._lendControlInterpolant(),this._weightInterpolant=a);const s=a.parameterPositions,o=a.sampleValues;return s[0]=r,o[0]=e,s[1]=r+t,o[1]=n,this}}(class extends fr{constructor(t){super(),this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(t,e){const n=t._localRoot||this._root,i=t._clip.tracks,r=i.length,a=t._propertyBindings,s=t._interpolants,o=n.uuid,l=this._bindingsByRootAndName;let c=l[o];void 0===c&&(c={},l[o]=c);for(let t=0;t!==r;++t){const r=i[t],l=r.name;let h=c[l];if(void 0!==h)a[t]=h;else{if(h=a[t],void 0!==h){null===h._cacheIndex&&(++h.referenceCount,this._addInactiveBinding(h,o,l));continue}h=new Sd(Od.create(n,l,e&&e._propertyBindings[t].binding.parsedPath),r.ValueTypeName,r.getValueSize()),++h.referenceCount,this._addInactiveBinding(h,o,l),a[t]=h}s[t].resultBuffer=h.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){const e=(t._localRoot||this._root).uuid,n=t._clip.uuid,i=this._actionsByClip[n];this._bindAction(t,i&&i.knownActions[0]),this._addInactiveAction(t,n,e)}const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==n.useCount++&&(this._lendBinding(n),n.saveOriginalState())}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==--n.useCount&&(n.restoreOriginalState(),this._takeBackBinding(n))}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return null!==e&&e<this._nActiveActions}_addInactiveAction(t,e,n){const i=this._actions,r=this._actionsByClip;let a=r[e];if(void 0===a)a={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,r[e]=a;else{const e=a.knownActions;t._byClipCacheIndex=e.length,e.push(t)}t._cacheIndex=i.length,i.push(t),a.actionByRoot[n]=t}_removeInactiveAction(t){const e=this._actions,n=e[e.length-1],i=t._cacheIndex;n._cacheIndex=i,e[i]=n,e.pop(),t._cacheIndex=null;const r=t._clip.uuid,a=this._actionsByClip,s=a[r],o=s.knownActions,l=o[o.length-1],c=t._byClipCacheIndex;l._byClipCacheIndex=c,o[c]=l,o.pop(),t._byClipCacheIndex=null;delete s.actionByRoot[(t._localRoot||this._root).uuid],0===o.length&&delete a[r],this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==--n.referenceCount&&this._removeInactiveBinding(n)}}_lendAction(t){const e=this._actions,n=t._cacheIndex,i=this._nActiveActions++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_takeBackAction(t){const e=this._actions,n=t._cacheIndex,i=--this._nActiveActions,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_addInactiveBinding(t,e,n){const i=this._bindingsByRootAndName,r=this._bindings;let a=i[e];void 0===a&&(a={},i[e]=a),a[n]=t,t._cacheIndex=r.length,r.push(t)}_removeInactiveBinding(t){const e=this._bindings,n=t.binding,i=n.rootNode.uuid,r=n.path,a=this._bindingsByRootAndName,s=a[i],o=e[e.length-1],l=t._cacheIndex;o._cacheIndex=l,e[l]=o,e.pop(),delete s[r],0===Object.keys(s).length&&delete a[i]}_lendBinding(t){const e=this._bindings,n=t._cacheIndex,i=this._nActiveBindings++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_takeBackBinding(t){const e=this._bindings,n=t._cacheIndex,i=--this._nActiveBindings,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let n=t[e];return void 0===n&&(n=new Bu(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),n.__cacheIndex=e,t[e]=n),n}_takeBackControlInterpolant(t){const e=this._controlInterpolants,n=t.__cacheIndex,i=--this._nActiveControlInterpolants,r=e[i];t.__cacheIndex=i,e[i]=t,r.__cacheIndex=n,e[n]=r}clipAction(t,e,n){const i=e||this._root,r=i.uuid;let a=\"string\"==typeof t?Zu.findByName(i,t):t;const s=null!==a?a.uuid:t,o=this._actionsByClip[s];let l=null;if(void 0===n&&(n=null!==a?a.blendMode:ar),void 0!==o){const t=o.actionByRoot[r];if(void 0!==t&&t.blendMode===n)return t;l=o.knownActions[0],null===a&&(a=l._clip)}if(null===a)return null;const c=new zd(this,a,e,n);return this._bindAction(c,l),this._addInactiveAction(c,s,r),c}existingAction(t,e){const n=e||this._root,i=n.uuid,r=\"string\"==typeof t?Zu.findByName(n,t):t,a=this._actionsByClip[r?r.uuid:t];return void 0!==a&&a.actionByRoot[i]||null}stopAllAction(){const t=this._actions;for(let e=this._nActiveActions-1;e>=0;--e)t[e].stop();return this}update(t){const e=this._actions,n=this._nActiveActions,i=this.time+=t*=this.timeScale,r=Math.sign(t),a=this._accuIndex^=1;for(let s=0;s!==n;++s){e[s]._update(i,t,r,a)}const s=this._bindings,o=this._nActiveBindings;for(let t=0;t!==o;++t)s[t].apply(a);return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,n=t.uuid,i=this._actionsByClip,r=i[n];if(void 0!==r){const t=r.knownActions;for(let n=0,i=t.length;n!==i;++n){const i=t[n];this._deactivateAction(i);const r=i._cacheIndex,a=e[e.length-1];i._cacheIndex=null,i._byClipCacheIndex=null,a._cacheIndex=r,e[r]=a,e.pop(),this._removeInactiveBindingsForAction(i)}delete i[n]}}uncacheRoot(t){const e=t.uuid,n=this._actionsByClip;for(const t in n){const i=n[t].actionByRoot[e];void 0!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}const i=this._bindingsByRootAndName[e];if(void 0!==i)for(const t in i){const e=i[t];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(t,e){const n=this.existingAction(t,e);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}).prototype._controlInterpolantsResultBuffer=new Float32Array(1);(class extends Yc{constructor(t,e,n=1){super(t,e),this.meshPerAttribute=n}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}).prototype.isInstancedInterleavedBuffer=!0;(class extends za{constructor(t){super(),this.material=t,this.render=function(){},this.hasPositions=!1,this.hasNormals=!1,this.hasColors=!1,this.hasUvs=!1,this.positionArray=null,this.normalArray=null,this.colorArray=null,this.uvArray=null,this.count=0}}).prototype.isImmediateRenderObject=!0;const Ud=new Ir,Fd=new ua,Bd=new ua;function Hd(t){const e=[];t&&t.isBone&&e.push(t);for(let n=0;n<t.children.length;n++)e.push.apply(e,Hd(t.children[n]));return e}const kd=new Float32Array(1);function Gd(t,e,n){if(1===n)return new ns(e);const i=j(e);if(!i)throw new Error(`d3 failed to recognize the color: ${e}`);return new ns(ht(i,t)(1-n))}var Vd,Wd;function jd(t,e){const n=e.length/2;let i=t.attributes.position;i&&i.count===3*n||(i=new ss(new Float32Array(3*n),3),t.setAttribute(\"position\",i));const r=i.array;for(let t=0;t<n;t++)r[3*t]=e[2*t],r[3*t+1]=e[2*t+1];i.needsUpdate=!0,t.setDrawRange(0,3*n),t.computeBoundingSphere()}function qd(t,e,n){const i=Math.max(e.length/2-1,0),r=2*i*3,a=3*r;let s=t.attributes.position;s&&s.count===r||(s=new ss(new Float32Array(a),3),t.setAttribute(\"position\",s));const o=s.array;for(let t=0;t<i;t++){const[i,r,a,s]=[e[2*t],e[2*t+1],e[2*t+2],e[2*t+3]],l=new br(i,r),c=new br(a,s),h=new br(a-i,s-r),u=new br(-h.y,h.x).setLength(n/2),d=l.clone().add(u),p=l.clone().sub(u),f=c.clone().add(u),m=c.clone().sub(u),g=[d.x,d.y,0,p.x,p.y,0,f.x,f.y,0,f.x,f.y,0,p.x,p.y,0,m.x,m.y,0];o.set(g,t*g.length)}s.needsUpdate=!0,t.setDrawRange(0,a),t.computeBoundingSphere()}function Xd(t,e,n,i){const{visible:r,color:a,opacity:s}=i;if(Array.isArray(e.material))throw new Error(\"Invariant error: only expect one material on an object\");const o=e.material;if(o.visible!==r&&(o.visible=r,o.needsUpdate=!0),!r)return!1;const l=Gd(t,a,null!=s?s:1),c=n(e.geometry);e.geometry!==c&&(e.geometry=c);return o.color.equals(l)||(o.color.set(l),o.needsUpdate=!0),!0}new Int32Array(kd.buffer),Bh.create=function(t,e){return console.log(\"THREE.Curve.create() has been deprecated\"),t.prototype=Object.create(Bh.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},sd.prototype.fromPoints=function(t){return console.warn(\"THREE.Path: .fromPoints() has been renamed to .setFromPoints().\"),this.setFromPoints(t)},class extends Ph{constructor(t=10,e=10,n=4473924,i=8947848){n=new ns(n),i=new ns(i);const r=e/2,a=t/e,s=t/2,o=[],l=[];for(let t=0,c=0,h=-s;t<=e;t++,h+=a){o.push(-s,0,h,s,0,h),o.push(h,0,-s,h,0,s);const e=t===r?n:i;e.toArray(l,c),c+=3,e.toArray(l,c),c+=3,e.toArray(l,c),c+=3,e.toArray(l,c),c+=3}const c=new ys;c.setAttribute(\"position\",new cs(o,3)),c.setAttribute(\"color\",new cs(l,3));super(c,new wh({vertexColors:!0,toneMapped:!1})),this.type=\"GridHelper\"}}.prototype.setColors=function(){console.error(\"THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.\")},class extends Ph{constructor(t){const e=Hd(t),n=new ys,i=[],r=[],a=new ns(0,0,1),s=new ns(0,1,0);for(let t=0;t<e.length;t++){const n=e[t];n.parent&&n.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),r.push(a.r,a.g,a.b),r.push(s.r,s.g,s.b))}n.setAttribute(\"position\",new cs(i,3)),n.setAttribute(\"color\",new cs(r,3));super(n,new wh({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.type=\"SkeletonHelper\",this.isSkeletonHelper=!0,this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,n=this.geometry,i=n.getAttribute(\"position\");Bd.copy(this.root.matrixWorld).invert();for(let t=0,n=0;t<e.length;t++){const r=e[t];r.parent&&r.parent.isBone&&(Fd.multiplyMatrices(Bd,r.matrixWorld),Ud.setFromMatrixPosition(Fd),i.setXYZ(n,Ud.x,Ud.y,Ud.z),Fd.multiplyMatrices(Bd,r.parent.matrixWorld),Ud.setFromMatrixPosition(Fd),i.setXYZ(n+1,Ud.x,Ud.y,Ud.z),n+=2)}n.getAttribute(\"position\").needsUpdate=!0,super.updateMatrixWorld(t)}}.prototype.update=function(){console.error(\"THREE.SkeletonHelper: update() no longer needs to be called.\")},$u.prototype.extractUrlBase=function(t){return console.warn(\"THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.\"),class{static decodeText(t){if(\"undefined\"!=typeof TextDecoder)return(new TextDecoder).decode(t);let e=\"\";for(let n=0,i=t.length;n<i;n++)e+=String.fromCharCode(t[n]);try{return decodeURIComponent(escape(e))}catch(t){return e}}static extractUrlBase(t){const e=t.lastIndexOf(\"/\");return-1===e?\"./\":t.substr(0,e+1)}}.extractUrlBase(t)},$u.Handlers={add:function(){console.error(\"THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.\")},get:function(){console.error(\"THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.\")}},Ur.prototype.center=function(t){return console.warn(\"THREE.Box3: .center() has been renamed to .getCenter().\"),this.getCenter(t)},Ur.prototype.empty=function(){return console.warn(\"THREE.Box3: .empty() has been renamed to .isEmpty().\"),this.isEmpty()},Ur.prototype.isIntersectionBox=function(t){return console.warn(\"THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().\"),this.intersectsBox(t)},Ur.prototype.isIntersectionSphere=function(t){return console.warn(\"THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().\"),this.intersectsSphere(t)},Ur.prototype.size=function(t){return console.warn(\"THREE.Box3: .size() has been renamed to .getSize().\"),this.getSize(t)},na.prototype.empty=function(){return console.warn(\"THREE.Sphere: .empty() has been renamed to .isEmpty().\"),this.isEmpty()},eo.prototype.setFromMatrix=function(t){return console.warn(\"THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().\"),this.setFromProjectionMatrix(t)},Sr.prototype.flattenToArrayOffset=function(t,e){return console.warn(\"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\"),this.toArray(t,e)},Sr.prototype.multiplyVector3=function(t){return console.warn(\"THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.\"),t.applyMatrix3(this)},Sr.prototype.multiplyVector3Array=function(){console.error(\"THREE.Matrix3: .multiplyVector3Array() has been removed.\")},Sr.prototype.applyToBufferAttribute=function(t){return console.warn(\"THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.\"),t.applyMatrix3(this)},Sr.prototype.applyToVector3Array=function(){console.error(\"THREE.Matrix3: .applyToVector3Array() has been removed.\")},Sr.prototype.getInverse=function(t){return console.warn(\"THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.\"),this.copy(t).invert()},ua.prototype.extractPosition=function(t){return console.warn(\"THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().\"),this.copyPosition(t)},ua.prototype.flattenToArrayOffset=function(t,e){return console.warn(\"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\"),this.toArray(t,e)},ua.prototype.getPosition=function(){return console.warn(\"THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.\"),(new Ir).setFromMatrixColumn(this,3)},ua.prototype.setRotationFromQuaternion=function(t){return console.warn(\"THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().\"),this.makeRotationFromQuaternion(t)},ua.prototype.multiplyToArray=function(){console.warn(\"THREE.Matrix4: .multiplyToArray() has been removed.\")},ua.prototype.multiplyVector3=function(t){return console.warn(\"THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),t.applyMatrix4(this)},ua.prototype.multiplyVector4=function(t){return console.warn(\"THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),t.applyMatrix4(this)},ua.prototype.multiplyVector3Array=function(){console.error(\"THREE.Matrix4: .multiplyVector3Array() has been removed.\")},ua.prototype.rotateAxis=function(t){console.warn(\"THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.\"),t.transformDirection(this)},ua.prototype.crossVector=function(t){return console.warn(\"THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),t.applyMatrix4(this)},ua.prototype.translate=function(){console.error(\"THREE.Matrix4: .translate() has been removed.\")},ua.prototype.rotateX=function(){console.error(\"THREE.Matrix4: .rotateX() has been removed.\")},ua.prototype.rotateY=function(){console.error(\"THREE.Matrix4: .rotateY() has been removed.\")},ua.prototype.rotateZ=function(){console.error(\"THREE.Matrix4: .rotateZ() has been removed.\")},ua.prototype.rotateByAxis=function(){console.error(\"THREE.Matrix4: .rotateByAxis() has been removed.\")},ua.prototype.applyToBufferAttribute=function(t){return console.warn(\"THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.\"),t.applyMatrix4(this)},ua.prototype.applyToVector3Array=function(){console.error(\"THREE.Matrix4: .applyToVector3Array() has been removed.\")},ua.prototype.makeFrustum=function(t,e,n,i,r,a){return console.warn(\"THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.\"),this.makePerspective(t,e,i,n,r,a)},ua.prototype.getInverse=function(t){return console.warn(\"THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.\"),this.copy(t).invert()},Ks.prototype.isIntersectionLine=function(t){return console.warn(\"THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().\"),this.intersectsLine(t)},Nr.prototype.multiplyVector3=function(t){return console.warn(\"THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.\"),t.applyQuaternion(this)},Nr.prototype.inverse=function(){return console.warn(\"THREE.Quaternion: .inverse() has been renamed to invert().\"),this.invert()},ha.prototype.isIntersectionBox=function(t){return console.warn(\"THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().\"),this.intersectsBox(t)},ha.prototype.isIntersectionPlane=function(t){return console.warn(\"THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().\"),this.intersectsPlane(t)},ha.prototype.isIntersectionSphere=function(t){return console.warn(\"THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().\"),this.intersectsSphere(t)},Xa.prototype.area=function(){return console.warn(\"THREE.Triangle: .area() has been renamed to .getArea().\"),this.getArea()},Xa.prototype.barycoordFromPoint=function(t,e){return console.warn(\"THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().\"),this.getBarycoord(t,e)},Xa.prototype.midpoint=function(t){return console.warn(\"THREE.Triangle: .midpoint() has been renamed to .getMidpoint().\"),this.getMidpoint(t)},Xa.prototypenormal=function(t){return console.warn(\"THREE.Triangle: .normal() has been renamed to .getNormal().\"),this.getNormal(t)},Xa.prototype.plane=function(t){return console.warn(\"THREE.Triangle: .plane() has been renamed to .getPlane().\"),this.getPlane(t)},Xa.barycoordFromPoint=function(t,e,n,i,r){return console.warn(\"THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().\"),Xa.getBarycoord(t,e,n,i,r)},Xa.normal=function(t,e,n,i){return console.warn(\"THREE.Triangle: .normal() has been renamed to .getNormal().\"),Xa.getNormal(t,e,n,i)},od.prototype.extractAllPoints=function(t){return console.warn(\"THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.\"),this.extractPoints(t)},od.prototype.extrude=function(t){return console.warn(\"THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.\"),new Du(this,t)},od.prototype.makeGeometry=function(t){return console.warn(\"THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.\"),new Iu(this,t)},br.prototype.fromAttribute=function(t,e,n){return console.warn(\"THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(t,e,n)},br.prototype.distanceToManhattan=function(t){return console.warn(\"THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().\"),this.manhattanDistanceTo(t)},br.prototype.lengthManhattan=function(){return console.warn(\"THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().\"),this.manhattanLength()},Ir.prototype.setEulerFromRotationMatrix=function(){console.error(\"THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.\")},Ir.prototype.setEulerFromQuaternion=function(){console.error(\"THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.\")},Ir.prototype.getPositionFromMatrix=function(t){return console.warn(\"THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().\"),this.setFromMatrixPosition(t)},Ir.prototype.getScaleFromMatrix=function(t){return console.warn(\"THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().\"),this.setFromMatrixScale(t)},Ir.prototype.getColumnFromMatrix=function(t,e){return console.warn(\"THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().\"),this.setFromMatrixColumn(e,t)},Ir.prototype.applyProjection=function(t){return console.warn(\"THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.\"),this.applyMatrix4(t)},Ir.prototype.fromAttribute=function(t,e,n){return console.warn(\"THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(t,e,n)},Ir.prototype.distanceToManhattan=function(t){return console.warn(\"THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().\"),this.manhattanDistanceTo(t)},Ir.prototype.lengthManhattan=function(){return console.warn(\"THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().\"),this.manhattanLength()},Rr.prototype.fromAttribute=function(t,e,n){return console.warn(\"THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(t,e,n)},Rr.prototype.lengthManhattan=function(){return console.warn(\"THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().\"),this.manhattanLength()},za.prototype.getChildByName=function(t){return console.warn(\"THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().\"),this.getObjectByName(t)},za.prototype.renderDepth=function(){console.warn(\"THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.\")},za.prototype.translate=function(t,e){return console.warn(\"THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.\"),this.translateOnAxis(e,t)},za.prototype.getWorldRotation=function(){console.error(\"THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.\")},za.prototype.applyMatrix=function(t){return console.warn(\"THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().\"),this.applyMatrix4(t)},Object.defineProperties(za.prototype,{eulerOrder:{get:function(){return console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\"),this.rotation.order},set:function(t){console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\"),this.rotation.order=t}},useQuaternion:{get:function(){console.warn(\"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\")},set:function(){console.warn(\"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\")}}}),zs.prototype.setDrawMode=function(){console.error(\"THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.\")},Object.defineProperties(zs.prototype,{drawMode:{get:function(){return console.error(\"THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.\"),0},set:function(){console.error(\"THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.\")}}}),vh.prototype.initBones=function(){console.error(\"THREE.SkinnedMesh: initBones() has been removed.\")},Ws.prototype.setLens=function(t,e){console.warn(\"THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.\"),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(ld.prototype,{onlyShadow:{set:function(){console.warn(\"THREE.Light: .onlyShadow has been removed.\")}},shadowCameraFov:{set:function(t){console.warn(\"THREE.Light: .shadowCameraFov is now .shadow.camera.fov.\"),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn(\"THREE.Light: .shadowCameraLeft is now .shadow.camera.left.\"),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn(\"THREE.Light: .shadowCameraRight is now .shadow.camera.right.\"),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn(\"THREE.Light: .shadowCameraTop is now .shadow.camera.top.\"),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn(\"THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.\"),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn(\"THREE.Light: .shadowCameraNear is now .shadow.camera.near.\"),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn(\"THREE.Light: .shadowCameraFar is now .shadow.camera.far.\"),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn(\"THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.\")}},shadowBias:{set:function(t){console.warn(\"THREE.Light: .shadowBias is now .shadow.bias.\"),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn(\"THREE.Light: .shadowDarkness has been removed.\")}},shadowMapWidth:{set:function(t){console.warn(\"THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.\"),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn(\"THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.\"),this.shadow.mapSize.height=t}}}),Object.defineProperties(ss.prototype,{length:{get:function(){return console.warn(\"THREE.BufferAttribute: .length has been deprecated. Use .count instead.\"),this.array.length}},dynamic:{get:function(){return console.warn(\"THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.\"),this.usage===dr},set:function(){console.warn(\"THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.\"),this.setUsage(dr)}}}),ss.prototype.setDynamic=function(t){return console.warn(\"THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.\"),this.setUsage(!0===t?dr:ur),this},ss.prototype.copyIndicesArray=function(){console.error(\"THREE.BufferAttribute: .copyIndicesArray() has been removed.\")},ss.prototype.setArray=function(){console.error(\"THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers\")},ys.prototype.addIndex=function(t){console.warn(\"THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().\"),this.setIndex(t)},ys.prototype.addAttribute=function(t,e){return console.warn(\"THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().\"),e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?\"index\"===t?(console.warn(\"THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.\"),this.setIndex(e),this):this.setAttribute(t,e):(console.warn(\"THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).\"),this.setAttribute(t,new ss(arguments[1],arguments[2])))},ys.prototype.addDrawCall=function(t,e,n){void 0!==n&&console.warn(\"THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.\"),console.warn(\"THREE.BufferGeometry: .addDrawCall() is now .addGroup().\"),this.addGroup(t,e)},ys.prototype.clearDrawCalls=function(){console.warn(\"THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().\"),this.clearGroups()},ys.prototype.computeOffsets=function(){console.warn(\"THREE.BufferGeometry: .computeOffsets() has been removed.\")},ys.prototype.removeAttribute=function(t){return console.warn(\"THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().\"),this.deleteAttribute(t)},ys.prototype.applyMatrix=function(t){return console.warn(\"THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().\"),this.applyMatrix4(t)},Object.defineProperties(ys.prototype,{drawcalls:{get:function(){return console.error(\"THREE.BufferGeometry: .drawcalls has been renamed to .groups.\"),this.groups}},offsets:{get:function(){return console.warn(\"THREE.BufferGeometry: .offsets has been renamed to .groups.\"),this.groups}}}),Yc.prototype.setDynamic=function(t){return console.warn(\"THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.\"),this.setUsage(!0===t?dr:ur),this},Yc.prototype.setArray=function(){console.error(\"THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers\")},Du.prototype.getArrays=function(){console.error(\"THREE.ExtrudeGeometry: .getArrays() has been removed.\")},Du.prototype.addShapeList=function(){console.error(\"THREE.ExtrudeGeometry: .addShapeList() has been removed.\")},Du.prototype.addShape=function(){console.error(\"THREE.ExtrudeGeometry: .addShape() has been removed.\")},Xc.prototype.dispose=function(){console.error(\"THREE.Scene: .dispose() has been removed.\")},Object.defineProperties(Za.prototype,{wrapAround:{get:function(){console.warn(\"THREE.Material: .wrapAround has been removed.\")},set:function(){console.warn(\"THREE.Material: .wrapAround has been removed.\")}},overdraw:{get:function(){console.warn(\"THREE.Material: .overdraw has been removed.\")},set:function(){console.warn(\"THREE.Material: .overdraw has been removed.\")}},wrapRGB:{get:function(){return console.warn(\"THREE.Material: .wrapRGB has been removed.\"),new ns}},shading:{get:function(){console.error(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\")},set:function(t){console.warn(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\"),this.flatShading=1===t}},stencilMask:{get:function(){return console.warn(\"THREE.\"+this.type+\": .stencilMask has been removed. Use .stencilFuncMask instead.\"),this.stencilFuncMask},set:function(t){console.warn(\"THREE.\"+this.type+\": .stencilMask has been removed. Use .stencilFuncMask instead.\"),this.stencilFuncMask=t}},vertexTangents:{get:function(){console.warn(\"THREE.\"+this.type+\": .vertexTangents has been removed.\")},set:function(){console.warn(\"THREE.\"+this.type+\": .vertexTangents has been removed.\")}}}),Object.defineProperties(Gs.prototype,{derivatives:{get:function(){return console.warn(\"THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\"),this.extensions.derivatives},set:function(t){console.warn(\"THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\"),this.extensions.derivatives=t}}}),qc.prototype.clearTarget=function(t,e,n,i){console.warn(\"THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.\"),this.setRenderTarget(t),this.clear(e,n,i)},qc.prototype.animate=function(t){console.warn(\"THREE.WebGLRenderer: .animate() is now .setAnimationLoop().\"),this.setAnimationLoop(t)},qc.prototype.getCurrentRenderTarget=function(){return console.warn(\"THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().\"),this.getRenderTarget()},qc.prototype.getMaxAnisotropy=function(){return console.warn(\"THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().\"),this.capabilities.getMaxAnisotropy()},qc.prototype.getPrecision=function(){return console.warn(\"THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.\"),this.capabilities.precision},qc.prototype.resetGLState=function(){return console.warn(\"THREE.WebGLRenderer: .resetGLState() is now .state.reset().\"),this.state.reset()},qc.prototype.supportsFloatTextures=function(){return console.warn(\"THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).\"),this.extensions.get(\"OES_texture_float\")},qc.prototype.supportsHalfFloatTextures=function(){return console.warn(\"THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).\"),this.extensions.get(\"OES_texture_half_float\")},qc.prototype.supportsStandardDerivatives=function(){return console.warn(\"THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).\"),this.extensions.get(\"OES_standard_derivatives\")},qc.prototype.supportsCompressedTextureS3TC=function(){return console.warn(\"THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).\"),this.extensions.get(\"WEBGL_compressed_texture_s3tc\")},qc.prototype.supportsCompressedTexturePVRTC=function(){return console.warn(\"THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).\"),this.extensions.get(\"WEBGL_compressed_texture_pvrtc\")},qc.prototype.supportsBlendMinMax=function(){return console.warn(\"THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).\"),this.extensions.get(\"EXT_blend_minmax\")},qc.prototype.supportsVertexTextures=function(){return console.warn(\"THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.\"),this.capabilities.vertexTextures},qc.prototype.supportsInstancedArrays=function(){return console.warn(\"THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).\"),this.extensions.get(\"ANGLE_instanced_arrays\")},qc.prototype.enableScissorTest=function(t){console.warn(\"THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().\"),this.setScissorTest(t)},qc.prototype.initMaterial=function(){console.warn(\"THREE.WebGLRenderer: .initMaterial() has been removed.\")},qc.prototype.addPrePlugin=function(){console.warn(\"THREE.WebGLRenderer: .addPrePlugin() has been removed.\")},qc.prototype.addPostPlugin=function(){console.warn(\"THREE.WebGLRenderer: .addPostPlugin() has been removed.\")},qc.prototype.updateShadowMap=function(){console.warn(\"THREE.WebGLRenderer: .updateShadowMap() has been removed.\")},qc.prototype.setFaceCulling=function(){console.warn(\"THREE.WebGLRenderer: .setFaceCulling() has been removed.\")},qc.prototype.allocTextureUnit=function(){console.warn(\"THREE.WebGLRenderer: .allocTextureUnit() has been removed.\")},qc.prototype.setTexture=function(){console.warn(\"THREE.WebGLRenderer: .setTexture() has been removed.\")},qc.prototype.setTexture2D=function(){console.warn(\"THREE.WebGLRenderer: .setTexture2D() has been removed.\")},qc.prototype.setTextureCube=function(){console.warn(\"THREE.WebGLRenderer: .setTextureCube() has been removed.\")},qc.prototype.getActiveMipMapLevel=function(){return console.warn(\"THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().\"),this.getActiveMipmapLevel()},Object.defineProperties(qc.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn(\"THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.\"),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn(\"THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.\"),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.\")}},context:{get:function(){return console.warn(\"THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.\"),this.getContext()}},vr:{get:function(){return console.warn(\"THREE.WebGLRenderer: .vr has been renamed to .xr\"),this.xr}},gammaInput:{get:function(){return console.warn(\"THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.\"),!1},set:function(){console.warn(\"THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.\")}},gammaOutput:{get:function(){return console.warn(\"THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.\"),!1},set:function(t){console.warn(\"THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.\"),this.outputEncoding=!0===t?or:sr}},toneMappingWhitePoint:{get:function(){return console.warn(\"THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.\"),1},set:function(){console.warn(\"THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.\")}}}),Object.defineProperties(zc.prototype,{cullFace:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.\")}},renderReverseSided:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.\")}},renderSingleSided:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.\")}}}),Object.defineProperties(Pr.prototype,{wrapS:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\"),this.texture.wrapS},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\"),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\"),this.texture.wrapT},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\"),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\"),this.texture.magFilter},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\"),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\"),this.texture.minFilter},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\"),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\"),this.texture.anisotropy},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\"),this.texture.anisotropy=t}},offset:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .offset is now .texture.offset.\"),this.texture.offset},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .offset is now .texture.offset.\"),this.texture.offset=t}},repeat:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\"),this.texture.repeat},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\"),this.texture.repeat=t}},format:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .format is now .texture.format.\"),this.texture.format},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .format is now .texture.format.\"),this.texture.format=t}},type:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\"),this.texture.type},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\"),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\"),this.texture.generateMipmaps},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\"),this.texture.generateMipmaps=t}}}),class extends za{constructor(t){super(),this.type=\"Audio\",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType=\"empty\",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType=\"audioNode\",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType=\"mediaNode\",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType=\"mediaStreamNode\",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType=\"buffer\",this.autoplay&&this.play(),this}play(t=0){if(!0===this.isPlaying)return void console.warn(\"THREE.Audio: Audio is already playing.\");if(!1===this.hasPlaybackControl)return void console.warn(\"THREE.Audio: this Audio has no playback control.\");this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn(\"THREE.Audio: this Audio has no playback control.\")}stop(){if(!1!==this.hasPlaybackControl)return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn(\"THREE.Audio: this Audio has no playback control.\")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(t){return t||(t=[]),!0===this._connected?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){if(this.detune=t,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn(\"THREE.Audio: this Audio has no playback control.\")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn(\"THREE.Audio: this Audio has no playback control.\"),!1):this.loop}setLoop(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn(\"THREE.Audio: this Audio has no playback control.\")}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}.prototype.load=function(t){console.warn(\"THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.\");const e=this;return(new bd).load(t,(function(t){e.setBuffer(t)})),this},qs.prototype.updateCubeMap=function(t,e){return console.warn(\"THREE.CubeCamera: .updateCubeMap() is now .update().\"),this.update(t,e)},qs.prototype.clear=function(t,e,n,i){return console.warn(\"THREE.CubeCamera: .clear() is now .renderTarget.clear().\"),this.renderTarget.clear(t,e,n,i)},Er.crossOrigin=void 0,Er.loadTexture=function(t,e,n,i){console.warn(\"THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.\");const r=new rd;r.setCrossOrigin(this.crossOrigin);const a=r.load(t,n,void 0,i);return e&&(a.mapping=e),a},Er.loadTextureCube=function(t,e,n,i){console.warn(\"THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.\");const r=new id;r.setCrossOrigin(this.crossOrigin);const a=r.load(t,n,void 0,i);return e&&(a.mapping=e),a},Er.loadCompressedTexture=function(){console.error(\"THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.\")},Er.loadCompressedTextureCube=function(){console.error(\"THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.\")},\"undefined\"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent(\"register\",{detail:{revision:\"131\"}})),\"undefined\"!=typeof window&&(window.__THREE__?console.warn(\"WARNING: Multiple instances of Three.js being imported.\"):window.__THREE__=\"131\"),(function(t){t[t.CIRCLE=0]=\"CIRCLE\",t[t.LINE=1]=\"LINE\",t[t.TRIANGLE=2]=\"TRIANGLE\",t[t.TRAPEZOID=3]=\"TRAPEZOID\"})(Vd||(Vd={}));class Yd{constructor(t,e,n,i){this.coordinator=e,this.scene=new Xc,this.backgroundColor=\"#fff\",(function r(){return self.hasOwnProperty(\"OffscreenCanvas\")})()&&t instanceof OffscreenCanvas&&(t.style=t.style||{}),i&&t.addEventListener(\"webglcontextlost\",i),this.renderer=new qc({canvas:t,context:t.getContext(\"webgl2\",{antialias:!0,precision:\"highp\",alpha:!0})}),this.renderer.setPixelRatio(n)}onResize(t){this.renderer.setSize(t.width,t.height)}destroyObject(t){const e=t.obj3d;if(this.scene.remove(e),e instanceof zs){e.geometry.dispose();const t=Array.isArray(e.material)?e.material:[e.material];for(const e of t)e.dispose()}}setUseDarkMode(t){this.backgroundColor=t?\"#303030\":\"#fff\"}createOrUpdateLineObject(t,e,n){var i;if(!t&&!n.visible)return null;const{visible:r,width:a}=n;if(!t){const t=Gd(this.backgroundColor,n.color,null!==(i=n.opacity)&&void 0!==i?i:1),s=new ys,o=new wh({color:t}),l=new zs(s,o);return o.visible=r,qd(s,e,a),this.scene.add(l),{type:Vd.LINE,data:e,obj3d:l,width:a}}const{data:s,obj3d:o,width:l}=t;return Xd(this.backgroundColor,o,(t=>(a===l&&s&&Li(s,e)||qd(t,e,a),t)),n)?{type:Vd.LINE,data:e,obj3d:o,width:a}:t}createMesh(t,e){if(!e.visible)return null;const{visible:n,color:i,opacity:r}=e,a=Gd(this.backgroundColor,i,null!=r?r:1),s=new is({color:a,visible:n});return new zs(t,s)}createOrUpdateTriangleObject(t,e,n){const{size:i}=n,r=i*Math.sqrt(3)/2,a=new Float32Array([e.x-i/2,e.y-r/3,e.x+i/2,e.y-r/3,e.x,e.y+2*r/3]);if(!t){const t=new ys;jd(t,a);const i=this.createMesh(t,n);return null===i?null:(this.scene.add(i),{type:Vd.TRIANGLE,data:e,obj3d:i})}return Xd(this.backgroundColor,t.obj3d,(t=>(jd(t,a),t)),n)?{type:Vd.TRIANGLE,data:e,obj3d:t.obj3d}:t}createOrUpdateCircleObject(t,e,n){const{radius:i}=n,r=new Fh(n.radius);if(!t){const t=this.createMesh(r,n);return null===t?null:(t.position.set(e.x,e.y,0),this.scene.add(t),{type:Vd.CIRCLE,data:{loc:e,radius:i},obj3d:t})}return Xd(this.backgroundColor,t.obj3d,(()=>r),n)?(t.obj3d.position.set(e.x,e.y,0),{type:Vd.CIRCLE,data:{loc:e,radius:i},obj3d:t.obj3d}):t}createOrUpdateTrapezoidObject(t,e,n,i){if(e.y!==n.y)throw new RangeError(\"Input error: start.y != end.y.\");const{altitude:r}=i,a=2/Math.sqrt(3)*r,s=new od([new br(e.x-a/2,e.y-r/2),new br(e.x,e.y+r/2),new br(n.x,n.y+r/2),new br(n.x+a/2,n.y-r/2)]);s.autoClose=!0;const o=new Iu(s);if(!t){const t=this.createMesh(o,i);return null===t?null:(this.scene.add(t),{type:Vd.TRAPEZOID,data:[e,n],obj3d:t})}return Xd(this.backgroundColor,t.obj3d,(()=>o),i)?{type:Vd.TRAPEZOID,data:[e,n],obj3d:t.obj3d}:t}flush(){this.renderer.render(this.scene,this.coordinator.getCamera())}dispose(){this.renderer.dispose()}}class Zd{constructor(t,e){this.renderCache=t,this.renderer=e}setLine(t,e,n){const i=this.renderer.createOrUpdateLineObject(this.renderCache.getFromPreviousFrame(t),e,n);i&&this.renderCache.setToCurrentFrame(t,i)}setTriangle(t,e,n){const i=this.renderer.createOrUpdateTriangleObject(this.renderCache.getFromPreviousFrame(t),e,n);i&&this.renderCache.setToCurrentFrame(t,i)}setCircle(t,e,n){const i=this.renderer.createOrUpdateCircleObject(this.renderCache.getFromPreviousFrame(t),e,n);i&&this.renderCache.setToCurrentFrame(t,i)}setTrapezoid(t,e,n,i){const r=this.renderer.createOrUpdateTrapezoidObject(this.renderCache.getFromPreviousFrame(t),e,n,i);r&&this.renderCache.setToCurrentFrame(t,r)}}class Jd{constructor(){this.prevFrameCache=new Map,this.currFrameCache=new Map}getFromPreviousFrame(t){const e=this.prevFrameCache.get(t);return null!=e?e:null}setToCurrentFrame(t,e){this.currFrameCache.set(t,e)}finalizeFrameAndGetRemoved(){const t=[];for(const[e,n]of this.prevFrameCache.entries())this.currFrameCache.has(e)||t.push(n);return this.prevFrameCache=this.currFrameCache,this.currFrameCache=new Map,t}}!(function(t){t[t.NUMBER=0]=\"NUMBER\",t[t.NAN=1]=\"NAN\"})(Wd||(Wd={}));class Qd extends class{constructor(t){this.rawSeriesData=[],this.series=[],this.paintDirty=!0,this.renderCache=new Jd,this.coordinateIdentifier=null,this.layout={x:0,width:1,y:0,height:1},this.getMetadataMapImpl=t.getMetadataMap,this.coordinator=t.coordinator,this.renderer=t.renderer,this.paintBrush=new Zd(this.renderCache,this.renderer)}setLayoutRect(t){this.layout.x===t.x&&this.layout.width===t.width&&this.layout.y===t.y&&this.layout.height===t.height||(this.paintDirty=!0),this.layout=t}getLayoutRect(){return this.layout}getMetadataMap(){return this.getMetadataMapImpl()}markAsPaintDirty(){this.paintDirty=!0}render(){if(this.transformCoordinatesIfStale(),this.paintDirty){this.redraw();for(const t of this.renderCache.finalizeFrameAndGetRemoved())this.renderer.destroyObject(t);this.paintDirty=!1}}isCoordinateUpdated(){return this.coordinator.getUpdateIdentifier()!==this.coordinateIdentifier}clearCoordinateIdentifier(){this.coordinateIdentifier=null}setData(t){this.clearCoordinateIdentifier(),this.rawSeriesData=t}transformCoordinatesIfStale(){if(!this.isCoordinateUpdated())return;const t=this.getLayoutRect();this.series=new Array(this.rawSeriesData.length);for(let e=0;e<this.rawSeriesData.length;e++){const n=this.rawSeriesData[e];this.series[e]={id:n.id,polyline:new Float32Array(2*n.points.length)};for(let i=0;i<n.points.length;i++){const[r,a]=this.coordinator.transformDataToUiCoord(t,[n.points[i].x,n.points[i].y]);this.series[e].polyline[2*i]=r,this.series[e].polyline[2*i+1]=a}}this.coordinateIdentifier=this.coordinator.getUpdateIdentifier(),this.markAsPaintDirty()}}{recordPartition(t,e,n){return t?{type:Wd.NUMBER,polyline:e}:{type:Wd.NAN,polyline:e.map(((t,e)=>isNaN(t)?e%2==0?n.x:n.y:t))}}partitionPolyline(t){const e=[];let n=0,i=!1;const r=this.coordinator.transformDataToUiCoord(this.getLayoutRect(),[0,0]),a={x:r[0],y:r[1]};let s=null;for(let r=0;r<t.length;r+=2){const a=t[r],o=t[r+1],l=isNaN(a)||isNaN(o);l!==i&&n!==r&&(e.push(this.recordPartition(!i,t.slice(n,r),null===s?{x:a,y:o}:s)),n=r),l||(s={x:a,y:o}),i=l}return n!==t.length-1&&e.push(this.recordPartition(!i,t.slice(n,t.length),null!=s?s:a)),e}redraw(){var t,e,n;for(const i of this.series){const r=this.getMetadataMap()[i.id];if(!r)continue;if(i.polyline.length%2!=0)throw new Error(`Cannot have odd length-ed polyline: ${i.polyline.length}`);const a=this.partitionPolyline(i.polyline);for(const[s,{type:o,polyline:l}]of a.entries())if(o===Wd.NUMBER)2===l.length?this.paintBrush.setCircle(JSON.stringify([\"circle\",i.id,s]),{x:l[0],y:l[1]},{color:r.color,visible:r.visible,opacity:null!==(t=r.opacity)&&void 0!==t?t:1,radius:4}):this.paintBrush.setLine(JSON.stringify([\"line\",i.id,s]),l,{color:r.color,visible:r.visible,opacity:null!==(e=r.opacity)&&void 0!==e?e:1,width:2});else if(!r.aux)for(let t=0;t<l.length;t+=2)this.paintBrush.setTriangle(JSON.stringify([\"NaN\",i.id,l[t],l[t+1]]),{x:l[t],y:l[t+1]},{color:r.color,visible:r.visible,opacity:null!==(n=r.opacity)&&void 0!==n?n:1,size:12})}}}class Kd extends Ci{constructor(){super(...arguments),this.camera=new mo(0,1e3,1e3,0,0,100)}isYAxisPointedDown(){return!1}setDomContainerRect(t){super.setDomContainerRect(t),this.camera.left=t.x,this.camera.right=t.x+t.width,this.camera.top=t.y+t.height,this.camera.bottom=t.y,this.camera.updateProjectionMatrix()}getCamera(){return this.camera}}const $d=t=>self.requestAnimationFrame(t);class tp{constructor(t){switch(this.metadataMap={},this.shouldRepaint=!1,this.callbacks=t.callbacks,t.type){case Ri.SVG:this.coordinator=new Ci,this.renderer=new Di(t.container);break;case Ri.WEBGL:{const e=new Kd;this.coordinator=e,this.renderer=new Yd(t.container,e,t.devicePixelRatio,t.callbacks.onContextLost);break}}this.renderer.setUseDarkMode(t.useDarkMode),this.seriesLineView=new Qd({renderer:this.renderer,coordinator:this.coordinator,getMetadataMap:()=>this.metadataMap}),this.resize(t.domDimension)}dispose(){}setXScaleType(t){this.coordinator.setXScale(Si(t)),this.scheduleRepaint()}setYScaleType(t){this.coordinator.setYScale(Si(t)),this.scheduleRepaint()}resize(t){this.coordinator.setDomContainerRect(Object.assign({x:0,y:0},t)),this.renderer.onResize(Object.assign({x:0,y:0},t)),this.seriesLineView.setLayoutRect(Object.assign(Object.assign({},t),{x:0,y:0})),this.scheduleRepaint()}setMetadata(t){let e=!1;Object.entries(t).forEach((([t,n])=>{const i=this.metadataMap[t];i&&n.color===i.color&&n.visible===i.visible&&n.opacity===i.opacity||(e=!0),this.metadataMap[t]=n})),e&&this.seriesLineView.markAsPaintDirty(),this.scheduleRepaint()}setViewBox(t){this.coordinator.setViewBoxRect({x:t.x[0],width:t.x[1]-t.x[0],y:t.y[0],height:t.y[1]-t.y[0]}),this.scheduleRepaint()}setData(t){this.seriesLineView.setData(t),this.scheduleRepaint()}setUseDarkMode(t){this.renderer.setUseDarkMode(t),this.seriesLineView.markAsPaintDirty(),this.scheduleRepaint()}scheduleRepaint(){this.shouldRepaint||(this.shouldRepaint=!0,$d((()=>{this.repaint(),this.shouldRepaint=!1})))}repaint(){this.seriesLineView.render(),this.renderer.flush(),this.callbacks.onDrawEnd()}}var ep,np;!(function(t){t[t.SERIES_DATA_UPDATED=0]=\"SERIES_DATA_UPDATED\",t[t.SERIES_METADATA_CHANGED=1]=\"SERIES_METADATA_CHANGED\",t[t.SCALE_UPDATED=2]=\"SCALE_UPDATED\",t[t.VIEW_BOX_UPDATED=3]=\"VIEW_BOX_UPDATED\",t[t.INIT=4]=\"INIT\",t[t.DOM_RESIZED=5]=\"DOM_RESIZED\",t[t.DARK_MODE_UPDATED=6]=\"DARK_MODE_UPDATED\",t[t.DISPOSED=7]=\"DISPOSED\"})(ep||(ep={})),(function(t){t[t.ON_REDRAW_END=0]=\"ON_REDRAW_END\",t[t.ON_CONTEXT_LOST=1]=\"ON_CONTEXT_LOST\"})(np||(np={})),self.addEventListener(\"message\",(t=>{!(function e(t,n){const{canvas:i,devicePixelRatio:r,dim:a,rendererType:s,useDarkMode:o}=n,l={onDrawEnd:()=>{t.postMessage({type:np.ON_REDRAW_END})},onContextLost:()=>{t.postMessage({type:np.ON_CONTEXT_LOST})}};let c;switch(s){case Ri.WEBGL:c={type:Ri.WEBGL,domDimension:a,callbacks:l,container:i,devicePixelRatio:r,useDarkMode:o};break;default:throw new RangeError(`Invariant error: cannot have Offscreen chart for renderer type: ${s}`)}const h=new tp(c);t.onmessage=function(t){const e=t.data;switch(e.type){case ep.SERIES_DATA_UPDATED:{const t=(function n(t){const{flattenedSeries:e,idsAndLengths:n}=t,i=new Float64Array(e),r=[];if(i.length%2!=0)throw new Error(\"`flattenedSeries` must have even number of elements\");let a=0;for(const{id:t,length:e}of n){const n=[];for(let t=0;t<e;t++)n.push({x:i[a++],y:i[a++]});r.push({id:t,points:n})}return r})(e.compactDataSeries);h.setData(t);break}case ep.SERIES_METADATA_CHANGED:h.setMetadata(e.metadata);break;case ep.VIEW_BOX_UPDATED:h.setViewBox(e.extent);break;case ep.DOM_RESIZED:h.resize(e.dim);break;case ep.DARK_MODE_UPDATED:h.setUseDarkMode(e.useDarkMode);break;case ep.SCALE_UPDATED:switch(e.axis){case\"x\":h.setXScaleType(e.scaleType);break;case\"y\":h.setYScaleType(e.scaleType);break;default:throw new RangeError(`Unknown axis: ${e.axis}`)}break;case ep.DISPOSED:h.dispose()}}})(t.ports[0],t.data)}))})();"
          },
          "redirectURL": "",
          "headersSize": 307,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2022-03-19T17:57:54.467Z",
        "time": 5.137000000104308,
        "timings": {
          "blocked": 0.6339999866969883,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.34999999717623,
          "receive": 4.15300001623109,
          "_blocked_queueing": 0.5409999866969883
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "other"
        },
        "_priority": "High",
        "_resourceType": "other",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "http://localhost:6006/chart_worker.js?_file_hash=5a17be0a",
          "httpVersion": "HTTP/1.1",
          "headers": [],
          "queryString": [
            {
              "name": "_file_hash",
              "value": "5a17be0a"
            }
          ],
          "cookies": [],
          "headersSize": 51,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Content-Length",
              "value": "164302"
            },
            {
              "name": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "name": "Content-Encoding",
              "value": "gzip"
            },
            {
              "name": "Expires",
              "value": "Sun, 20 Mar 2022 10:09:04 GMT"
            },
            {
              "name": "Cache-Control",
              "value": "private, max-age=86400"
            },
            {
              "name": "Content-Type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "Server",
              "value": "Werkzeug/2.0.3 Python/3.8.10"
            },
            {
              "name": "Date",
              "value": "Sat, 19 Mar 2022 10:09:04 GMT"
            }
          ],
          "cookies": [],
          "content": {
            "size": 581961,
            "mimeType": "application/javascript",
            "text": "!(function(){var t;function e(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function n(t){return 1===t.length&&(t=(function n(t){return function(n,i){return e(t(n),i)}})(t)),{left:function(e,n,i,r){for(null==i&&(i=0),null==r&&(r=e.length);i<r;){var a=i+r>>>1;t(e[a],n)<0?i=a+1:r=a}return i},right:function(e,n,i,r){for(null==i&&(i=0),null==r&&(r=e.length);i<r;){var a=i+r>>>1;t(e[a],n)>0?r=a:i=a+1}return i}}}!(function(t){t[t.LINEAR=0]=\"LINEAR\",t[t.LOG10=1]=\"LOG10\",t[t.TIME=2]=\"TIME\"})(t||(t={}));var i=n(e).right,r=Math.sqrt(50),a=Math.sqrt(10),s=Math.sqrt(2);function o(t,e,n){var i,r,a,s,o=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((i=e<t)&&(r=t,t=e,e=r),0===(s=l(t,e,n))||!isFinite(s))return[];if(s>0)for(t=Math.ceil(t/s),e=Math.floor(e/s),a=new Array(r=Math.ceil(e-t+1));++o<r;)a[o]=(t+o)*s;else for(t=Math.floor(t*s),e=Math.ceil(e*s),a=new Array(r=Math.ceil(t-e+1));++o<r;)a[o]=(t-o)/s;return i&&a.reverse(),a}function l(t,e,n){var i=(e-t)/Math.max(0,n),o=Math.floor(Math.log(i)/Math.LN10),l=i/Math.pow(10,o);return o>=0?(l>=r?10:l>=a?5:l>=s?2:1)*Math.pow(10,o):-Math.pow(10,-o)/(l>=r?10:l>=a?5:l>=s?2:1)}function c(t,e,n){var i=Math.abs(e-t)/Math.max(0,n),o=Math.pow(10,Math.floor(Math.log(i)/Math.LN10)),l=i/o;return l>=r?o*=10:l>=a?o*=5:l>=s&&(o*=2),e<t?-o:o}var h={value:function(){}};function u(){for(var t,e=0,n=arguments.length,i={};e<n;++e){if(!(t=arguments[e]+\"\")||t in i||/[\\s.]/.test(t))throw new Error(\"illegal type: \"+t);i[t]=[]}return new d(i)}function d(t){this._=t}function p(t,e){return t.trim().split(/^|\\s+/).map((function(t){var n=\"\",i=t.indexOf(\".\");if(i>=0&&(n=t.slice(i+1),t=t.slice(0,i)),t&&!e.hasOwnProperty(t))throw new Error(\"unknown type: \"+t);return{type:t,name:n}}))}function f(t,e){for(var n,i=0,r=t.length;i<r;++i)if((n=t[i]).name===e)return n.value}function m(t,e,n){for(var i=0,r=t.length;i<r;++i)if(t[i].name===e){t[i]=h,t=t.slice(0,i).concat(t.slice(i+1));break}return null!=n&&t.push({name:e,value:n}),t}function g(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function v(t,e){var n=Object.create(t.prototype);for(var i in e)n[i]=e[i];return n}function y(){}d.prototype=u.prototype={constructor:d,on:function(t,e){var n,i=this._,r=p(t+\"\",i),a=-1,s=r.length;if(!(arguments.length<2)){if(null!=e&&\"function\"!=typeof e)throw new Error(\"invalid callback: \"+e);for(;++a<s;)if(n=(t=r[a]).type)i[n]=m(i[n],t.name,e);else if(null==e)for(n in i)i[n]=m(i[n],t.name,null);return this}for(;++a<s;)if((n=(t=r[a]).type)&&(n=f(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new d(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,i,r=new Array(n),a=0;a<n;++a)r[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error(\"unknown type: \"+t);for(a=0,n=(i=this._[t]).length;a<n;++a)i[a].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error(\"unknown type: \"+t);for(var i=this._[t],r=0,a=i.length;r<a;++r)i[r].value.apply(e,n)}};var x=.7,_=1/x,M=\"\\\\s*([+-]?\\\\d+)\\\\s*\",w=\"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",b=\"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",S=/^#([0-9a-f]{3,8})$/,T=new RegExp(\"^rgb\\\\(\"+[M,M,M]+\"\\\\)$\"),E=new RegExp(\"^rgb\\\\(\"+[b,b,b]+\"\\\\)$\"),A=new RegExp(\"^rgba\\\\(\"+[M,M,M,w]+\"\\\\)$\"),L=new RegExp(\"^rgba\\\\(\"+[b,b,b,w]+\"\\\\)$\"),C=new RegExp(\"^hsl\\\\(\"+[w,b,b]+\"\\\\)$\"),R=new RegExp(\"^hsla\\\\(\"+[w,b,b,w]+\"\\\\)$\"),P={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function D(){return this.rgb().formatHex()}function N(){return this.rgb().formatRgb()}function I(t){var e,n;return t=(t+\"\").trim().toLowerCase(),(e=S.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?O(e):3===n?new B(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?z(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?z(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=T.exec(t))?new B(e[1],e[2],e[3],1):(e=E.exec(t))?new B(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=A.exec(t))?z(e[1],e[2],e[3],e[4]):(e=L.exec(t))?z(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=C.exec(t))?V(e[1],e[2]/100,e[3]/100,1):(e=R.exec(t))?V(e[1],e[2]/100,e[3]/100,e[4]):P.hasOwnProperty(t)?O(P[t]):\"transparent\"===t?new B(NaN,NaN,NaN,0):null}function O(t){return new B(t>>16&255,t>>8&255,255&t,1)}function z(t,e,n,i){return i<=0&&(t=e=n=NaN),new B(t,e,n,i)}function U(t){return t instanceof y||(t=I(t)),t?new B((t=t.rgb()).r,t.g,t.b,t.opacity):new B}function F(t,e,n,i){return 1===arguments.length?U(t):new B(t,e,n,null==i?1:i)}function B(t,e,n,i){this.r=+t,this.g=+e,this.b=+n,this.opacity=+i}function H(){return\"#\"+G(this.r)+G(this.g)+G(this.b)}function k(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?\"rgb(\":\"rgba(\")+Math.max(0,Math.min(255,Math.round(this.r)||0))+\", \"+Math.max(0,Math.min(255,Math.round(this.g)||0))+\", \"+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?\")\":\", \"+t+\")\")}function G(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?\"0\":\"\")+t.toString(16)}function V(t,e,n,i){return i<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new q(t,e,n,i)}function W(t){if(t instanceof q)return new q(t.h,t.s,t.l,t.opacity);if(t instanceof y||(t=I(t)),!t)return new q;if(t instanceof q)return t;var e=(t=t.rgb()).r/255,n=t.g/255,i=t.b/255,r=Math.min(e,n,i),a=Math.max(e,n,i),s=NaN,o=a-r,l=(a+r)/2;return o?(s=e===a?(n-i)/o+6*(n<i):n===a?(i-e)/o+2:(e-n)/o+4,o/=l<.5?a+r:2-a-r,s*=60):o=l>0&&l<1?0:s,new q(s,o,l,t.opacity)}function j(t,e,n,i){return 1===arguments.length?W(t):new q(t,e,n,null==i?1:i)}function q(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}function X(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Y(t){return function(){return t}}function Z(t,e){return function(n){return t+n*e}}function J(t){return 1==(t=+t)?Q:function(e,n){return n-e?(function i(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(i){return Math.pow(t+i*e,n)}})(e,n,t):Y(isNaN(e)?n:e)}}function Q(t,e){var n=e-t;return n?Z(t,n):Y(isNaN(t)?e:t)}g(y,I,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:D,formatHex:D,formatHsl:function K(){return W(this).formatHsl()},formatRgb:N,toString:N}),g(B,F,v(y,{brighter:function(t){return t=null==t?_:Math.pow(_,t),new B(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?x:Math.pow(x,t),new B(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:H,formatHex:H,formatRgb:k,toString:k})),g(q,j,v(y,{brighter:function(t){return t=null==t?_:Math.pow(_,t),new q(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?x:Math.pow(x,t),new q(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,i=n+(n<.5?n:1-n)*e,r=2*n-i;return new B(X(t>=240?t-240:t+120,r,i),X(t,r,i),X(t<120?t+240:t-120,r,i),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?\"hsl(\":\"hsla(\")+(this.h||0)+\", \"+100*(this.s||0)+\"%, \"+100*(this.l||0)+\"%\"+(1===t?\")\":\", \"+t+\")\")}}));var $=(function t(e){var n=J(e);function i(t,e){var i=n((t=F(t)).r,(e=F(e)).r),r=n(t.g,e.g),a=n(t.b,e.b),s=Q(t.opacity,e.opacity);return function(e){return t.r=i(e),t.g=r(e),t.b=a(e),t.opacity=s(e),t+\"\"}}return i.gamma=t,i})(1);function tt(t,e){e||(e=[]);var n,i=t?Math.min(e.length,t.length):0,r=e.slice();return function(a){for(n=0;n<i;++n)r[n]=t[n]*(1-a)+e[n]*a;return r}}function et(t,e){var n,i=e?e.length:0,r=t?Math.min(i,t.length):0,a=new Array(r),s=new Array(i);for(n=0;n<r;++n)a[n]=lt(t[n],e[n]);for(;n<i;++n)s[n]=e[n];return function(t){for(n=0;n<r;++n)s[n]=a[n](t);return s}}function nt(t,e){var n=new Date;return t=+t,e=+e,function(i){return n.setTime(t*(1-i)+e*i),n}}function it(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function rt(t,e){var n,i={},r={};for(n in null!==t&&\"object\"==typeof t||(t={}),null!==e&&\"object\"==typeof e||(e={}),e)n in t?i[n]=lt(t[n],e[n]):r[n]=e[n];return function(t){for(n in i)r[n]=i[n](t);return r}}var at=/[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,st=new RegExp(at.source,\"g\");function ot(t,e){var n,i,r,a=at.lastIndex=st.lastIndex=0,s=-1,o=[],l=[];for(t+=\"\",e+=\"\";(n=at.exec(t))&&(i=st.exec(e));)(r=i.index)>a&&(r=e.slice(a,r),o[s]?o[s]+=r:o[++s]=r),(n=n[0])===(i=i[0])?o[s]?o[s]+=i:o[++s]=i:(o[++s]=null,l.push({i:s,x:it(n,i)})),a=st.lastIndex;return a<e.length&&(r=e.slice(a),o[s]?o[s]+=r:o[++s]=r),o.length<2?l[0]?(function c(t){return function(e){return t(e)+\"\"}})(l[0].x):(function h(t){return function(){return t}})(e):(e=l.length,function(t){for(var n,i=0;i<e;++i)o[(n=l[i]).i]=n.x(t);return o.join(\"\")})}function lt(t,e){var n,i=typeof e;return null==e||\"boolean\"===i?Y(e):(\"number\"===i?it:\"string\"===i?(n=I(e))?(e=n,$):ot:e instanceof I?$:e instanceof Date?nt:(function r(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)})(e)?tt:Array.isArray(e)?et:\"function\"!=typeof e.valueOf&&\"function\"!=typeof e.toString||isNaN(e)?rt:it)(t,e)}function ct(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}var ht=(function dt(t){return function(e,n){var i=t((e=j(e)).h,(n=j(n)).h),r=Q(e.s,n.s),a=Q(e.l,n.l),s=Q(e.opacity,n.opacity);return function(t){return e.h=i(t),e.s=r(t),e.l=a(t),e.opacity=s(t),e+\"\"}}})((function ut(t,e){var n=e-t;return n?Z(t,n>180||n<-180?n-360*Math.round(n/360):n):Y(isNaN(t)?e:t)}));u(\"start\",\"end\",\"cancel\",\"interrupt\");var pt=\"$\";function ft(){}function mt(t,e){var n=new ft;if(t instanceof ft)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var i,r=-1,a=t.length;if(null==e)for(;++r<a;)n.set(r,t[r]);else for(;++r<a;)n.set(e(i=t[r],r,t),i)}else if(t)for(var s in t)n.set(s,t[s]);return n}function gt(){}ft.prototype=mt.prototype={constructor:ft,has:function(t){return pt+t in this},get:function(t){return this[pt+t]},set:function(t,e){return this[pt+t]=e,this},remove:function(t){var e=pt+t;return e in this&&delete this[e]},clear:function(){for(var t in this)t[0]===pt&&delete this[t]},keys:function(){var t=[];for(var e in this)e[0]===pt&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)e[0]===pt&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)e[0]===pt&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)e[0]===pt&&++t;return t},empty:function(){for(var t in this)if(t[0]===pt)return!1;return!0},each:function(t){for(var e in this)e[0]===pt&&t(this[e],e.slice(1),this)}};var vt=mt.prototype;function yt(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf(\"e\"))<0)return null;var n,i=t.slice(0,n);return[i.length>1?i[0]+i.slice(2):i,+t.slice(n+1)]}function xt(t){return(t=yt(Math.abs(t)))?t[1]:NaN}gt.prototype={constructor:gt,has:vt.has,add:function(t){return this[pt+(t+=\"\")]=t,this},remove:vt.remove,clear:vt.clear,values:vt.keys,size:vt.size,empty:vt.empty,each:vt.each};var _t,Mt=/^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;function wt(t){if(!(e=Mt.exec(t)))throw new Error(\"invalid format: \"+t);var e;return new bt({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function bt(t){this.fill=void 0===t.fill?\" \":t.fill+\"\",this.align=void 0===t.align?\">\":t.align+\"\",this.sign=void 0===t.sign?\"-\":t.sign+\"\",this.symbol=void 0===t.symbol?\"\":t.symbol+\"\",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?\"\":t.type+\"\"}function St(t,e){var n=yt(t,e);if(!n)return t+\"\";var i=n[0],r=n[1];return r<0?\"0.\"+new Array(-r).join(\"0\")+i:i.length>r+1?i.slice(0,r+1)+\".\"+i.slice(r+1):i+new Array(r-i.length+2).join(\"0\")}wt.prototype=bt.prototype,bt.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?\"0\":\"\")+(void 0===this.width?\"\":Math.max(1,0|this.width))+(this.comma?\",\":\"\")+(void 0===this.precision?\"\":\".\"+Math.max(0,0|this.precision))+(this.trim?\"~\":\"\")+this.type};var Tt={\"%\":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+\"\"},d:function Et(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString(\"en\").replace(/,/g,\"\"):t.toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return St(100*t,e)},r:St,s:function At(t,e){var n=yt(t,e);if(!n)return t+\"\";var i=n[0],r=n[1],a=r-(_t=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,s=i.length;return a===s?i:a>s?i+new Array(a-s+1).join(\"0\"):a>0?i.slice(0,a)+\".\"+i.slice(a):\"0.\"+new Array(1-a).join(\"0\")+yt(t,Math.max(0,e+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function Lt(t){return t}var Ct,Rt,Pt,Dt=Array.prototype.map,Nt=[\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];function It(t){var e=void 0===t.grouping||void 0===t.thousands?Lt:(function n(t,e){return function(n,i){for(var r=n.length,a=[],s=0,o=t[0],l=0;r>0&&o>0&&(l+o+1>i&&(o=Math.max(1,i-l)),a.push(n.substring(r-=o,r+o)),!((l+=o+1)>i));)o=t[s=(s+1)%t.length];return a.reverse().join(e)}})(Dt.call(t.grouping,Number),t.thousands+\"\"),i=void 0===t.currency?\"\":t.currency[0]+\"\",r=void 0===t.currency?\"\":t.currency[1]+\"\",a=void 0===t.decimal?\".\":t.decimal+\"\",s=void 0===t.numerals?Lt:(function o(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}})(Dt.call(t.numerals,String)),l=void 0===t.percent?\"%\":t.percent+\"\",c=void 0===t.minus?\"-\":t.minus+\"\",h=void 0===t.nan?\"NaN\":t.nan+\"\";function u(t){var n=(t=wt(t)).fill,o=t.align,u=t.sign,d=t.symbol,p=t.zero,f=t.width,m=t.comma,g=t.precision,v=t.trim,y=t.type;\"n\"===y?(m=!0,y=\"g\"):Tt[y]||(void 0===g&&(g=12),v=!0,y=\"g\"),(p||\"0\"===n&&\"=\"===o)&&(p=!0,n=\"0\",o=\"=\");var x=\"$\"===d?i:\"#\"===d&&/[boxX]/.test(y)?\"0\"+y.toLowerCase():\"\",_=\"$\"===d?r:/[%p]/.test(y)?l:\"\",M=Tt[y],w=/[defgprs%]/.test(y);function b(t){var i,r,l,d=x,b=_;if(\"c\"===y)b=M(t)+b,t=\"\";else{var S=(t=+t)<0||1/t<0;if(t=isNaN(t)?h:M(Math.abs(t),g),v&&(t=(function T(t){t:for(var e,n=t.length,i=1,r=-1;i<n;++i)switch(t[i]){case\".\":r=e=i;break;case\"0\":0===r&&(r=i),e=i;break;default:if(!+t[i])break t;r>0&&(r=0)}return r>0?t.slice(0,r)+t.slice(e+1):t})(t)),S&&0==+t&&\"+\"!==u&&(S=!1),d=(S?\"(\"===u?u:c:\"-\"===u||\"(\"===u?\"\":u)+d,b=(\"s\"===y?Nt[8+_t/3]:\"\")+b+(S&&\"(\"===u?\")\":\"\"),w)for(i=-1,r=t.length;++i<r;)if(48>(l=t.charCodeAt(i))||l>57){b=(46===l?a+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}m&&!p&&(t=e(t,1/0));var E=d.length+t.length+b.length,A=E<f?new Array(f-E+1).join(n):\"\";switch(m&&p&&(t=e(A+t,A.length?f-b.length:1/0),A=\"\"),o){case\"<\":t=d+t+b+A;break;case\"=\":t=d+A+t+b;break;case\"^\":t=A.slice(0,E=A.length>>1)+d+t+b+A.slice(E);break;default:t=A+d+t+b}return s(t)}return g=void 0===g?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),b.toString=function(){return t+\"\"},b}return{format:u,formatPrefix:function d(t,e){var n=u(((t=wt(t)).type=\"f\",t)),i=3*Math.max(-8,Math.min(8,Math.floor(xt(e)/3))),r=Math.pow(10,-i),a=Nt[8+i/3];return function(t){return n(r*t)+a}}}}function Ot(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}!(function zt(t){return Ct=It(t),Rt=Ct.format,Pt=Ct.formatPrefix,Ct})({decimal:\".\",thousands:\",\",grouping:[3],currency:[\"$\",\"\"],minus:\"-\"});var Ut=Array.prototype,Ft=Ut.map,Bt=Ut.slice;function Ht(t){return+t}var kt=[0,1];function Gt(t){return t}function Vt(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(function n(t){return function(){return t}})(isNaN(e)?NaN:.5)}function Wt(t){var e,n=t[0],i=t[t.length-1];return n>i&&(e=n,n=i,i=e),function(t){return Math.max(n,Math.min(i,t))}}function jt(t,e,n){var i=t[0],r=t[1],a=e[0],s=e[1];return r<i?(i=Vt(r,i),a=n(s,a)):(i=Vt(i,r),a=n(a,s)),function(t){return a(i(t))}}function qt(t,e,n){var r=Math.min(t.length,e.length)-1,a=new Array(r),s=new Array(r),o=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++o<r;)a[o]=Vt(t[o],t[o+1]),s[o]=n(e[o],e[o+1]);return function(e){var n=i(t,e,1,r)-1;return s[n](a[n](e))}}function Xt(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Yt(){var t,e,n,i,r,a,s=kt,o=kt,l=lt,c=Gt;function h(){return i=Math.min(s.length,o.length)>2?qt:jt,r=a=null,u}function u(e){return isNaN(e=+e)?n:(r||(r=i(s.map(t),o,l)))(t(c(e)))}return u.invert=function(n){return c(e((a||(a=i(o,s.map(t),it)))(n)))},u.domain=function(t){return arguments.length?(s=Ft.call(t,Ht),c===Gt||(c=Wt(s)),h()):s.slice()},u.range=function(t){return arguments.length?(o=Bt.call(t),h()):o.slice()},u.rangeRound=function(t){return o=Bt.call(t),l=ct,h()},u.clamp=function(t){return arguments.length?(c=t?Wt(s):Gt,u):c!==Gt},u.interpolate=function(t){return arguments.length?(l=t,h()):l},u.unknown=function(t){return arguments.length?(n=t,u):n},function(n,i){return t=n,e=i,h()}}function Zt(t,e){return Yt()(t,e)}function Jt(t,e,n,i){var r,a=c(t,e,n);switch((i=wt(null==i?\",f\":i)).type){case\"s\":var s=Math.max(Math.abs(t),Math.abs(e));return null!=i.precision||isNaN(r=(function o(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(xt(e)/3)))-xt(Math.abs(t)))})(a,s))||(i.precision=r),Pt(i,s);case\"\":case\"e\":case\"g\":case\"p\":case\"r\":null!=i.precision||isNaN(r=(function l(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,xt(e)-xt(t))+1})(a,Math.max(Math.abs(t),Math.abs(e))))||(i.precision=r-(\"e\"===i.type));break;case\"f\":case\"%\":null!=i.precision||isNaN(r=(function h(t){return Math.max(0,-xt(Math.abs(t)))})(a))||(i.precision=r-2*(\"%\"===i.type))}return Rt(i)}function Qt(t){var e=t.domain;return t.ticks=function(t){var n=e();return o(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var i=e();return Jt(i[0],i[i.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var i,r=e(),a=0,s=r.length-1,o=r[a],c=r[s];return c<o&&(i=o,o=c,c=i,i=a,a=s,s=i),(i=l(o,c,n))>0?i=l(o=Math.floor(o/i)*i,c=Math.ceil(c/i)*i,n):i<0&&(i=l(o=Math.ceil(o*i)/i,c=Math.floor(c*i)/i,n)),i>0?(r[a]=Math.floor(o/i)*i,r[s]=Math.ceil(c/i)*i,e(r)):i<0&&(r[a]=Math.ceil(o*i)/i,r[s]=Math.floor(c*i)/i,e(r)),t},t}function Kt(){var t=Zt(Gt,Gt);return t.copy=function(){return Xt(t,Kt())},Ot.apply(t,arguments),Qt(t)}function $t(t,e){var n,i=0,r=(t=t.slice()).length-1,a=t[i],s=t[r];return s<a&&(n=i,i=r,r=n,n=a,a=s,s=n),t[i]=e.floor(a),t[r]=e.ceil(s),t}function te(t){return Math.log(t)}function ee(t){return Math.exp(t)}function ne(t){return-Math.log(-t)}function ie(t){return-Math.exp(-t)}function re(t){return isFinite(t)?+(\"1e\"+t):t<0?0:t}function ae(t){return function(e){return-t(-e)}}function se(t){var e,n,i=t(te,ee),r=i.domain,a=10;function s(){return e=(function s(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(e){return Math.log(e)/t})})(a),n=(function o(t){return 10===t?re:t===Math.E?Math.exp:function(e){return Math.pow(t,e)}})(a),r()[0]<0?(e=ae(e),n=ae(n),t(ne,ie)):t(te,ee),i}return i.base=function(t){return arguments.length?(a=+t,s()):a},i.domain=function(t){return arguments.length?(r(t),s()):r()},i.ticks=function(t){var i,s=r(),l=s[0],c=s[s.length-1];(i=c<l)&&(p=l,l=c,c=p);var h,u,d,p=e(l),f=e(c),m=null==t?10:+t,g=[];if(!(a%1)&&f-p<m){if(p=Math.round(p)-1,f=Math.round(f)+1,l>0){for(;p<f;++p)for(u=1,h=n(p);u<a;++u)if(!((d=h*u)<l)){if(d>c)break;g.push(d)}}else for(;p<f;++p)for(u=a-1,h=n(p);u>=1;--u)if(!((d=h*u)<l)){if(d>c)break;g.push(d)}}else g=o(p,f,Math.min(f-p,m)).map(n);return i?g.reverse():g},i.tickFormat=function(t,r){if(null==r&&(r=10===a?\".0e\":\",\"),\"function\"!=typeof r&&(r=Rt(r)),t===1/0)return r;null==t&&(t=10);var s=Math.max(1,a*t/i.ticks().length);return function(t){var i=t/n(Math.round(e(t)));return i*a<a-.5&&(i*=a),i<=s?r(t):\"\"}},i.nice=function(){return r($t(r(),{floor:function(t){return n(Math.floor(e(t)))},ceil:function(t){return n(Math.ceil(e(t)))}}))},i}function oe(){var t=se(Yt()).domain([1,10]);return t.copy=function(){return Xt(t,oe()).base(t.base())},Ot.apply(t,arguments),t}var le=new Date,ce=new Date;function he(t,e,n,i){function r(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return r.floor=function(e){return t(e=new Date(+e)),e},r.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},r.round=function(t){var e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},r.range=function(n,i,a){var s,o=[];if(n=r.ceil(n),a=null==a?1:Math.floor(a),!(n<i&&a>0))return o;do{o.push(s=new Date(+n)),e(n,a),t(n)}while(s<n&&n<i);return o},r.filter=function(n){return he((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,i){if(t>=t)if(i<0)for(;++i<=0;)for(;e(t,-1),!n(t););else for(;--i>=0;)for(;e(t,1),!n(t););}))},n&&(r.count=function(e,i){return le.setTime(+e),ce.setTime(+i),t(le),t(ce),Math.floor(n(le,ce))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(i?function(e){return i(e)%t==0}:function(e){return r.count(0,e)%t==0}):r:null}),r}var ue=he((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));ue.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?he((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):ue:null};var de=ue,pe=1e3,fe=6e4,me=36e5,ge=864e5,ve=6048e5,ye=he((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+e*pe)}),(function(t,e){return(e-t)/pe}),(function(t){return t.getUTCSeconds()})),xe=he((function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*pe)}),(function(t,e){t.setTime(+t+e*fe)}),(function(t,e){return(e-t)/fe}),(function(t){return t.getMinutes()})),_e=he((function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*pe-t.getMinutes()*fe)}),(function(t,e){t.setTime(+t+e*me)}),(function(t,e){return(e-t)/me}),(function(t){return t.getHours()})),Me=he((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*fe)/ge}),(function(t){return t.getDate()-1}));function we(t){return he((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*fe)/ve}))}var be=we(0),Se=we(1);we(2),we(3);var Te=we(4);we(5),we(6);var Ee=he((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),Ae=he((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Ae.every=function(t){return isFinite(t=Math.floor(t))&&t>0?he((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var Le=Ae,Ce=he((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/ge}),(function(t){return t.getUTCDate()-1}));function Re(t){return he((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/ve}))}var Pe=Re(0),De=Re(1);Re(2),Re(3);var Ne=Re(4);Re(5),Re(6);var Ie=he((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));Ie.every=function(t){return isFinite(t=Math.floor(t))&&t>0?he((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var Oe=Ie;function ze(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Ue(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Fe(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var Be,He,ke={\"-\":\"\",_:\" \",0:\"0\"},Ge=/^\\s*\\d+/,Ve=/^%/,We=/[\\\\^$*+?|[\\]().{}]/g;function je(t,e,n){var i=t<0?\"-\":\"\",r=(i?-t:t)+\"\",a=r.length;return i+(a<n?new Array(n-a+1).join(e)+r:r)}function qe(t){return t.replace(We,\"\\\\$&\")}function Xe(t){return new RegExp(\"^(?:\"+t.map(qe).join(\"|\")+\")\",\"i\")}function Ye(t){for(var e={},n=-1,i=t.length;++n<i;)e[t[n].toLowerCase()]=n;return e}function Ze(t,e,n){var i=Ge.exec(e.slice(n,n+1));return i?(t.w=+i[0],n+i[0].length):-1}function Je(t,e,n){var i=Ge.exec(e.slice(n,n+1));return i?(t.u=+i[0],n+i[0].length):-1}function Qe(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.U=+i[0],n+i[0].length):-1}function Ke(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.V=+i[0],n+i[0].length):-1}function $e(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.W=+i[0],n+i[0].length):-1}function tn(t,e,n){var i=Ge.exec(e.slice(n,n+4));return i?(t.y=+i[0],n+i[0].length):-1}function en(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.y=+i[0]+(+i[0]>68?1900:2e3),n+i[0].length):-1}function nn(t,e,n){var i=/^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(e.slice(n,n+6));return i?(t.Z=i[1]?0:-(i[2]+(i[3]||\"00\")),n+i[0].length):-1}function rn(t,e,n){var i=Ge.exec(e.slice(n,n+1));return i?(t.q=3*i[0]-3,n+i[0].length):-1}function an(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.m=i[0]-1,n+i[0].length):-1}function sn(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.d=+i[0],n+i[0].length):-1}function on(t,e,n){var i=Ge.exec(e.slice(n,n+3));return i?(t.m=0,t.d=+i[0],n+i[0].length):-1}function ln(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.H=+i[0],n+i[0].length):-1}function cn(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.M=+i[0],n+i[0].length):-1}function hn(t,e,n){var i=Ge.exec(e.slice(n,n+2));return i?(t.S=+i[0],n+i[0].length):-1}function un(t,e,n){var i=Ge.exec(e.slice(n,n+3));return i?(t.L=+i[0],n+i[0].length):-1}function dn(t,e,n){var i=Ge.exec(e.slice(n,n+6));return i?(t.L=Math.floor(i[0]/1e3),n+i[0].length):-1}function pn(t,e,n){var i=Ve.exec(e.slice(n,n+1));return i?n+i[0].length:-1}function fn(t,e,n){var i=Ge.exec(e.slice(n));return i?(t.Q=+i[0],n+i[0].length):-1}function mn(t,e,n){var i=Ge.exec(e.slice(n));return i?(t.s=+i[0],n+i[0].length):-1}function gn(t,e){return je(t.getDate(),e,2)}function vn(t,e){return je(t.getHours(),e,2)}function yn(t,e){return je(t.getHours()%12||12,e,2)}function xn(t,e){return je(1+Me.count(Le(t),t),e,3)}function _n(t,e){return je(t.getMilliseconds(),e,3)}function Mn(t,e){return _n(t,e)+\"000\"}function wn(t,e){return je(t.getMonth()+1,e,2)}function bn(t,e){return je(t.getMinutes(),e,2)}function Sn(t,e){return je(t.getSeconds(),e,2)}function Tn(t){var e=t.getDay();return 0===e?7:e}function En(t,e){return je(be.count(Le(t)-1,t),e,2)}function An(t){var e=t.getDay();return e>=4||0===e?Te(t):Te.ceil(t)}function Ln(t,e){return t=An(t),je(Te.count(Le(t),t)+(4===Le(t).getDay()),e,2)}function Cn(t){return t.getDay()}function Rn(t,e){return je(Se.count(Le(t)-1,t),e,2)}function Pn(t,e){return je(t.getFullYear()%100,e,2)}function Dn(t,e){return je((t=An(t)).getFullYear()%100,e,2)}function Nn(t,e){return je(t.getFullYear()%1e4,e,4)}function In(t,e){var n=t.getDay();return je((t=n>=4||0===n?Te(t):Te.ceil(t)).getFullYear()%1e4,e,4)}function On(t){var e=t.getTimezoneOffset();return(e>0?\"-\":(e*=-1,\"+\"))+je(e/60|0,\"0\",2)+je(e%60,\"0\",2)}function zn(t,e){return je(t.getUTCDate(),e,2)}function Un(t,e){return je(t.getUTCHours(),e,2)}function Fn(t,e){return je(t.getUTCHours()%12||12,e,2)}function Bn(t,e){return je(1+Ce.count(Oe(t),t),e,3)}function Hn(t,e){return je(t.getUTCMilliseconds(),e,3)}function kn(t,e){return Hn(t,e)+\"000\"}function Gn(t,e){return je(t.getUTCMonth()+1,e,2)}function Vn(t,e){return je(t.getUTCMinutes(),e,2)}function Wn(t,e){return je(t.getUTCSeconds(),e,2)}function jn(t){var e=t.getUTCDay();return 0===e?7:e}function qn(t,e){return je(Pe.count(Oe(t)-1,t),e,2)}function Xn(t){var e=t.getUTCDay();return e>=4||0===e?Ne(t):Ne.ceil(t)}function Yn(t,e){return t=Xn(t),je(Ne.count(Oe(t),t)+(4===Oe(t).getUTCDay()),e,2)}function Zn(t){return t.getUTCDay()}function Jn(t,e){return je(De.count(Oe(t)-1,t),e,2)}function Qn(t,e){return je(t.getUTCFullYear()%100,e,2)}function Kn(t,e){return je((t=Xn(t)).getUTCFullYear()%100,e,2)}function $n(t,e){return je(t.getUTCFullYear()%1e4,e,4)}function ti(t,e){var n=t.getUTCDay();return je((t=n>=4||0===n?Ne(t):Ne.ceil(t)).getUTCFullYear()%1e4,e,4)}function ei(){return\"+0000\"}function ni(){return\"%\"}function ii(t){return+t}function ri(t){return Math.floor(+t/1e3)}!(function ai(t){return Be=(function e(t){var e=t.dateTime,n=t.date,i=t.time,r=t.periods,a=t.days,s=t.shortDays,o=t.months,l=t.shortMonths,c=Xe(r),h=Ye(r),u=Xe(a),d=Ye(a),p=Xe(s),f=Ye(s),m=Xe(o),g=Ye(o),v=Xe(l),y=Ye(l),x={a:function _(t){return s[t.getDay()]},A:function M(t){return a[t.getDay()]},b:function w(t){return l[t.getMonth()]},B:function b(t){return o[t.getMonth()]},c:null,d:gn,e:gn,f:Mn,g:Dn,G:In,H:vn,I:yn,j:xn,L:_n,m:wn,M:bn,p:function S(t){return r[+(t.getHours()>=12)]},q:function T(t){return 1+~~(t.getMonth()/3)},Q:ii,s:ri,S:Sn,u:Tn,U:En,V:Ln,w:Cn,W:Rn,x:null,X:null,y:Pn,Y:Nn,Z:On,\"%\":ni},E={a:function A(t){return s[t.getUTCDay()]},A:function L(t){return a[t.getUTCDay()]},b:function C(t){return l[t.getUTCMonth()]},B:function R(t){return o[t.getUTCMonth()]},c:null,d:zn,e:zn,f:kn,g:Kn,G:ti,H:Un,I:Fn,j:Bn,L:Hn,m:Gn,M:Vn,p:function P(t){return r[+(t.getUTCHours()>=12)]},q:function D(t){return 1+~~(t.getUTCMonth()/3)},Q:ii,s:ri,S:Wn,u:jn,U:qn,V:Yn,w:Zn,W:Jn,x:null,X:null,y:Qn,Y:$n,Z:ei,\"%\":ni},N={a:function I(t,e,n){var i=p.exec(e.slice(n));return i?(t.w=f[i[0].toLowerCase()],n+i[0].length):-1},A:function O(t,e,n){var i=u.exec(e.slice(n));return i?(t.w=d[i[0].toLowerCase()],n+i[0].length):-1},b:function z(t,e,n){var i=v.exec(e.slice(n));return i?(t.m=y[i[0].toLowerCase()],n+i[0].length):-1},B:function U(t,e,n){var i=m.exec(e.slice(n));return i?(t.m=g[i[0].toLowerCase()],n+i[0].length):-1},c:function F(t,n,i){return W(t,e,n,i)},d:sn,e:sn,f:dn,g:en,G:tn,H:ln,I:ln,j:on,L:un,m:an,M:cn,p:function B(t,e,n){var i=c.exec(e.slice(n));return i?(t.p=h[i[0].toLowerCase()],n+i[0].length):-1},q:rn,Q:fn,s:mn,S:hn,u:Je,U:Qe,V:Ke,w:Ze,W:$e,x:function H(t,e,i){return W(t,n,e,i)},X:function k(t,e,n){return W(t,i,e,n)},y:en,Y:tn,Z:nn,\"%\":pn};function G(t,e){return function(n){var i,r,a,s=[],o=-1,l=0,c=t.length;for(n instanceof Date||(n=new Date(+n));++o<c;)37===t.charCodeAt(o)&&(s.push(t.slice(l,o)),null!=(r=ke[i=t.charAt(++o)])?i=t.charAt(++o):r=\"e\"===i?\" \":\"0\",(a=e[i])&&(i=a(n,r)),s.push(i),l=o+1);return s.push(t.slice(l,o)),s.join(\"\")}}function V(t,e){return function(n){var i,r,a=Fe(1900,void 0,1);if(W(a,t,n+=\"\",0)!=n.length)return null;if(\"Q\"in a)return new Date(a.Q);if(\"s\"in a)return new Date(1e3*a.s+(\"L\"in a?a.L:0));if(e&&!(\"Z\"in a)&&(a.Z=0),\"p\"in a&&(a.H=a.H%12+12*a.p),void 0===a.m&&(a.m=\"q\"in a?a.q:0),\"V\"in a){if(a.V<1||a.V>53)return null;\"w\"in a||(a.w=1),\"Z\"in a?(r=(i=Ue(Fe(a.y,0,1))).getUTCDay(),i=r>4||0===r?De.ceil(i):De(i),i=Ce.offset(i,7*(a.V-1)),a.y=i.getUTCFullYear(),a.m=i.getUTCMonth(),a.d=i.getUTCDate()+(a.w+6)%7):(r=(i=ze(Fe(a.y,0,1))).getDay(),i=r>4||0===r?Se.ceil(i):Se(i),i=Me.offset(i,7*(a.V-1)),a.y=i.getFullYear(),a.m=i.getMonth(),a.d=i.getDate()+(a.w+6)%7)}else(\"W\"in a||\"U\"in a)&&(\"w\"in a||(a.w=\"u\"in a?a.u%7:\"W\"in a?1:0),r=\"Z\"in a?Ue(Fe(a.y,0,1)).getUTCDay():ze(Fe(a.y,0,1)).getDay(),a.m=0,a.d=\"W\"in a?(a.w+6)%7+7*a.W-(r+5)%7:a.w+7*a.U-(r+6)%7);return\"Z\"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,Ue(a)):ze(a)}}function W(t,e,n,i){for(var r,a,s=0,o=e.length,l=n.length;s<o;){if(i>=l)return-1;if(37===(r=e.charCodeAt(s++))){if(r=e.charAt(s++),!(a=N[r in ke?e.charAt(s++):r])||(i=a(t,n,i))<0)return-1}else if(r!=n.charCodeAt(i++))return-1}return i}return x.x=G(n,x),x.X=G(i,x),x.c=G(e,x),E.x=G(n,E),E.X=G(i,E),E.c=G(e,E),{format:function(t){var e=G(t+=\"\",x);return e.toString=function(){return t},e},parse:function(t){var e=V(t+=\"\",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=G(t+=\"\",E);return e.toString=function(){return t},e},utcParse:function(t){var e=V(t+=\"\",!0);return e.toString=function(){return t},e}}})(t),He=Be.format,Be})({dateTime:\"%x, %X\",date:\"%-m/%-d/%Y\",time:\"%-I:%M:%S %p\",periods:[\"AM\",\"PM\"],days:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],shortDays:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],months:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],shortMonths:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]});var si=1e3,oi=6e4,li=36e5,ci=864e5,hi=2592e6,ui=31536e6;function di(t){return new Date(t)}function pi(t){return t instanceof Date?+t:+new Date(+t)}function fi(t,e,i,r,a,s,o,l,h){var u=Zt(Gt,Gt),d=u.invert,p=u.domain,f=h(\".%L\"),m=h(\":%S\"),g=h(\"%I:%M\"),v=h(\"%I %p\"),y=h(\"%a %d\"),x=h(\"%b %d\"),_=h(\"%B\"),M=h(\"%Y\"),w=[[o,1,si],[o,5,5e3],[o,15,15e3],[o,30,3e4],[s,1,oi],[s,5,3e5],[s,15,9e5],[s,30,18e5],[a,1,li],[a,3,108e5],[a,6,216e5],[a,12,432e5],[r,1,ci],[r,2,1728e5],[i,1,6048e5],[e,1,hi],[e,3,7776e6],[t,1,ui]];function b(n){return(o(n)<n?f:s(n)<n?m:a(n)<n?g:r(n)<n?v:e(n)<n?i(n)<n?y:x:t(n)<n?_:M)(n)}function S(e,i,r,a){if(null==e&&(e=10),\"number\"==typeof e){var s=Math.abs(r-i)/e,o=n((function(t){return t[2]})).right(w,s);o===w.length?(a=c(i/ui,r/ui,e),e=t):o?(a=(o=w[s/w[o-1][2]<w[o][2]/s?o-1:o])[1],e=o[0]):(a=Math.max(c(i,r,e),1),e=l)}return null==a?e:e.every(a)}return u.invert=function(t){return new Date(d(t))},u.domain=function(t){return arguments.length?p(Ft.call(t,pi)):p().map(di)},u.ticks=function(t,e){var n,i=p(),r=i[0],a=i[i.length-1],s=a<r;return s&&(n=r,r=a,a=n),n=(n=S(t,r,a,e))?n.range(r,a+1):[],s?n.reverse():n},u.tickFormat=function(t,e){return null==e?b:h(e)},u.nice=function(t,e){var n=p();return(t=S(t,n[0],n[n.length-1],e))?p($t(n,t)):u},u.copy=function(){return Xt(u,fi(t,e,i,r,a,s,o,l,h))},u}function mi(){return Ot.apply(fi(Le,Ee,be,Me,_e,xe,ye,de,He).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}const gi=Rt(\".2~e\"),vi=Rt(\".4~r\"),yi=Rt(\",~\");function xi(t){if(0===t)return\"0\";const e=Math.abs(t);return e>=1e4||e<.001?gi(t):vi(t)}const _i={formatTick:xi,formatShort:xi,formatReadable(t){const e=Math.abs(t);return e>=1e4||e<.001?gi(t):yi(t)},formatLong:yi};Rt(\"0.3~s\"),Rt(\",.3~f\"),Rt(\".4~\");const Mi=mi().tickFormat();let wi;const bi={formatTick:t=>Mi(new Date(t)),formatShort:t=>new Date(t).toLocaleString(wi,{year:\"numeric\",month:\"short\",day:\"numeric\",hour:\"numeric\",minute:\"numeric\",second:\"numeric\"}),formatReadable:t=>new Date(t).toLocaleString(wi,{year:\"numeric\",month:\"short\",day:\"numeric\",hour:\"numeric\",minute:\"numeric\",second:\"numeric\",timeZoneName:\"short\"}),formatLong:t=>new Date(t).toLocaleString(wi,{year:\"numeric\",month:\"long\",day:\"numeric\",hour:\"numeric\",minute:\"numeric\",second:\"numeric\",timeZoneName:\"short\",fractionalSecondDigits:3})};function Si(e){switch(e){case t.LINEAR:return new Ti;case t.LOG10:return new Ei;case t.TIME:return new Ai;default:throw new RangeError(`ScaleType ${e} not supported.`)}}class Ti{constructor(){this.defaultFormatter=_i}transform(t,e,n){const[i,r]=t,a=r-i,[s,o]=e;return 0===a?s:(o-s)/a*(n-i)+s}forward(t,e,n){return this.transform(t,e,n)}reverse(t,e,n){return this.transform(e,t,n)}niceDomain(t){let[e,n]=t;if(n<e)throw new Error(\"Unexpected input: min is larger than max\");if(n===e)return 0===e?[-1,1]:e<0?[2*e,0]:[0,2*e];const i=Kt(),r=.05*(n-e+Number.EPSILON),[a,s]=i.domain([e-r,n+r]).nice().domain();return[a,s]}ticks(t,e){return Kt().domain(t).ticks(e)}isSafeNumber(t){return Number.isFinite(t)}}class Ei{constructor(){this.defaultFormatter=_i}transform(t){return Math.log10(t>0?t:Number.MIN_VALUE)}untransform(t){return Math.exp(t/Math.LOG10E)}forward(t,e,n){if(n<=0)return e[0];const[i,r]=t,[a,s]=e,o=this.transform(i),l=this.transform(r)-o,c=s-a;return n=this.transform(n),c/(l+Number.EPSILON)*(n-o)+a}reverse(t,e,n){const[i,r]=t,[a,s]=e,o=this.transform(i),l=this.transform(r);return this.untransform((l-o)/(s-a+Number.EPSILON)*(n-a)+o)}niceDomain(t){const[e,n]=t;if(e>n)throw new Error(\"Unexpected input: min is larger than max\");const i=Math.max(e,Number.MIN_VALUE),r=Math.max(n,Number.MIN_VALUE);return n<=0?[Number.MIN_VALUE,1]:[Math.max(Number.MIN_VALUE,.5*i),2*r]}ticks(t,e){const n=t[0]<=0?Number.MIN_VALUE:t[0],i=t[1]<=0?Number.MIN_VALUE:t[1],r=oe().domain([n,i]).ticks(e);return r.length?r:t}isSafeNumber(t){return Number.isFinite(t)&&t>0}}class Ai{constructor(){this.scale=mi(),this.defaultFormatter=bi}forward(t,e,n){return this.scale.domain(t).range(e)(n)}reverse(t,e,n){return this.scale.domain(t).range(e).invert(n).getTime()}niceDomain(t){const[e,n]=this.scale.domain(t).nice().domain();return[e.getTime(),n.getTime()]}ticks(t,e){return this.scale.domain(t).ticks(e).map((t=>t.getTime()))}isSafeNumber(t){return Number.isFinite(t)}}if(self.hasOwnProperty(\"WebGL2RenderingContext\")&&self.hasOwnProperty(\"document\")){const t=document.createElement(\"canvas\");t.addEventListener(\"webglcontextcreationerror\",(()=>{})),t.getContext(\"webgl2\")}function Li(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}class Ci{constructor(){this.xScale=Si(t.LINEAR),this.yScale=Si(t.LINEAR),this.domContainerRect={x:0,width:1,y:0,height:1},this.lastUpdated=0,this.currentViewBoxRect={x:0,width:1,y:0,height:1}}getUpdateIdentifier(){return this.lastUpdated}updateIdentifier(){this.lastUpdated++}isYAxisPointedDown(){return!0}setXScale(t){this.xScale=t,this.updateIdentifier()}setYScale(t){this.yScale=t,this.updateIdentifier()}getCurrentViewBoxRect(){return this.currentViewBoxRect}setViewBoxRect(t){this.currentViewBoxRect=t,this.updateIdentifier()}setDomContainerRect(t){this.domContainerRect=t,this.updateIdentifier()}transformDataToUiCoord(t,e){const n=t,i=(function r(t){return{x:[t.x,t.x+t.width],y:[t.y,t.y+t.height]}})(this.currentViewBoxRect);return[this.xScale.forward(i.x,[n.x,n.x+n.width],e[0]),this.yScale.forward(i.y,this.isYAxisPointedDown()?[n.y+n.height,n.y]:[n.y,n.y+n.height],e[1])]}}var Ri;function Pi(t,e,n,i){const{color:r,visible:a,opacity:s}=i;let o=t;return o||a?(o=null!=o?o:e(),o=n(o),o.style.display=a?\"\":\"none\",o.style.stroke=r,o.style.opacity=String(null!=s?s:1),o):null}!(function(t){t[t.SVG=0]=\"SVG\",t[t.WEBGL=1]=\"WEBGL\"})(Ri||(Ri={}));class Di{constructor(t){this.svg=t}flush(){}onResize(t){}destroyObject(t){this.svg.removeChild(t.dom)}setUseDarkMode(t){}createPathDString(t){if(!t.length)return\"\";const e=new Array(t.length/2);e[0]=`M${t[0]},${t[1]}`;for(let n=1;n<t.length/2;n++)e[n]=`L${t[2*n]},${t[2*n+1]}`;return e.join(\"\")}createOrUpdateLineObject(t,e,n){const i=Pi(null==t?void 0:t.dom,(()=>{const t=document.createElementNS(\"http://www.w3.org/2000/svg\",\"path\");t.style.fill=\"none\";const n=this.createPathDString(e);return t.setAttribute(\"d\",n),this.svg.appendChild(t),t}),(n=>{if(!(null==t?void 0:t.data)||!Li(e,null==t?void 0:t.data)){const t=this.createPathDString(e);n.setAttribute(\"d\",t)}return n}),n);return null===i?null:(i.style.strokeWidth=String(n.width),{dom:i,data:e})}createOrUpdateTriangleObject(t,e,n){const{size:i,color:r}=n,a=i*Math.sqrt(3)/2,s=new Float32Array([e.x-i/2,e.y+a/3,e.x+i/2,e.y+a/3,e.x,e.y-2*a/3]),o=Pi(null==t?void 0:t.dom,(()=>{const t=document.createElementNS(\"http://www.w3.org/2000/svg\",\"path\");t.classList.add(\"triangle\"),t.style.fill=\"none\";const e=this.createPathDString(s);return t.setAttribute(\"d\",e+\"Z\"),this.svg.appendChild(t),t}),(t=>{const e=this.createPathDString(s);return t.setAttribute(\"d\",e+\"Z\"),t}),n);return null===o?null:(o.style.fill=r,{dom:o,data:s})}createOrUpdateCircleObject(t,e,n){const{color:i,radius:r}=n,a=Pi(null==t?void 0:t.dom,(()=>{const t=document.createElementNS(\"http://www.w3.org/2000/svg\",\"circle\");return t.style.fill=i,t.setAttribute(\"cx\",String(e.x)),t.setAttribute(\"cy\",String(e.y)),t.setAttribute(\"r\",String(r)),this.svg.appendChild(t),t}),(t=>(t.style.fill=i,t.setAttribute(\"cx\",String(e.x)),t.setAttribute(\"cy\",String(e.y)),t.setAttribute(\"r\",String(r)),t)),n);return null===a?null:{dom:a,data:e}}createOrUpdateTrapezoidObject(t,e,n,i){if(e.y!==n.y)throw new RangeError(\"Input error: start.y != end.y.\");const{altitude:r,color:a}=i,s=2/Math.sqrt(3)*r,o=new Float32Array([e.x-s/2,e.y+r/2,e.x,e.y-r/2,n.x,n.y-r/2,n.x+s/2,n.y+r/2]),l=Pi(null==t?void 0:t.dom,(()=>{const t=document.createElementNS(\"http://www.w3.org/2000/svg\",\"path\");t.classList.add(\"trapezoid\"),t.style.fill=\"none\";const e=this.createPathDString(o);return t.setAttribute(\"d\",e+\"Z\"),this.svg.appendChild(t),t}),(t=>{const e=this.createPathDString(o);return t.setAttribute(\"d\",e+\"Z\"),t}),i);return null===l?null:(l.style.fill=a,{dom:l,data:o})}dispose(){}}\n/**\n     * @license\n     * Copyright 2010-2021 Three.js Authors\n     * SPDX-License-Identifier: MIT\n     */const Ni=100,Ii=301,Oi=302,zi=306,Ui=1e3,Fi=1001,Bi=1002,Hi=1003,ki=1006,Gi=1008,Vi=1009,Wi=1012,ji=1014,qi=1015,Xi=1016,Yi=1020,Zi=1022,Ji=1023,Qi=1026,Ki=1027,$i=2300,tr=2301,er=2302,nr=2400,ir=2401,rr=2402,ar=2500,sr=3e3,or=3001,lr=3007,cr=3002,hr=7680,ur=35044,dr=35048,pr=\"300 es\";class fr{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)}hasEventListener(t,e){if(void 0===this._listeners)return!1;const n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)}removeEventListener(t,e){if(void 0===this._listeners)return;const n=this._listeners[t];if(void 0!==n){const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}dispatchEvent(t){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const n=e.slice(0);for(let e=0,i=n.length;e<i;e++)n[e].call(this,t);t.target=null}}}const mr=[];for(let t=0;t<256;t++)mr[t]=(t<16?\"0\":\"\")+t.toString(16);const gr=Math.PI/180,vr=180/Math.PI;function yr(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(mr[255&t]+mr[t>>8&255]+mr[t>>16&255]+mr[t>>24&255]+\"-\"+mr[255&e]+mr[e>>8&255]+\"-\"+mr[e>>16&15|64]+mr[e>>24&255]+\"-\"+mr[63&n|128]+mr[n>>8&255]+\"-\"+mr[n>>16&255]+mr[n>>24&255]+mr[255&i]+mr[i>>8&255]+mr[i>>16&255]+mr[i>>24&255]).toUpperCase()}function xr(t,e,n){return Math.max(e,Math.min(n,t))}function _r(t,e,n){return(1-n)*t+n*e}function Mr(t){return 0==(t&t-1)&&0!==t}function wr(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}class br{constructor(t=0,e=0){this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error(\"index is out of range: \"+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error(\"index is out of range: \"+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t,e){return void 0!==e?(console.warn(\"THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t,e){return void 0!==e?(console.warn(\"THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn(\"THREE.Vector2: offset has been removed from .fromBufferAttribute().\"),this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),r=this.x-t.x,a=this.y-t.y;return this.x=r*n-a*i+t.x,this.y=r*i+a*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}}br.prototype.isVector2=!0;class Sr{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error(\"THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.\")}set(t,e,n,i,r,a,s,o,l){const c=this.elements;return c[0]=t,c[1]=i,c[2]=s,c[3]=e,c[4]=r,c[5]=o,c[6]=n,c[7]=a,c[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,a=n[0],s=n[3],o=n[6],l=n[1],c=n[4],h=n[7],u=n[2],d=n[5],p=n[8],f=i[0],m=i[3],g=i[6],v=i[1],y=i[4],x=i[7],_=i[2],M=i[5],w=i[8];return r[0]=a*f+s*v+o*_,r[3]=a*m+s*y+o*M,r[6]=a*g+s*x+o*w,r[1]=l*f+c*v+h*_,r[4]=l*m+c*y+h*M,r[7]=l*g+c*x+h*w,r[2]=u*f+d*v+p*_,r[5]=u*m+d*y+p*M,r[8]=u*g+d*x+p*w,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],s=t[5],o=t[6],l=t[7],c=t[8];return e*a*c-e*s*l-n*r*c+n*s*o+i*r*l-i*a*o}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],s=t[5],o=t[6],l=t[7],c=t[8],h=c*a-s*l,u=s*o-c*r,d=l*r-a*o,p=e*h+n*u+i*d;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const f=1/p;return t[0]=h*f,t[1]=(i*l-c*n)*f,t[2]=(s*n-i*a)*f,t[3]=u*f,t[4]=(c*e-i*o)*f,t[5]=(i*r-s*e)*f,t[6]=d*f,t[7]=(n*o-l*e)*f,t[8]=(a*e-n*r)*f,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,r,a,s){const o=Math.cos(r),l=Math.sin(r);return this.set(n*o,n*l,-n*(o*a+l*s)+a+t,-i*l,i*o,-i*(-l*a+o*s)+s+e,0,0,1),this}scale(t,e){const n=this.elements;return n[0]*=t,n[3]*=t,n[6]*=t,n[1]*=e,n[4]*=e,n[7]*=e,this}rotate(t){const e=Math.cos(t),n=Math.sin(t),i=this.elements,r=i[0],a=i[3],s=i[6],o=i[1],l=i[4],c=i[7];return i[0]=e*r+n*o,i[3]=e*a+n*l,i[6]=e*s+n*c,i[1]=-n*r+e*o,i[4]=-n*a+e*l,i[7]=-n*s+e*c,this}translate(t,e){const n=this.elements;return n[0]+=t*n[2],n[3]+=t*n[5],n[6]+=t*n[8],n[1]+=e*n[2],n[4]+=e*n[5],n[7]+=e*n[8],this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<9;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}let Tr;Sr.prototype.isMatrix3=!0;class Er{static getDataURL(t){if(/^data:/i.test(t.src))return t.src;if(\"undefined\"==typeof HTMLCanvasElement)return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{void 0===Tr&&(Tr=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\")),Tr.width=t.width,Tr.height=t.height;const n=Tr.getContext(\"2d\");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=Tr}return e.width>2048||e.height>2048?(console.warn(\"THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons\",t),e.toDataURL(\"image/jpeg\",.6)):e.toDataURL(\"image/png\")}}let Ar=0;class Lr extends fr{constructor(t=Lr.DEFAULT_IMAGE,e=Lr.DEFAULT_MAPPING,n=1001,i=1001,r=1006,a=1008,s=1023,o=1009,l=1,c=3e3){super(),Object.defineProperty(this,\"id\",{value:Ar++}),this.uuid=yr(),this.name=\"\",this.image=t,this.mipmaps=[],this.mapping=e,this.wrapS=n,this.wrapT=i,this.magFilter=r,this.minFilter=a,this.anisotropy=l,this.format=s,this.internalFormat=null,this.type=o,this.offset=new br(0,0),this.repeat=new br(1,1),this.center=new br(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Sr,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=c,this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this}toJSON(t){const e=void 0===t||\"string\"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const n={metadata:{version:4.5,type:\"Texture\",generator:\"Texture.toJSON\"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){const i=this.image;if(void 0===i.uuid&&(i.uuid=yr()),!e&&void 0===t.images[i.uuid]){let e;if(Array.isArray(i)){e=[];for(let t=0,n=i.length;t<n;t++)e.push(Cr(i[t].isDataTexture?i[t].image:i[t]))}else e=Cr(i);t.images[i.uuid]={uuid:i.uuid,url:e}}n.image=i.uuid}return e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:\"dispose\"})}transformUv(t){if(300!==this.mapping)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case Ui:t.x=t.x-Math.floor(t.x);break;case Fi:t.x=t.x<0?0:1;break;case Bi:t.x=1===Math.abs(Math.floor(t.x)%2)?Math.ceil(t.x)-t.x:t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case Ui:t.y=t.y-Math.floor(t.y);break;case Fi:t.y=t.y<0?0:1;break;case Bi:t.y=1===Math.abs(Math.floor(t.y)%2)?Math.ceil(t.y)-t.y:t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&this.version++}}function Cr(t){return\"undefined\"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||\"undefined\"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||\"undefined\"!=typeof ImageBitmap&&t instanceof ImageBitmap?Er.getDataURL(t):t.data?{data:Array.prototype.slice.call(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn(\"THREE.Texture: Unable to serialize Texture.\"),{})}Lr.DEFAULT_IMAGE=void 0,Lr.DEFAULT_MAPPING=300,Lr.prototype.isTexture=!0;class Rr{constructor(t=0,e=0,n=0,i=1){this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error(\"index is out of range: \"+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error(\"index is out of range: \"+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t,e){return void 0!==e?(console.warn(\"THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t,e){return void 0!==e?(console.warn(\"THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=this.w,a=t.elements;return this.x=a[0]*e+a[4]*n+a[8]*i+a[12]*r,this.y=a[1]*e+a[5]*n+a[9]*i+a[13]*r,this.z=a[2]*e+a[6]*n+a[10]*i+a[14]*r,this.w=a[3]*e+a[7]*n+a[11]*i+a[15]*r,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,r;const a=.01,s=.1,o=t.elements,l=o[0],c=o[4],h=o[8],u=o[1],d=o[5],p=o[9],f=o[2],m=o[6],g=o[10];if(Math.abs(c-u)<a&&Math.abs(h-f)<a&&Math.abs(p-m)<a){if(Math.abs(c+u)<s&&Math.abs(h+f)<s&&Math.abs(p+m)<s&&Math.abs(l+d+g-3)<s)return this.set(1,0,0,0),this;e=Math.PI;const t=(l+1)/2,o=(d+1)/2,v=(g+1)/2,y=(c+u)/4,x=(h+f)/4,_=(p+m)/4;return t>o&&t>v?t<a?(n=0,i=.707106781,r=.707106781):(n=Math.sqrt(t),i=y/n,r=x/n):o>v?o<a?(n=.707106781,i=0,r=.707106781):(i=Math.sqrt(o),n=y/i,r=_/i):v<a?(n=.707106781,i=.707106781,r=0):(r=Math.sqrt(v),n=x/r,i=_/r),this.set(n,i,r,e),this}let v=Math.sqrt((m-p)*(m-p)+(h-f)*(h-f)+(u-c)*(u-c));return Math.abs(v)<.001&&(v=1),this.x=(m-p)/v,this.y=(h-f)/v,this.z=(u-c)/v,this.w=Math.acos((l+d+g-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn(\"THREE.Vector4: offset has been removed from .fromBufferAttribute().\"),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}}Rr.prototype.isVector4=!0;class Pr extends fr{constructor(t,e,n={}){super(),this.width=t,this.height=e,this.depth=1,this.scissor=new Rr(0,0,t,e),this.scissorTest=!1,this.viewport=new Rr(0,0,t,e),this.texture=new Lr(void 0,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.isRenderTargetTexture=!0,this.texture.image={width:t,height:e,depth:1},this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:ki,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0!==n.stencilBuffer&&n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null}setTexture(t){t.image={width:this.width,height:this.height,depth:this.depth},this.texture=t}setSize(t,e,n=1){this.width===t&&this.height===e&&this.depth===n||(this.width=t,this.height=e,this.depth=n,this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.image={...this.texture.image},this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this}dispose(){this.dispatchEvent({type:\"dispose\"})}}Pr.prototype.isWebGLRenderTarget=!0;(class extends Pr{constructor(t,e,n){super(t,e);const i=this.texture;this.texture=[];for(let t=0;t<n;t++)this.texture[t]=i.clone()}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let i=0,r=this.texture.length;i<r;i++)this.texture[i].image.width=t,this.texture[i].image.height=e,this.texture[i].image.depth=n;this.dispose()}return this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e),this}copy(t){this.dispose(),this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this.texture.length=0;for(let e=0,n=t.texture.length;e<n;e++)this.texture[e]=t.texture[e].clone();return this}}).prototype.isWebGLMultipleRenderTargets=!0;class Dr extends Pr{constructor(t,e,n){super(t,e,n),this.samples=4}copy(t){return super.copy.call(this,t),this.samples=t.samples,this}}Dr.prototype.isWebGLMultisampleRenderTarget=!0;class Nr{constructor(t=0,e=0,n=0,i=1){this._x=t,this._y=e,this._z=n,this._w=i}static slerp(t,e,n,i){return console.warn(\"THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.\"),n.slerpQuaternions(t,e,i)}static slerpFlat(t,e,n,i,r,a,s){let o=n[i+0],l=n[i+1],c=n[i+2],h=n[i+3];const u=r[a+0],d=r[a+1],p=r[a+2],f=r[a+3];if(0===s)return t[e+0]=o,t[e+1]=l,t[e+2]=c,void(t[e+3]=h);if(1===s)return t[e+0]=u,t[e+1]=d,t[e+2]=p,void(t[e+3]=f);if(h!==f||o!==u||l!==d||c!==p){let t=1-s;const e=o*u+l*d+c*p+h*f,n=e>=0?1:-1,i=1-e*e;if(i>Number.EPSILON){const r=Math.sqrt(i),a=Math.atan2(r,e*n);t=Math.sin(t*a)/r,s=Math.sin(s*a)/r}const r=s*n;if(o=o*t+u*r,l=l*t+d*r,c=c*t+p*r,h=h*t+f*r,t===1-s){const t=1/Math.sqrt(o*o+l*l+c*c+h*h);o*=t,l*=t,c*=t,h*=t}}t[e]=o,t[e+1]=l,t[e+2]=c,t[e+3]=h}static multiplyQuaternionsFlat(t,e,n,i,r,a){const s=n[i],o=n[i+1],l=n[i+2],c=n[i+3],h=r[a],u=r[a+1],d=r[a+2],p=r[a+3];return t[e]=s*p+c*h+o*d-l*u,t[e+1]=o*p+c*u+l*h-s*d,t[e+2]=l*p+c*d+s*u-o*h,t[e+3]=c*p-s*h-o*u-l*d,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){if(!t||!t.isEuler)throw new Error(\"THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.\");const n=t._x,i=t._y,r=t._z,a=t._order,s=Math.cos,o=Math.sin,l=s(n/2),c=s(i/2),h=s(r/2),u=o(n/2),d=o(i/2),p=o(r/2);switch(a){case\"XYZ\":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case\"YXZ\":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case\"ZXY\":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case\"ZYX\":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case\"YZX\":this._x=u*c*h+l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h-u*d*p;break;case\"XZY\":this._x=u*c*h-l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h+u*d*p;break;default:console.warn(\"THREE.Quaternion: .setFromEuler() encountered an unknown order: \"+a)}return!1!==e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],r=e[8],a=e[1],s=e[5],o=e[9],l=e[2],c=e[6],h=e[10],u=n+s+h;if(u>0){const t=.5/Math.sqrt(u+1);this._w=.25/t,this._x=(c-o)*t,this._y=(r-l)*t,this._z=(a-i)*t}else if(n>s&&n>h){const t=2*Math.sqrt(1+n-s-h);this._w=(c-o)/t,this._x=.25*t,this._y=(i+a)/t,this._z=(r+l)/t}else if(s>h){const t=2*Math.sqrt(1+s-n-h);this._w=(r-l)/t,this._x=(i+a)/t,this._y=.25*t,this._z=(o+c)/t}else{const t=2*Math.sqrt(1+h-n-s);this._w=(a-i)/t,this._x=(r+l)/t,this._y=(o+c)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(xr(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(0===n)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t,e){return void 0!==e?(console.warn(\"THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.\"),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,r=t._z,a=t._w,s=e._x,o=e._y,l=e._z,c=e._w;return this._x=n*c+a*s+i*l-r*o,this._y=i*c+a*o+r*s-n*l,this._z=r*c+a*l+n*o-i*s,this._w=a*c-n*s-i*o-r*l,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const n=this._x,i=this._y,r=this._z,a=this._w;let s=a*t._w+n*t._x+i*t._y+r*t._z;if(s<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,s=-s):this.copy(t),s>=1)return this._w=a,this._x=n,this._y=i,this._z=r,this;const o=1-s*s;if(o<=Number.EPSILON){const t=1-e;return this._w=t*a+e*this._w,this._x=t*n+e*this._x,this._y=t*i+e*this._y,this._z=t*r+e*this._z,this.normalize(),this._onChangeCallback(),this}const l=Math.sqrt(o),c=Math.atan2(l,s),h=Math.sin((1-e)*c)/l,u=Math.sin(e*c)/l;return this._w=a*h+this._w*u,this._x=n*h+this._x*u,this._y=i*h+this._y*u,this._z=r*h+this._z*u,this._onChangeCallback(),this}slerpQuaternions(t,e,n){this.copy(t).slerp(e,n)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}Nr.prototype.isQuaternion=!0;class Ir{constructor(t=0,e=0,n=0){this.x=t,this.y=e,this.z=n}set(t,e,n){return void 0===n&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error(\"index is out of range: \"+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error(\"index is out of range: \"+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t,e){return void 0!==e?(console.warn(\"THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t,e){return void 0!==e?(console.warn(\"THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t,e){return void 0!==e?(console.warn(\"THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.\"),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return t&&t.isEuler||console.error(\"THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.\"),this.applyQuaternion(zr.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(zr.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6]*i,this.y=r[1]*e+r[4]*n+r[7]*i,this.z=r[2]*e+r[5]*n+r[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=t.elements,a=1/(r[3]*e+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*e+r[4]*n+r[8]*i+r[12])*a,this.y=(r[1]*e+r[5]*n+r[9]*i+r[13])*a,this.z=(r[2]*e+r[6]*n+r[10]*i+r[14])*a,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,r=t.x,a=t.y,s=t.z,o=t.w,l=o*e+a*i-s*n,c=o*n+s*e-r*i,h=o*i+r*n-a*e,u=-r*e-a*n-s*i;return this.x=l*o+u*-r+c*-s-h*-a,this.y=c*o+u*-a+h*-r-l*-s,this.z=h*o+u*-s+l*-a-c*-r,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[4]*n+r[8]*i,this.y=r[1]*e+r[5]*n+r[9]*i,this.z=r[2]*e+r[6]*n+r[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t,e){return void 0!==e?(console.warn(\"THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.\"),this.crossVectors(t,e)):this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,r=t.z,a=e.x,s=e.y,o=e.z;return this.x=i*o-r*s,this.y=r*a-n*o,this.z=n*s-i*a,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return Or.copy(this).projectOnVector(t),this.sub(Or)}reflect(t){return this.sub(Or.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(xr(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn(\"THREE.Vector3: offset has been removed from .fromBufferAttribute().\"),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}}Ir.prototype.isVector3=!0;const Or=new Ir,zr=new Nr;class Ur{constructor(t=new Ir(1/0,1/0,1/0),e=new Ir(-1/0,-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){let e=1/0,n=1/0,i=1/0,r=-1/0,a=-1/0,s=-1/0;for(let o=0,l=t.length;o<l;o+=3){const l=t[o],c=t[o+1],h=t[o+2];l<e&&(e=l),c<n&&(n=c),h<i&&(i=h),l>r&&(r=l),c>a&&(a=c),h>s&&(s=h)}return this.min.set(e,n,i),this.max.set(r,a,s),this}setFromBufferAttribute(t){let e=1/0,n=1/0,i=1/0,r=-1/0,a=-1/0,s=-1/0;for(let o=0,l=t.count;o<l;o++){const l=t.getX(o),c=t.getY(o),h=t.getZ(o);l<e&&(e=l),c<n&&(n=c),h<i&&(i=h),l>r&&(r=l),c>a&&(a=c),h>s&&(s=h)}return this.min.set(e,n,i),this.max.set(r,a,s),this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=Br.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t){return this.makeEmpty(),this.expandByObject(t)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t){t.updateWorldMatrix(!1,!1);const e=t.geometry;void 0!==e&&(null===e.boundingBox&&e.computeBoundingBox(),Hr.copy(e.boundingBox),Hr.applyMatrix4(t.matrixWorld),this.union(Hr));const n=t.children;for(let t=0,e=n.length;t<e;t++)this.expandByObject(n[t]);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,Br),Br.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Xr),Yr.subVectors(this.max,Xr),kr.subVectors(t.a,Xr),Gr.subVectors(t.b,Xr),Vr.subVectors(t.c,Xr),Wr.subVectors(Gr,kr),jr.subVectors(Vr,Gr),qr.subVectors(kr,Vr);let e=[0,-Wr.z,Wr.y,0,-jr.z,jr.y,0,-qr.z,qr.y,Wr.z,0,-Wr.x,jr.z,0,-jr.x,qr.z,0,-qr.x,-Wr.y,Wr.x,0,-jr.y,jr.x,0,-qr.y,qr.x,0];return!!Qr(e,kr,Gr,Vr,Yr)&&(e=[1,0,0,0,1,0,0,0,1],!!Qr(e,kr,Gr,Vr,Yr)&&(Zr.crossVectors(Wr,jr),e=[Zr.x,Zr.y,Zr.z],Qr(e,kr,Gr,Vr,Yr)))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return Br.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){return this.getCenter(t.center),t.radius=.5*this.getSize(Br).length(),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(Fr[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Fr[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Fr[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Fr[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Fr[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Fr[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Fr[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Fr[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Fr)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}Ur.prototype.isBox3=!0;const Fr=[new Ir,new Ir,new Ir,new Ir,new Ir,new Ir,new Ir,new Ir],Br=new Ir,Hr=new Ur,kr=new Ir,Gr=new Ir,Vr=new Ir,Wr=new Ir,jr=new Ir,qr=new Ir,Xr=new Ir,Yr=new Ir,Zr=new Ir,Jr=new Ir;function Qr(t,e,n,i,r){for(let a=0,s=t.length-3;a<=s;a+=3){Jr.fromArray(t,a);const s=r.x*Math.abs(Jr.x)+r.y*Math.abs(Jr.y)+r.z*Math.abs(Jr.z),o=e.dot(Jr),l=n.dot(Jr),c=i.dot(Jr);if(Math.max(-Math.max(o,l,c),Math.min(o,l,c))>s)return!1}return!0}const Kr=new Ur,$r=new Ir,ta=new Ir,ea=new Ir;class na{constructor(t=new Ir,e=-1){this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;void 0!==e?n.copy(e):Kr.setFromPoints(t).getCenter(n);let i=0;for(let e=0,r=t.length;e<r;e++)i=Math.max(i,n.distanceToSquared(t[e]));return this.radius=Math.sqrt(i),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){ea.subVectors(t,this.center);const e=ea.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),n=.5*(t-this.radius);this.center.add(ea.multiplyScalar(n/t)),this.radius+=n}return this}union(t){return ta.subVectors(t.center,this.center).normalize().multiplyScalar(t.radius),this.expandByPoint($r.copy(t.center).add(ta)),this.expandByPoint($r.copy(t.center).sub(ta)),this}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const ia=new Ir,ra=new Ir,aa=new Ir,sa=new Ir,oa=new Ir,la=new Ir,ca=new Ir;class ha{constructor(t=new Ir,e=new Ir(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,ia)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=ia.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(ia.copy(this.direction).multiplyScalar(e).add(this.origin),ia.distanceToSquared(t))}distanceSqToSegment(t,e,n,i){ra.copy(t).add(e).multiplyScalar(.5),aa.copy(e).sub(t).normalize(),sa.copy(this.origin).sub(ra);const r=.5*t.distanceTo(e),a=-this.direction.dot(aa),s=sa.dot(this.direction),o=-sa.dot(aa),l=sa.lengthSq(),c=Math.abs(1-a*a);let h,u,d,p;if(c>0)if(h=a*o-s,u=a*s-o,p=r*c,h>=0)if(u>=-p)if(u<=p){const t=1/c;h*=t,u*=t,d=h*(h+a*u+2*s)+u*(a*h+u+2*o)+l}else u=r,h=Math.max(0,-(a*u+s)),d=-h*h+u*(u+2*o)+l;else u=-r,h=Math.max(0,-(a*u+s)),d=-h*h+u*(u+2*o)+l;else u<=-p?(h=Math.max(0,-(-a*r+s)),u=h>0?-r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l):u<=p?(h=0,u=Math.min(Math.max(-r,-o),r),d=u*(u+2*o)+l):(h=Math.max(0,-(a*r+s)),u=h>0?r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l);else u=a>0?-r:r,h=Math.max(0,-(a*u+s)),d=-h*h+u*(u+2*o)+l;return n&&n.copy(this.direction).multiplyScalar(h).add(this.origin),i&&i.copy(aa).multiplyScalar(u).add(ra),d}intersectSphere(t,e){ia.subVectors(t.center,this.origin);const n=ia.dot(this.direction),i=ia.dot(ia)-n*n,r=t.radius*t.radius;if(i>r)return null;const a=Math.sqrt(r-i),s=n-a,o=n+a;return s<0&&o<0?null:this.at(s<0?o:s,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return null===n?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);if(0===e)return!0;return t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,i,r,a,s,o;const l=1/this.direction.x,c=1/this.direction.y,h=1/this.direction.z,u=this.origin;return l>=0?(n=(t.min.x-u.x)*l,i=(t.max.x-u.x)*l):(n=(t.max.x-u.x)*l,i=(t.min.x-u.x)*l),c>=0?(r=(t.min.y-u.y)*c,a=(t.max.y-u.y)*c):(r=(t.max.y-u.y)*c,a=(t.min.y-u.y)*c),n>a||r>i?null:((r>n||n!=n)&&(n=r),(a<i||i!=i)&&(i=a),h>=0?(s=(t.min.z-u.z)*h,o=(t.max.z-u.z)*h):(s=(t.max.z-u.z)*h,o=(t.min.z-u.z)*h),n>o||s>i?null:((s>n||n!=n)&&(n=s),(o<i||i!=i)&&(i=o),i<0?null:this.at(n>=0?n:i,e)))}intersectsBox(t){return null!==this.intersectBox(t,ia)}intersectTriangle(t,e,n,i,r){oa.subVectors(e,t),la.subVectors(n,t),ca.crossVectors(oa,la);let a,s=this.direction.dot(ca);if(s>0){if(i)return null;a=1}else{if(!(s<0))return null;a=-1,s=-s}sa.subVectors(this.origin,t);const o=a*this.direction.dot(la.crossVectors(sa,la));if(o<0)return null;const l=a*this.direction.dot(oa.cross(sa));if(l<0)return null;if(o+l>s)return null;const c=-a*sa.dot(ca);return c<0?null:this.at(c/s,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class ua{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error(\"THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.\")}set(t,e,n,i,r,a,s,o,l,c,h,u,d,p,f,m){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=i,g[1]=r,g[5]=a,g[9]=s,g[13]=o,g[2]=l,g[6]=c,g[10]=h,g[14]=u,g[3]=d,g[7]=p,g[11]=f,g[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new ua).fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/da.setFromMatrixColumn(t,0).length(),r=1/da.setFromMatrixColumn(t,1).length(),a=1/da.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*r,e[5]=n[5]*r,e[6]=n[6]*r,e[7]=0,e[8]=n[8]*a,e[9]=n[9]*a,e[10]=n[10]*a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){t&&t.isEuler||console.error(\"THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.\");const e=this.elements,n=t.x,i=t.y,r=t.z,a=Math.cos(n),s=Math.sin(n),o=Math.cos(i),l=Math.sin(i),c=Math.cos(r),h=Math.sin(r);if(\"XYZ\"===t.order){const t=a*c,n=a*h,i=s*c,r=s*h;e[0]=o*c,e[4]=-o*h,e[8]=l,e[1]=n+i*l,e[5]=t-r*l,e[9]=-s*o,e[2]=r-t*l,e[6]=i+n*l,e[10]=a*o}else if(\"YXZ\"===t.order){const t=o*c,n=o*h,i=l*c,r=l*h;e[0]=t+r*s,e[4]=i*s-n,e[8]=a*l,e[1]=a*h,e[5]=a*c,e[9]=-s,e[2]=n*s-i,e[6]=r+t*s,e[10]=a*o}else if(\"ZXY\"===t.order){const t=o*c,n=o*h,i=l*c,r=l*h;e[0]=t-r*s,e[4]=-a*h,e[8]=i+n*s,e[1]=n+i*s,e[5]=a*c,e[9]=r-t*s,e[2]=-a*l,e[6]=s,e[10]=a*o}else if(\"ZYX\"===t.order){const t=a*c,n=a*h,i=s*c,r=s*h;e[0]=o*c,e[4]=i*l-n,e[8]=t*l+r,e[1]=o*h,e[5]=r*l+t,e[9]=n*l-i,e[2]=-l,e[6]=s*o,e[10]=a*o}else if(\"YZX\"===t.order){const t=a*o,n=a*l,i=s*o,r=s*l;e[0]=o*c,e[4]=r-t*h,e[8]=i*h+n,e[1]=h,e[5]=a*c,e[9]=-s*c,e[2]=-l*c,e[6]=n*h+i,e[10]=t-r*h}else if(\"XZY\"===t.order){const t=a*o,n=a*l,i=s*o,r=s*l;e[0]=o*c,e[4]=-h,e[8]=l*c,e[1]=t*h+r,e[5]=a*c,e[9]=n*h-i,e[2]=i*h-n,e[6]=s*c,e[10]=r*h+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(fa,t,ma)}lookAt(t,e,n){const i=this.elements;return ya.subVectors(t,e),0===ya.lengthSq()&&(ya.z=1),ya.normalize(),ga.crossVectors(n,ya),0===ga.lengthSq()&&(1===Math.abs(n.z)?ya.x+=1e-4:ya.z+=1e-4,ya.normalize(),ga.crossVectors(n,ya)),ga.normalize(),va.crossVectors(ya,ga),i[0]=ga.x,i[4]=va.x,i[8]=ya.x,i[1]=ga.y,i[5]=va.y,i[9]=ya.y,i[2]=ga.z,i[6]=va.z,i[10]=ya.z,this}multiply(t,e){return void 0!==e?(console.warn(\"THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.\"),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,a=n[0],s=n[4],o=n[8],l=n[12],c=n[1],h=n[5],u=n[9],d=n[13],p=n[2],f=n[6],m=n[10],g=n[14],v=n[3],y=n[7],x=n[11],_=n[15],M=i[0],w=i[4],b=i[8],S=i[12],T=i[1],E=i[5],A=i[9],L=i[13],C=i[2],R=i[6],P=i[10],D=i[14],N=i[3],I=i[7],O=i[11],z=i[15];return r[0]=a*M+s*T+o*C+l*N,r[4]=a*w+s*E+o*R+l*I,r[8]=a*b+s*A+o*P+l*O,r[12]=a*S+s*L+o*D+l*z,r[1]=c*M+h*T+u*C+d*N,r[5]=c*w+h*E+u*R+d*I,r[9]=c*b+h*A+u*P+d*O,r[13]=c*S+h*L+u*D+d*z,r[2]=p*M+f*T+m*C+g*N,r[6]=p*w+f*E+m*R+g*I,r[10]=p*b+f*A+m*P+g*O,r[14]=p*S+f*L+m*D+g*z,r[3]=v*M+y*T+x*C+_*N,r[7]=v*w+y*E+x*R+_*I,r[11]=v*b+y*A+x*P+_*O,r[15]=v*S+y*L+x*D+_*z,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],r=t[12],a=t[1],s=t[5],o=t[9],l=t[13],c=t[2],h=t[6],u=t[10],d=t[14];return t[3]*(+r*o*h-i*l*h-r*s*u+n*l*u+i*s*d-n*o*d)+t[7]*(+e*o*d-e*l*u+r*a*u-i*a*d+i*l*c-r*o*c)+t[11]*(+e*l*h-e*s*d-r*a*h+n*a*d+r*s*c-n*l*c)+t[15]*(-i*s*c-e*o*h+e*s*u+i*a*h-n*a*u+n*o*c)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],s=t[5],o=t[6],l=t[7],c=t[8],h=t[9],u=t[10],d=t[11],p=t[12],f=t[13],m=t[14],g=t[15],v=h*m*l-f*u*l+f*o*d-s*m*d-h*o*g+s*u*g,y=p*u*l-c*m*l-p*o*d+a*m*d+c*o*g-a*u*g,x=c*f*l-p*h*l+p*s*d-a*f*d-c*s*g+a*h*g,_=p*h*o-c*f*o-p*s*u+a*f*u+c*s*m-a*h*m,M=e*v+n*y+i*x+r*_;if(0===M)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const w=1/M;return t[0]=v*w,t[1]=(f*u*r-h*m*r-f*i*d+n*m*d+h*i*g-n*u*g)*w,t[2]=(s*m*r-f*o*r+f*i*l-n*m*l-s*i*g+n*o*g)*w,t[3]=(h*o*r-s*u*r-h*i*l+n*u*l+s*i*d-n*o*d)*w,t[4]=y*w,t[5]=(c*m*r-p*u*r+p*i*d-e*m*d-c*i*g+e*u*g)*w,t[6]=(p*o*r-a*m*r-p*i*l+e*m*l+a*i*g-e*o*g)*w,t[7]=(a*u*r-c*o*r+c*i*l-e*u*l-a*i*d+e*o*d)*w,t[8]=x*w,t[9]=(p*h*r-c*f*r-p*n*d+e*f*d+c*n*g-e*h*g)*w,t[10]=(a*f*r-p*s*r+p*n*l-e*f*l-a*n*g+e*s*g)*w,t[11]=(c*s*r-a*h*r-c*n*l+e*h*l+a*n*d-e*s*d)*w,t[12]=_*w,t[13]=(c*f*i-p*h*i+p*n*u-e*f*u-c*n*m+e*h*m)*w,t[14]=(p*s*i-a*f*i-p*n*o+e*f*o+a*n*m-e*s*m)*w,t[15]=(a*h*i-c*s*i+c*n*o-e*h*o-a*n*u+e*s*u)*w,this}scale(t){const e=this.elements,n=t.x,i=t.y,r=t.z;return e[0]*=n,e[4]*=i,e[8]*=r,e[1]*=n,e[5]*=i,e[9]*=r,e[2]*=n,e[6]*=i,e[10]*=r,e[3]*=n,e[7]*=i,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements;return Math.sqrt(Math.max(t[0]*t[0]+t[1]*t[1]+t[2]*t[2],t[4]*t[4]+t[5]*t[5]+t[6]*t[6],t[8]*t[8]+t[9]*t[9]+t[10]*t[10]))}makeTranslation(t,e,n){return this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),r=1-n,a=t.x,s=t.y,o=t.z,l=r*a,c=r*s;return this.set(l*a+n,l*s-i*o,l*o+i*s,0,l*s+i*o,c*s+n,c*o-i*a,0,l*o-i*s,c*o+i*a,r*o*o+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,r,a){return this.set(1,n,r,0,t,1,a,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,r=e._x,a=e._y,s=e._z,o=e._w,l=r+r,c=a+a,h=s+s,u=r*l,d=r*c,p=r*h,f=a*c,m=a*h,g=s*h,v=o*l,y=o*c,x=o*h,_=n.x,M=n.y,w=n.z;return i[0]=(1-(f+g))*_,i[1]=(d+x)*_,i[2]=(p-y)*_,i[3]=0,i[4]=(d-x)*M,i[5]=(1-(u+g))*M,i[6]=(m+v)*M,i[7]=0,i[8]=(p+y)*w,i[9]=(m-v)*w,i[10]=(1-(u+f))*w,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let r=da.set(i[0],i[1],i[2]).length();const a=da.set(i[4],i[5],i[6]).length(),s=da.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),t.x=i[12],t.y=i[13],t.z=i[14],pa.copy(this);const o=1/r,l=1/a,c=1/s;return pa.elements[0]*=o,pa.elements[1]*=o,pa.elements[2]*=o,pa.elements[4]*=l,pa.elements[5]*=l,pa.elements[6]*=l,pa.elements[8]*=c,pa.elements[9]*=c,pa.elements[10]*=c,e.setFromRotationMatrix(pa),n.x=r,n.y=a,n.z=s,this}makePerspective(t,e,n,i,r,a){void 0===a&&console.warn(\"THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.\");const s=this.elements,o=2*r/(n-i),l=(e+t)/(e-t),c=(n+i)/(n-i),h=-(a+r)/(a-r),u=-2*a*r/(a-r);return s[0]=2*r/(e-t),s[4]=0,s[8]=l,s[12]=0,s[1]=0,s[5]=o,s[9]=c,s[13]=0,s[2]=0,s[6]=0,s[10]=h,s[14]=u,s[3]=0,s[7]=0,s[11]=-1,s[15]=0,this}makeOrthographic(t,e,n,i,r,a){const s=this.elements,o=1/(e-t),l=1/(n-i),c=1/(a-r),h=(e+t)*o,u=(n+i)*l,d=(a+r)*c;return s[0]=2*o,s[4]=0,s[8]=0,s[12]=-h,s[1]=0,s[5]=2*l,s[9]=0,s[13]=-u,s[2]=0,s[6]=0,s[10]=-2*c,s[14]=-d,s[3]=0,s[7]=0,s[11]=0,s[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<16;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}ua.prototype.isMatrix4=!0;const da=new Ir,pa=new ua,fa=new Ir(0,0,0),ma=new Ir(1,1,1),ga=new Ir,va=new Ir,ya=new Ir,xa=new ua,_a=new Nr;class Ma{constructor(t=0,e=0,n=0,i=Ma.DefaultOrder){this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,r=i[0],a=i[4],s=i[8],o=i[1],l=i[5],c=i[9],h=i[2],u=i[6],d=i[10];switch(e){case\"XYZ\":this._y=Math.asin(xr(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(-c,d),this._z=Math.atan2(-a,r)):(this._x=Math.atan2(u,l),this._z=0);break;case\"YXZ\":this._x=Math.asin(-xr(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(s,d),this._z=Math.atan2(o,l)):(this._y=Math.atan2(-h,r),this._z=0);break;case\"ZXY\":this._x=Math.asin(xr(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(-h,d),this._z=Math.atan2(-a,l)):(this._y=0,this._z=Math.atan2(o,r));break;case\"ZYX\":this._y=Math.asin(-xr(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(u,d),this._z=Math.atan2(o,r)):(this._x=0,this._z=Math.atan2(-a,l));break;case\"YZX\":this._z=Math.asin(xr(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-c,l),this._y=Math.atan2(-h,r)):(this._x=0,this._y=Math.atan2(s,d));break;case\"XZY\":this._z=Math.asin(-xr(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(u,l),this._y=Math.atan2(s,r)):(this._x=Math.atan2(-c,d),this._y=0);break;default:console.warn(\"THREE.Euler: .setFromRotationMatrix() encountered an unknown order: \"+e)}return this._order=e,!0===n&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return xa.makeRotationFromQuaternion(t),this.setFromRotationMatrix(xa,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return _a.setFromEuler(this),this.setFromQuaternion(_a,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}toVector3(t){return t?t.set(this._x,this._y,this._z):new Ir(this._x,this._y,this._z)}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}Ma.prototype.isEuler=!0,Ma.DefaultOrder=\"XYZ\",Ma.RotationOrders=[\"XYZ\",\"YZX\",\"ZXY\",\"XZY\",\"YXZ\",\"ZYX\"];class wa{constructor(){this.mask=1}set(t){this.mask=1<<t|0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return 0!=(this.mask&t.mask)}}let ba=0;const Sa=new Ir,Ta=new Nr,Ea=new ua,Aa=new Ir,La=new Ir,Ca=new Ir,Ra=new Nr,Pa=new Ir(1,0,0),Da=new Ir(0,1,0),Na=new Ir(0,0,1),Ia={type:\"added\"},Oa={type:\"removed\"};class za extends fr{constructor(){super(),Object.defineProperty(this,\"id\",{value:ba++}),this.uuid=yr(),this.name=\"\",this.type=\"Object3D\",this.parent=null,this.children=[],this.up=za.DefaultUp.clone();const t=new Ir,e=new Ma,n=new Nr,i=new Ir(1,1,1);e._onChange((function r(){n.setFromEuler(e,!1)})),n._onChange((function a(){e.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new ua},normalMatrix:{value:new Sr}}),this.matrix=new ua,this.matrixWorld=new ua,this.matrixAutoUpdate=za.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new wa,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return Ta.setFromAxisAngle(t,e),this.quaternion.multiply(Ta),this}rotateOnWorldAxis(t,e){return Ta.setFromAxisAngle(t,e),this.quaternion.premultiply(Ta),this}rotateX(t){return this.rotateOnAxis(Pa,t)}rotateY(t){return this.rotateOnAxis(Da,t)}rotateZ(t){return this.rotateOnAxis(Na,t)}translateOnAxis(t,e){return Sa.copy(t).applyQuaternion(this.quaternion),this.position.add(Sa.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(Pa,t)}translateY(t){return this.translateOnAxis(Da,t)}translateZ(t){return this.translateOnAxis(Na,t)}localToWorld(t){return t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return t.applyMatrix4(Ea.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?Aa.copy(t):Aa.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),La.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Ea.lookAt(La,Aa,this.up):Ea.lookAt(Aa,La,this.up),this.quaternion.setFromRotationMatrix(Ea),i&&(Ea.extractRotation(i.matrixWorld),Ta.setFromRotationMatrix(Ea),this.quaternion.premultiply(Ta.invert()))}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error(\"THREE.Object3D.add: object can't be added as a child of itself.\",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(Ia)):console.error(\"THREE.Object3D.add: object not an instance of THREE.Object3D.\",t),this)}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return-1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(Oa)),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){for(let t=0;t<this.children.length;t++){const e=this.children[t];e.parent=null,e.dispatchEvent(Oa)}return this.children.length=0,this}attach(t){return this.updateWorldMatrix(!0,!1),Ea.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),Ea.multiply(t.parent.matrixWorld)),t.applyMatrix4(Ea),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty(\"id\",t)}getObjectByName(t){return this.getObjectByProperty(\"name\",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const i=this.children[n].getObjectByProperty(t,e);if(void 0!==i)return i}}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(La,t,Ca),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(La,Ra,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(!0===t&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e){const t=this.children;for(let e=0,n=t.length;e<n;e++)t[e].updateWorldMatrix(!1,!0)}}toJSON(t){const e=void 0===t||\"string\"==typeof t,n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},n.metadata={version:4.5,type:\"Object\",generator:\"Object3D.toJSON\"});const i={};function r(e,n){return void 0===e[n.uuid]&&(e[n.uuid]=n.toJSON(t)),n.uuid}if(i.uuid=this.uuid,i.type=this.type,\"\"!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),\"{}\"!==JSON.stringify(this.userData)&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type=\"InstancedMesh\",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(i.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const n=e.shapes;if(Array.isArray(n))for(let e=0,i=n.length;e<i;e++){r(t.shapes,n[e])}else r(t.shapes,n)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let n=0,i=this.material.length;n<i;n++)e.push(r(t.materials,this.material[n]));i.material=e}else i.material=r(t.materials,this.material);if(this.children.length>0){i.children=[];for(let e=0;e<this.children.length;e++)i.children.push(this.children[e].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let e=0;e<this.animations.length;e++){i.animations.push(r(t.animations,this.animations[e]))}}if(e){const e=a(t.geometries),i=a(t.materials),r=a(t.textures),s=a(t.images),o=a(t.shapes),l=a(t.skeletons),c=a(t.animations);e.length>0&&(n.geometries=e),i.length>0&&(n.materials=i),r.length>0&&(n.textures=r),s.length>0&&(n.images=s),o.length>0&&(n.shapes=o),l.length>0&&(n.skeletons=l),c.length>0&&(n.animations=c)}return n.object=i,n;function a(t){const e=[];for(const n in t){const i=t[n];delete i.metadata,e.push(i)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){this.add(t.children[e].clone())}return this}}za.DefaultUp=new Ir(0,1,0),za.DefaultMatrixAutoUpdate=!0,za.prototype.isObject3D=!0;const Ua=new Ir,Fa=new Ir,Ba=new Ir,Ha=new Ir,ka=new Ir,Ga=new Ir,Va=new Ir,Wa=new Ir,ja=new Ir,qa=new Ir;class Xa{constructor(t=new Ir,e=new Ir,n=new Ir){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e),Ua.subVectors(t,e),i.cross(Ua);const r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}static getBarycoord(t,e,n,i,r){Ua.subVectors(i,e),Fa.subVectors(n,e),Ba.subVectors(t,e);const a=Ua.dot(Ua),s=Ua.dot(Fa),o=Ua.dot(Ba),l=Fa.dot(Fa),c=Fa.dot(Ba),h=a*l-s*s;if(0===h)return r.set(-2,-1,-1);const u=1/h,d=(l*o-s*c)*u,p=(a*c-s*o)*u;return r.set(1-d-p,p,d)}static containsPoint(t,e,n,i){return this.getBarycoord(t,e,n,i,Ha),Ha.x>=0&&Ha.y>=0&&Ha.x+Ha.y<=1}static getUV(t,e,n,i,r,a,s,o){return this.getBarycoord(t,e,n,i,Ha),o.set(0,0),o.addScaledVector(r,Ha.x),o.addScaledVector(a,Ha.y),o.addScaledVector(s,Ha.z),o}static isFrontFacing(t,e,n,i){return Ua.subVectors(n,e),Fa.subVectors(t,e),Ua.cross(Fa).dot(i)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return Ua.subVectors(this.c,this.b),Fa.subVectors(this.a,this.b),.5*Ua.cross(Fa).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Xa.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return Xa.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,n,i,r){return Xa.getUV(t,this.a,this.b,this.c,e,n,i,r)}containsPoint(t){return Xa.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Xa.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,r=this.c;let a,s;ka.subVectors(i,n),Ga.subVectors(r,n),Wa.subVectors(t,n);const o=ka.dot(Wa),l=Ga.dot(Wa);if(o<=0&&l<=0)return e.copy(n);ja.subVectors(t,i);const c=ka.dot(ja),h=Ga.dot(ja);if(c>=0&&h<=c)return e.copy(i);const u=o*h-c*l;if(u<=0&&o>=0&&c<=0)return a=o/(o-c),e.copy(n).addScaledVector(ka,a);qa.subVectors(t,r);const d=ka.dot(qa),p=Ga.dot(qa);if(p>=0&&d<=p)return e.copy(r);const f=d*l-o*p;if(f<=0&&l>=0&&p<=0)return s=l/(l-p),e.copy(n).addScaledVector(Ga,s);const m=c*p-d*h;if(m<=0&&h-c>=0&&d-p>=0)return Va.subVectors(r,i),s=(h-c)/(h-c+(d-p)),e.copy(i).addScaledVector(Va,s);const g=1/(m+f+u);return a=f*g,s=u*g,e.copy(n).addScaledVector(ka,a).addScaledVector(Ga,s)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let Ya=0;class Za extends fr{constructor(){super(),Object.defineProperty(this,\"id\",{value:Ya++}),this.uuid=yr(),this.name=\"\",this.type=\"Material\",this.fog=!0,this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=Ni,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=hr,this.stencilZFail=hr,this.stencilZPass=hr,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0}onBuild(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const n=t[e];if(void 0===n){console.warn(\"THREE.Material: '\"+e+\"' parameter is undefined.\");continue}if(\"shading\"===e){console.warn(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\"),this.flatShading=1===n;continue}const i=this[e];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]=n:console.warn(\"THREE.\"+this.type+\": '\"+e+\"' is not a property of this material.\")}}toJSON(t){const e=void 0===t||\"string\"==typeof t;e&&(t={textures:{},images:{}});const n={metadata:{version:4.5,type:\"Material\",generator:\"Material.toJSON\"}};function i(t){const e=[];for(const n in t){const i=t[n];delete i.metadata,e.push(i)}return e}if(n.uuid=this.uuid,n.type=this.type,\"\"!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(n.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(n.specularIntensity=this.specularIntensity),this.specularTint&&this.specularTint.isColor&&(n.specularTint=this.specularTint.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularTintMap&&this.specularTintMap.isTexture&&(n.specularTintMap=this.specularTintMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(n.combine=this.combine)),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(n.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.transmission&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),void 0!==this.thickness&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),void 0!==this.attenuationDistance&&(n.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationTint&&(n.attenuationTint=this.attenuationTint.getHex()),void 0!==this.size&&(n.size=this.size),null!==this.shadowSide&&(n.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(n.blending=this.blending),0!==this.side&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.colorWrite=this.colorWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(n.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),\"round\"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),\"round\"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(n.flatShading=this.flatShading),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),\"{}\"!==JSON.stringify(this.userData)&&(n.userData=this.userData),e){const e=i(t.textures),r=i(t.images);e.length>0&&(n.textures=e),r.length>0&&(n.images=r)}return n}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name,this.fog=t.fog,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(null!==e){const t=e.length;n=new Array(t);for(let i=0;i!==t;++i)n[i]=e[i].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:\"dispose\"})}set needsUpdate(t){!0===t&&this.version++}}Za.prototype.isMaterial=!0;const Ja={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Qa={h:0,s:0,l:0},Ka={h:0,s:0,l:0};function $a(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+6*(e-t)*(2/3-n):t}function ts(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function es(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}class ns{constructor(t,e,n){return void 0===e&&void 0===n?this.set(t):this.setRGB(t,e,n)}set(t){return t&&t.isColor?this.copy(t):\"number\"==typeof t?this.setHex(t):\"string\"==typeof t&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this}setRGB(t,e,n){return this.r=t,this.g=e,this.b=n,this}setHSL(t,e,n){if(t=(function i(t,e){return(t%e+e)%e})(t,1),e=xr(e,0,1),n=xr(n,0,1),0===e)this.r=this.g=this.b=n;else{const i=n<=.5?n*(1+e):n+e-n*e,r=2*n-i;this.r=$a(r,i,t+1/3),this.g=$a(r,i,t),this.b=$a(r,i,t-1/3)}return this}setStyle(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn(\"THREE.Color: Alpha component of \"+t+\" will be ignored.\")}let n;if(n=/^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec(t)){let t;const i=n[2];switch(n[1]){case\"rgb\":case\"rgba\":if(t=/^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(i))return this.r=Math.min(255,parseInt(t[1],10))/255,this.g=Math.min(255,parseInt(t[2],10))/255,this.b=Math.min(255,parseInt(t[3],10))/255,e(t[4]),this;if(t=/^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(i))return this.r=Math.min(100,parseInt(t[1],10))/100,this.g=Math.min(100,parseInt(t[2],10))/100,this.b=Math.min(100,parseInt(t[3],10))/100,e(t[4]),this;break;case\"hsl\":case\"hsla\":if(t=/^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(i)){const n=parseFloat(t[1])/360,i=parseInt(t[2],10)/100,r=parseInt(t[3],10)/100;return e(t[4]),this.setHSL(n,i,r)}}}else if(n=/^\\#([A-Fa-f\\d]+)$/.exec(t)){const t=n[1],e=t.length;if(3===e)return this.r=parseInt(t.charAt(0)+t.charAt(0),16)/255,this.g=parseInt(t.charAt(1)+t.charAt(1),16)/255,this.b=parseInt(t.charAt(2)+t.charAt(2),16)/255,this;if(6===e)return this.r=parseInt(t.charAt(0)+t.charAt(1),16)/255,this.g=parseInt(t.charAt(2)+t.charAt(3),16)/255,this.b=parseInt(t.charAt(4)+t.charAt(5),16)/255,this}return t&&t.length>0?this.setColorName(t):this}setColorName(t){const e=Ja[t.toLowerCase()];return void 0!==e?this.setHex(e):console.warn(\"THREE.Color: Unknown color \"+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copyGammaToLinear(t,e=2){return this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this}copyLinearToGamma(t,e=2){const n=e>0?1/e:1;return this.r=Math.pow(t.r,n),this.g=Math.pow(t.g,n),this.b=Math.pow(t.b,n),this}convertGammaToLinear(t){return this.copyGammaToLinear(this,t),this}convertLinearToGamma(t){return this.copyLinearToGamma(this,t),this}copySRGBToLinear(t){return this.r=ts(t.r),this.g=ts(t.g),this.b=ts(t.b),this}copyLinearToSRGB(t){return this.r=es(t.r),this.g=es(t.g),this.b=es(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0}getHexString(){return(\"000000\"+this.getHex().toString(16)).slice(-6)}getHSL(t){const e=this.r,n=this.g,i=this.b,r=Math.max(e,n,i),a=Math.min(e,n,i);let s,o;const l=(a+r)/2;if(a===r)s=0,o=0;else{const t=r-a;switch(o=l<=.5?t/(r+a):t/(2-r-a),r){case e:s=(n-i)/t+(n<i?6:0);break;case n:s=(i-e)/t+2;break;case i:s=(e-n)/t+4}s/=6}return t.h=s,t.s=o,t.l=l,t}getStyle(){return\"rgb(\"+(255*this.r|0)+\",\"+(255*this.g|0)+\",\"+(255*this.b|0)+\")\"}offsetHSL(t,e,n){return this.getHSL(Qa),Qa.h+=t,Qa.s+=e,Qa.l+=n,this.setHSL(Qa.h,Qa.s,Qa.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(Qa),t.getHSL(Ka);const n=_r(Qa.h,Ka.h,e),i=_r(Qa.s,Ka.s,e),r=_r(Qa.l,Ka.l,e);return this.setHSL(n,i,r),this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),!0===t.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}ns.NAMES=Ja,ns.prototype.isColor=!0,ns.prototype.r=1,ns.prototype.g=1,ns.prototype.b=1;class is extends Za{constructor(t){super(),this.type=\"MeshBasicMaterial\",this.color=new ns(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}is.prototype.isMeshBasicMaterial=!0;const rs=new Ir,as=new br;class ss{constructor(t,e,n){if(Array.isArray(t))throw new TypeError(\"THREE.BufferAttribute: array should be a Typed Array.\");this.name=\"\",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===n,this.usage=ur,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}copyColorsArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn(\"THREE.BufferAttribute.copyColorsArray(): color is undefined\",i),r=new ns),e[n++]=r.r,e[n++]=r.g,e[n++]=r.b}return this}copyVector2sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn(\"THREE.BufferAttribute.copyVector2sArray(): vector is undefined\",i),r=new br),e[n++]=r.x,e[n++]=r.y}return this}copyVector3sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn(\"THREE.BufferAttribute.copyVector3sArray(): vector is undefined\",i),r=new Ir),e[n++]=r.x,e[n++]=r.y,e[n++]=r.z}return this}copyVector4sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn(\"THREE.BufferAttribute.copyVector4sArray(): vector is undefined\",i),r=new Rr),e[n++]=r.x,e[n++]=r.y,e[n++]=r.z,e[n++]=r.w}return this}applyMatrix3(t){if(2===this.itemSize)for(let e=0,n=this.count;e<n;e++)as.fromBufferAttribute(this,e),as.applyMatrix3(t),this.setXY(e,as.x,as.y);else if(3===this.itemSize)for(let e=0,n=this.count;e<n;e++)rs.fromBufferAttribute(this,e),rs.applyMatrix3(t),this.setXYZ(e,rs.x,rs.y,rs.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)rs.x=this.getX(e),rs.y=this.getY(e),rs.z=this.getZ(e),rs.applyMatrix4(t),this.setXYZ(e,rs.x,rs.y,rs.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)rs.x=this.getX(e),rs.y=this.getY(e),rs.z=this.getZ(e),rs.applyNormalMatrix(t),this.setXYZ(e,rs.x,rs.y,rs.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)rs.x=this.getX(e),rs.y=this.getY(e),rs.z=this.getZ(e),rs.transformDirection(t),this.setXYZ(e,rs.x,rs.y,rs.z);return this}set(t,e=0){return this.array.set(t,e),this}getX(t){return this.array[t*this.itemSize]}setX(t,e){return this.array[t*this.itemSize]=e,this}getY(t){return this.array[t*this.itemSize+1]}setY(t,e){return this.array[t*this.itemSize+1]=e,this}getZ(t){return this.array[t*this.itemSize+2]}setZ(t,e){return this.array[t*this.itemSize+2]=e,this}getW(t){return this.array[t*this.itemSize+3]}setW(t,e){return this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return this.array[(t*=this.itemSize)+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return this.array[(t*=this.itemSize)+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,r){return this.array[(t*=this.itemSize)+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return\"\"!==this.name&&(t.name=this.name),this.usage!==ur&&(t.usage=this.usage),0===this.updateRange.offset&&-1===this.updateRange.count||(t.updateRange=this.updateRange),t}}ss.prototype.isBufferAttribute=!0;class os extends ss{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class ls extends ss{constructor(t,e,n){super(new Uint32Array(t),e,n)}}(class extends ss{constructor(t,e,n){super(new Uint16Array(t),e,n)}}).prototype.isFloat16BufferAttribute=!0;class cs extends ss{constructor(t,e,n){super(new Float32Array(t),e,n)}}function hs(t){if(0===t.length)return-1/0;let e=t[0];for(let n=1,i=t.length;n<i;++n)t[n]>e&&(e=t[n]);return e}let us=0;const ds=new ua,ps=new za,fs=new Ir,ms=new Ur,gs=new Ur,vs=new Ir;class ys extends fr{constructor(){super(),Object.defineProperty(this,\"id\",{value:us++}),this.uuid=yr(),this.name=\"\",this.type=\"BufferGeometry\",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return this.index=Array.isArray(t)?new(hs(t)>65535?ls:os)(t,1):t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(void 0!==n){const e=(new Sr).getNormalMatrix(t);n.applyNormalMatrix(e),n.needsUpdate=!0}const i=this.attributes.tangent;return void 0!==i&&(i.transformDirection(t),i.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(t){return ds.makeRotationFromQuaternion(t),this.applyMatrix4(ds),this}rotateX(t){return ds.makeRotationX(t),this.applyMatrix4(ds),this}rotateY(t){return ds.makeRotationY(t),this.applyMatrix4(ds),this}rotateZ(t){return ds.makeRotationZ(t),this.applyMatrix4(ds),this}translate(t,e,n){return ds.makeTranslation(t,e,n),this.applyMatrix4(ds),this}scale(t,e,n){return ds.makeScale(t,e,n),this.applyMatrix4(ds),this}lookAt(t){return ps.lookAt(t),ps.updateMatrix(),this.applyMatrix4(ps.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(fs).negate(),this.translate(fs.x,fs.y,fs.z),this}setFromPoints(t){const e=[];for(let n=0,i=t.length;n<i;n++){const i=t[n];e.push(i.x,i.y,i.z||0)}return this.setAttribute(\"position\",new cs(e,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new Ur);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".',this),void this.boundingBox.set(new Ir(-1/0,-1/0,-1/0),new Ir(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){ms.setFromBufferAttribute(e[t]),this.morphTargetsRelative?(vs.addVectors(this.boundingBox.min,ms.min),this.boundingBox.expandByPoint(vs),vs.addVectors(this.boundingBox.max,ms.max),this.boundingBox.expandByPoint(vs)):(this.boundingBox.expandByPoint(ms.min),this.boundingBox.expandByPoint(ms.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new na);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".',this),void this.boundingSphere.set(new Ir,1/0);if(t){const n=this.boundingSphere.center;if(ms.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){gs.setFromBufferAttribute(e[t]),this.morphTargetsRelative?(vs.addVectors(ms.min,gs.min),ms.expandByPoint(vs),vs.addVectors(ms.max,gs.max),ms.expandByPoint(vs)):(ms.expandByPoint(gs.min),ms.expandByPoint(gs.max))}ms.getCenter(n);let i=0;for(let e=0,r=t.count;e<r;e++)vs.fromBufferAttribute(t,e),i=Math.max(i,n.distanceToSquared(vs));if(e)for(let r=0,a=e.length;r<a;r++){const a=e[r],s=this.morphTargetsRelative;for(let e=0,r=a.count;e<r;e++)vs.fromBufferAttribute(a,e),s&&(fs.fromBufferAttribute(t,e),vs.add(fs)),i=Math.max(i,n.distanceToSquared(vs))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.',this)}}computeFaceNormals(){}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error(\"THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)\");const n=t.array,i=e.position.array,r=e.normal.array,a=e.uv.array,s=i.length/3;void 0===e.tangent&&this.setAttribute(\"tangent\",new ss(new Float32Array(4*s),4));const o=e.tangent.array,l=[],c=[];for(let t=0;t<s;t++)l[t]=new Ir,c[t]=new Ir;const h=new Ir,u=new Ir,d=new Ir,p=new br,f=new br,m=new br,g=new Ir,v=new Ir;function y(t,e,n){h.fromArray(i,3*t),u.fromArray(i,3*e),d.fromArray(i,3*n),p.fromArray(a,2*t),f.fromArray(a,2*e),m.fromArray(a,2*n),u.sub(h),d.sub(h),f.sub(p),m.sub(p);const r=1/(f.x*m.y-m.x*f.y);isFinite(r)&&(g.copy(u).multiplyScalar(m.y).addScaledVector(d,-f.y).multiplyScalar(r),v.copy(d).multiplyScalar(f.x).addScaledVector(u,-m.x).multiplyScalar(r),l[t].add(g),l[e].add(g),l[n].add(g),c[t].add(v),c[e].add(v),c[n].add(v))}let x=this.groups;0===x.length&&(x=[{start:0,count:n.length}]);for(let t=0,e=x.length;t<e;++t){const e=x[t],i=e.start;for(let t=i,r=i+e.count;t<r;t+=3)y(n[t+0],n[t+1],n[t+2])}const _=new Ir,M=new Ir,w=new Ir,b=new Ir;function S(t){w.fromArray(r,3*t),b.copy(w);const e=l[t];_.copy(e),_.sub(w.multiplyScalar(w.dot(e))).normalize(),M.crossVectors(b,e);const n=M.dot(c[t])<0?-1:1;o[4*t]=_.x,o[4*t+1]=_.y,o[4*t+2]=_.z,o[4*t+3]=n}for(let t=0,e=x.length;t<e;++t){const e=x[t],i=e.start;for(let t=i,r=i+e.count;t<r;t+=3)S(n[t+0]),S(n[t+1]),S(n[t+2])}}computeVertexNormals(){const t=this.index,e=this.getAttribute(\"position\");if(void 0!==e){let n=this.getAttribute(\"normal\");if(void 0===n)n=new ss(new Float32Array(3*e.count),3),this.setAttribute(\"normal\",n);else for(let t=0,e=n.count;t<e;t++)n.setXYZ(t,0,0,0);const i=new Ir,r=new Ir,a=new Ir,s=new Ir,o=new Ir,l=new Ir,c=new Ir,h=new Ir;if(t)for(let u=0,d=t.count;u<d;u+=3){const d=t.getX(u+0),p=t.getX(u+1),f=t.getX(u+2);i.fromBufferAttribute(e,d),r.fromBufferAttribute(e,p),a.fromBufferAttribute(e,f),c.subVectors(a,r),h.subVectors(i,r),c.cross(h),s.fromBufferAttribute(n,d),o.fromBufferAttribute(n,p),l.fromBufferAttribute(n,f),s.add(c),o.add(c),l.add(c),n.setXYZ(d,s.x,s.y,s.z),n.setXYZ(p,o.x,o.y,o.z),n.setXYZ(f,l.x,l.y,l.z)}else for(let t=0,s=e.count;t<s;t+=3)i.fromBufferAttribute(e,t+0),r.fromBufferAttribute(e,t+1),a.fromBufferAttribute(e,t+2),c.subVectors(a,r),h.subVectors(i,r),c.cross(h),n.setXYZ(t+0,c.x,c.y,c.z),n.setXYZ(t+1,c.x,c.y,c.z),n.setXYZ(t+2,c.x,c.y,c.z);this.normalizeNormals(),n.needsUpdate=!0}}merge(t,e){if(!t||!t.isBufferGeometry)return void console.error(\"THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.\",t);void 0===e&&(e=0,console.warn(\"THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.\"));const n=this.attributes;for(const i in n){if(void 0===t.attributes[i])continue;const r=n[i].array,a=t.attributes[i],s=a.array,o=a.itemSize*e,l=Math.min(s.length,r.length-o);for(let t=0,e=o;t<l;t++,e++)r[e]=s[t]}return this}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)vs.fromBufferAttribute(t,e),vs.normalize(),t.setXYZ(e,vs.x,vs.y,vs.z)}toNonIndexed(){function t(t,e){const n=t.array,i=t.itemSize,r=t.normalized,a=new n.constructor(e.length*i);let s=0,o=0;for(let r=0,l=e.length;r<l;r++){s=t.isInterleavedBufferAttribute?e[r]*t.data.stride+t.offset:e[r]*i;for(let t=0;t<i;t++)a[o++]=n[s++]}return new ss(a,i,r)}if(null===this.index)return console.warn(\"THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.\"),this;const e=new ys,n=this.index.array,i=this.attributes;for(const r in i){const a=t(i[r],n);e.setAttribute(r,a)}const r=this.morphAttributes;for(const i in r){const a=[],s=r[i];for(let e=0,i=s.length;e<i;e++){const i=t(s[e],n);a.push(i)}e.morphAttributes[i]=a}e.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let t=0,n=a.length;t<n;t++){const n=a[t];e.addGroup(n.start,n.count,n.materialIndex)}return e}toJSON(){const t={metadata:{version:4.5,type:\"BufferGeometry\",generator:\"BufferGeometry.toJSON\"}};if(t.uuid=this.uuid,t.type=this.type,\"\"!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const n in e)void 0!==e[n]&&(t[n]=e[n]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const e in n){t.data.attributes[e]=n[e].toJSON(t.data)}const i={};let r=!1;for(const e in this.morphAttributes){const n=this.morphAttributes[e],a=[];for(let e=0,i=n.length;e<i;e++){a.push(n[e].toJSON(t.data))}a.length>0&&(i[e]=a,r=!0)}r&&(t.data.morphAttributes=i,t.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(t.data.groups=JSON.parse(JSON.stringify(a)));const s=this.boundingSphere;return null!==s&&(t.data.boundingSphere={center:s.center.toArray(),radius:s.radius}),t}clone(){return(new ys).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;null!==n&&this.setIndex(n.clone(e));const i=t.attributes;for(const t in i){this.setAttribute(t,i[t].clone(e))}const r=t.morphAttributes;for(const t in r){const n=[],i=r[t];for(let t=0,r=i.length;t<r;t++)n.push(i[t].clone(e));this.morphAttributes[t]=n}this.morphTargetsRelative=t.morphTargetsRelative;const a=t.groups;for(let t=0,e=a.length;t<e;t++){const e=a[t];this.addGroup(e.start,e.count,e.materialIndex)}const s=t.boundingBox;null!==s&&(this.boundingBox=s.clone());const o=t.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:\"dispose\"})}}ys.prototype.isBufferGeometry=!0;const xs=new ua,_s=new ha,Ms=new na,ws=new Ir,bs=new Ir,Ss=new Ir,Ts=new Ir,Es=new Ir,As=new Ir,Ls=new Ir,Cs=new Ir,Rs=new Ir,Ps=new br,Ds=new br,Ns=new br,Is=new Ir,Os=new Ir;class zs extends za{constructor(t=new ys,e=new is){super(),this.type=\"Mesh\",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error(\"THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\")}}raycast(t,e){const n=this.geometry,i=this.material,r=this.matrixWorld;if(void 0===i)return;if(null===n.boundingSphere&&n.computeBoundingSphere(),Ms.copy(n.boundingSphere),Ms.applyMatrix4(r),!1===t.ray.intersectsSphere(Ms))return;if(xs.copy(r).invert(),_s.copy(t.ray).applyMatrix4(xs),null!==n.boundingBox&&!1===_s.intersectsBox(n.boundingBox))return;let a;if(n.isBufferGeometry){const r=n.index,s=n.attributes.position,o=n.morphAttributes.position,l=n.morphTargetsRelative,c=n.attributes.uv,h=n.attributes.uv2,u=n.groups,d=n.drawRange;if(null!==r)if(Array.isArray(i))for(let n=0,p=u.length;n<p;n++){const p=u[n],f=i[p.materialIndex];for(let n=Math.max(p.start,d.start),i=Math.min(p.start+p.count,d.start+d.count);n<i;n+=3){const i=r.getX(n),u=r.getX(n+1),d=r.getX(n+2);a=Us(this,f,t,_s,s,o,l,c,h,i,u,d),a&&(a.faceIndex=Math.floor(n/3),a.face.materialIndex=p.materialIndex,e.push(a))}}else{for(let n=Math.max(0,d.start),u=Math.min(r.count,d.start+d.count);n<u;n+=3){const u=r.getX(n),d=r.getX(n+1),p=r.getX(n+2);a=Us(this,i,t,_s,s,o,l,c,h,u,d,p),a&&(a.faceIndex=Math.floor(n/3),e.push(a))}}else if(void 0!==s)if(Array.isArray(i))for(let n=0,r=u.length;n<r;n++){const r=u[n],p=i[r.materialIndex];for(let n=Math.max(r.start,d.start),i=Math.min(r.start+r.count,d.start+d.count);n<i;n+=3){a=Us(this,p,t,_s,s,o,l,c,h,n,n+1,n+2),a&&(a.faceIndex=Math.floor(n/3),a.face.materialIndex=r.materialIndex,e.push(a))}}else{for(let n=Math.max(0,d.start),r=Math.min(s.count,d.start+d.count);n<r;n+=3){a=Us(this,i,t,_s,s,o,l,c,h,n,n+1,n+2),a&&(a.faceIndex=Math.floor(n/3),e.push(a))}}}else n.isGeometry&&console.error(\"THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\")}}function Us(t,e,n,i,r,a,s,o,l,c,h,u){ws.fromBufferAttribute(r,c),bs.fromBufferAttribute(r,h),Ss.fromBufferAttribute(r,u);const d=t.morphTargetInfluences;if(a&&d){Ls.set(0,0,0),Cs.set(0,0,0),Rs.set(0,0,0);for(let t=0,e=a.length;t<e;t++){const e=d[t],n=a[t];0!==e&&(Ts.fromBufferAttribute(n,c),Es.fromBufferAttribute(n,h),As.fromBufferAttribute(n,u),s?(Ls.addScaledVector(Ts,e),Cs.addScaledVector(Es,e),Rs.addScaledVector(As,e)):(Ls.addScaledVector(Ts.sub(ws),e),Cs.addScaledVector(Es.sub(bs),e),Rs.addScaledVector(As.sub(Ss),e)))}ws.add(Ls),bs.add(Cs),Ss.add(Rs)}t.isSkinnedMesh&&(t.boneTransform(c,ws),t.boneTransform(h,bs),t.boneTransform(u,Ss));const p=(function f(t,e,n,i,r,a,s,o){let l;if(l=1===e.side?i.intersectTriangle(s,a,r,!0,o):i.intersectTriangle(r,a,s,2!==e.side,o),null===l)return null;Os.copy(o),Os.applyMatrix4(t.matrixWorld);const c=n.ray.origin.distanceTo(Os);return c<n.near||c>n.far?null:{distance:c,point:Os.clone(),object:t}})(t,e,n,i,ws,bs,Ss,Is);if(p){o&&(Ps.fromBufferAttribute(o,c),Ds.fromBufferAttribute(o,h),Ns.fromBufferAttribute(o,u),p.uv=Xa.getUV(Is,ws,bs,Ss,Ps,Ds,Ns,new br)),l&&(Ps.fromBufferAttribute(l,c),Ds.fromBufferAttribute(l,h),Ns.fromBufferAttribute(l,u),p.uv2=Xa.getUV(Is,ws,bs,Ss,Ps,Ds,Ns,new br));const t={a:c,b:h,c:u,normal:new Ir,materialIndex:0};Xa.getNormal(ws,bs,Ss,t.normal),p.face=t}return p}zs.prototype.isMesh=!0;class Fs extends ys{constructor(t=1,e=1,n=1,i=1,r=1,a=1){super(),this.type=\"BoxGeometry\",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:r,depthSegments:a};const s=this;i=Math.floor(i),r=Math.floor(r),a=Math.floor(a);const o=[],l=[],c=[],h=[];let u=0,d=0;function p(t,e,n,i,r,a,p,f,m,g,v){const y=a/m,x=p/g,_=a/2,M=p/2,w=f/2,b=m+1,S=g+1;let T=0,E=0;const A=new Ir;for(let a=0;a<S;a++){const s=a*x-M;for(let o=0;o<b;o++){A[t]=(o*y-_)*i,A[e]=s*r,A[n]=w,l.push(A.x,A.y,A.z),A[t]=0,A[e]=0,A[n]=f>0?1:-1,c.push(A.x,A.y,A.z),h.push(o/m),h.push(1-a/g),T+=1}}for(let t=0;t<g;t++)for(let e=0;e<m;e++){const n=u+e+b*(t+1),i=u+(e+1)+b*(t+1),r=u+(e+1)+b*t;o.push(u+e+b*t,n,r),o.push(n,i,r),E+=6}s.addGroup(d,E,v),d+=E,u+=T}p(\"z\",\"y\",\"x\",-1,-1,n,e,t,a,r,0),p(\"z\",\"y\",\"x\",1,-1,n,e,-t,a,r,1),p(\"x\",\"z\",\"y\",1,1,t,n,e,i,a,2),p(\"x\",\"z\",\"y\",1,-1,t,n,-e,i,a,3),p(\"x\",\"y\",\"z\",1,-1,t,e,n,i,r,4),p(\"x\",\"y\",\"z\",-1,-1,t,e,-n,i,r,5),this.setIndex(o),this.setAttribute(\"position\",new cs(l,3)),this.setAttribute(\"normal\",new cs(c,3)),this.setAttribute(\"uv\",new cs(h,2))}static fromJSON(t){return new Fs(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function Bs(t){const e={};for(const n in t){e[n]={};for(const i in t[n]){const r=t[n][i];e[n][i]=r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?r.clone():Array.isArray(r)?r.slice():r}}return e}function Hs(t){const e={};for(let n=0;n<t.length;n++){const i=Bs(t[n]);for(const t in i)e[t]=i[t]}return e}const ks={clone:Bs,merge:Hs};class Gs extends Za{constructor(t){super(),this.type=\"ShaderMaterial\",this.defines={},this.uniforms={},this.vertexShader=\"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",this.fragmentShader=\"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&(void 0!==t.attributes&&console.error(\"THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.\"),this.setValues(t))}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=Bs(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const n in this.uniforms){const i=this.uniforms[n].value;e.uniforms[n]=i&&i.isTexture?{type:\"t\",value:i.toJSON(t).uuid}:i&&i.isColor?{type:\"c\",value:i.getHex()}:i&&i.isVector2?{type:\"v2\",value:i.toArray()}:i&&i.isVector3?{type:\"v3\",value:i.toArray()}:i&&i.isVector4?{type:\"v4\",value:i.toArray()}:i&&i.isMatrix3?{type:\"m3\",value:i.toArray()}:i&&i.isMatrix4?{type:\"m4\",value:i.toArray()}:{value:i}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;const n={};for(const t in this.extensions)!0===this.extensions[t]&&(n[t]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}Gs.prototype.isShaderMaterial=!0;class Vs extends za{constructor(){super(),this.type=\"Camera\",this.matrixWorldInverse=new ua,this.projectionMatrix=new ua,this.projectionMatrixInverse=new ua}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}Vs.prototype.isCamera=!0;class Ws extends Vs{constructor(t=50,e=1,n=.1,i=2e3){super(),this.type=\"PerspectiveCamera\",this.fov=t,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*vr*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*gr*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*vr*Math.atan(Math.tan(.5*gr*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,n,i,r,a){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*gr*this.fov)/this.zoom,n=2*e,i=this.aspect*n,r=-.5*i;const a=this.view;if(null!==this.view&&this.view.enabled){const t=a.fullWidth,s=a.fullHeight;r+=a.offsetX*i/t,e-=a.offsetY*n/s,i*=a.width/t,n*=a.height/s}const s=this.filmOffset;0!==s&&(r+=t*s/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,e,e-n,t,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}Ws.prototype.isPerspectiveCamera=!0;const js=90;class qs extends za{constructor(t,e,n){if(super(),this.type=\"CubeCamera\",!0!==n.isWebGLCubeRenderTarget)return void console.error(\"THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.\");this.renderTarget=n;const i=new Ws(js,1,t,e);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new Ir(1,0,0)),this.add(i);const r=new Ws(js,1,t,e);r.layers=this.layers,r.up.set(0,-1,0),r.lookAt(new Ir(-1,0,0)),this.add(r);const a=new Ws(js,1,t,e);a.layers=this.layers,a.up.set(0,0,1),a.lookAt(new Ir(0,1,0)),this.add(a);const s=new Ws(js,1,t,e);s.layers=this.layers,s.up.set(0,0,-1),s.lookAt(new Ir(0,-1,0)),this.add(s);const o=new Ws(js,1,t,e);o.layers=this.layers,o.up.set(0,-1,0),o.lookAt(new Ir(0,0,1)),this.add(o);const l=new Ws(js,1,t,e);l.layers=this.layers,l.up.set(0,-1,0),l.lookAt(new Ir(0,0,-1)),this.add(l)}update(t,e){null===this.parent&&this.updateMatrixWorld();const n=this.renderTarget,[i,r,a,s,o,l]=this.children,c=t.xr.enabled,h=t.getRenderTarget();t.xr.enabled=!1;const u=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0),t.render(e,i),t.setRenderTarget(n,1),t.render(e,r),t.setRenderTarget(n,2),t.render(e,a),t.setRenderTarget(n,3),t.render(e,s),t.setRenderTarget(n,4),t.render(e,o),n.texture.generateMipmaps=u,t.setRenderTarget(n,5),t.render(e,l),t.setRenderTarget(h),t.xr.enabled=c}}class Xs extends Lr{constructor(t,e,n,i,r,a,s,o,l,c){super(t=void 0!==t?t:[],e=void 0!==e?e:Ii,n,i,r,a,s=void 0!==s?s:Zi,o,l,c),this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}Xs.prototype.isCubeTexture=!0;class Ys extends Pr{constructor(t,e,n){Number.isInteger(e)&&(console.warn(\"THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )\"),e=n),super(t,t,e),this.texture=new Xs(void 0,(e=e||{}).mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:ki,this.texture._needsFlipEnvMap=!1}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.format=Ji,this.texture.encoding=e.encoding,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:\"\\n\\n\\t\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t\\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\n\\t\\t\\t\\t\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\n\\t\\t\\t\\t\\t#include <begin_vertex>\\n\\t\\t\\t\\t\\t#include <project_vertex>\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\",fragmentShader:\"\\n\\n\\t\\t\\t\\tuniform sampler2D tEquirect;\\n\\n\\t\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t\\t#include <common>\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvec3 direction = normalize( vWorldDirection );\\n\\n\\t\\t\\t\\t\\tvec2 sampleUV = equirectUv( direction );\\n\\n\\t\\t\\t\\t\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"},i=new Fs(5,5,5),r=new Gs({name:\"CubemapFromEquirect\",uniforms:Bs(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:1,blending:0});r.uniforms.tEquirect.value=e;const a=new zs(i,r),s=e.minFilter;e.minFilter===Gi&&(e.minFilter=ki);return new qs(1,10,this).update(t,a),e.minFilter=s,a.geometry.dispose(),a.material.dispose(),this}clear(t,e,n,i){const r=t.getRenderTarget();for(let r=0;r<6;r++)t.setRenderTarget(this,r),t.clear(e,n,i);t.setRenderTarget(r)}}Ys.prototype.isWebGLCubeRenderTarget=!0;const Zs=new Ir,Js=new Ir,Qs=new Sr;class Ks{constructor(t=new Ir(1,0,0),e=0){this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=Zs.subVectors(n,e).cross(Js.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){const n=t.delta(Zs),i=this.normal.dot(n);if(0===i)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/i;return r<0||r>1?null:e.copy(n).multiplyScalar(r).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||Qs.getNormalMatrix(t),i=this.coplanarPoint(Zs).applyMatrix4(t),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}Ks.prototype.isPlane=!0;const $s=new na,to=new Ir;class eo{constructor(t=new Ks,e=new Ks,n=new Ks,i=new Ks,r=new Ks,a=new Ks){this.planes=[t,e,n,i,r,a]}set(t,e,n,i,r,a){const s=this.planes;return s[0].copy(t),s[1].copy(e),s[2].copy(n),s[3].copy(i),s[4].copy(r),s[5].copy(a),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t){const e=this.planes,n=t.elements,i=n[0],r=n[1],a=n[2],s=n[3],o=n[4],l=n[5],c=n[6],h=n[7],u=n[8],d=n[9],p=n[10],f=n[11],m=n[12],g=n[13],v=n[14],y=n[15];return e[0].setComponents(s-i,h-o,f-u,y-m).normalize(),e[1].setComponents(s+i,h+o,f+u,y+m).normalize(),e[2].setComponents(s+r,h+l,f+d,y+g).normalize(),e[3].setComponents(s-r,h-l,f-d,y-g).normalize(),e[4].setComponents(s-a,h-c,f-p,y-v).normalize(),e[5].setComponents(s+a,h+c,f+p,y+v).normalize(),this}intersectsObject(t){const e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),$s.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere($s)}intersectsSprite(t){return $s.center.set(0,0,0),$s.radius=.7071067811865476,$s.applyMatrix4(t.matrixWorld),this.intersectsSphere($s)}intersectsSphere(t){const e=this.planes,n=t.center,i=-t.radius;for(let t=0;t<6;t++){if(e[t].distanceToPoint(n)<i)return!1}return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];if(to.x=i.normal.x>0?t.max.x:t.min.x,to.y=i.normal.y>0?t.max.y:t.min.y,to.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(to)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function no(){let t=null,e=!1,n=null,i=null;function r(e,a){n(e,a),i=t.requestAnimationFrame(r)}return{start:function(){!0!==e&&null!==n&&(i=t.requestAnimationFrame(r),e=!0)},stop:function(){t.cancelAnimationFrame(i),e=!1},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function io(t,e){const n=e.isWebGL2,i=new WeakMap;return{get:function r(t){return t.isInterleavedBufferAttribute&&(t=t.data),i.get(t)},remove:function a(e){e.isInterleavedBufferAttribute&&(e=e.data);const n=i.get(e);n&&(t.deleteBuffer(n.buffer),i.delete(e))},update:function s(e,r){if(e.isGLBufferAttribute){const t=i.get(e);return void((!t||t.version<e.version)&&i.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version}))}e.isInterleavedBufferAttribute&&(e=e.data);const a=i.get(e);void 0===a?i.set(e,(function s(e,i){const r=e.array,a=e.usage,s=t.createBuffer();t.bindBuffer(i,s),t.bufferData(i,r,a),e.onUploadCallback();let o=5126;return r instanceof Float32Array?o=5126:r instanceof Float64Array?console.warn(\"THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.\"):r instanceof Uint16Array?e.isFloat16BufferAttribute?n?o=5131:console.warn(\"THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.\"):o=5123:r instanceof Int16Array?o=5122:r instanceof Uint32Array?o=5125:r instanceof Int32Array?o=5124:r instanceof Int8Array?o=5120:(r instanceof Uint8Array||r instanceof Uint8ClampedArray)&&(o=5121),{buffer:s,type:o,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version}})(e,r)):a.version<e.version&&(!(function o(e,i,r){const a=i.array,s=i.updateRange;t.bindBuffer(r,e),-1===s.count?t.bufferSubData(r,0,a):(n?t.bufferSubData(r,s.offset*a.BYTES_PER_ELEMENT,a,s.offset,s.count):t.bufferSubData(r,s.offset*a.BYTES_PER_ELEMENT,a.subarray(s.offset,s.offset+s.count)),s.count=-1)})(a.buffer,e,r),a.version=e.version)}}}class ro extends ys{constructor(t=1,e=1,n=1,i=1){super(),this.type=\"PlaneGeometry\",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};const r=t/2,a=e/2,s=Math.floor(n),o=Math.floor(i),l=s+1,c=o+1,h=t/s,u=e/o,d=[],p=[],f=[],m=[];for(let t=0;t<c;t++){const e=t*u-a;for(let n=0;n<l;n++){p.push(n*h-r,-e,0),f.push(0,0,1),m.push(n/s),m.push(1-t/o)}}for(let t=0;t<o;t++)for(let e=0;e<s;e++){const n=e+l*(t+1),i=e+1+l*(t+1),r=e+1+l*t;d.push(e+l*t,n,r),d.push(n,i,r)}this.setIndex(d),this.setAttribute(\"position\",new cs(p,3)),this.setAttribute(\"normal\",new cs(f,3)),this.setAttribute(\"uv\",new cs(m,2))}static fromJSON(t){return new ro(t.width,t.height,t.widthSegments,t.heightSegments)}}const ao={alphamap_fragment:\"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\",alphamap_pars_fragment:\"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\",alphatest_fragment:\"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\",aomap_fragment:\"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\",aomap_pars_fragment:\"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\",begin_vertex:\"vec3 transformed = vec3( position );\",beginnormal_vertex:\"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\",bsdfs:\"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in vec3 f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn ( f90 - f0 ) * fresnel + f0;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in vec3 f90, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, vec3( 1.0 ), dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\",bumpmap_pars_fragment:\"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\",clipping_planes_fragment:\"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\",clipping_planes_pars_fragment:\"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\",clipping_planes_pars_vertex:\"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\",clipping_planes_vertex:\"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\",color_fragment:\"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\",color_pars_fragment:\"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\",color_pars_vertex:\"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\",color_vertex:\"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\",common:\"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\",cube_uv_reflection_fragment:\"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\",defaultnormal_vertex:\"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\",displacementmap_pars_vertex:\"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\",displacementmap_vertex:\"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\",emissivemap_fragment:\"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\",emissivemap_pars_fragment:\"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\",encodings_fragment:\"gl_FragColor = linearToOutputTexel( gl_FragColor );\",encodings_pars_fragment:\"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\",envmap_fragment:\"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\",envmap_common_pars_fragment:\"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\",envmap_pars_fragment:\"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\",envmap_pars_vertex:\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\",envmap_physical_pars_fragment:\"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\",envmap_vertex:\"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\",fog_vertex:\"#ifdef USE_FOG\\n\\tfogDepth = - mvPosition.z;\\n#endif\",fog_pars_vertex:\"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\",fog_fragment:\"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\",fog_pars_fragment:\"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\",gradientmap_pars_fragment:\"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\",lightmap_fragment:\"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\",lightmap_pars_fragment:\"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\",lights_lambert_vertex:\"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\",lights_pars_begin:\"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\",lights_toon_fragment:\"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\",lights_toon_pars_fragment:\"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\",lights_phong_fragment:\"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\",lights_phong_pars_fragment:\"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\",lights_physical_fragment:\"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\t#ifdef SPECULAR\\n\\t\\tvec3 specularIntensityFactor = vec3( specularIntensity );\\n\\t\\tvec3 specularTintFactor = specularTint;\\n\\t\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULARTINTMAP\\n\\t\\t\\tspecularTintFactor *= specularTintMapTexelToLinear( texture2D( specularTintMap, vUv ) ).rgb;\\n\\t\\t#endif\\n\\t\\tmaterial.specularColorF90 = mix( specularIntensityFactor, vec3( 1.0 ), metalnessFactor );\\n\\t#else\\n\\t\\tvec3 specularIntensityFactor = vec3( 1.0 );\\n\\t\\tvec3 specularTintFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularColorF90 = vec3( 1.0 );\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ) * specularTintFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularColorF90 = vec3( 1.0 );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\",lights_physical_pars_fragment:\"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularRoughness;\\n\\tvec3 specularColor;\\n\\tvec3 specularColorF90;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), vec3( 1.0 ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularColorF90, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\",lights_fragment_begin:\"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\",lights_fragment_maps:\"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\",lights_fragment_end:\"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\",logdepthbuf_fragment:\"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\",logdepthbuf_pars_fragment:\"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\",logdepthbuf_pars_vertex:\"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\",logdepthbuf_vertex:\"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\",map_fragment:\"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\",map_pars_fragment:\"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\",map_particle_fragment:\"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\",map_particle_pars_fragment:\"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\",metalnessmap_fragment:\"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\",metalnessmap_pars_fragment:\"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\",morphnormal_vertex:\"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\",morphtarget_pars_vertex:\"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\",morphtarget_vertex:\"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\",normal_fragment_begin:\"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\",normal_fragment_maps:\"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\",normalmap_pars_fragment:\"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\",clearcoat_normal_fragment_begin:\"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\",clearcoat_normal_fragment_maps:\"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\",clearcoat_pars_fragment:\"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\",packing:\"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\",premultiplied_alpha_fragment:\"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\",project_vertex:\"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\",dithering_fragment:\"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\",dithering_pars_fragment:\"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\",roughnessmap_fragment:\"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\",roughnessmap_pars_fragment:\"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\",shadowmap_pars_fragment:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\",shadowmap_pars_vertex:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\",shadowmap_vertex:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\",shadowmask_pars_fragment:\"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\",skinbase_vertex:\"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\",skinning_pars_vertex:\"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\",skinning_vertex:\"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\",skinnormal_vertex:\"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\",specularmap_fragment:\"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\",specularmap_pars_fragment:\"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\",tonemapping_fragment:\"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\",tonemapping_pars_fragment:\"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\",transmission_fragment:\"#ifdef USE_TRANSMISSION\\n\\tfloat transmissionFactor = transmission;\\n\\tfloat thicknessFactor = thickness;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition.xyz / vWorldPosition.w;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tfloat ior = ( 1.0 + 0.4 * reflectivity ) / ( 1.0 - 0.4 * reflectivity );\\n\\tvec3 transmission = transmissionFactor * getIBLVolumeRefraction(\\n\\t\\tn, v, roughnessFactor, material.diffuseColor, material.specularColor,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\\n\\t\\tattenuationTint, attenuationDistance );\\n\\ttotalDiffuse = mix( totalDiffuse, transmission, transmissionFactor );\\n#endif\",transmission_pars_fragment:\"#ifdef USE_TRANSMISSION\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec4 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay(vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix) {\\n\\t\\tvec3 refractionVector = refract(-v, normalize(n), 1.0 / ior);\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length(vec3(modelMatrix[0].xyz));\\n\\t\\tmodelScale.y = length(vec3(modelMatrix[1].xyz));\\n\\t\\tmodelScale.z = length(vec3(modelMatrix[2].xyz));\\n\\t\\treturn normalize(refractionVector) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness(float roughness, float ior) {\\n\\t\\treturn roughness * clamp(ior * 2.0 - 2.0, 0.0, 1.0);\\n\\t}\\n\\tvec3 getTransmissionSample(vec2 fragCoord, float roughness, float ior) {\\n\\t\\tfloat framebufferLod = log2(transmissionSamplerSize.x) * applyIorToRoughness(roughness, ior);\\n\\t\\treturn texture2DLodEXT(transmissionSamplerMap, fragCoord.xy, framebufferLod).rgb;\\n\\t}\\n\\tvec3 applyVolumeAttenuation(vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance) {\\n\\t\\tif (attenuationDistance == 0.0) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log(attenuationColor) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp(-attenuationCoefficient * transmissionDistance);\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec3 getIBLVolumeRefraction(vec3 n, vec3 v, float perceptualRoughness, vec3 baseColor, vec3 specularColor,\\n\\t\\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\\n\\t\\tvec3 attenuationColor, float attenuationDistance) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay(n, v, thickness, ior, modelMatrix);\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4(refractedRayExit, 1.0);\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec3 transmittedLight = getTransmissionSample(refractionCoords, perceptualRoughness, ior);\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation(transmittedLight, length(transmissionRay), attenuationColor, attenuationDistance);\\n\\t\\treturn (1.0 - specularColor) * attenuatedColor * baseColor;\\n\\t}\\n#endif\",uv_pars_fragment:\"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\",uv_pars_vertex:\"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\",uv_vertex:\"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\",uv2_pars_fragment:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\",uv2_pars_vertex:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\",uv2_vertex:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\",worldpos_vertex:\"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\",background_frag:\"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\",background_vert:\"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\",cube_frag:\"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\",cube_vert:\"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\",depth_frag:\"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\",depth_vert:\"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\",distanceRGBA_frag:\"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\",distanceRGBA_vert:\"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\",equirect_frag:\"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\",equirect_vert:\"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\",linedashed_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\",linedashed_vert:\"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\",meshbasic_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshbasic_vert:\"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\",meshlambert_frag:\"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshlambert_vert:\"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\",meshmatcap_frag:\"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshmatcap_vert:\"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t\\t#ifdef USE_TANGENT\\n\\t\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t\\t#endif\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\",meshtoon_frag:\"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshtoon_vert:\"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\",meshphong_frag:\"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshphong_vert:\"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\",meshphysical_frag:\"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationTint;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularTint;\\n\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULARTINTMAP\\n\\t\\tuniform sampler2D specularTintMap;\\n\\t#endif\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <transmission_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshphysical_vert:\"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec4 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition;\\n#endif\\n}\",normal_frag:\"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\",normal_vert:\"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\",points_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\",points_vert:\"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\",shadow_frag:\"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\",shadow_vert:\"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\",sprite_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\",sprite_vert:\"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\"},so={common:{diffuse:{value:new ns(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new Sr},uv2Transform:{value:new Sr},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new br(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new ns(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new ns(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Sr}},sprite:{diffuse:{value:new ns(16777215)},opacity:{value:1},center:{value:new br(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Sr}}},oo={basic:{uniforms:Hs([so.common,so.specularmap,so.envmap,so.aomap,so.lightmap,so.fog]),vertexShader:ao.meshbasic_vert,fragmentShader:ao.meshbasic_frag},lambert:{uniforms:Hs([so.common,so.specularmap,so.envmap,so.aomap,so.lightmap,so.emissivemap,so.fog,so.lights,{emissive:{value:new ns(0)}}]),vertexShader:ao.meshlambert_vert,fragmentShader:ao.meshlambert_frag},phong:{uniforms:Hs([so.common,so.specularmap,so.envmap,so.aomap,so.lightmap,so.emissivemap,so.bumpmap,so.normalmap,so.displacementmap,so.fog,so.lights,{emissive:{value:new ns(0)},specular:{value:new ns(1118481)},shininess:{value:30}}]),vertexShader:ao.meshphong_vert,fragmentShader:ao.meshphong_frag},standard:{uniforms:Hs([so.common,so.envmap,so.aomap,so.lightmap,so.emissivemap,so.bumpmap,so.normalmap,so.displacementmap,so.roughnessmap,so.metalnessmap,so.fog,so.lights,{emissive:{value:new ns(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:ao.meshphysical_vert,fragmentShader:ao.meshphysical_frag},toon:{uniforms:Hs([so.common,so.aomap,so.lightmap,so.emissivemap,so.bumpmap,so.normalmap,so.displacementmap,so.gradientmap,so.fog,so.lights,{emissive:{value:new ns(0)}}]),vertexShader:ao.meshtoon_vert,fragmentShader:ao.meshtoon_frag},matcap:{uniforms:Hs([so.common,so.bumpmap,so.normalmap,so.displacementmap,so.fog,{matcap:{value:null}}]),vertexShader:ao.meshmatcap_vert,fragmentShader:ao.meshmatcap_frag},points:{uniforms:Hs([so.points,so.fog]),vertexShader:ao.points_vert,fragmentShader:ao.points_frag},dashed:{uniforms:Hs([so.common,so.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ao.linedashed_vert,fragmentShader:ao.linedashed_frag},depth:{uniforms:Hs([so.common,so.displacementmap]),vertexShader:ao.depth_vert,fragmentShader:ao.depth_frag},normal:{uniforms:Hs([so.common,so.bumpmap,so.normalmap,so.displacementmap,{opacity:{value:1}}]),vertexShader:ao.normal_vert,fragmentShader:ao.normal_frag},sprite:{uniforms:Hs([so.sprite,so.fog]),vertexShader:ao.sprite_vert,fragmentShader:ao.sprite_frag},background:{uniforms:{uvTransform:{value:new Sr},t2D:{value:null}},vertexShader:ao.background_vert,fragmentShader:ao.background_frag},cube:{uniforms:Hs([so.envmap,{opacity:{value:1}}]),vertexShader:ao.cube_vert,fragmentShader:ao.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ao.equirect_vert,fragmentShader:ao.equirect_frag},distanceRGBA:{uniforms:Hs([so.common,so.displacementmap,{referencePosition:{value:new Ir},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:ao.distanceRGBA_vert,fragmentShader:ao.distanceRGBA_frag},shadow:{uniforms:Hs([so.lights,so.fog,{color:{value:new ns(0)},opacity:{value:1}}]),vertexShader:ao.shadow_vert,fragmentShader:ao.shadow_frag}};function lo(t,e,n,i,r){const a=new ns(0);let s,o,l=0,c=null,h=0,u=null;function d(t,e){n.buffers.color.setClear(t.r,t.g,t.b,e,r)}return{getClearColor:function(){return a},setClearColor:function(t,e=1){a.set(t),l=e,d(a,l)},getClearAlpha:function(){return l},setClearAlpha:function(t){l=t,d(a,l)},render:function p(n,r){let p=!1,f=!0===r.isScene?r.background:null;f&&f.isTexture&&(f=e.get(f));const m=t.xr,g=m.getSession&&m.getSession();g&&\"additive\"===g.environmentBlendMode&&(f=null),null===f?d(a,l):f&&f.isColor&&(d(f,1),p=!0),(t.autoClear||p)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),f&&(f.isCubeTexture||f.mapping===zi)?(void 0===o&&(o=new zs(new Fs(1,1,1),new Gs({name:\"BackgroundCubeMaterial\",uniforms:Bs(oo.cube.uniforms),vertexShader:oo.cube.vertexShader,fragmentShader:oo.cube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),o.geometry.deleteAttribute(\"normal\"),o.geometry.deleteAttribute(\"uv\"),o.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(o.material,\"envMap\",{get:function(){return this.uniforms.envMap.value}}),i.update(o)),o.material.uniforms.envMap.value=f,o.material.uniforms.flipEnvMap.value=f.isCubeTexture&&!1===f.isRenderTargetTexture?-1:1,c===f&&h===f.version&&u===t.toneMapping||(o.material.needsUpdate=!0,c=f,h=f.version,u=t.toneMapping),n.unshift(o,o.geometry,o.material,0,0,null)):f&&f.isTexture&&(void 0===s&&(s=new zs(new ro(2,2),new Gs({name:\"BackgroundMaterial\",uniforms:Bs(oo.background.uniforms),vertexShader:oo.background.vertexShader,fragmentShader:oo.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),s.geometry.deleteAttribute(\"normal\"),Object.defineProperty(s.material,\"map\",{get:function(){return this.uniforms.t2D.value}}),i.update(s)),s.material.uniforms.t2D.value=f,!0===f.matrixAutoUpdate&&f.updateMatrix(),s.material.uniforms.uvTransform.value.copy(f.matrix),c===f&&h===f.version&&u===t.toneMapping||(s.material.needsUpdate=!0,c=f,h=f.version,u=t.toneMapping),n.unshift(s,s.geometry,s.material,0,0,null))}}}function co(t,e,n,i){const r=t.getParameter(34921),a=i.isWebGL2?null:e.get(\"OES_vertex_array_object\"),s=i.isWebGL2||null!==a,o={},l=d(null);let c=l;function h(e){return i.isWebGL2?t.bindVertexArray(e):a.bindVertexArrayOES(e)}function u(e){return i.isWebGL2?t.deleteVertexArray(e):a.deleteVertexArrayOES(e)}function d(t){const e=[],n=[],i=[];for(let t=0;t<r;t++)e[t]=0,n[t]=0,i[t]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:e,enabledAttributes:n,attributeDivisors:i,object:t,attributes:{},index:null}}function p(){const t=c.newAttributes;for(let e=0,n=t.length;e<n;e++)t[e]=0}function f(t){m(t,0)}function m(n,r){const a=c.enabledAttributes,s=c.attributeDivisors;if(c.newAttributes[n]=1,0===a[n]&&(t.enableVertexAttribArray(n),a[n]=1),s[n]!==r){(i.isWebGL2?t:e.get(\"ANGLE_instanced_arrays\"))[i.isWebGL2?\"vertexAttribDivisor\":\"vertexAttribDivisorANGLE\"](n,r),s[n]=r}}function g(){const e=c.newAttributes,n=c.enabledAttributes;for(let i=0,r=n.length;i<r;i++)n[i]!==e[i]&&(t.disableVertexAttribArray(i),n[i]=0)}function v(e,n,r,a,s,o){!0!==i.isWebGL2||5124!==r&&5125!==r?t.vertexAttribPointer(e,n,r,a,s,o):t.vertexAttribIPointer(e,n,r,s,o)}function y(){x(),c!==l&&(c=l,h(c.object))}function x(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:function _(r,l,u,y,x){let _=!1;if(s){const e=(function M(e,n,r){const s=!0===r.wireframe;let l=o[e.id];void 0===l&&(l={},o[e.id]=l);let c=l[n.id];void 0===c&&(c={},l[n.id]=c);let h=c[s];void 0===h&&(h=d((function u(){return i.isWebGL2?t.createVertexArray():a.createVertexArrayOES()})()),c[s]=h);return h})(y,u,l);c!==e&&(c=e,h(c.object)),_=(function w(t,e){const n=c.attributes,i=t.attributes;let r=0;for(const t in i){const e=n[t],a=i[t];if(void 0===e)return!0;if(e.attribute!==a)return!0;if(e.data!==a.data)return!0;r++}return c.attributesNum!==r||c.index!==e})(y,x),_&&(function b(t,e){const n={},i=t.attributes;let r=0;for(const t in i){const e=i[t],a={};a.attribute=e,e.data&&(a.data=e.data),n[t]=a,r++}c.attributes=n,c.attributesNum=r,c.index=e})(y,x)}else{const t=!0===l.wireframe;c.geometry===y.id&&c.program===u.id&&c.wireframe===t||(c.geometry=y.id,c.program=u.id,c.wireframe=t,_=!0)}!0===r.isInstancedMesh&&(_=!0),null!==x&&n.update(x,34963),_&&(!(function S(r,a,s,o){if(!1===i.isWebGL2&&(r.isInstancedMesh||o.isInstancedBufferGeometry)&&null===e.get(\"ANGLE_instanced_arrays\"))return;p();const l=o.attributes,c=s.getAttributes(),h=a.defaultAttributeValues;for(const e in c){const i=c[e];if(i>=0){const a=l[e];if(void 0!==a){const e=a.normalized,r=a.itemSize,s=n.get(a);if(void 0===s)continue;const l=s.buffer,c=s.type,h=s.bytesPerElement;if(a.isInterleavedBufferAttribute){const n=a.data,s=n.stride,u=a.offset;n&&n.isInstancedInterleavedBuffer?(m(i,n.meshPerAttribute),void 0===o._maxInstanceCount&&(o._maxInstanceCount=n.meshPerAttribute*n.count)):f(i),t.bindBuffer(34962,l),v(i,r,c,e,s*h,u*h)}else a.isInstancedBufferAttribute?(m(i,a.meshPerAttribute),void 0===o._maxInstanceCount&&(o._maxInstanceCount=a.meshPerAttribute*a.count)):f(i),t.bindBuffer(34962,l),v(i,r,c,e,0,0)}else if(\"instanceMatrix\"===e){const e=n.get(r.instanceMatrix);if(void 0===e)continue;const a=e.buffer,s=e.type;m(i+0,1),m(i+1,1),m(i+2,1),m(i+3,1),t.bindBuffer(34962,a),t.vertexAttribPointer(i+0,4,s,!1,64,0),t.vertexAttribPointer(i+1,4,s,!1,64,16),t.vertexAttribPointer(i+2,4,s,!1,64,32),t.vertexAttribPointer(i+3,4,s,!1,64,48)}else if(\"instanceColor\"===e){const e=n.get(r.instanceColor);if(void 0===e)continue;const a=e.buffer,s=e.type;m(i,1),t.bindBuffer(34962,a),t.vertexAttribPointer(i,3,s,!1,12,0)}else if(void 0!==h){const n=h[e];if(void 0!==n)switch(n.length){case 2:t.vertexAttrib2fv(i,n);break;case 3:t.vertexAttrib3fv(i,n);break;case 4:t.vertexAttrib4fv(i,n);break;default:t.vertexAttrib1fv(i,n)}}}}g()})(r,l,u,y),null!==x&&t.bindBuffer(34963,n.get(x).buffer))},reset:y,resetDefaultState:x,dispose:function M(){y();for(const t in o){const e=o[t];for(const t in e){const n=e[t];for(const t in n)u(n[t].object),delete n[t];delete e[t]}delete o[t]}},releaseStatesOfGeometry:function w(t){if(void 0===o[t.id])return;const e=o[t.id];for(const t in e){const n=e[t];for(const t in n)u(n[t].object),delete n[t];delete e[t]}delete o[t.id]},releaseStatesOfProgram:function b(t){for(const e in o){const n=o[e];if(void 0===n[t.id])continue;const i=n[t.id];for(const t in i)u(i[t].object),delete i[t];delete n[t.id]}},initAttributes:p,enableAttribute:f,disableUnusedAttributes:g}}function ho(t,e,n,i){const r=i.isWebGL2;let a;this.setMode=function s(t){a=t},this.render=function o(e,i){t.drawArrays(a,e,i),n.update(i,a,1)},this.renderInstances=function l(i,s,o){if(0===o)return;let l,c;if(r)l=t,c=\"drawArraysInstanced\";else if(l=e.get(\"ANGLE_instanced_arrays\"),c=\"drawArraysInstancedANGLE\",null===l)return void console.error(\"THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");l[c](a,i,s,o),n.update(s,a,o)}}function uo(t,e,n){let i;function r(e){if(\"highp\"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return\"highp\";e=\"mediump\"}return\"mediump\"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?\"mediump\":\"lowp\"}const a=\"undefined\"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||\"undefined\"!=typeof WebGL2ComputeRenderingContext&&t instanceof WebGL2ComputeRenderingContext;let s=void 0!==n.precision?n.precision:\"highp\";const o=r(s);o!==s&&(console.warn(\"THREE.WebGLRenderer:\",s,\"not supported, using\",o,\"instead.\"),s=o);const l=a||e.has(\"WEBGL_draw_buffers\"),c=!0===n.logarithmicDepthBuffer,h=t.getParameter(34930),u=t.getParameter(35660),d=t.getParameter(3379),p=t.getParameter(34076),f=t.getParameter(34921),m=t.getParameter(36347),g=t.getParameter(36348),v=t.getParameter(36349),y=u>0,x=a||e.has(\"OES_texture_float\");return{isWebGL2:a,drawBuffers:l,getMaxAnisotropy:function _(){if(void 0!==i)return i;if(!0===e.has(\"EXT_texture_filter_anisotropic\")){const n=e.get(\"EXT_texture_filter_anisotropic\");i=t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i},getMaxPrecision:r,precision:s,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:u,maxTextureSize:d,maxCubemapSize:p,maxAttributes:f,maxVertexUniforms:m,maxVaryings:g,maxFragmentUniforms:v,vertexTextures:y,floatFragmentTextures:x,floatVertexTextures:y&&x,maxSamples:a?t.getParameter(36183):0}}function po(t){const e=this;let n=null,i=0,r=!1,a=!1;const s=new Ks,o=new Sr,l={value:null,needsUpdate:!1};function c(){l.value!==n&&(l.value=n,l.needsUpdate=i>0),e.numPlanes=i,e.numIntersection=0}function h(t,n,i,r){const a=null!==t?t.length:0;let c=null;if(0!==a){if(c=l.value,!0!==r||null===c){const e=i+4*a,r=n.matrixWorldInverse;o.getNormalMatrix(r),(null===c||c.length<e)&&(c=new Float32Array(e));for(let e=0,n=i;e!==a;++e,n+=4)s.copy(t[e]).applyMatrix4(r,o),s.normal.toArray(c,n),c[n+3]=s.constant}l.value=c,l.needsUpdate=!0}return e.numPlanes=a,e.numIntersection=0,c}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(t,e,a){const s=0!==t.length||e||0!==i||r;return r=e,n=h(t,a,0),i=t.length,s},this.beginShadows=function(){a=!0,h(null)},this.endShadows=function(){a=!1,c()},this.setState=function(e,s,o){const u=e.clippingPlanes,d=e.clipIntersection,p=e.clipShadows,f=t.get(e);if(!r||null===u||0===u.length||a&&!p)a?h(null):c();else{const t=a?0:i,e=4*t;let r=f.clippingState||null;l.value=r,r=h(u,s,e,o);for(let t=0;t!==e;++t)r[t]=n[t];f.clippingState=r,this.numIntersection=d?this.numPlanes:0,this.numPlanes+=t}}}function fo(t){let e=new WeakMap;function n(t,e){return 303===e?t.mapping=Ii:304===e&&(t.mapping=Oi),t}function i(t){const n=t.target;n.removeEventListener(\"dispose\",i);const r=e.get(n);void 0!==r&&(e.delete(n),r.dispose())}return{get:function r(a){if(a&&a.isTexture&&!1===a.isRenderTargetTexture){const r=a.mapping;if(303===r||304===r){if(e.has(a)){return n(e.get(a).texture,a.mapping)}{const r=a.image;if(r&&r.height>0){const s=t.getRenderTarget(),o=new Ys(r.height/2);return o.fromEquirectangularTexture(t,a),e.set(a,o),t.setRenderTarget(s),a.addEventListener(\"dispose\",i),n(o.texture,a.mapping)}return null}}}return a},dispose:function a(){e=new WeakMap}}}oo.physical={uniforms:Hs([oo.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new br(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new ns(0)},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new br},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationTint:{value:new ns(0)},specularIntensity:{value:0},specularIntensityMap:{value:null},specularTint:{value:new ns(1,1,1)},specularTintMap:{value:null}}]),vertexShader:ao.meshphysical_vert,fragmentShader:ao.meshphysical_frag};class mo extends Vs{constructor(t=-1,e=1,n=1,i=-1,r=.1,a=2e3){super(),this.type=\"OrthographicCamera\",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=i,this.near=r,this.far=a,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,n,i,r,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-t,a=n+t,s=i+e,o=i-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=t*this.view.offsetX,a=r+t*this.view.width,s-=e*this.view.offsetY,o=s-e*this.view.height}this.projectionMatrix.makeOrthographic(r,a,s,o,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}mo.prototype.isOrthographicCamera=!0;class go extends Gs{constructor(t){super(t),this.type=\"RawShaderMaterial\"}}go.prototype.isRawShaderMaterial=!0;const vo=Math.pow(2,8),yo=[.125,.215,.35,.446,.526,.582],xo=5+yo.length,_o=20,Mo={[sr]:0,[or]:1,[cr]:2,3004:3,3005:4,3006:5,[lr]:6},wo=new is({side:1,depthWrite:!1,depthTest:!1}),bo=new zs(new Fs,wo),So=new mo,{_lodPlanes:To,_sizeLods:Eo,_sigmas:Ao}=zo(),Lo=new ns;let Co=null;const Ro=(1+Math.sqrt(5))/2,Po=1/Ro,Do=[new Ir(1,1,1),new Ir(-1,1,1),new Ir(1,1,-1),new Ir(-1,1,-1),new Ir(0,Ro,Po),new Ir(0,Ro,-Po),new Ir(Po,0,Ro),new Ir(-Po,0,Ro),new Ir(Ro,Po,0),new Ir(-Ro,Po,0)];function No(t){const e=Math.max(t.r,t.g,t.b),n=Math.min(Math.max(Math.ceil(Math.log2(e)),-128),127);t.multiplyScalar(Math.pow(2,-n));return(n+128)/255}class Io{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._blurMaterial=(function e(t){const e=new Float32Array(t),n=new Ir(0,1,0);return new go({name:\"SphericalGaussianBlur\",defines:{n:t},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:e},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:n},inputEncoding:{value:Mo[3e3]},outputEncoding:{value:Mo[3e3]}},vertexShader:ko(),fragmentShader:`\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform int samples;\\n\\t\\t\\tuniform float weights[ n ];\\n\\t\\t\\tuniform bool latitudinal;\\n\\t\\t\\tuniform float dTheta;\\n\\t\\t\\tuniform float mipInt;\\n\\t\\t\\tuniform vec3 poleAxis;\\n\\n\\t\\t\\t${Go()}\\n\\n\\t\\t\\t#define ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\t#include <cube_uv_reflection_fragment>\\n\\n\\t\\t\\tvec3 getSample( float theta, vec3 axis ) {\\n\\n\\t\\t\\t\\tfloat cosTheta = cos( theta );\\n\\t\\t\\t\\t// Rodrigues' axis-angle rotation\\n\\t\\t\\t\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t\\t\\t\\t+ cross( axis, vOutputDirection ) * sin( theta )\\n\\t\\t\\t\\t\\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\\n\\n\\t\\t\\t\\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\\n\\n\\t\\t\\t\\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\\n\\n\\t\\t\\t\\t\\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\taxis = normalize( axis );\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\\n\\n\\t\\t\\t\\tfor ( int i = 1; i < n; i++ ) {\\n\\n\\t\\t\\t\\t\\tif ( i >= samples ) {\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfloat theta = dTheta * float( i );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t`,blending:0,depthTest:!1,depthWrite:!1})})(_o),this._equirectShader=null,this._cubemapShader=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,i=100){Co=this._renderer.getRenderTarget();const r=this._allocateTargets();return this._sceneToCubeUV(t,n,i,r),e>0&&this._blur(r,0,0,e),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(t){return this._fromTexture(t)}fromCubemap(t){return this._fromTexture(t)}compileCubemapShader(){null===this._cubemapShader&&(this._cubemapShader=Ho(),this._compileMaterial(this._cubemapShader))}compileEquirectangularShader(){null===this._equirectShader&&(this._equirectShader=Bo(),this._compileMaterial(this._equirectShader))}dispose(){this._blurMaterial.dispose(),null!==this._cubemapShader&&this._cubemapShader.dispose(),null!==this._equirectShader&&this._equirectShader.dispose();for(let t=0;t<To.length;t++)To[t].dispose()}_cleanup(t){this._pingPongRenderTarget.dispose(),this._renderer.setRenderTarget(Co),t.scissorTest=!1,Fo(t,0,0,t.width,t.height)}_fromTexture(t){Co=this._renderer.getRenderTarget();const e=this._allocateTargets(t);return this._textureToCubeUV(t,e),this._applyPMREM(e),this._cleanup(e),e}_allocateTargets(t){const e={magFilter:Hi,minFilter:Hi,generateMipmaps:!1,type:Vi,format:1023,encoding:Oo(t)?t.encoding:cr,depthBuffer:!1},n=Uo(e);return n.depthBuffer=!t,this._pingPongRenderTarget=Uo(e),n}_compileMaterial(t){const e=new zs(To[0],t);this._renderer.compile(e,So)}_sceneToCubeUV(t,e,n,i){const r=new Ws(90,1,e,n),a=[1,-1,1,1,1,1],s=[1,1,1,-1,-1,-1],o=this._renderer,l=o.autoClear,c=o.outputEncoding,h=o.toneMapping;o.getClearColor(Lo),o.toneMapping=0,o.outputEncoding=sr,o.autoClear=!1;let u=!1;const d=t.background;if(d){if(d.isColor){wo.color.copy(d).convertSRGBToLinear(),t.background=null;const e=No(wo.color);wo.opacity=e,u=!0}}else{wo.color.copy(Lo).convertSRGBToLinear();const t=No(wo.color);wo.opacity=t,u=!0}for(let e=0;e<6;e++){const n=e%3;0==n?(r.up.set(0,a[e],0),r.lookAt(s[e],0,0)):1==n?(r.up.set(0,0,a[e]),r.lookAt(0,s[e],0)):(r.up.set(0,a[e],0),r.lookAt(0,0,s[e])),Fo(i,n*vo,e>2?vo:0,vo,vo),o.setRenderTarget(i),u&&o.render(bo,r),o.render(t,r)}o.toneMapping=h,o.outputEncoding=c,o.autoClear=l}_textureToCubeUV(t,e){const n=this._renderer;t.isCubeTexture?null==this._cubemapShader&&(this._cubemapShader=Ho()):null==this._equirectShader&&(this._equirectShader=Bo());const i=t.isCubeTexture?this._cubemapShader:this._equirectShader,r=new zs(To[0],i),a=i.uniforms;a.envMap.value=t,t.isCubeTexture||a.texelSize.value.set(1/t.image.width,1/t.image.height),a.inputEncoding.value=Mo[t.encoding],a.outputEncoding.value=Mo[e.texture.encoding],Fo(e,0,0,3*vo,2*vo),n.setRenderTarget(e),n.render(r,So)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;for(let e=1;e<xo;e++){const n=Math.sqrt(Ao[e]*Ao[e]-Ao[e-1]*Ao[e-1]);this._blur(t,e-1,e,n,Do[(e-1)%Do.length])}e.autoClear=n}_blur(t,e,n,i,r){const a=this._pingPongRenderTarget;this._halfBlur(t,a,e,n,i,\"latitudinal\",r),this._halfBlur(a,t,n,n,i,\"longitudinal\",r)}_halfBlur(t,e,n,i,r,a,s){const o=this._renderer,l=this._blurMaterial;\"latitudinal\"!==a&&\"longitudinal\"!==a&&console.error(\"blur direction must be either latitudinal or longitudinal!\");const c=new zs(To[i],l),h=l.uniforms,u=Eo[n]-1,d=isFinite(r)?Math.PI/(2*u):2*Math.PI/39,p=r/d,f=isFinite(r)?1+Math.floor(3*p):_o;f>_o&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${f} samples when the maximum is set to 20`);const m=[];let g=0;for(let t=0;t<_o;++t){const e=t/p,n=Math.exp(-e*e/2);m.push(n),0==t?g+=n:t<f&&(g+=2*n)}for(let t=0;t<m.length;t++)m[t]=m[t]/g;h.envMap.value=t.texture,h.samples.value=f,h.weights.value=m,h.latitudinal.value=\"latitudinal\"===a,s&&(h.poleAxis.value=s),h.dTheta.value=d,h.mipInt.value=8-n,h.inputEncoding.value=Mo[t.texture.encoding],h.outputEncoding.value=Mo[t.texture.encoding];const v=Eo[i];Fo(e,3*Math.max(0,vo-2*v),(0===i?0:2*vo)+2*v*(i>4?i-8+4:0),3*v,2*v),o.setRenderTarget(e),o.render(c,So)}}function Oo(t){return void 0!==t&&t.type===Vi&&(t.encoding===sr||t.encoding===or||t.encoding===lr)}function zo(){const t=[],e=[],n=[];let i=8;for(let r=0;r<xo;r++){const a=Math.pow(2,i);e.push(a);let s=1/a;r>4?s=yo[r-8+4-1]:0==r&&(s=0),n.push(s);const o=1/(a-1),l=-o/2,c=1+o/2,h=[l,l,c,l,c,c,l,l,c,c,l,c],u=6,d=6,p=3,f=2,m=1,g=new Float32Array(p*d*u),v=new Float32Array(f*d*u),y=new Float32Array(m*d*u);for(let t=0;t<u;t++){const e=t%3*2/3-1,n=t>2?0:-1;g.set([e,n,0,e+2/3,n,0,e+2/3,n+1,0,e,n,0,e+2/3,n+1,0,e,n+1,0],p*d*t),v.set(h,f*d*t);y.set([t,t,t,t,t,t],m*d*t)}const x=new ys;x.setAttribute(\"position\",new ss(g,p)),x.setAttribute(\"uv\",new ss(v,f)),x.setAttribute(\"faceIndex\",new ss(y,m)),t.push(x),i>4&&i--}return{_lodPlanes:t,_sizeLods:e,_sigmas:n}}function Uo(t){const e=new Pr(3*vo,3*vo,t);return e.texture.mapping=zi,e.texture.name=\"PMREM.cubeUv\",e.scissorTest=!0,e}function Fo(t,e,n,i,r){t.viewport.set(e,n,i,r),t.scissor.set(e,n,i,r)}function Bo(){const t=new br(1,1);return new go({name:\"EquirectangularToCubeUV\",uniforms:{envMap:{value:null},texelSize:{value:t},inputEncoding:{value:Mo[3e3]},outputEncoding:{value:Mo[3e3]}},vertexShader:ko(),fragmentShader:`\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform vec2 texelSize;\\n\\n\\t\\t\\t${Go()}\\n\\n\\t\\t\\t#include <common>\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\n\\t\\t\\t\\tvec3 outputDirection = normalize( vOutputDirection );\\n\\t\\t\\t\\tvec2 uv = equirectUv( outputDirection );\\n\\n\\t\\t\\t\\tvec2 f = fract( uv / texelSize - 0.5 );\\n\\t\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\t\\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x += texelSize.x;\\n\\t\\t\\t\\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.y += texelSize.y;\\n\\t\\t\\t\\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x -= texelSize.x;\\n\\t\\t\\t\\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\n\\t\\t\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\t\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\t\\t\\tgl_FragColor.rgb = mix( tm, bm, f.y );\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t`,blending:0,depthTest:!1,depthWrite:!1})}function Ho(){return new go({name:\"CubemapToCubeUV\",uniforms:{envMap:{value:null},inputEncoding:{value:Mo[3e3]},outputEncoding:{value:Mo[3e3]}},vertexShader:ko(),fragmentShader:`\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform samplerCube envMap;\\n\\n\\t\\t\\t${Go()}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t`,blending:0,depthTest:!1,depthWrite:!1})}function ko(){return\"\\n\\n\\t\\tprecision mediump float;\\n\\t\\tprecision mediump int;\\n\\n\\t\\tattribute vec3 position;\\n\\t\\tattribute vec2 uv;\\n\\t\\tattribute float faceIndex;\\n\\n\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t// RH coordinate system; PMREM face-indexing convention\\n\\t\\tvec3 getDirection( vec2 uv, float face ) {\\n\\n\\t\\t\\tuv = 2.0 * uv - 1.0;\\n\\n\\t\\t\\tvec3 direction = vec3( uv, 1.0 );\\n\\n\\t\\t\\tif ( face == 0.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx; // ( 1, v, u ) pos x\\n\\n\\t\\t\\t} else if ( face == 1.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\\n\\n\\t\\t\\t} else if ( face == 2.0 ) {\\n\\n\\t\\t\\t\\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\\n\\n\\t\\t\\t} else if ( face == 3.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\\n\\n\\t\\t\\t} else if ( face == 4.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\\n\\n\\t\\t\\t} else if ( face == 5.0 ) {\\n\\n\\t\\t\\t\\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn direction;\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvOutputDirection = getDirection( uv, faceIndex );\\n\\t\\t\\tgl_Position = vec4( position, 1.0 );\\n\\n\\t\\t}\\n\\t\"}function Go(){return\"\\n\\n\\t\\tuniform int inputEncoding;\\n\\t\\tuniform int outputEncoding;\\n\\n\\t\\t#include <encodings_pars_fragment>\\n\\n\\t\\tvec4 inputTexelToLinear( vec4 value ) {\\n\\n\\t\\t\\tif ( inputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( inputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn sRGBToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn RGBEToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 7.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 16.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn RGBDToLinear( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn GammaToLinear( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 linearToOutputTexel( vec4 value ) {\\n\\n\\t\\t\\tif ( outputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( outputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn LinearTosRGB( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBE( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 7.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 16.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBD( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn LinearToGamma( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 envMapTexelToLinear( vec4 color ) {\\n\\n\\t\\t\\treturn inputTexelToLinear( color );\\n\\n\\t\\t}\\n\\t\"}function Vo(t){let e=new WeakMap,n=null;function i(t){const n=t.target;n.removeEventListener(\"dispose\",i);const r=e.get(n);void 0!==r&&(r.delete(n),r.dispose())}return{get:function r(a){if(a&&a.isTexture&&!1===a.isRenderTargetTexture){const r=a.mapping,s=303===r||304===r,o=r===Ii||r===Oi;if(s||o){if(e.has(a))return e.get(a).texture;{const r=a.image;if(s&&r&&r.height>0||o&&r&&(function s(t){let e=0;const n=6;for(let i=0;i<n;i++)void 0!==t[i]&&e++;return e===n})(r)){const r=t.getRenderTarget();null===n&&(n=new Io(t));const o=s?n.fromEquirectangular(a):n.fromCubemap(a);return e.set(a,o),t.setRenderTarget(r),a.addEventListener(\"dispose\",i),o.texture}return null}}}return a},dispose:function a(){e=new WeakMap,null!==n&&(n.dispose(),n=null)}}}function Wo(t){const e={};function n(n){if(void 0!==e[n])return e[n];let i;switch(n){case\"WEBGL_depth_texture\":i=t.getExtension(\"WEBGL_depth_texture\")||t.getExtension(\"MOZ_WEBGL_depth_texture\")||t.getExtension(\"WEBKIT_WEBGL_depth_texture\");break;case\"EXT_texture_filter_anisotropic\":i=t.getExtension(\"EXT_texture_filter_anisotropic\")||t.getExtension(\"MOZ_EXT_texture_filter_anisotropic\")||t.getExtension(\"WEBKIT_EXT_texture_filter_anisotropic\");break;case\"WEBGL_compressed_texture_s3tc\":i=t.getExtension(\"WEBGL_compressed_texture_s3tc\")||t.getExtension(\"MOZ_WEBGL_compressed_texture_s3tc\")||t.getExtension(\"WEBKIT_WEBGL_compressed_texture_s3tc\");break;case\"WEBGL_compressed_texture_pvrtc\":i=t.getExtension(\"WEBGL_compressed_texture_pvrtc\")||t.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\");break;default:i=t.getExtension(n)}return e[n]=i,i}return{has:function(t){return null!==n(t)},init:function(t){t.isWebGL2?n(\"EXT_color_buffer_float\"):(n(\"WEBGL_depth_texture\"),n(\"OES_texture_float\"),n(\"OES_texture_half_float\"),n(\"OES_texture_half_float_linear\"),n(\"OES_standard_derivatives\"),n(\"OES_element_index_uint\"),n(\"OES_vertex_array_object\"),n(\"ANGLE_instanced_arrays\")),n(\"OES_texture_float_linear\"),n(\"EXT_color_buffer_half_float\")},get:function(t){const e=n(t);return null===e&&console.warn(\"THREE.WebGLRenderer: \"+t+\" extension not supported.\"),e}}}function jo(t,e,n,i){const r={},a=new WeakMap;function s(t){const o=t.target;null!==o.index&&e.remove(o.index);for(const t in o.attributes)e.remove(o.attributes[t]);o.removeEventListener(\"dispose\",s),delete r[o.id];const l=a.get(o);l&&(e.remove(l),a.delete(o)),i.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,n.memory.geometries--}function o(t){const n=[],i=t.index,r=t.attributes.position;let s=0;if(null!==i){const t=i.array;s=i.version;for(let e=0,i=t.length;e<i;e+=3){const i=t[e+0],r=t[e+1],a=t[e+2];n.push(i,r,r,a,a,i)}}else{s=r.version;for(let t=0,e=r.array.length/3-1;t<e;t+=3){const e=t+0,i=t+1,r=t+2;n.push(e,i,i,r,r,e)}}const o=new(hs(n)>65535?ls:os)(n,1);o.version=s;const l=a.get(t);l&&e.remove(l),a.set(t,o)}return{get:function l(t,e){return!0===r[e.id]||(e.addEventListener(\"dispose\",s),r[e.id]=!0,n.memory.geometries++),e},update:function c(t){const n=t.attributes;for(const t in n)e.update(n[t],34962);const i=t.morphAttributes;for(const t in i){const n=i[t];for(let t=0,i=n.length;t<i;t++)e.update(n[t],34962)}},getWireframeAttribute:function h(t){const e=a.get(t);if(e){const n=t.index;null!==n&&e.version<n.version&&o(t)}else o(t);return a.get(t)}}}function qo(t,e,n,i){const r=i.isWebGL2;let a,s,o;this.setMode=function l(t){a=t},this.setIndex=function c(t){s=t.type,o=t.bytesPerElement},this.render=function h(e,i){t.drawElements(a,i,s,e*o),n.update(i,a,1)},this.renderInstances=function u(i,l,c){if(0===c)return;let h,u;if(r)h=t,u=\"drawElementsInstanced\";else if(h=e.get(\"ANGLE_instanced_arrays\"),u=\"drawElementsInstancedANGLE\",null===h)return void console.error(\"THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");h[u](a,l,s,i*o,c),n.update(l,a,c)}}function Xo(t){const e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function n(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function i(t,n,r){switch(e.calls++,n){case 4:e.triangles+=r*(t/3);break;case 1:e.lines+=r*(t/2);break;case 3:e.lines+=r*(t-1);break;case 2:e.lines+=r*t;break;case 0:e.points+=r*t;break;default:console.error(\"THREE.WebGLInfo: Unknown draw mode:\",n)}}}}function Yo(t,e){return t[0]-e[0]}function Zo(t,e){return Math.abs(e[1])-Math.abs(t[1])}function Jo(t){const e={},n=new Float32Array(8),i=[];for(let t=0;t<8;t++)i[t]=[t,0];return{update:function r(a,s,o,l){const c=a.morphTargetInfluences,h=void 0===c?0:c.length;let u=e[s.id];if(void 0===u||u.length!==h){u=[];for(let t=0;t<h;t++)u[t]=[t,0];e[s.id]=u}for(let t=0;t<h;t++){const e=u[t];e[0]=t,e[1]=c[t]}u.sort(Zo);for(let t=0;t<8;t++)t<h&&u[t][1]?(i[t][0]=u[t][0],i[t][1]=u[t][1]):(i[t][0]=Number.MAX_SAFE_INTEGER,i[t][1]=0);i.sort(Yo);const d=s.morphAttributes.position,p=s.morphAttributes.normal;let f=0;for(let t=0;t<8;t++){const e=i[t],r=e[0],a=e[1];r!==Number.MAX_SAFE_INTEGER&&a?(d&&s.getAttribute(\"morphTarget\"+t)!==d[r]&&s.setAttribute(\"morphTarget\"+t,d[r]),p&&s.getAttribute(\"morphNormal\"+t)!==p[r]&&s.setAttribute(\"morphNormal\"+t,p[r]),n[t]=a,f+=a):(d&&!0===s.hasAttribute(\"morphTarget\"+t)&&s.deleteAttribute(\"morphTarget\"+t),p&&!0===s.hasAttribute(\"morphNormal\"+t)&&s.deleteAttribute(\"morphNormal\"+t),n[t]=0)}const m=s.morphTargetsRelative?1:1-f;l.getUniforms().setValue(t,\"morphTargetBaseInfluence\",m),l.getUniforms().setValue(t,\"morphTargetInfluences\",n)}}}function Qo(t,e,n,i){let r=new WeakMap;function a(t){const e=t.target;e.removeEventListener(\"dispose\",a),n.remove(e.instanceMatrix),null!==e.instanceColor&&n.remove(e.instanceColor)}return{update:function s(t){const s=i.render.frame,o=e.get(t,t.geometry);return r.get(o)!==s&&(e.update(o),r.set(o,s)),t.isInstancedMesh&&(!1===t.hasEventListener(\"dispose\",a)&&t.addEventListener(\"dispose\",a),n.update(t.instanceMatrix,34962),null!==t.instanceColor&&n.update(t.instanceColor,34962)),o},dispose:function o(){r=new WeakMap}}}class Ko extends Lr{constructor(t=null,e=1,n=1,i=1){super(null),this.image={data:t,width:e,height:n,depth:i},this.magFilter=Hi,this.minFilter=Hi,this.wrapR=Fi,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}Ko.prototype.isDataTexture2DArray=!0;class $o extends Lr{constructor(t=null,e=1,n=1,i=1){super(null),this.image={data:t,width:e,height:n,depth:i},this.magFilter=Hi,this.minFilter=Hi,this.wrapR=Fi,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}$o.prototype.isDataTexture3D=!0;const tl=new Lr,el=new Ko,nl=new $o,il=new Xs,rl=[],al=[],sl=new Float32Array(16),ol=new Float32Array(9),ll=new Float32Array(4);function cl(t,e,n){const i=t[0];if(i<=0||i>0)return t;const r=e*n;let a=rl[r];if(void 0===a&&(a=new Float32Array(r),rl[r]=a),0!==e){i.toArray(a,0);for(let i=1,r=0;i!==e;++i)r+=n,t[i].toArray(a,r)}return a}function hl(t,e){if(t.length!==e.length)return!1;for(let n=0,i=t.length;n<i;n++)if(t[n]!==e[n])return!1;return!0}function ul(t,e){for(let n=0,i=e.length;n<i;n++)t[n]=e[n]}function dl(t,e){let n=al[e];void 0===n&&(n=new Int32Array(e),al[e]=n);for(let i=0;i!==e;++i)n[i]=t.allocateTextureUnit();return n}function pl(t,e){const n=this.cache;n[0]!==e&&(t.uniform1f(this.addr,e),n[0]=e)}function fl(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(hl(n,e))return;t.uniform2fv(this.addr,e),ul(n,e)}}function ml(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(void 0!==e.r)n[0]===e.r&&n[1]===e.g&&n[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(hl(n,e))return;t.uniform3fv(this.addr,e),ul(n,e)}}function gl(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(hl(n,e))return;t.uniform4fv(this.addr,e),ul(n,e)}}function vl(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(hl(n,e))return;t.uniformMatrix2fv(this.addr,!1,e),ul(n,e)}else{if(hl(n,i))return;ll.set(i),t.uniformMatrix2fv(this.addr,!1,ll),ul(n,i)}}function yl(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(hl(n,e))return;t.uniformMatrix3fv(this.addr,!1,e),ul(n,e)}else{if(hl(n,i))return;ol.set(i),t.uniformMatrix3fv(this.addr,!1,ol),ul(n,i)}}function xl(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(hl(n,e))return;t.uniformMatrix4fv(this.addr,!1,e),ul(n,e)}else{if(hl(n,i))return;sl.set(i),t.uniformMatrix4fv(this.addr,!1,sl),ul(n,i)}}function _l(t,e){const n=this.cache;n[0]!==e&&(t.uniform1i(this.addr,e),n[0]=e)}function Ml(t,e){const n=this.cache;hl(n,e)||(t.uniform2iv(this.addr,e),ul(n,e))}function wl(t,e){const n=this.cache;hl(n,e)||(t.uniform3iv(this.addr,e),ul(n,e))}function bl(t,e){const n=this.cache;hl(n,e)||(t.uniform4iv(this.addr,e),ul(n,e))}function Sl(t,e){const n=this.cache;n[0]!==e&&(t.uniform1ui(this.addr,e),n[0]=e)}function Tl(t,e){const n=this.cache;hl(n,e)||(t.uniform2uiv(this.addr,e),ul(n,e))}function El(t,e){const n=this.cache;hl(n,e)||(t.uniform3uiv(this.addr,e),ul(n,e))}function Al(t,e){const n=this.cache;hl(n,e)||(t.uniform4uiv(this.addr,e),ul(n,e))}function Ll(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.safeSetTexture2D(e||tl,r)}function Cl(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture3D(e||nl,r)}function Rl(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.safeSetTextureCube(e||il,r)}function Pl(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture2DArray(e||el,r)}function Dl(t,e){t.uniform1fv(this.addr,e)}function Nl(t,e){const n=cl(e,this.size,2);t.uniform2fv(this.addr,n)}function Il(t,e){const n=cl(e,this.size,3);t.uniform3fv(this.addr,n)}function Ol(t,e){const n=cl(e,this.size,4);t.uniform4fv(this.addr,n)}function zl(t,e){const n=cl(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,n)}function Ul(t,e){const n=cl(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,n)}function Fl(t,e){const n=cl(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,n)}function Bl(t,e){t.uniform1iv(this.addr,e)}function Hl(t,e){t.uniform2iv(this.addr,e)}function kl(t,e){t.uniform3iv(this.addr,e)}function Gl(t,e){t.uniform4iv(this.addr,e)}function Vl(t,e){t.uniform1uiv(this.addr,e)}function Wl(t,e){t.uniform2uiv(this.addr,e)}function jl(t,e){t.uniform3uiv(this.addr,e)}function ql(t,e){t.uniform4uiv(this.addr,e)}function Xl(t,e,n){const i=e.length,r=dl(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t)n.safeSetTexture2D(e[t]||tl,r[t])}function Yl(t,e,n){const i=e.length,r=dl(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t)n.safeSetTextureCube(e[t]||il,r[t])}function Zl(t,e,n){this.id=t,this.addr=n,this.cache=[],this.setValue=(function i(t){switch(t){case 5126:return pl;case 35664:return fl;case 35665:return ml;case 35666:return gl;case 35674:return vl;case 35675:return yl;case 35676:return xl;case 5124:case 35670:return _l;case 35667:case 35671:return Ml;case 35668:case 35672:return wl;case 35669:case 35673:return bl;case 5125:return Sl;case 36294:return Tl;case 36295:return El;case 36296:return Al;case 35678:case 36198:case 36298:case 36306:case 35682:return Ll;case 35679:case 36299:case 36307:return Cl;case 35680:case 36300:case 36308:case 36293:return Rl;case 36289:case 36303:case 36311:case 36292:return Pl}})(e.type)}function Jl(t,e,n){this.id=t,this.addr=n,this.cache=[],this.size=e.size,this.setValue=(function i(t){switch(t){case 5126:return Dl;case 35664:return Nl;case 35665:return Il;case 35666:return Ol;case 35674:return zl;case 35675:return Ul;case 35676:return Fl;case 5124:case 35670:return Bl;case 35667:case 35671:return Hl;case 35668:case 35672:return kl;case 35669:case 35673:return Gl;case 5125:return Vl;case 36294:return Wl;case 36295:return jl;case 36296:return ql;case 35678:case 36198:case 36298:case 36306:case 35682:return Xl;case 35680:case 36300:case 36308:case 36293:return Yl}})(e.type)}function Ql(t){this.id=t,this.seq=[],this.map={}}Jl.prototype.updateCache=function(t){const e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),ul(e,t)},Ql.prototype.setValue=function(t,e,n){const i=this.seq;for(let r=0,a=i.length;r!==a;++r){const a=i[r];a.setValue(t,e[a.id],n)}};const Kl=/(\\w+)(\\])?(\\[|\\.)?/g;function $l(t,e){t.seq.push(e),t.map[e.id]=e}function tc(t,e,n){const i=t.name,r=i.length;for(Kl.lastIndex=0;;){const a=Kl.exec(i),s=Kl.lastIndex;let o=a[1];const l=a[3];if(\"]\"===a[2]&&(o|=0),void 0===l||\"[\"===l&&s+2===r){$l(n,void 0===l?new Zl(o,t,e):new Jl(o,t,e));break}{let t=n.map[o];void 0===t&&(t=new Ql(o),$l(n,t)),n=t}}}function ec(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,35718);for(let i=0;i<n;++i){const n=t.getActiveUniform(e,i);tc(n,t.getUniformLocation(e,n.name),this)}}function nc(t,e,n){const i=t.createShader(e);return t.shaderSource(i,n),t.compileShader(i),i}ec.prototype.setValue=function(t,e,n,i){const r=this.map[e];void 0!==r&&r.setValue(t,n,i)},ec.prototype.setOptional=function(t,e,n){const i=e[n];void 0!==i&&this.setValue(t,n,i)},ec.upload=function(t,e,n,i){for(let r=0,a=e.length;r!==a;++r){const a=e[r],s=n[a.id];!1!==s.needsUpdate&&a.setValue(t,s.value,i)}},ec.seqWithValue=function(t,e){const n=[];for(let i=0,r=t.length;i!==r;++i){const r=t[i];r.id in e&&n.push(r)}return n};let ic=0;function rc(t){switch(t){case sr:return[\"Linear\",\"( value )\"];case or:return[\"sRGB\",\"( value )\"];case cr:return[\"RGBE\",\"( value )\"];case 3004:return[\"RGBM\",\"( value, 7.0 )\"];case 3005:return[\"RGBM\",\"( value, 16.0 )\"];case 3006:return[\"RGBD\",\"( value, 256.0 )\"];case lr:return[\"Gamma\",\"( value, float( GAMMA_FACTOR ) )\"];case 3003:return[\"LogLuv\",\"( value )\"];default:return console.warn(\"THREE.WebGLProgram: Unsupported encoding:\",t),[\"Linear\",\"( value )\"]}}function ac(t,e,n){const i=t.getShaderParameter(e,35713),r=t.getShaderInfoLog(e).trim();if(i&&\"\"===r)return\"\";return\"THREE.WebGLShader: gl.getShaderInfoLog() \"+n+\"\\n\"+r+(function a(t){const e=t.split(\"\\n\");for(let t=0;t<e.length;t++)e[t]=t+1+\": \"+e[t];return e.join(\"\\n\")})(t.getShaderSource(e))}function sc(t,e){const n=rc(e);return\"vec4 \"+t+\"( vec4 value ) { return \"+n[0]+\"ToLinear\"+n[1]+\"; }\"}function oc(t,e){const n=rc(e);return\"vec4 \"+t+\"( vec4 value ) { return LinearTo\"+n[0]+n[1]+\"; }\"}function lc(t,e){let n;switch(e){case 1:n=\"Linear\";break;case 2:n=\"Reinhard\";break;case 3:n=\"OptimizedCineon\";break;case 4:n=\"ACESFilmic\";break;case 5:n=\"Custom\";break;default:console.warn(\"THREE.WebGLProgram: Unsupported toneMapping:\",e),n=\"Linear\"}return\"vec3 \"+t+\"( vec3 color ) { return \"+n+\"ToneMapping( color ); }\"}function cc(t){return\"\"!==t}function hc(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function uc(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const dc=/^[ \\t]*#include +<([\\w\\d./]+)>/gm;function pc(t){return t.replace(dc,fc)}function fc(t,e){const n=ao[e];if(void 0===n)throw new Error(\"Can not resolve #include <\"+e+\">\");return pc(n)}const mc=/#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g,gc=/#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;function vc(t){return t.replace(gc,xc).replace(mc,yc)}function yc(t,e,n,i){return console.warn(\"WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.\"),xc(t,e,n,i)}function xc(t,e,n,i){let r=\"\";for(let t=parseInt(e);t<parseInt(n);t++)r+=i.replace(/\\[\\s*i\\s*\\]/g,\"[ \"+t+\" ]\").replace(/UNROLLED_LOOP_INDEX/g,t);return r}function _c(t){let e=\"precision \"+t.precision+\" float;\\nprecision \"+t.precision+\" int;\";return\"highp\"===t.precision?e+=\"\\n#define HIGH_PRECISION\":\"mediump\"===t.precision?e+=\"\\n#define MEDIUM_PRECISION\":\"lowp\"===t.precision&&(e+=\"\\n#define LOW_PRECISION\"),e}function Mc(t,e,n,i){const r=t.getContext(),a=n.defines;let s=n.vertexShader,o=n.fragmentShader;const l=(function c(t){let e=\"SHADOWMAP_TYPE_BASIC\";return 1===t.shadowMapType?e=\"SHADOWMAP_TYPE_PCF\":2===t.shadowMapType?e=\"SHADOWMAP_TYPE_PCF_SOFT\":3===t.shadowMapType&&(e=\"SHADOWMAP_TYPE_VSM\"),e})(n),h=(function u(t){let e=\"ENVMAP_TYPE_CUBE\";if(t.envMap)switch(t.envMapMode){case Ii:case Oi:e=\"ENVMAP_TYPE_CUBE\";break;case zi:case 307:e=\"ENVMAP_TYPE_CUBE_UV\"}return e})(n),d=(function p(t){let e=\"ENVMAP_MODE_REFLECTION\";if(t.envMap)switch(t.envMapMode){case Oi:case 307:e=\"ENVMAP_MODE_REFRACTION\"}return e})(n),f=(function m(t){let e=\"ENVMAP_BLENDING_NONE\";if(t.envMap)switch(t.combine){case 0:e=\"ENVMAP_BLENDING_MULTIPLY\";break;case 1:e=\"ENVMAP_BLENDING_MIX\";break;case 2:e=\"ENVMAP_BLENDING_ADD\"}return e})(n),g=t.gammaFactor>0?t.gammaFactor:1,v=n.isWebGL2?\"\":(function y(t){return[t.extensionDerivatives||t.envMapCubeUV||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading||\"physical\"===t.shaderID?\"#extension GL_OES_standard_derivatives : enable\":\"\",(t.extensionFragDepth||t.logarithmicDepthBuffer)&&t.rendererExtensionFragDepth?\"#extension GL_EXT_frag_depth : enable\":\"\",t.extensionDrawBuffers&&t.rendererExtensionDrawBuffers?\"#extension GL_EXT_draw_buffers : require\":\"\",(t.extensionShaderTextureLOD||t.envMap||t.transmission>0)&&t.rendererExtensionShaderTextureLod?\"#extension GL_EXT_shader_texture_lod : enable\":\"\"].filter(cc).join(\"\\n\")})(n),x=(function _(t){const e=[];for(const n in t){const i=t[n];!1!==i&&e.push(\"#define \"+n+\" \"+i)}return e.join(\"\\n\")})(a),M=r.createProgram();let w,b,S=n.glslVersion?\"#version \"+n.glslVersion+\"\\n\":\"\";n.isRawShaderMaterial?(w=[x].filter(cc).join(\"\\n\"),w.length>0&&(w+=\"\\n\"),b=[v,x].filter(cc).join(\"\\n\"),b.length>0&&(b+=\"\\n\")):(w=[_c(n),\"#define SHADER_NAME \"+n.shaderName,x,n.instancing?\"#define USE_INSTANCING\":\"\",n.instancingColor?\"#define USE_INSTANCING_COLOR\":\"\",n.supportsVertexTextures?\"#define VERTEX_TEXTURES\":\"\",\"#define GAMMA_FACTOR \"+g,\"#define MAX_BONES \"+n.maxBones,n.useFog&&n.fog?\"#define USE_FOG\":\"\",n.useFog&&n.fogExp2?\"#define FOG_EXP2\":\"\",n.map?\"#define USE_MAP\":\"\",n.envMap?\"#define USE_ENVMAP\":\"\",n.envMap?\"#define \"+d:\"\",n.lightMap?\"#define USE_LIGHTMAP\":\"\",n.aoMap?\"#define USE_AOMAP\":\"\",n.emissiveMap?\"#define USE_EMISSIVEMAP\":\"\",n.bumpMap?\"#define USE_BUMPMAP\":\"\",n.normalMap?\"#define USE_NORMALMAP\":\"\",n.normalMap&&n.objectSpaceNormalMap?\"#define OBJECTSPACE_NORMALMAP\":\"\",n.normalMap&&n.tangentSpaceNormalMap?\"#define TANGENTSPACE_NORMALMAP\":\"\",n.clearcoatMap?\"#define USE_CLEARCOATMAP\":\"\",n.clearcoatRoughnessMap?\"#define USE_CLEARCOAT_ROUGHNESSMAP\":\"\",n.clearcoatNormalMap?\"#define USE_CLEARCOAT_NORMALMAP\":\"\",n.displacementMap&&n.supportsVertexTextures?\"#define USE_DISPLACEMENTMAP\":\"\",n.specularMap?\"#define USE_SPECULARMAP\":\"\",n.specularIntensityMap?\"#define USE_SPECULARINTENSITYMAP\":\"\",n.specularTintMap?\"#define USE_SPECULARTINTMAP\":\"\",n.roughnessMap?\"#define USE_ROUGHNESSMAP\":\"\",n.metalnessMap?\"#define USE_METALNESSMAP\":\"\",n.alphaMap?\"#define USE_ALPHAMAP\":\"\",n.transmission?\"#define USE_TRANSMISSION\":\"\",n.transmissionMap?\"#define USE_TRANSMISSIONMAP\":\"\",n.thicknessMap?\"#define USE_THICKNESSMAP\":\"\",n.vertexTangents?\"#define USE_TANGENT\":\"\",n.vertexColors?\"#define USE_COLOR\":\"\",n.vertexAlphas?\"#define USE_COLOR_ALPHA\":\"\",n.vertexUvs?\"#define USE_UV\":\"\",n.uvsVertexOnly?\"#define UVS_VERTEX_ONLY\":\"\",n.flatShading?\"#define FLAT_SHADED\":\"\",n.skinning?\"#define USE_SKINNING\":\"\",n.useVertexTexture?\"#define BONE_TEXTURE\":\"\",n.morphTargets?\"#define USE_MORPHTARGETS\":\"\",n.morphNormals&&!1===n.flatShading?\"#define USE_MORPHNORMALS\":\"\",n.doubleSided?\"#define DOUBLE_SIDED\":\"\",n.flipSided?\"#define FLIP_SIDED\":\"\",n.shadowMapEnabled?\"#define USE_SHADOWMAP\":\"\",n.shadowMapEnabled?\"#define \"+l:\"\",n.sizeAttenuation?\"#define USE_SIZEATTENUATION\":\"\",n.logarithmicDepthBuffer?\"#define USE_LOGDEPTHBUF\":\"\",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?\"#define USE_LOGDEPTHBUF_EXT\":\"\",\"uniform mat4 modelMatrix;\",\"uniform mat4 modelViewMatrix;\",\"uniform mat4 projectionMatrix;\",\"uniform mat4 viewMatrix;\",\"uniform mat3 normalMatrix;\",\"uniform vec3 cameraPosition;\",\"uniform bool isOrthographic;\",\"#ifdef USE_INSTANCING\",\"\\tattribute mat4 instanceMatrix;\",\"#endif\",\"#ifdef USE_INSTANCING_COLOR\",\"\\tattribute vec3 instanceColor;\",\"#endif\",\"attribute vec3 position;\",\"attribute vec3 normal;\",\"attribute vec2 uv;\",\"#ifdef USE_TANGENT\",\"\\tattribute vec4 tangent;\",\"#endif\",\"#if defined( USE_COLOR_ALPHA )\",\"\\tattribute vec4 color;\",\"#elif defined( USE_COLOR )\",\"\\tattribute vec3 color;\",\"#endif\",\"#ifdef USE_MORPHTARGETS\",\"\\tattribute vec3 morphTarget0;\",\"\\tattribute vec3 morphTarget1;\",\"\\tattribute vec3 morphTarget2;\",\"\\tattribute vec3 morphTarget3;\",\"\\t#ifdef USE_MORPHNORMALS\",\"\\t\\tattribute vec3 morphNormal0;\",\"\\t\\tattribute vec3 morphNormal1;\",\"\\t\\tattribute vec3 morphNormal2;\",\"\\t\\tattribute vec3 morphNormal3;\",\"\\t#else\",\"\\t\\tattribute vec3 morphTarget4;\",\"\\t\\tattribute vec3 morphTarget5;\",\"\\t\\tattribute vec3 morphTarget6;\",\"\\t\\tattribute vec3 morphTarget7;\",\"\\t#endif\",\"#endif\",\"#ifdef USE_SKINNING\",\"\\tattribute vec4 skinIndex;\",\"\\tattribute vec4 skinWeight;\",\"#endif\",\"\\n\"].filter(cc).join(\"\\n\"),b=[v,_c(n),\"#define SHADER_NAME \"+n.shaderName,x,n.alphaTest?\"#define ALPHATEST \"+n.alphaTest+(n.alphaTest%1?\"\":\".0\"):\"\",\"#define GAMMA_FACTOR \"+g,n.useFog&&n.fog?\"#define USE_FOG\":\"\",n.useFog&&n.fogExp2?\"#define FOG_EXP2\":\"\",n.map?\"#define USE_MAP\":\"\",n.matcap?\"#define USE_MATCAP\":\"\",n.envMap?\"#define USE_ENVMAP\":\"\",n.envMap?\"#define \"+h:\"\",n.envMap?\"#define \"+d:\"\",n.envMap?\"#define \"+f:\"\",n.lightMap?\"#define USE_LIGHTMAP\":\"\",n.aoMap?\"#define USE_AOMAP\":\"\",n.emissiveMap?\"#define USE_EMISSIVEMAP\":\"\",n.bumpMap?\"#define USE_BUMPMAP\":\"\",n.normalMap?\"#define USE_NORMALMAP\":\"\",n.normalMap&&n.objectSpaceNormalMap?\"#define OBJECTSPACE_NORMALMAP\":\"\",n.normalMap&&n.tangentSpaceNormalMap?\"#define TANGENTSPACE_NORMALMAP\":\"\",n.clearcoatMap?\"#define USE_CLEARCOATMAP\":\"\",n.clearcoatRoughnessMap?\"#define USE_CLEARCOAT_ROUGHNESSMAP\":\"\",n.clearcoatNormalMap?\"#define USE_CLEARCOAT_NORMALMAP\":\"\",n.specularMap?\"#define USE_SPECULARMAP\":\"\",n.specularIntensityMap?\"#define USE_SPECULARINTENSITYMAP\":\"\",n.specularTintMap?\"#define USE_SPECULARTINTMAP\":\"\",n.roughnessMap?\"#define USE_ROUGHNESSMAP\":\"\",n.metalnessMap?\"#define USE_METALNESSMAP\":\"\",n.alphaMap?\"#define USE_ALPHAMAP\":\"\",n.sheen?\"#define USE_SHEEN\":\"\",n.transmission?\"#define USE_TRANSMISSION\":\"\",n.transmissionMap?\"#define USE_TRANSMISSIONMAP\":\"\",n.thicknessMap?\"#define USE_THICKNESSMAP\":\"\",n.vertexTangents?\"#define USE_TANGENT\":\"\",n.vertexColors||n.instancingColor?\"#define USE_COLOR\":\"\",n.vertexAlphas?\"#define USE_COLOR_ALPHA\":\"\",n.vertexUvs?\"#define USE_UV\":\"\",n.uvsVertexOnly?\"#define UVS_VERTEX_ONLY\":\"\",n.gradientMap?\"#define USE_GRADIENTMAP\":\"\",n.flatShading?\"#define FLAT_SHADED\":\"\",n.doubleSided?\"#define DOUBLE_SIDED\":\"\",n.flipSided?\"#define FLIP_SIDED\":\"\",n.shadowMapEnabled?\"#define USE_SHADOWMAP\":\"\",n.shadowMapEnabled?\"#define \"+l:\"\",n.premultipliedAlpha?\"#define PREMULTIPLIED_ALPHA\":\"\",n.physicallyCorrectLights?\"#define PHYSICALLY_CORRECT_LIGHTS\":\"\",n.logarithmicDepthBuffer?\"#define USE_LOGDEPTHBUF\":\"\",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?\"#define USE_LOGDEPTHBUF_EXT\":\"\",(n.extensionShaderTextureLOD||n.envMap)&&n.rendererExtensionShaderTextureLod?\"#define TEXTURE_LOD_EXT\":\"\",\"uniform mat4 viewMatrix;\",\"uniform vec3 cameraPosition;\",\"uniform bool isOrthographic;\",0!==n.toneMapping?\"#define TONE_MAPPING\":\"\",0!==n.toneMapping?ao.tonemapping_pars_fragment:\"\",0!==n.toneMapping?lc(\"toneMapping\",n.toneMapping):\"\",n.dithering?\"#define DITHERING\":\"\",ao.encodings_pars_fragment,n.map?sc(\"mapTexelToLinear\",n.mapEncoding):\"\",n.matcap?sc(\"matcapTexelToLinear\",n.matcapEncoding):\"\",n.envMap?sc(\"envMapTexelToLinear\",n.envMapEncoding):\"\",n.emissiveMap?sc(\"emissiveMapTexelToLinear\",n.emissiveMapEncoding):\"\",n.specularTintMap?sc(\"specularTintMapTexelToLinear\",n.specularTintMapEncoding):\"\",n.lightMap?sc(\"lightMapTexelToLinear\",n.lightMapEncoding):\"\",oc(\"linearToOutputTexel\",n.outputEncoding),n.depthPacking?\"#define DEPTH_PACKING \"+n.depthPacking:\"\",\"\\n\"].filter(cc).join(\"\\n\")),s=pc(s),s=hc(s,n),s=uc(s,n),o=pc(o),o=hc(o,n),o=uc(o,n),s=vc(s),o=vc(o),n.isWebGL2&&!0!==n.isRawShaderMaterial&&(S=\"#version 300 es\\n\",w=[\"#define attribute in\",\"#define varying out\",\"#define texture2D texture\"].join(\"\\n\")+\"\\n\"+w,b=[\"#define varying in\",n.glslVersion===pr?\"\":\"out highp vec4 pc_fragColor;\",n.glslVersion===pr?\"\":\"#define gl_FragColor pc_fragColor\",\"#define gl_FragDepthEXT gl_FragDepth\",\"#define texture2D texture\",\"#define textureCube texture\",\"#define texture2DProj textureProj\",\"#define texture2DLodEXT textureLod\",\"#define texture2DProjLodEXT textureProjLod\",\"#define textureCubeLodEXT textureLod\",\"#define texture2DGradEXT textureGrad\",\"#define texture2DProjGradEXT textureProjGrad\",\"#define textureCubeGradEXT textureGrad\"].join(\"\\n\")+\"\\n\"+b);const T=S+b+o,E=nc(r,35633,S+w+s),A=nc(r,35632,T);if(r.attachShader(M,E),r.attachShader(M,A),void 0!==n.index0AttributeName?r.bindAttribLocation(M,0,n.index0AttributeName):!0===n.morphTargets&&r.bindAttribLocation(M,0,\"position\"),r.linkProgram(M),t.debug.checkShaderErrors){const t=r.getProgramInfoLog(M).trim(),e=r.getShaderInfoLog(E).trim(),n=r.getShaderInfoLog(A).trim();let i=!0,a=!0;if(!1===r.getProgramParameter(M,35714)){i=!1;const e=ac(r,E,\"vertex\"),n=ac(r,A,\"fragment\");console.error(\"THREE.WebGLProgram: shader error: \",r.getError(),\"35715\",r.getProgramParameter(M,35715),\"gl.getProgramInfoLog\",t,e,n)}else\"\"!==t?console.warn(\"THREE.WebGLProgram: gl.getProgramInfoLog()\",t):\"\"!==e&&\"\"!==n||(a=!1);a&&(this.diagnostics={runnable:i,programLog:t,vertexShader:{log:e,prefix:w},fragmentShader:{log:n,prefix:b}})}let L,C;return r.deleteShader(E),r.deleteShader(A),this.getUniforms=function(){return void 0===L&&(L=new ec(r,M)),L},this.getAttributes=function(){return void 0===C&&(C=(function t(e,n){const i={},r=e.getProgramParameter(n,35721);for(let t=0;t<r;t++){const r=e.getActiveAttrib(n,t).name;i[r]=e.getAttribLocation(n,r)}return i})(r,M)),C},this.destroy=function(){i.releaseStatesOfProgram(this),r.deleteProgram(M),this.program=void 0},this.name=n.shaderName,this.id=ic++,this.cacheKey=e,this.usedTimes=1,this.program=M,this.vertexShader=E,this.fragmentShader=A,this}function wc(t,e,n,i,r,a,s){const o=[],l=r.isWebGL2,c=r.logarithmicDepthBuffer,h=r.floatVertexTextures,u=r.maxVertexUniforms,d=r.vertexTextures;let p=r.precision;const f={MeshDepthMaterial:\"depth\",MeshDistanceMaterial:\"distanceRGBA\",MeshNormalMaterial:\"normal\",MeshBasicMaterial:\"basic\",MeshLambertMaterial:\"lambert\",MeshPhongMaterial:\"phong\",MeshToonMaterial:\"toon\",MeshStandardMaterial:\"physical\",MeshPhysicalMaterial:\"physical\",MeshMatcapMaterial:\"matcap\",LineBasicMaterial:\"basic\",LineDashedMaterial:\"dashed\",PointsMaterial:\"points\",ShadowMaterial:\"shadow\",SpriteMaterial:\"sprite\"},m=[\"precision\",\"isWebGL2\",\"supportsVertexTextures\",\"outputEncoding\",\"instancing\",\"instancingColor\",\"map\",\"mapEncoding\",\"matcap\",\"matcapEncoding\",\"envMap\",\"envMapMode\",\"envMapEncoding\",\"envMapCubeUV\",\"lightMap\",\"lightMapEncoding\",\"aoMap\",\"emissiveMap\",\"emissiveMapEncoding\",\"bumpMap\",\"normalMap\",\"objectSpaceNormalMap\",\"tangentSpaceNormalMap\",\"clearcoatMap\",\"clearcoatRoughnessMap\",\"clearcoatNormalMap\",\"displacementMap\",\"specularMap\",\"specularIntensityMap\",\"specularTintMap\",\"specularTintMapEncoding\",\"roughnessMap\",\"metalnessMap\",\"gradientMap\",\"alphaMap\",\"combine\",\"vertexColors\",\"vertexAlphas\",\"vertexTangents\",\"vertexUvs\",\"uvsVertexOnly\",\"fog\",\"useFog\",\"fogExp2\",\"flatShading\",\"sizeAttenuation\",\"logarithmicDepthBuffer\",\"skinning\",\"maxBones\",\"useVertexTexture\",\"morphTargets\",\"morphNormals\",\"premultipliedAlpha\",\"numDirLights\",\"numPointLights\",\"numSpotLights\",\"numHemiLights\",\"numRectAreaLights\",\"numDirLightShadows\",\"numPointLightShadows\",\"numSpotLightShadows\",\"shadowMapEnabled\",\"shadowMapType\",\"toneMapping\",\"physicallyCorrectLights\",\"alphaTest\",\"doubleSided\",\"flipSided\",\"numClippingPlanes\",\"numClipIntersection\",\"depthPacking\",\"dithering\",\"sheen\",\"transmission\",\"transmissionMap\",\"thicknessMap\"];function g(t){let e;return t&&t.isTexture?e=t.encoding:t&&t.isWebGLRenderTarget?(console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\"),e=t.texture.encoding):e=sr,e}return{getParameters:function v(a,o,m,y,x){const _=y.fog,M=(a.isMeshStandardMaterial?n:e).get(a.envMap||(a.isMeshStandardMaterial?y.environment:null)),w=f[a.type],b=x.isSkinnedMesh?(function S(t){const e=t.skeleton.bones;if(h)return 1024;{const t=Math.floor((u-20)/4),n=Math.min(t,e.length);return n<e.length?(console.warn(\"THREE.WebGLRenderer: Skeleton has \"+e.length+\" bones. This GPU supports \"+n+\".\"),0):n}})(x):0;let T,E;if(null!==a.precision&&(p=r.getMaxPrecision(a.precision),p!==a.precision&&console.warn(\"THREE.WebGLProgram.getParameters:\",a.precision,\"not supported, using\",p,\"instead.\")),w){const t=oo[w];T=t.vertexShader,E=t.fragmentShader}else T=a.vertexShader,E=a.fragmentShader;const A=t.getRenderTarget();return{isWebGL2:l,shaderID:w,shaderName:a.type,vertexShader:T,fragmentShader:E,defines:a.defines,isRawShaderMaterial:!0===a.isRawShaderMaterial,glslVersion:a.glslVersion,precision:p,instancing:!0===x.isInstancedMesh,instancingColor:!0===x.isInstancedMesh&&null!==x.instanceColor,supportsVertexTextures:d,outputEncoding:null!==A?g(A.texture):t.outputEncoding,map:!!a.map,mapEncoding:g(a.map),matcap:!!a.matcap,matcapEncoding:g(a.matcap),envMap:!!M,envMapMode:M&&M.mapping,envMapEncoding:g(M),envMapCubeUV:!!M&&(M.mapping===zi||307===M.mapping),lightMap:!!a.lightMap,lightMapEncoding:g(a.lightMap),aoMap:!!a.aoMap,emissiveMap:!!a.emissiveMap,emissiveMapEncoding:g(a.emissiveMap),bumpMap:!!a.bumpMap,normalMap:!!a.normalMap,objectSpaceNormalMap:1===a.normalMapType,tangentSpaceNormalMap:0===a.normalMapType,clearcoatMap:!!a.clearcoatMap,clearcoatRoughnessMap:!!a.clearcoatRoughnessMap,clearcoatNormalMap:!!a.clearcoatNormalMap,displacementMap:!!a.displacementMap,roughnessMap:!!a.roughnessMap,metalnessMap:!!a.metalnessMap,specularMap:!!a.specularMap,specularIntensityMap:!!a.specularIntensityMap,specularTintMap:!!a.specularTintMap,specularTintMapEncoding:g(a.specularTintMap),alphaMap:!!a.alphaMap,gradientMap:!!a.gradientMap,sheen:!!a.sheen,transmission:!!a.transmission,transmissionMap:!!a.transmissionMap,thicknessMap:!!a.thicknessMap,combine:a.combine,vertexTangents:!!a.normalMap&&!!x.geometry&&!!x.geometry.attributes.tangent,vertexColors:a.vertexColors,vertexAlphas:!0===a.vertexColors&&!!x.geometry&&!!x.geometry.attributes.color&&4===x.geometry.attributes.color.itemSize,vertexUvs:!!(a.map||a.bumpMap||a.normalMap||a.specularMap||a.alphaMap||a.emissiveMap||a.roughnessMap||a.metalnessMap||a.clearcoatMap||a.clearcoatRoughnessMap||a.clearcoatNormalMap||a.displacementMap||a.transmissionMap||a.thicknessMap||a.specularIntensityMap||a.specularTintMap),uvsVertexOnly:!(a.map||a.bumpMap||a.normalMap||a.specularMap||a.alphaMap||a.emissiveMap||a.roughnessMap||a.metalnessMap||a.clearcoatNormalMap||a.transmission||a.transmissionMap||a.thicknessMap||a.specularIntensityMap||a.specularTintMap||!a.displacementMap),fog:!!_,useFog:a.fog,fogExp2:_&&_.isFogExp2,flatShading:!!a.flatShading,sizeAttenuation:a.sizeAttenuation,logarithmicDepthBuffer:c,skinning:!0===x.isSkinnedMesh&&b>0,maxBones:b,useVertexTexture:h,morphTargets:!!x.geometry&&!!x.geometry.morphAttributes.position,morphNormals:!!x.geometry&&!!x.geometry.morphAttributes.normal,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numClippingPlanes:s.numPlanes,numClipIntersection:s.numIntersection,dithering:a.dithering,shadowMapEnabled:t.shadowMap.enabled&&m.length>0,shadowMapType:t.shadowMap.type,toneMapping:a.toneMapped?t.toneMapping:0,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:a.premultipliedAlpha,alphaTest:a.alphaTest,doubleSided:2===a.side,flipSided:1===a.side,depthPacking:void 0!==a.depthPacking&&a.depthPacking,index0AttributeName:a.index0AttributeName,extensionDerivatives:a.extensions&&a.extensions.derivatives,extensionFragDepth:a.extensions&&a.extensions.fragDepth,extensionDrawBuffers:a.extensions&&a.extensions.drawBuffers,extensionShaderTextureLOD:a.extensions&&a.extensions.shaderTextureLOD,rendererExtensionFragDepth:l||i.has(\"EXT_frag_depth\"),rendererExtensionDrawBuffers:l||i.has(\"WEBGL_draw_buffers\"),rendererExtensionShaderTextureLod:l||i.has(\"EXT_shader_texture_lod\"),customProgramCacheKey:a.customProgramCacheKey()}},getProgramCacheKey:function y(e){const n=[];if(e.shaderID?n.push(e.shaderID):(n.push(e.fragmentShader),n.push(e.vertexShader)),void 0!==e.defines)for(const t in e.defines)n.push(t),n.push(e.defines[t]);if(!1===e.isRawShaderMaterial){for(let t=0;t<m.length;t++)n.push(e[m[t]]);n.push(t.outputEncoding),n.push(t.gammaFactor)}return n.push(e.customProgramCacheKey),n.join()},getUniforms:function x(t){const e=f[t.type];let n;if(e){n=ks.clone(oo[e].uniforms)}else n=t.uniforms;return n},acquireProgram:function _(e,n){let i;for(let t=0,e=o.length;t<e;t++){const e=o[t];if(e.cacheKey===n){i=e,++i.usedTimes;break}}return void 0===i&&(i=new Mc(t,n,e,a),o.push(i)),i},releaseProgram:function M(t){if(0==--t.usedTimes){const e=o.indexOf(t);o[e]=o[o.length-1],o.pop(),t.destroy()}},programs:o}}function bc(){let t=new WeakMap;return{get:function e(n){let i=t.get(n);return void 0===i&&(i={},t.set(n,i)),i},remove:function n(e){t.delete(e)},update:function i(e,n,r){t.get(e)[n]=r},dispose:function r(){t=new WeakMap}}}function Sc(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program!==e.program?t.program.id-e.program.id:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function Tc(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function Ec(t){const e=[];let n=0;const i=[],r=[],a=[],s={id:-1};function o(i,r,a,o,l,c){let h=e[n];const u=t.get(a);return void 0===h?(h={id:i.id,object:i,geometry:r,material:a,program:u.program||s,groupOrder:o,renderOrder:i.renderOrder,z:l,group:c},e[n]=h):(h.id=i.id,h.object=i,h.geometry=r,h.material=a,h.program=u.program||s,h.groupOrder=o,h.renderOrder=i.renderOrder,h.z=l,h.group=c),n++,h}return{opaque:i,transmissive:r,transparent:a,init:function l(){n=0,i.length=0,r.length=0,a.length=0},push:function c(t,e,n,s,l,h){const u=o(t,e,n,s,l,h);n.transmission>0?r.push(u):!0===n.transparent?a.push(u):i.push(u)},unshift:function h(t,e,n,s,l,c){const h=o(t,e,n,s,l,c);n.transmission>0?r.unshift(h):!0===n.transparent?a.unshift(h):i.unshift(h)},finish:function u(){for(let t=n,i=e.length;t<i;t++){const n=e[t];if(null===n.id)break;n.id=null,n.object=null,n.geometry=null,n.material=null,n.program=null,n.group=null}},sort:function d(t,e){i.length>1&&i.sort(t||Sc),r.length>1&&r.sort(e||Tc),a.length>1&&a.sort(e||Tc)}}}function Ac(t){let e=new WeakMap;return{get:function n(i,r){let a;return!1===e.has(i)?(a=new Ec(t),e.set(i,[a])):r>=e.get(i).length?(a=new Ec(t),e.get(i).push(a)):a=e.get(i)[r],a},dispose:function i(){e=new WeakMap}}}function Lc(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case\"DirectionalLight\":n={direction:new Ir,color:new ns};break;case\"SpotLight\":n={position:new Ir,direction:new Ir,color:new ns,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case\"PointLight\":n={position:new Ir,color:new ns,distance:0,decay:0};break;case\"HemisphereLight\":n={direction:new Ir,skyColor:new ns,groundColor:new ns};break;case\"RectAreaLight\":n={color:new ns,position:new Ir,halfWidth:new Ir,halfHeight:new Ir}}return t[e.id]=n,n}}}let Cc=0;function Rc(t,e){return(e.castShadow?1:0)-(t.castShadow?1:0)}function Pc(t,e){const n=new Lc,i=(function r(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case\"DirectionalLight\":case\"SpotLight\":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new br};break;case\"PointLight\":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new br,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=n,n}}})(),a={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let t=0;t<9;t++)a.probe.push(new Ir);const s=new Ir,o=new ua,l=new ua;return{setup:function c(r){let s=0,o=0,l=0;for(let t=0;t<9;t++)a.probe[t].set(0,0,0);let c=0,h=0,u=0,d=0,p=0,f=0,m=0,g=0;r.sort(Rc);for(let t=0,e=r.length;t<e;t++){const e=r[t],v=e.color,y=e.intensity,x=e.distance,_=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight)s+=v.r*y,o+=v.g*y,l+=v.b*y;else if(e.isLightProbe)for(let t=0;t<9;t++)a.probe[t].addScaledVector(e.sh.coefficients[t],y);else if(e.isDirectionalLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity),e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,a.directionalShadow[c]=n,a.directionalShadowMap[c]=_,a.directionalShadowMatrix[c]=e.shadow.matrix,f++}a.directional[c]=t,c++}else if(e.isSpotLight){const t=n.get(e);if(t.position.setFromMatrixPosition(e.matrixWorld),t.color.copy(v).multiplyScalar(y),t.distance=x,t.coneCos=Math.cos(e.angle),t.penumbraCos=Math.cos(e.angle*(1-e.penumbra)),t.decay=e.decay,e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,a.spotShadow[u]=n,a.spotShadowMap[u]=_,a.spotShadowMatrix[u]=e.shadow.matrix,g++}a.spot[u]=t,u++}else if(e.isRectAreaLight){const t=n.get(e);t.color.copy(v).multiplyScalar(y),t.halfWidth.set(.5*e.width,0,0),t.halfHeight.set(0,.5*e.height,0),a.rectArea[d]=t,d++}else if(e.isPointLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity),t.distance=e.distance,t.decay=e.decay,e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,n.shadowCameraNear=t.camera.near,n.shadowCameraFar=t.camera.far,a.pointShadow[h]=n,a.pointShadowMap[h]=_,a.pointShadowMatrix[h]=e.shadow.matrix,m++}a.point[h]=t,h++}else if(e.isHemisphereLight){const t=n.get(e);t.skyColor.copy(e.color).multiplyScalar(y),t.groundColor.copy(e.groundColor).multiplyScalar(y),a.hemi[p]=t,p++}}d>0&&(e.isWebGL2||!0===t.has(\"OES_texture_float_linear\")?(a.rectAreaLTC1=so.LTC_FLOAT_1,a.rectAreaLTC2=so.LTC_FLOAT_2):!0===t.has(\"OES_texture_half_float_linear\")?(a.rectAreaLTC1=so.LTC_HALF_1,a.rectAreaLTC2=so.LTC_HALF_2):console.error(\"THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.\")),a.ambient[0]=s,a.ambient[1]=o,a.ambient[2]=l;const v=a.hash;v.directionalLength===c&&v.pointLength===h&&v.spotLength===u&&v.rectAreaLength===d&&v.hemiLength===p&&v.numDirectionalShadows===f&&v.numPointShadows===m&&v.numSpotShadows===g||(a.directional.length=c,a.spot.length=u,a.rectArea.length=d,a.point.length=h,a.hemi.length=p,a.directionalShadow.length=f,a.directionalShadowMap.length=f,a.pointShadow.length=m,a.pointShadowMap.length=m,a.spotShadow.length=g,a.spotShadowMap.length=g,a.directionalShadowMatrix.length=f,a.pointShadowMatrix.length=m,a.spotShadowMatrix.length=g,v.directionalLength=c,v.pointLength=h,v.spotLength=u,v.rectAreaLength=d,v.hemiLength=p,v.numDirectionalShadows=f,v.numPointShadows=m,v.numSpotShadows=g,a.version=Cc++)},setupView:function h(t,e){let n=0,i=0,r=0,c=0,h=0;const u=e.matrixWorldInverse;for(let e=0,d=t.length;e<d;e++){const d=t[e];if(d.isDirectionalLight){const t=a.directional[n];t.direction.setFromMatrixPosition(d.matrixWorld),s.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(s),t.direction.transformDirection(u),n++}else if(d.isSpotLight){const t=a.spot[r];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),t.direction.setFromMatrixPosition(d.matrixWorld),s.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(s),t.direction.transformDirection(u),r++}else if(d.isRectAreaLight){const t=a.rectArea[c];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),l.identity(),o.copy(d.matrixWorld),o.premultiply(u),l.extractRotation(o),t.halfWidth.set(.5*d.width,0,0),t.halfHeight.set(0,.5*d.height,0),t.halfWidth.applyMatrix4(l),t.halfHeight.applyMatrix4(l),c++}else if(d.isPointLight){const t=a.point[i];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),i++}else if(d.isHemisphereLight){const t=a.hemi[h];t.direction.setFromMatrixPosition(d.matrixWorld),t.direction.transformDirection(u),t.direction.normalize(),h++}}},state:a}}function Dc(t,e){const n=new Pc(t,e),i=[],r=[];return{init:function a(){i.length=0,r.length=0},state:{lightsArray:i,shadowsArray:r,lights:n},setupLights:function s(){n.setup(i)},setupLightsView:function o(t){n.setupView(i,t)},pushLight:function l(t){i.push(t)},pushShadow:function c(t){r.push(t)}}}function Nc(t,e){let n=new WeakMap;return{get:function i(r,a=0){let s;return!1===n.has(r)?(s=new Dc(t,e),n.set(r,[s])):a>=n.get(r).length?(s=new Dc(t,e),n.get(r).push(s)):s=n.get(r)[a],s},dispose:function r(){n=new WeakMap}}}class Ic extends Za{constructor(t){super(),this.type=\"MeshDepthMaterial\",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}Ic.prototype.isMeshDepthMaterial=!0;class Oc extends Za{constructor(t){super(),this.type=\"MeshDistanceMaterial\",this.referencePosition=new Ir,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}Oc.prototype.isMeshDistanceMaterial=!0;function zc(t,e,n){let i=new eo;const r=new br,a=new br,s=new Rr,o=new Ic({depthPacking:3201}),l=new Oc,c={},h=n.maxTextureSize,u={0:1,1:0,2:2},d=new Gs({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new br},radius:{value:4}},vertexShader:\"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\",fragmentShader:\"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\\n\\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean * HALF_SAMPLE_RATE;\\n\\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\"}),p=d.clone();p.defines.HORIZONTAL_PASS=1;const f=new ys;f.setAttribute(\"position\",new ss(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const m=new zs(f,d),g=this;function v(n,i){const r=e.update(m);d.uniforms.shadow_pass.value=n.map.texture,d.uniforms.resolution.value=n.mapSize,d.uniforms.radius.value=n.radius,t.setRenderTarget(n.mapPass),t.clear(),t.renderBufferDirect(i,null,r,d,m,null),p.uniforms.shadow_pass.value=n.mapPass.texture,p.uniforms.resolution.value=n.mapSize,p.uniforms.radius.value=n.radius,t.setRenderTarget(n.map),t.clear(),t.renderBufferDirect(i,null,r,p,m,null)}function y(e,n,i,r,a,s,h){let d=null;const p=!0===r.isPointLight?e.customDistanceMaterial:e.customDepthMaterial;if(d=void 0!==p?p:!0===r.isPointLight?l:o,t.localClippingEnabled&&!0===i.clipShadows&&0!==i.clippingPlanes.length){const t=d.uuid,e=i.uuid;let n=c[t];void 0===n&&(n={},c[t]=n);let r=n[e];void 0===r&&(r=d.clone(),n[e]=r),d=r}return d.visible=i.visible,d.wireframe=i.wireframe,d.side=3===h?null!==i.shadowSide?i.shadowSide:i.side:null!==i.shadowSide?i.shadowSide:u[i.side],d.clipShadows=i.clipShadows,d.clippingPlanes=i.clippingPlanes,d.clipIntersection=i.clipIntersection,d.wireframeLinewidth=i.wireframeLinewidth,d.linewidth=i.linewidth,!0===r.isPointLight&&!0===d.isMeshDistanceMaterial&&(d.referencePosition.setFromMatrixPosition(r.matrixWorld),d.nearDistance=a,d.farDistance=s),d}function x(n,r,a,s,o){if(!1===n.visible)return;if(n.layers.test(r.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&3===o)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,n.matrixWorld);const i=e.update(n),r=n.material;if(Array.isArray(r)){const e=i.groups;for(let l=0,c=e.length;l<c;l++){const c=e[l],h=r[c.materialIndex];if(h&&h.visible){const e=y(n,0,h,s,a.near,a.far,o);t.renderBufferDirect(a,null,i,e,n,c)}}}else if(r.visible){const e=y(n,0,r,s,a.near,a.far,o);t.renderBufferDirect(a,null,i,e,n,null)}}const l=n.children;for(let t=0,e=l.length;t<e;t++)x(l[t],r,a,s,o)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(e,n,o){if(!1===g.enabled)return;if(!1===g.autoUpdate&&!1===g.needsUpdate)return;if(0===e.length)return;const l=t.getRenderTarget(),c=t.getActiveCubeFace(),u=t.getActiveMipmapLevel(),d=t.state;d.setBlending(0),d.buffers.color.setClear(1,1,1,1),d.buffers.depth.setTest(!0),d.setScissorTest(!1);for(let l=0,c=e.length;l<c;l++){const c=e[l],u=c.shadow;if(void 0===u){console.warn(\"THREE.WebGLShadowMap:\",c,\"has no shadow.\");continue}if(!1===u.autoUpdate&&!1===u.needsUpdate)continue;r.copy(u.mapSize);const p=u.getFrameExtents();if(r.multiply(p),a.copy(u.mapSize),(r.x>h||r.y>h)&&(r.x>h&&(a.x=Math.floor(h/p.x),r.x=a.x*p.x,u.mapSize.x=a.x),r.y>h&&(a.y=Math.floor(h/p.y),r.y=a.y*p.y,u.mapSize.y=a.y)),null===u.map&&!u.isPointLightShadow&&3===this.type){const t={minFilter:ki,magFilter:ki,format:Ji};u.map=new Pr(r.x,r.y,t),u.map.texture.name=c.name+\".shadowMap\",u.mapPass=new Pr(r.x,r.y,t),u.camera.updateProjectionMatrix()}if(null===u.map){u.map=new Pr(r.x,r.y,{minFilter:Hi,magFilter:Hi,format:Ji}),u.map.texture.name=c.name+\".shadowMap\",u.camera.updateProjectionMatrix()}t.setRenderTarget(u.map),t.clear();const f=u.getViewportCount();for(let t=0;t<f;t++){const e=u.getViewport(t);s.set(a.x*e.x,a.y*e.y,a.x*e.z,a.y*e.w),d.viewport(s),u.updateMatrices(c,t),i=u.getFrustum(),x(n,o,u.camera,c,this.type)}u.isPointLightShadow||3!==this.type||v(u,o),u.needsUpdate=!1}g.needsUpdate=!1,t.setRenderTarget(l,c,u)}}function Uc(t,e,n){const i=n.isWebGL2;const r=new(function a(){let e=!1;const n=new Rr;let i=null;const r=new Rr(0,0,0,0);return{setMask:function(n){i===n||e||(t.colorMask(n,n,n,n),i=n)},setLocked:function(t){e=t},setClear:function(e,i,a,s,o){!0===o&&(e*=s,i*=s,a*=s),n.set(e,i,a,s),!1===r.equals(n)&&(t.clearColor(e,i,a,s),r.copy(n))},reset:function(){e=!1,i=null,r.set(-1,0,0,0)}}}),s=new(function o(){let e=!1,n=null,i=null,r=null;return{setTest:function(t){t?H(2929):k(2929)},setMask:function(i){n===i||e||(t.depthMask(i),n=i)},setFunc:function(e){if(i!==e){if(e)switch(e){case 0:t.depthFunc(512);break;case 1:t.depthFunc(519);break;case 2:t.depthFunc(513);break;case 3:t.depthFunc(515);break;case 4:t.depthFunc(514);break;case 5:t.depthFunc(518);break;case 6:t.depthFunc(516);break;case 7:t.depthFunc(517);break;default:t.depthFunc(515)}else t.depthFunc(515);i=e}},setLocked:function(t){e=t},setClear:function(e){r!==e&&(t.clearDepth(e),r=e)},reset:function(){e=!1,n=null,i=null,r=null}}}),l=new(function c(){let e=!1,n=null,i=null,r=null,a=null,s=null,o=null,l=null,c=null;return{setTest:function(t){e||(t?H(2960):k(2960))},setMask:function(i){n===i||e||(t.stencilMask(i),n=i)},setFunc:function(e,n,s){i===e&&r===n&&a===s||(t.stencilFunc(e,n,s),i=e,r=n,a=s)},setOp:function(e,n,i){s===e&&o===n&&l===i||(t.stencilOp(e,n,i),s=e,o=n,l=i)},setLocked:function(t){e=t},setClear:function(e){c!==e&&(t.clearStencil(e),c=e)},reset:function(){e=!1,n=null,i=null,r=null,a=null,s=null,o=null,l=null,c=null}}});let h={},u=null,d={},p=null,f=!1,m=null,g=null,v=null,y=null,x=null,_=null,M=null,w=!1,b=null,S=null,T=null,E=null,A=null;const L=t.getParameter(35661);let C=!1,R=0;const P=t.getParameter(7938);-1!==P.indexOf(\"WebGL\")?(R=parseFloat(/^WebGL (\\d)/.exec(P)[1]),C=R>=1):-1!==P.indexOf(\"OpenGL ES\")&&(R=parseFloat(/^OpenGL ES (\\d)/.exec(P)[1]),C=R>=2);let D=null,N={};const I=t.getParameter(3088),O=t.getParameter(2978),z=(new Rr).fromArray(I),U=(new Rr).fromArray(O);function F(e,n,i){const r=new Uint8Array(4),a=t.createTexture();t.bindTexture(e,a),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(let e=0;e<i;e++)t.texImage2D(n+e,0,6408,1,1,0,6408,5121,r);return a}const B={};function H(e){!0!==h[e]&&(t.enable(e),h[e]=!0)}function k(e){!1!==h[e]&&(t.disable(e),h[e]=!1)}B[3553]=F(3553,3553,1),B[34067]=F(34067,34069,6),r.setClear(0,0,0,1),s.setClear(1),l.setClear(0),H(2929),s.setFunc(3),j(!1),q(1),H(2884),W(0);const G={[Ni]:32774,101:32778,102:32779};if(i)G[103]=32775,G[104]=32776;else{const t=e.get(\"EXT_blend_minmax\");null!==t&&(G[103]=t.MIN_EXT,G[104]=t.MAX_EXT)}const V={200:0,201:1,202:768,204:770,210:776,208:774,206:772,203:769,205:771,209:775,207:773};function W(e,n,i,r,a,s,o,l){if(0!==e){if(!1===f&&(H(3042),f=!0),5===e)a=a||n,s=s||i,o=o||r,n===g&&a===x||(t.blendEquationSeparate(G[n],G[a]),g=n,x=a),i===v&&r===y&&s===_&&o===M||(t.blendFuncSeparate(V[i],V[r],V[s],V[o]),v=i,y=r,_=s,M=o),m=e,w=null;else if(e!==m||l!==w){if(g===Ni&&x===Ni||(t.blendEquation(32774),g=Ni,x=Ni),l)switch(e){case 1:t.blendFuncSeparate(1,771,1,771);break;case 2:t.blendFunc(1,1);break;case 3:t.blendFuncSeparate(0,0,769,771);break;case 4:t.blendFuncSeparate(0,768,0,770);break;default:console.error(\"THREE.WebGLState: Invalid blending: \",e)}else switch(e){case 1:t.blendFuncSeparate(770,771,1,771);break;case 2:t.blendFunc(770,1);break;case 3:t.blendFunc(0,769);break;case 4:t.blendFunc(0,768);break;default:console.error(\"THREE.WebGLState: Invalid blending: \",e)}v=null,y=null,_=null,M=null,m=e,w=l}}else!0===f&&(k(3042),f=!1)}function j(e){b!==e&&(t.frontFace(e?2304:2305),b=e)}function q(e){0!==e?(H(2884),e!==S&&t.cullFace(1===e?1029:2===e?1028:1032)):k(2884),S=e}function X(e,n,i){e?(H(32823),E===n&&A===i||(t.polygonOffset(n,i),E=n,A=i)):k(32823)}function Y(e){void 0===e&&(e=33984+L-1),D!==e&&(t.activeTexture(e),D=e)}return{buffers:{color:r,depth:s,stencil:l},enable:H,disable:k,bindFramebuffer:function Z(e,n){return null===n&&null!==u&&(n=u),d[e]!==n&&(t.bindFramebuffer(e,n),d[e]=n,i&&(36009===e&&(d[36160]=n),36160===e&&(d[36009]=n)),!0)},bindXRFramebuffer:function J(e){e!==u&&(t.bindFramebuffer(36160,e),u=e)},useProgram:function Q(e){return p!==e&&(t.useProgram(e),p=e,!0)},setBlending:W,setMaterial:function K(t,e){2===t.side?k(2884):H(2884);let n=1===t.side;e&&(n=!n),j(n),1===t.blending&&!1===t.transparent?W(0):W(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),s.setFunc(t.depthFunc),s.setTest(t.depthTest),s.setMask(t.depthWrite),r.setMask(t.colorWrite);const i=t.stencilWrite;l.setTest(i),i&&(l.setMask(t.stencilWriteMask),l.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),l.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),X(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?H(32926):k(32926)},setFlipSided:j,setCullFace:q,setLineWidth:function $(e){e!==T&&(C&&t.lineWidth(e),T=e)},setPolygonOffset:X,setScissorTest:function tt(t){t?H(3089):k(3089)},activeTexture:Y,bindTexture:function et(e,n){null===D&&Y();let i=N[D];void 0===i&&(i={type:void 0,texture:void 0},N[D]=i),i.type===e&&i.texture===n||(t.bindTexture(e,n||B[e]),i.type=e,i.texture=n)},unbindTexture:function nt(){const e=N[D];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function it(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error(\"THREE.WebGLState:\",t)}},texImage2D:function rt(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error(\"THREE.WebGLState:\",t)}},texImage3D:function at(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error(\"THREE.WebGLState:\",t)}},scissor:function st(e){!1===z.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),z.copy(e))},viewport:function ot(e){!1===U.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),U.copy(e))},reset:function lt(){t.disable(3042),t.disable(2884),t.disable(2929),t.disable(32823),t.disable(3089),t.disable(2960),t.disable(32926),t.blendEquation(32774),t.blendFunc(1,0),t.blendFuncSeparate(1,0,1,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(513),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(519,0,4294967295),t.stencilOp(7680,7680,7680),t.clearStencil(0),t.cullFace(1029),t.frontFace(2305),t.polygonOffset(0,0),t.activeTexture(33984),t.bindFramebuffer(36160,null),!0===i&&(t.bindFramebuffer(36009,null),t.bindFramebuffer(36008,null)),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),h={},D=null,N={},u=null,d={},p=null,f=!1,m=null,g=null,v=null,y=null,x=null,_=null,M=null,w=!1,b=null,S=null,T=null,E=null,A=null,z.set(0,0,t.canvas.width,t.canvas.height),U.set(0,0,t.canvas.width,t.canvas.height),r.reset(),s.reset(),l.reset()}}}function Fc(t,e,n,i,r,a,s){const o=r.isWebGL2,l=r.maxTextures,c=r.maxCubemapSize,h=r.maxTextureSize,u=r.maxSamples,d=new WeakMap;let p,f=!1;try{f=\"undefined\"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext(\"2d\")}catch(t){}function m(t,e){return f?new OffscreenCanvas(t,e):document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\")}function g(t,e,n,i){let r=1;if((t.width>i||t.height>i)&&(r=i/Math.max(t.width,t.height)),r<1||!0===e){if(\"undefined\"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||\"undefined\"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||\"undefined\"!=typeof ImageBitmap&&t instanceof ImageBitmap){const i=e?wr:Math.floor,a=i(r*t.width),s=i(r*t.height);void 0===p&&(p=m(a,s));const o=n?m(a,s):p;o.width=a,o.height=s;return o.getContext(\"2d\").drawImage(t,0,0,a,s),console.warn(\"THREE.WebGLRenderer: Texture has been resized from (\"+t.width+\"x\"+t.height+\") to (\"+a+\"x\"+s+\").\"),o}return\"data\"in t&&console.warn(\"THREE.WebGLRenderer: Image in DataTexture is too big (\"+t.width+\"x\"+t.height+\").\"),t}return t}function v(t){return Mr(t.width)&&Mr(t.height)}function y(t,e){return t.generateMipmaps&&e&&t.minFilter!==Hi&&t.minFilter!==ki}function x(e,n,r,a,s=1){t.generateMipmap(e);i.get(n).__maxMipLevel=Math.log2(Math.max(r,a,s))}function _(n,i,r){if(!1===o)return i;if(null!==n){if(void 0!==t[n])return t[n];console.warn(\"THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '\"+n+\"'\")}let a=i;return 6403===i&&(5126===r&&(a=33326),5131===r&&(a=33325),5121===r&&(a=33321)),6407===i&&(5126===r&&(a=34837),5131===r&&(a=34843),5121===r&&(a=32849)),6408===i&&(5126===r&&(a=34836),5131===r&&(a=34842),5121===r&&(a=32856)),33325!==a&&33326!==a&&34842!==a&&34836!==a||e.get(\"EXT_color_buffer_float\"),a}function M(t){return t===Hi||1004===t||1005===t?9728:9729}function w(e){const n=e.target;n.removeEventListener(\"dispose\",w),(function r(e){const n=i.get(e);if(void 0===n.__webglInit)return;t.deleteTexture(n.__webglTexture),i.remove(e)})(n),n.isVideoTexture&&d.delete(n),s.memory.textures--}function b(e){const n=e.target;n.removeEventListener(\"dispose\",b),(function r(e){const n=e.texture,r=i.get(e),a=i.get(n);if(!e)return;void 0!==a.__webglTexture&&(t.deleteTexture(a.__webglTexture),s.memory.textures--);e.depthTexture&&e.depthTexture.dispose();if(e.isWebGLCubeRenderTarget)for(let e=0;e<6;e++)t.deleteFramebuffer(r.__webglFramebuffer[e]),r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer[e]);else t.deleteFramebuffer(r.__webglFramebuffer),r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer),r.__webglMultisampledFramebuffer&&t.deleteFramebuffer(r.__webglMultisampledFramebuffer),r.__webglColorRenderbuffer&&t.deleteRenderbuffer(r.__webglColorRenderbuffer),r.__webglDepthRenderbuffer&&t.deleteRenderbuffer(r.__webglDepthRenderbuffer);if(e.isWebGLMultipleRenderTargets)for(let e=0,r=n.length;e<r;e++){const r=i.get(n[e]);r.__webglTexture&&(t.deleteTexture(r.__webglTexture),s.memory.textures--),i.remove(n[e])}i.remove(n),i.remove(e)})(n)}let S=0;function T(t,e){const r=i.get(t);if(t.isVideoTexture&&(function a(t){const e=s.render.frame;d.get(t)!==e&&(d.set(t,e),t.update())})(t),t.version>0&&r.__version!==t.version){const n=t.image;if(void 0===n)console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is undefined\");else{if(!1!==n.complete)return void P(r,t,e);console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is incomplete\")}}n.activeTexture(33984+e),n.bindTexture(3553,r.__webglTexture)}function E(e,r){const s=i.get(e);e.version>0&&s.__version!==e.version?(function l(e,i,r){if(6!==i.image.length)return;R(e,i),n.activeTexture(33984+r),n.bindTexture(34067,e.__webglTexture),t.pixelStorei(37440,i.flipY),t.pixelStorei(37441,i.premultiplyAlpha),t.pixelStorei(3317,i.unpackAlignment),t.pixelStorei(37443,0);const s=i&&(i.isCompressedTexture||i.image[0].isCompressedTexture),l=i.image[0]&&i.image[0].isDataTexture,h=[];for(let t=0;t<6;t++)h[t]=s||l?l?i.image[t].image:i.image[t]:g(i.image[t],!1,!0,c);const u=h[0],d=v(u)||o,p=a.convert(i.format),f=a.convert(i.type),m=_(i.internalFormat,p,f);let M;if(C(34067,i,d),s){for(let t=0;t<6;t++){M=h[t].mipmaps;for(let e=0;e<M.length;e++){const r=M[e];i.format!==Ji&&i.format!==Zi?null!==p?n.compressedTexImage2D(34069+t,e,m,r.width,r.height,0,r.data):console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\"):n.texImage2D(34069+t,e,m,r.width,r.height,0,p,f,r.data)}}e.__maxMipLevel=M.length-1}else{M=i.mipmaps;for(let t=0;t<6;t++)if(l){n.texImage2D(34069+t,0,m,h[t].width,h[t].height,0,p,f,h[t].data);for(let e=0;e<M.length;e++){const i=M[e].image[t].image;n.texImage2D(34069+t,e+1,m,i.width,i.height,0,p,f,i.data)}}else{n.texImage2D(34069+t,0,m,p,f,h[t]);for(let e=0;e<M.length;e++){n.texImage2D(34069+t,e+1,m,p,f,M[e].image[t])}}e.__maxMipLevel=M.length}y(i,d)&&x(34067,i,u.width,u.height);e.__version=i.version,i.onUpdate&&i.onUpdate(i)})(s,e,r):(n.activeTexture(33984+r),n.bindTexture(34067,s.__webglTexture))}const A={[Ui]:10497,[Fi]:33071,[Bi]:33648},L={[Hi]:9728,1004:9984,1005:9986,[ki]:9729,1007:9985,[Gi]:9987};function C(n,a,s){if(s?(t.texParameteri(n,10242,A[a.wrapS]),t.texParameteri(n,10243,A[a.wrapT]),32879!==n&&35866!==n||t.texParameteri(n,32882,A[a.wrapR]),t.texParameteri(n,10240,L[a.magFilter]),t.texParameteri(n,10241,L[a.minFilter])):(t.texParameteri(n,10242,33071),t.texParameteri(n,10243,33071),32879!==n&&35866!==n||t.texParameteri(n,32882,33071),a.wrapS===Fi&&a.wrapT===Fi||console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.\"),t.texParameteri(n,10240,M(a.magFilter)),t.texParameteri(n,10241,M(a.minFilter)),a.minFilter!==Hi&&a.minFilter!==ki&&console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.\")),!0===e.has(\"EXT_texture_filter_anisotropic\")){const s=e.get(\"EXT_texture_filter_anisotropic\");if(a.type===qi&&!1===e.has(\"OES_texture_float_linear\"))return;if(!1===o&&a.type===Xi&&!1===e.has(\"OES_texture_half_float_linear\"))return;(a.anisotropy>1||i.get(a).__currentAnisotropy)&&(t.texParameterf(n,s.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,r.getMaxAnisotropy())),i.get(a).__currentAnisotropy=a.anisotropy)}}function R(e,n){void 0===e.__webglInit&&(e.__webglInit=!0,n.addEventListener(\"dispose\",w),e.__webglTexture=t.createTexture(),s.memory.textures++)}function P(e,i,r){let s=3553;i.isDataTexture2DArray&&(s=35866),i.isDataTexture3D&&(s=32879),R(e,i),n.activeTexture(33984+r),n.bindTexture(s,e.__webglTexture),t.pixelStorei(37440,i.flipY),t.pixelStorei(37441,i.premultiplyAlpha),t.pixelStorei(3317,i.unpackAlignment),t.pixelStorei(37443,0);const l=(function c(t){return!o&&(t.wrapS!==Fi||t.wrapT!==Fi||t.minFilter!==Hi&&t.minFilter!==ki)})(i)&&!1===v(i.image),u=g(i.image,l,!1,h),d=v(u)||o,p=a.convert(i.format);let f,m=a.convert(i.type),M=_(i.internalFormat,p,m);C(s,i,d);const w=i.mipmaps;if(i.isDepthTexture)M=6402,o?M=i.type===qi?36012:i.type===ji?33190:i.type===Yi?35056:33189:i.type===qi&&console.error(\"WebGLRenderer: Floating point depth texture requires WebGL2.\"),i.format===Qi&&6402===M&&i.type!==Wi&&i.type!==ji&&(console.warn(\"THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.\"),i.type=Wi,m=a.convert(i.type)),i.format===Ki&&6402===M&&(M=34041,i.type!==Yi&&(console.warn(\"THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.\"),i.type=Yi,m=a.convert(i.type))),n.texImage2D(3553,0,M,u.width,u.height,0,p,m,null);else if(i.isDataTexture)if(w.length>0&&d){for(let t=0,e=w.length;t<e;t++)f=w[t],n.texImage2D(3553,t,M,f.width,f.height,0,p,m,f.data);i.generateMipmaps=!1,e.__maxMipLevel=w.length-1}else n.texImage2D(3553,0,M,u.width,u.height,0,p,m,u.data),e.__maxMipLevel=0;else if(i.isCompressedTexture){for(let t=0,e=w.length;t<e;t++)f=w[t],i.format!==Ji&&i.format!==Zi?null!==p?n.compressedTexImage2D(3553,t,M,f.width,f.height,0,f.data):console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\"):n.texImage2D(3553,t,M,f.width,f.height,0,p,m,f.data);e.__maxMipLevel=w.length-1}else if(i.isDataTexture2DArray)n.texImage3D(35866,0,M,u.width,u.height,u.depth,0,p,m,u.data),e.__maxMipLevel=0;else if(i.isDataTexture3D)n.texImage3D(32879,0,M,u.width,u.height,u.depth,0,p,m,u.data),e.__maxMipLevel=0;else if(w.length>0&&d){for(let t=0,e=w.length;t<e;t++)f=w[t],n.texImage2D(3553,t,M,p,m,f);i.generateMipmaps=!1,e.__maxMipLevel=w.length-1}else n.texImage2D(3553,0,M,p,m,u),e.__maxMipLevel=0;y(i,d)&&x(s,i,u.width,u.height),e.__version=i.version,i.onUpdate&&i.onUpdate(i)}function D(e,r,s,o,l){const c=a.convert(s.format),h=a.convert(s.type),u=_(s.internalFormat,c,h);32879===l||35866===l?n.texImage3D(l,0,u,r.width,r.height,r.depth,0,c,h,null):n.texImage2D(l,0,u,r.width,r.height,0,c,h,null),n.bindFramebuffer(36160,e),t.framebufferTexture2D(36160,o,l,i.get(s).__webglTexture,0),n.bindFramebuffer(36160,null)}function N(e,n,i){if(t.bindRenderbuffer(36161,e),n.depthBuffer&&!n.stencilBuffer){let r=33189;if(i){const e=n.depthTexture;e&&e.isDepthTexture&&(e.type===qi?r=36012:e.type===ji&&(r=33190));const i=O(n);t.renderbufferStorageMultisample(36161,i,r,n.width,n.height)}else t.renderbufferStorage(36161,r,n.width,n.height);t.framebufferRenderbuffer(36160,36096,36161,e)}else if(n.depthBuffer&&n.stencilBuffer){if(i){const e=O(n);t.renderbufferStorageMultisample(36161,e,35056,n.width,n.height)}else t.renderbufferStorage(36161,34041,n.width,n.height);t.framebufferRenderbuffer(36160,33306,36161,e)}else{const e=!0===n.isWebGLMultipleRenderTargets?n.texture[0]:n.texture,r=a.convert(e.format),s=a.convert(e.type),o=_(e.internalFormat,r,s);if(i){const e=O(n);t.renderbufferStorageMultisample(36161,e,o,n.width,n.height)}else t.renderbufferStorage(36161,o,n.width,n.height)}t.bindRenderbuffer(36161,null)}function I(e){const r=i.get(e),a=!0===e.isWebGLCubeRenderTarget;if(e.depthTexture){if(a)throw new Error(\"target.depthTexture not supported in Cube render targets\");!(function s(e,r){if(r&&r.isWebGLCubeRenderTarget)throw new Error(\"Depth Texture with cube render targets is not supported\");if(n.bindFramebuffer(36160,e),!r.depthTexture||!r.depthTexture.isDepthTexture)throw new Error(\"renderTarget.depthTexture must be an instance of THREE.DepthTexture\");i.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),T(r.depthTexture,0);const a=i.get(r.depthTexture).__webglTexture;if(r.depthTexture.format===Qi)t.framebufferTexture2D(36160,36096,3553,a,0);else{if(r.depthTexture.format!==Ki)throw new Error(\"Unknown depthTexture format\");t.framebufferTexture2D(36160,33306,3553,a,0)}})(r.__webglFramebuffer,e)}else if(a){r.__webglDepthbuffer=[];for(let i=0;i<6;i++)n.bindFramebuffer(36160,r.__webglFramebuffer[i]),r.__webglDepthbuffer[i]=t.createRenderbuffer(),N(r.__webglDepthbuffer[i],e,!1)}else n.bindFramebuffer(36160,r.__webglFramebuffer),r.__webglDepthbuffer=t.createRenderbuffer(),N(r.__webglDepthbuffer,e,!1);n.bindFramebuffer(36160,null)}function O(t){return o&&t.isWebGLMultisampleRenderTarget?Math.min(u,t.samples):0}let z=!1,U=!1;this.allocateTextureUnit=function F(){const t=S;return t>=l&&console.warn(\"THREE.WebGLTextures: Trying to use \"+t+\" texture units while this GPU supports only \"+l),S+=1,t},this.resetTextureUnits=function B(){S=0},this.setTexture2D=T,this.setTexture2DArray=function H(t,e){const r=i.get(t);t.version>0&&r.__version!==t.version?P(r,t,e):(n.activeTexture(33984+e),n.bindTexture(35866,r.__webglTexture))},this.setTexture3D=function k(t,e){const r=i.get(t);t.version>0&&r.__version!==t.version?P(r,t,e):(n.activeTexture(33984+e),n.bindTexture(32879,r.__webglTexture))},this.setTextureCube=E,this.setupRenderTarget=function G(e){const l=e.texture,c=i.get(e),h=i.get(l);e.addEventListener(\"dispose\",b),!0!==e.isWebGLMultipleRenderTargets&&(h.__webglTexture=t.createTexture(),h.__version=l.version,s.memory.textures++);const u=!0===e.isWebGLCubeRenderTarget,d=!0===e.isWebGLMultipleRenderTargets,p=!0===e.isWebGLMultisampleRenderTarget,f=l.isDataTexture3D||l.isDataTexture2DArray,m=v(e)||o;if(!o||l.format!==Zi||l.type!==qi&&l.type!==Xi||(l.format=Ji,console.warn(\"THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.\")),u){c.__webglFramebuffer=[];for(let e=0;e<6;e++)c.__webglFramebuffer[e]=t.createFramebuffer()}else if(c.__webglFramebuffer=t.createFramebuffer(),d)if(r.drawBuffers){const n=e.texture;for(let e=0,r=n.length;e<r;e++){const r=i.get(n[e]);void 0===r.__webglTexture&&(r.__webglTexture=t.createTexture(),s.memory.textures++)}}else console.warn(\"THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.\");else if(p)if(o){c.__webglMultisampledFramebuffer=t.createFramebuffer(),c.__webglColorRenderbuffer=t.createRenderbuffer(),t.bindRenderbuffer(36161,c.__webglColorRenderbuffer);const i=a.convert(l.format),r=a.convert(l.type),s=_(l.internalFormat,i,r),o=O(e);t.renderbufferStorageMultisample(36161,o,s,e.width,e.height),n.bindFramebuffer(36160,c.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064,36161,c.__webglColorRenderbuffer),t.bindRenderbuffer(36161,null),e.depthBuffer&&(c.__webglDepthRenderbuffer=t.createRenderbuffer(),N(c.__webglDepthRenderbuffer,e,!0)),n.bindFramebuffer(36160,null)}else console.warn(\"THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.\");if(u){n.bindTexture(34067,h.__webglTexture),C(34067,l,m);for(let t=0;t<6;t++)D(c.__webglFramebuffer[t],e,l,36064,34069+t);y(l,m)&&x(34067,l,e.width,e.height),n.bindTexture(34067,null)}else if(d){const t=e.texture;for(let r=0,a=t.length;r<a;r++){const a=t[r],s=i.get(a);n.bindTexture(3553,s.__webglTexture),C(3553,a,m),D(c.__webglFramebuffer,e,a,36064+r,3553),y(a,m)&&x(3553,a,e.width,e.height)}n.bindTexture(3553,null)}else{let t=3553;if(f)if(o){t=l.isDataTexture3D?32879:35866}else console.warn(\"THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.\");n.bindTexture(t,h.__webglTexture),C(t,l,m),D(c.__webglFramebuffer,e,l,36064,t),y(l,m)&&x(t,l,e.width,e.height,e.depth),n.bindTexture(t,null)}e.depthBuffer&&I(e)},this.updateRenderTargetMipmap=function V(t){const e=v(t)||o,r=!0===t.isWebGLMultipleRenderTargets?t.texture:[t.texture];for(let a=0,s=r.length;a<s;a++){const s=r[a];if(y(s,e)){const e=t.isWebGLCubeRenderTarget?34067:3553,r=i.get(s).__webglTexture;n.bindTexture(e,r),x(e,s,t.width,t.height),n.bindTexture(e,null)}}},this.updateMultisampleRenderTarget=function W(e){if(e.isWebGLMultisampleRenderTarget)if(o){const r=e.width,a=e.height;let s=16384;e.depthBuffer&&(s|=256),e.stencilBuffer&&(s|=1024);const o=i.get(e);n.bindFramebuffer(36008,o.__webglMultisampledFramebuffer),n.bindFramebuffer(36009,o.__webglFramebuffer),t.blitFramebuffer(0,0,r,a,0,0,r,a,s,9728),n.bindFramebuffer(36008,null),n.bindFramebuffer(36009,o.__webglMultisampledFramebuffer)}else console.warn(\"THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.\")},this.safeSetTexture2D=function j(t,e){t&&t.isWebGLRenderTarget&&(!1===z&&(console.warn(\"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\"),z=!0),t=t.texture),T(t,e)},this.safeSetTextureCube=function q(t,e){t&&t.isWebGLCubeRenderTarget&&(!1===U&&(console.warn(\"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\"),U=!0),t=t.texture),E(t,e)}}function Bc(t,e,n){const i=n.isWebGL2;return{convert:function r(t){let n;if(t===Vi)return 5121;if(1017===t)return 32819;if(1018===t)return 32820;if(1019===t)return 33635;if(1010===t)return 5120;if(1011===t)return 5122;if(t===Wi)return 5123;if(1013===t)return 5124;if(t===ji)return 5125;if(t===qi)return 5126;if(t===Xi)return i?5131:(n=e.get(\"OES_texture_half_float\"),null!==n?n.HALF_FLOAT_OES:null);if(1021===t)return 6406;if(t===Zi)return 6407;if(t===Ji)return 6408;if(1024===t)return 6409;if(1025===t)return 6410;if(t===Qi)return 6402;if(t===Ki)return 34041;if(1028===t)return 6403;if(1029===t)return 36244;if(1030===t)return 33319;if(1031===t)return 33320;if(1032===t)return 36248;if(1033===t)return 36249;if(33776===t||33777===t||33778===t||33779===t){if(n=e.get(\"WEBGL_compressed_texture_s3tc\"),null===n)return null;if(33776===t)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===t)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===t)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===t)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===t||35841===t||35842===t||35843===t){if(n=e.get(\"WEBGL_compressed_texture_pvrtc\"),null===n)return null;if(35840===t)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===t)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===t)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===t)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===t)return n=e.get(\"WEBGL_compressed_texture_etc1\"),null!==n?n.COMPRESSED_RGB_ETC1_WEBGL:null;if((37492===t||37496===t)&&(n=e.get(\"WEBGL_compressed_texture_etc\"),null!==n)){if(37492===t)return n.COMPRESSED_RGB8_ETC2;if(37496===t)return n.COMPRESSED_RGBA8_ETC2_EAC}return 37808===t||37809===t||37810===t||37811===t||37812===t||37813===t||37814===t||37815===t||37816===t||37817===t||37818===t||37819===t||37820===t||37821===t||37840===t||37841===t||37842===t||37843===t||37844===t||37845===t||37846===t||37847===t||37848===t||37849===t||37850===t||37851===t||37852===t||37853===t?(n=e.get(\"WEBGL_compressed_texture_astc\"),null!==n?t:null):36492===t?(n=e.get(\"EXT_texture_compression_bptc\"),null!==n?t:null):t===Yi?i?34042:(n=e.get(\"WEBGL_depth_texture\"),null!==n?n.UNSIGNED_INT_24_8_WEBGL:null):void 0}}}class Hc extends Ws{constructor(t=[]){super(),this.cameras=t}}Hc.prototype.isArrayCamera=!0;class kc extends za{constructor(){super(),this.type=\"Group\"}}kc.prototype.isGroup=!0;const Gc={type:\"move\"};class Vc{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new kc,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new kc,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Ir,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Ir),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new kc,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Ir,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Ir),this._grip}dispatchEvent(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this}disconnect(t){return this.dispatchEvent({type:\"disconnected\",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(t,e,n){let i=null,r=null,a=null;const s=this._targetRay,o=this._grip,l=this._hand;if(t&&\"visible-blurred\"!==e.session.visibilityState)if(null!==s&&(i=e.getPose(t.targetRaySpace,n),null!==i&&(s.matrix.fromArray(i.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale),i.linearVelocity?(s.hasLinearVelocity=!0,s.linearVelocity.copy(i.linearVelocity)):s.hasLinearVelocity=!1,i.angularVelocity?(s.hasAngularVelocity=!0,s.angularVelocity.copy(i.angularVelocity)):s.hasAngularVelocity=!1,this.dispatchEvent(Gc))),l&&t.hand){a=!0;for(const i of t.hand.values()){const t=e.getJointPose(i,n);if(void 0===l.joints[i.jointName]){const t=new kc;t.matrixAutoUpdate=!1,t.visible=!1,l.joints[i.jointName]=t,l.add(t)}const r=l.joints[i.jointName];null!==t&&(r.matrix.fromArray(t.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.jointRadius=t.radius),r.visible=null!==t}const i=l.joints[\"index-finger-tip\"].position.distanceTo(l.joints[\"thumb-tip\"].position),r=.02,s=.005;l.inputState.pinching&&i>r+s?(l.inputState.pinching=!1,this.dispatchEvent({type:\"pinchend\",handedness:t.handedness,target:this})):!l.inputState.pinching&&i<=r-s&&(l.inputState.pinching=!0,this.dispatchEvent({type:\"pinchstart\",handedness:t.handedness,target:this}))}else null!==o&&t.gripSpace&&(r=e.getPose(t.gripSpace,n),null!==r&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1));return null!==s&&(s.visible=null!==i),null!==o&&(o.visible=null!==r),null!==l&&(l.visible=null!==a),this}}class Wc extends fr{constructor(t,e){super();const n=this,i=t.state;let r=null,a=1,s=null,o=\"local-floor\",l=null,c=null,h=null,u=null,d=null;const p=[],f=new Map,m=new Ws;m.layers.enable(1),m.viewport=new Rr;const g=new Ws;g.layers.enable(2),g.viewport=new Rr;const v=[m,g],y=new Hc;y.layers.enable(1),y.layers.enable(2);let x=null,_=null;function M(t){const e=f.get(t.inputSource);e&&e.dispatchEvent({type:t.type,data:t.inputSource})}function w(){f.forEach((function(t,e){t.disconnect(e)})),f.clear(),x=null,_=null,i.bindXRFramebuffer(null),t.setRenderTarget(t.getRenderTarget()),L.stop(),n.isPresenting=!1,n.dispatchEvent({type:\"sessionend\"})}function b(t){const e=r.inputSources;for(let t=0;t<p.length;t++)f.set(e[t],p[t]);for(let e=0;e<t.removed.length;e++){const n=t.removed[e],i=f.get(n);i&&(i.dispatchEvent({type:\"disconnected\",data:n}),f.delete(n))}for(let e=0;e<t.added.length;e++){const n=t.added[e],i=f.get(n);i&&i.dispatchEvent({type:\"connected\",data:n})}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(t){let e=p[t];return void 0===e&&(e=new Vc,p[t]=e),e.getTargetRaySpace()},this.getControllerGrip=function(t){let e=p[t];return void 0===e&&(e=new Vc,p[t]=e),e.getGripSpace()},this.getHand=function(t){let e=p[t];return void 0===e&&(e=new Vc,p[t]=e),e.getHandSpace()},this.setFramebufferScaleFactor=function(t){a=t,!0===n.isPresenting&&console.warn(\"THREE.WebXRManager: Cannot change framebuffer scale while presenting.\")},this.setReferenceSpaceType=function(t){o=t,!0===n.isPresenting&&console.warn(\"THREE.WebXRManager: Cannot change reference space type while presenting.\")},this.getReferenceSpace=function(){return s},this.getSession=function(){return r},this.setSession=async function(t){if(r=t,null!==r){r.addEventListener(\"select\",M),r.addEventListener(\"selectstart\",M),r.addEventListener(\"selectend\",M),r.addEventListener(\"squeeze\",M),r.addEventListener(\"squeezestart\",M),r.addEventListener(\"squeezeend\",M),r.addEventListener(\"end\",w),r.addEventListener(\"inputsourceschange\",b);const t=e.getContextAttributes();if(!0!==t.xrCompatible&&await e.makeXRCompatible(),void 0===r.renderState.layers){d=new XRWebGLLayer(r,e,{antialias:t.antialias,alpha:t.alpha,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:a}),r.updateRenderState({baseLayer:d})}else{let n=0;if(t.antialias){d=new XRWebGLLayer(r,e,{antialias:!0,alpha:t.alpha,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:a}),r.updateRenderState({layers:[d]})}else{t.depth&&(n=t.stencil?34041:6402);const i={colorFormat:t.alpha?6408:6407,depthFormat:n,scaleFactor:a};c=new XRWebGLBinding(r,e),u=c.createProjectionLayer(i),h=e.createFramebuffer(),r.updateRenderState({layers:[u]})}}s=await r.requestReferenceSpace(o),L.setContext(r),L.start(),n.isPresenting=!0,n.dispatchEvent({type:\"sessionstart\"})}};const S=new Ir,T=new Ir;function E(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.updateCamera=function(t){if(null===r)return;y.near=g.near=m.near=t.near,y.far=g.far=m.far=t.far,x===y.near&&_===y.far||(r.updateRenderState({depthNear:y.near,depthFar:y.far}),x=y.near,_=y.far);const e=t.parent,n=y.cameras;E(y,e);for(let t=0;t<n.length;t++)E(n[t],e);y.matrixWorld.decompose(y.position,y.quaternion,y.scale),t.position.copy(y.position),t.quaternion.copy(y.quaternion),t.scale.copy(y.scale),t.matrix.copy(y.matrix),t.matrixWorld.copy(y.matrixWorld);const i=t.children;for(let t=0,e=i.length;t<e;t++)i[t].updateMatrixWorld(!0);2===n.length?(function a(t,e,n){S.setFromMatrixPosition(e.matrixWorld),T.setFromMatrixPosition(n.matrixWorld);const i=S.distanceTo(T),r=e.projectionMatrix.elements,a=n.projectionMatrix.elements,s=r[14]/(r[10]-1),o=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],h=(r[8]-1)/r[0],u=(a[8]+1)/a[0],d=s*h,p=s*u,f=i/(-h+u),m=f*-h;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(m),t.translateZ(f),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert();const g=s+f,v=o+f;t.projectionMatrix.makePerspective(d-m,p+(i-m),l*o/v*g,c*o/v*g,g,v)})(y,m,g):y.projectionMatrix.copy(m.projectionMatrix)},this.getCamera=function(){return y},this.getFoveation=function(){return null!==u?u.fixedFoveation:null!==d?d.fixedFoveation:void 0},this.setFoveation=function(t){null!==u&&(u.fixedFoveation=t),null!==d&&void 0!==d.fixedFoveation&&(d.fixedFoveation=t)};let A=null;const L=new no;L.setAnimationLoop((function C(t,n){if(l=n.getViewerPose(s),null!==l){const t=l.views;null!==d&&i.bindXRFramebuffer(d.framebuffer);let n=!1;t.length!==y.cameras.length&&(y.cameras.length=0,n=!0);for(let r=0;r<t.length;r++){const a=t[r];let s=null;if(null!==d)s=d.getViewport(a);else{const t=c.getViewSubImage(u,a);i.bindXRFramebuffer(h),void 0!==t.depthStencilTexture&&e.framebufferTexture2D(36160,36096,3553,t.depthStencilTexture,0),e.framebufferTexture2D(36160,36064,3553,t.colorTexture,0),s=t.viewport}const o=v[r];o.matrix.fromArray(a.transform.matrix),o.projectionMatrix.fromArray(a.projectionMatrix),o.viewport.set(s.x,s.y,s.width,s.height),0===r&&y.matrix.copy(o.matrix),!0===n&&y.cameras.push(o)}}const a=r.inputSources;for(let t=0;t<p.length;t++){p[t].update(a[t],n,s)}A&&A(t,n)})),this.setAnimationLoop=function(t){A=t},this.dispose=function(){}}}function jc(t){function e(e,n){e.opacity.value=n.opacity,n.color&&e.diffuse.value.copy(n.color),n.emissive&&e.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity),n.map&&(e.map.value=n.map),n.alphaMap&&(e.alphaMap.value=n.alphaMap),n.specularMap&&(e.specularMap.value=n.specularMap);const i=t.get(n).envMap;if(i){e.envMap.value=i,e.flipEnvMap.value=i.isCubeTexture&&!1===i.isRenderTargetTexture?-1:1,e.reflectivity.value=n.reflectivity,e.refractionRatio.value=n.refractionRatio;const r=t.get(i).__maxMipLevel;void 0!==r&&(e.maxMipLevel.value=r)}let r,a;n.lightMap&&(e.lightMap.value=n.lightMap,e.lightMapIntensity.value=n.lightMapIntensity),n.aoMap&&(e.aoMap.value=n.aoMap,e.aoMapIntensity.value=n.aoMapIntensity),n.map?r=n.map:n.specularMap?r=n.specularMap:n.displacementMap?r=n.displacementMap:n.normalMap?r=n.normalMap:n.bumpMap?r=n.bumpMap:n.roughnessMap?r=n.roughnessMap:n.metalnessMap?r=n.metalnessMap:n.alphaMap?r=n.alphaMap:n.emissiveMap?r=n.emissiveMap:n.clearcoatMap?r=n.clearcoatMap:n.clearcoatNormalMap?r=n.clearcoatNormalMap:n.clearcoatRoughnessMap?r=n.clearcoatRoughnessMap:n.specularIntensityMap?r=n.specularIntensityMap:n.specularTintMap&&(r=n.specularTintMap),void 0!==r&&(r.isWebGLRenderTarget&&(r=r.texture),!0===r.matrixAutoUpdate&&r.updateMatrix(),e.uvTransform.value.copy(r.matrix)),n.aoMap?a=n.aoMap:n.lightMap&&(a=n.lightMap),void 0!==a&&(a.isWebGLRenderTarget&&(a=a.texture),!0===a.matrixAutoUpdate&&a.updateMatrix(),e.uv2Transform.value.copy(a.matrix))}function n(e,n){e.roughness.value=n.roughness,e.metalness.value=n.metalness,n.roughnessMap&&(e.roughnessMap.value=n.roughnessMap),n.metalnessMap&&(e.metalnessMap.value=n.metalnessMap),n.emissiveMap&&(e.emissiveMap.value=n.emissiveMap),n.bumpMap&&(e.bumpMap.value=n.bumpMap,e.bumpScale.value=n.bumpScale,1===n.side&&(e.bumpScale.value*=-1)),n.normalMap&&(e.normalMap.value=n.normalMap,e.normalScale.value.copy(n.normalScale),1===n.side&&e.normalScale.value.negate()),n.displacementMap&&(e.displacementMap.value=n.displacementMap,e.displacementScale.value=n.displacementScale,e.displacementBias.value=n.displacementBias);t.get(n).envMap&&(e.envMapIntensity.value=n.envMapIntensity)}return{refreshFogUniforms:function i(t,e){t.fogColor.value.copy(e.color),e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)},refreshMaterialUniforms:function r(t,i,a,s,o){i.isMeshBasicMaterial?e(t,i):i.isMeshLambertMaterial?(e(t,i),(function l(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)})(t,i)):i.isMeshToonMaterial?(e(t,i),(function c(t,e){e.gradientMap&&(t.gradientMap.value=e.gradientMap);e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)})(t,i)):i.isMeshPhongMaterial?(e(t,i),(function h(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)})(t,i)):i.isMeshStandardMaterial?(e(t,i),i.isMeshPhysicalMaterial?(function u(t,e,i){n(t,e),t.reflectivity.value=e.reflectivity,t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.sheen&&t.sheen.value.copy(e.sheen);e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap);e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap);e.clearcoatNormalMap&&(t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),t.clearcoatNormalMap.value=e.clearcoatNormalMap,1===e.side&&t.clearcoatNormalScale.value.negate());t.transmission.value=e.transmission,e.transmissionMap&&(t.transmissionMap.value=e.transmissionMap);e.transmission>0&&(t.transmissionSamplerMap.value=i.texture,t.transmissionSamplerSize.value.set(i.width,i.height));t.thickness.value=e.thickness,e.thicknessMap&&(t.thicknessMap.value=e.thicknessMap);t.attenuationDistance.value=e.attenuationDistance,t.attenuationTint.value.copy(e.attenuationTint),t.specularIntensity.value=e.specularIntensity,t.specularTint.value.copy(e.specularTint),e.specularIntensityMap&&(t.specularIntensityMap.value=e.specularIntensityMap);e.specularTintMap&&(t.specularTintMap.value=e.specularTintMap)})(t,i,o):n(t,i)):i.isMeshMatcapMaterial?(e(t,i),(function d(t,e){e.matcap&&(t.matcap.value=e.matcap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)})(t,i)):i.isMeshDepthMaterial?(e(t,i),(function p(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)})(t,i)):i.isMeshDistanceMaterial?(e(t,i),(function f(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias);t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance})(t,i)):i.isMeshNormalMaterial?(e(t,i),(function m(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)})(t,i)):i.isLineBasicMaterial?(!(function g(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity})(t,i),i.isLineDashedMaterial&&(function v(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale})(t,i)):i.isPointsMaterial?(function y(t,e,n,i){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*n,t.scale.value=.5*i,e.map&&(t.map.value=e.map);e.alphaMap&&(t.alphaMap.value=e.alphaMap);let r;e.map?r=e.map:e.alphaMap&&(r=e.alphaMap);void 0!==r&&(!0===r.matrixAutoUpdate&&r.updateMatrix(),t.uvTransform.value.copy(r.matrix))})(t,i,a,s):i.isSpriteMaterial?(function x(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map);e.alphaMap&&(t.alphaMap.value=e.alphaMap);let n;e.map?n=e.map:e.alphaMap&&(n=e.alphaMap);void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix))})(t,i):i.isShadowMaterial?(t.color.value.copy(i.color),t.opacity.value=i.opacity):i.isShaderMaterial&&(i.uniformsNeedUpdate=!1)}}}function qc(t={}){const e=void 0!==t.canvas?t.canvas:(function n(){const t=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\");return t.style.display=\"block\",t})(),i=void 0!==t.context?t.context:null,r=void 0!==t.alpha&&t.alpha,a=void 0===t.depth||t.depth,s=void 0===t.stencil||t.stencil,o=void 0!==t.antialias&&t.antialias,l=void 0===t.premultipliedAlpha||t.premultipliedAlpha,c=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,h=void 0!==t.powerPreference?t.powerPreference:\"default\",u=void 0!==t.failIfMajorPerformanceCaveat&&t.failIfMajorPerformanceCaveat;let d=null,p=null;const f=[],m=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=sr,this.physicallyCorrectLights=!1,this.toneMapping=0,this.toneMappingExposure=1;const g=this;let v=!1,y=0,x=0,_=null,M=-1,w=null;const b=new Rr,S=new Rr;let T=null,E=e.width,A=e.height,L=1,C=null,R=null;const P=new Rr(0,0,E,A),D=new Rr(0,0,E,A);let N=!1;const I=[],O=new eo;let z=!1,U=!1,F=null;const B=new ua,H=new Ir,k={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function G(){return null===_?L:1}let V,W,j,q,X,Y,Z,J,Q,K,$,tt,et,nt,it,rt,at,st,ot,lt,ct,ht,ut,dt=i;function pt(t,n){for(let i=0;i<t.length;i++){const r=e.getContext(t[i],n);if(null!==r)return r}return null}try{const t={alpha:r,depth:a,stencil:s,antialias:o,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:h,failIfMajorPerformanceCaveat:u};if(e.addEventListener(\"webglcontextlost\",gt,!1),e.addEventListener(\"webglcontextrestored\",vt,!1),null===dt){const e=[\"webgl2\",\"webgl\",\"experimental-webgl\"];if(!0===g.isWebGL1Renderer&&e.shift(),dt=pt(e,t),null===dt)throw pt(e)?new Error(\"Error creating WebGL context with your selected attributes.\"):new Error(\"Error creating WebGL context.\")}void 0===dt.getShaderPrecisionFormat&&(dt.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error(\"THREE.WebGLRenderer: \"+t.message),t}function ft(){V=new Wo(dt),W=new uo(dt,V,t),V.init(W),ht=new Bc(dt,V,W),j=new Uc(dt,V,W),I[0]=1029,q=new Xo(dt),X=new bc,Y=new Fc(dt,V,j,X,W,ht,q),Z=new fo(g),J=new Vo(g),Q=new io(dt,W),ut=new co(dt,V,Q,W),K=new jo(dt,Q,q,ut),$=new Qo(dt,K,Q,q),ot=new Jo(dt),rt=new po(X),tt=new wc(g,Z,J,V,W,ut,rt),et=new jc(X),nt=new Ac(X),it=new Nc(V,W),st=new lo(g,Z,j,$,l),at=new zc(g,$,W),lt=new ho(dt,V,q,W),ct=new qo(dt,V,q,W),q.programs=tt.programs,g.capabilities=W,g.extensions=V,g.properties=X,g.renderLists=nt,g.shadowMap=at,g.state=j,g.info=q}ft();const mt=new Wc(g,dt);function gt(t){t.preventDefault(),console.log(\"THREE.WebGLRenderer: Context Lost.\"),v=!0}function vt(){console.log(\"THREE.WebGLRenderer: Context Restored.\"),v=!1;const t=q.autoReset,e=at.enabled,n=at.autoUpdate,i=at.needsUpdate,r=at.type;ft(),q.autoReset=t,at.enabled=e,at.autoUpdate=n,at.needsUpdate=i,at.type=r}function yt(t){const e=t.target;e.removeEventListener(\"dispose\",yt),(function n(t){(function e(t){const e=X.get(t).programs;void 0!==e&&e.forEach((function(t){tt.releaseProgram(t)}))})(t),X.remove(t)})(e)}this.xr=mt,this.getContext=function(){return dt},this.getContextAttributes=function(){return dt.getContextAttributes()},this.forceContextLoss=function(){const t=V.get(\"WEBGL_lose_context\");t&&t.loseContext()},this.forceContextRestore=function(){const t=V.get(\"WEBGL_lose_context\");t&&t.restoreContext()},this.getPixelRatio=function(){return L},this.setPixelRatio=function(t){void 0!==t&&(L=t,this.setSize(E,A,!1))},this.getSize=function(t){return t.set(E,A)},this.setSize=function(t,n,i){mt.isPresenting?console.warn(\"THREE.WebGLRenderer: Can't change size while VR device is presenting.\"):(E=t,A=n,e.width=Math.floor(t*L),e.height=Math.floor(n*L),!1!==i&&(e.style.width=t+\"px\",e.style.height=n+\"px\"),this.setViewport(0,0,t,n))},this.getDrawingBufferSize=function(t){return t.set(E*L,A*L).floor()},this.setDrawingBufferSize=function(t,n,i){E=t,A=n,L=i,e.width=Math.floor(t*i),e.height=Math.floor(n*i),this.setViewport(0,0,t,n)},this.getCurrentViewport=function(t){return t.copy(b)},this.getViewport=function(t){return t.copy(P)},this.setViewport=function(t,e,n,i){t.isVector4?P.set(t.x,t.y,t.z,t.w):P.set(t,e,n,i),j.viewport(b.copy(P).multiplyScalar(L).floor())},this.getScissor=function(t){return t.copy(D)},this.setScissor=function(t,e,n,i){t.isVector4?D.set(t.x,t.y,t.z,t.w):D.set(t,e,n,i),j.scissor(S.copy(D).multiplyScalar(L).floor())},this.getScissorTest=function(){return N},this.setScissorTest=function(t){j.setScissorTest(N=t)},this.setOpaqueSort=function(t){C=t},this.setTransparentSort=function(t){R=t},this.getClearColor=function(t){return t.copy(st.getClearColor())},this.setClearColor=function(){st.setClearColor.apply(st,arguments)},this.getClearAlpha=function(){return st.getClearAlpha()},this.setClearAlpha=function(){st.setClearAlpha.apply(st,arguments)},this.clear=function(t,e,n){let i=0;(void 0===t||t)&&(i|=16384),(void 0===e||e)&&(i|=256),(void 0===n||n)&&(i|=1024),dt.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener(\"webglcontextlost\",gt,!1),e.removeEventListener(\"webglcontextrestored\",vt,!1),nt.dispose(),it.dispose(),X.dispose(),Z.dispose(),J.dispose(),$.dispose(),ut.dispose(),mt.dispose(),mt.removeEventListener(\"sessionstart\",_t),mt.removeEventListener(\"sessionend\",Mt),F&&(F.dispose(),F=null),wt.stop()},this.renderBufferImmediate=function(t,e){ut.initAttributes();const n=X.get(t);t.hasPositions&&!n.position&&(n.position=dt.createBuffer()),t.hasNormals&&!n.normal&&(n.normal=dt.createBuffer()),t.hasUvs&&!n.uv&&(n.uv=dt.createBuffer()),t.hasColors&&!n.color&&(n.color=dt.createBuffer());const i=e.getAttributes();t.hasPositions&&(dt.bindBuffer(34962,n.position),dt.bufferData(34962,t.positionArray,35048),ut.enableAttribute(i.position),dt.vertexAttribPointer(i.position,3,5126,!1,0,0)),t.hasNormals&&(dt.bindBuffer(34962,n.normal),dt.bufferData(34962,t.normalArray,35048),ut.enableAttribute(i.normal),dt.vertexAttribPointer(i.normal,3,5126,!1,0,0)),t.hasUvs&&(dt.bindBuffer(34962,n.uv),dt.bufferData(34962,t.uvArray,35048),ut.enableAttribute(i.uv),dt.vertexAttribPointer(i.uv,2,5126,!1,0,0)),t.hasColors&&(dt.bindBuffer(34962,n.color),dt.bufferData(34962,t.colorArray,35048),ut.enableAttribute(i.color),dt.vertexAttribPointer(i.color,3,5126,!1,0,0)),ut.disableUnusedAttributes(),dt.drawArrays(4,0,t.count),t.count=0},this.renderBufferDirect=function(t,e,n,i,r,a){null===e&&(e=k);const s=r.isMesh&&r.matrixWorld.determinant()<0,o=Lt(t,e,i,r);j.setMaterial(i,s);let l=n.index;const c=n.attributes.position;if(null===l){if(void 0===c||0===c.count)return}else if(0===l.count)return;let h,u=1;!0===i.wireframe&&(l=K.getWireframeAttribute(n),u=2),void 0===n.morphAttributes.position&&void 0===n.morphAttributes.normal||ot.update(r,n,i,o),ut.setup(r,i,o,n,l);let d=lt;null!==l&&(h=Q.get(l),d=ct,d.setIndex(h));const p=null!==l?l.count:c.count,f=n.drawRange.start*u,m=n.drawRange.count*u,g=null!==a?a.start*u:0,v=null!==a?a.count*u:1/0,y=Math.max(f,g),x=Math.min(p,f+m,g+v)-1,_=Math.max(0,x-y+1);if(0!==_){if(r.isMesh)!0===i.wireframe?(j.setLineWidth(i.wireframeLinewidth*G()),d.setMode(1)):d.setMode(4);else if(r.isLine){let t=i.linewidth;void 0===t&&(t=1),j.setLineWidth(t*G()),d.setMode(r.isLineSegments?1:r.isLineLoop?2:3)}else r.isPoints?d.setMode(0):r.isSprite&&d.setMode(4);if(r.isInstancedMesh)d.renderInstances(y,_,r.count);else if(n.isInstancedBufferGeometry){const t=Math.min(n.instanceCount,n._maxInstanceCount);d.renderInstances(y,_,t)}else d.render(y,_)}},this.compile=function(t,e){p=it.get(t),p.init(),m.push(p),t.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(p.pushLight(t),t.castShadow&&p.pushShadow(t))})),p.setupLights(),t.traverse((function(e){const n=e.material;if(n)if(Array.isArray(n))for(let i=0;i<n.length;i++){Et(n[i],t,e)}else Et(n,t,e)})),m.pop(),p=null};let xt=null;function _t(){wt.stop()}function Mt(){wt.start()}const wt=new no;function bt(t,e,n,i){if(!1===t.visible)return;if(t.layers.test(e.layers))if(t.isGroup)n=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)p.pushLight(t),t.castShadow&&p.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||O.intersectsSprite(t)){i&&H.setFromMatrixPosition(t.matrixWorld).applyMatrix4(B);const e=$.update(t),r=t.material;r.visible&&d.push(t,e,r,n,H.z,null)}}else if(t.isImmediateRenderObject)i&&H.setFromMatrixPosition(t.matrixWorld).applyMatrix4(B),d.push(t,null,t.material,n,H.z,null);else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.frame!==q.render.frame&&(t.skeleton.update(),t.skeleton.frame=q.render.frame),!t.frustumCulled||O.intersectsObject(t))){i&&H.setFromMatrixPosition(t.matrixWorld).applyMatrix4(B);const e=$.update(t),r=t.material;if(Array.isArray(r)){const i=e.groups;for(let a=0,s=i.length;a<s;a++){const s=i[a],o=r[s.materialIndex];o&&o.visible&&d.push(t,e,o,n,H.z,s)}}else r.visible&&d.push(t,e,r,n,H.z,null)}const r=t.children;for(let t=0,a=r.length;t<a;t++)bt(r[t],e,n,i)}function St(t,e,n){const i=!0===e.isScene?e.overrideMaterial:null;if(n.isArrayCamera){const r=n.cameras;for(let n=0,a=r.length;n<a;n++){const a=r[n];j.viewport(b.copy(a.viewport)),p.setupLightsView(a);for(let n=0,r=t.length;n<r;n++){const r=t[n],s=r.object,o=r.geometry,l=null===i?r.material:i,c=r.group;s.layers.test(a.layers)&&Tt(s,e,a,o,l,c)}}}else for(let r=0,a=t.length;r<a;r++){const a=t[r];Tt(a.object,e,n,a.geometry,null===i?a.material:i,a.group)}}function Tt(t,e,n,i,r,a){if(t.onBeforeRender(g,e,n,i,r,a),t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),t.isImmediateRenderObject){const i=Lt(n,e,r,t);j.setMaterial(r),ut.reset(),(function s(t,e){t.render((function(t){g.renderBufferImmediate(t,e)}))})(t,i)}else!0===r.transparent&&2===r.side?(r.side=1,r.needsUpdate=!0,g.renderBufferDirect(n,e,i,r,t,a),r.side=0,r.needsUpdate=!0,g.renderBufferDirect(n,e,i,r,t,a),r.side=2):g.renderBufferDirect(n,e,i,r,t,a);t.onAfterRender(g,e,n,i,r,a)}function Et(t,e,n){!0!==e.isScene&&(e=k);const i=X.get(t),r=p.state.lights,a=r.state.version,s=tt.getParameters(t,r.state,p.state.shadowsArray,e,n),o=tt.getProgramCacheKey(s);let l=i.programs;i.environment=t.isMeshStandardMaterial?e.environment:null,i.fog=e.fog,i.envMap=(t.isMeshStandardMaterial?J:Z).get(t.envMap||i.environment),void 0===l&&(t.addEventListener(\"dispose\",yt),l=new Map,i.programs=l);let c=l.get(o);if(void 0!==c){if(i.currentProgram===c&&i.lightsStateVersion===a)return At(t,s),c}else s.uniforms=tt.getUniforms(t),t.onBuild(s,g),t.onBeforeCompile(s,g),c=tt.acquireProgram(s,o),l.set(o,c),i.uniforms=s.uniforms;const h=i.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(h.clippingPlanes=rt.uniform),At(t,s),i.needsLights=(function u(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights})(t),i.lightsStateVersion=a,i.needsLights&&(h.ambientLightColor.value=r.state.ambient,h.lightProbe.value=r.state.probe,h.directionalLights.value=r.state.directional,h.directionalLightShadows.value=r.state.directionalShadow,h.spotLights.value=r.state.spot,h.spotLightShadows.value=r.state.spotShadow,h.rectAreaLights.value=r.state.rectArea,h.ltc_1.value=r.state.rectAreaLTC1,h.ltc_2.value=r.state.rectAreaLTC2,h.pointLights.value=r.state.point,h.pointLightShadows.value=r.state.pointShadow,h.hemisphereLights.value=r.state.hemi,h.directionalShadowMap.value=r.state.directionalShadowMap,h.directionalShadowMatrix.value=r.state.directionalShadowMatrix,h.spotShadowMap.value=r.state.spotShadowMap,h.spotShadowMatrix.value=r.state.spotShadowMatrix,h.pointShadowMap.value=r.state.pointShadowMap,h.pointShadowMatrix.value=r.state.pointShadowMatrix);const d=c.getUniforms(),f=ec.seqWithValue(d.seq,h);return i.currentProgram=c,i.uniformsList=f,c}function At(t,e){const n=X.get(t);n.outputEncoding=e.outputEncoding,n.instancing=e.instancing,n.skinning=e.skinning,n.morphTargets=e.morphTargets,n.morphNormals=e.morphNormals,n.numClippingPlanes=e.numClippingPlanes,n.numIntersection=e.numClipIntersection,n.vertexAlphas=e.vertexAlphas,n.vertexTangents=e.vertexTangents}function Lt(t,e,n,i){!0!==e.isScene&&(e=k),Y.resetTextureUnits();const r=e.fog,a=null===_?g.outputEncoding:_.texture.encoding,s=(n.isMeshStandardMaterial?J:Z).get(n.envMap||(n.isMeshStandardMaterial?e.environment:null)),o=!0===n.vertexColors&&!!i.geometry&&!!i.geometry.attributes.color&&4===i.geometry.attributes.color.itemSize,l=!!i.geometry&&!!i.geometry.attributes.tangent,c=!!i.geometry&&!!i.geometry.morphAttributes.position,h=!!i.geometry&&!!i.geometry.morphAttributes.normal,u=X.get(n),d=p.state.lights;if(!0===z&&(!0===U||t!==w)){rt.setState(n,t,t===w&&n.id===M)}let f=!1;n.version===u.__version?u.needsLights&&u.lightsStateVersion!==d.state.version||u.outputEncoding!==a||i.isInstancedMesh&&!1===u.instancing?f=!0:i.isInstancedMesh||!0!==u.instancing?i.isSkinnedMesh&&!1===u.skinning?f=!0:i.isSkinnedMesh||!0!==u.skinning?u.envMap!==s||n.fog&&u.fog!==r?f=!0:void 0===u.numClippingPlanes||u.numClippingPlanes===rt.numPlanes&&u.numIntersection===rt.numIntersection?(u.vertexAlphas!==o||u.vertexTangents!==l||u.morphTargets!==c||u.morphNormals!==h)&&(f=!0):f=!0:f=!0:f=!0:(f=!0,u.__version=n.version);let m=u.currentProgram;!0===f&&(m=Et(n,e,i));let v=!1,y=!1,x=!1;const b=m.getUniforms(),S=u.uniforms;if(j.useProgram(m.program)&&(v=!0,y=!0,x=!0),n.id!==M&&(M=n.id,y=!0),v||w!==t){if(b.setValue(dt,\"projectionMatrix\",t.projectionMatrix),W.logarithmicDepthBuffer&&b.setValue(dt,\"logDepthBufFC\",2/(Math.log(t.far+1)/Math.LN2)),w!==t&&(w=t,y=!0,x=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshStandardMaterial||n.envMap){const e=b.map.cameraPosition;void 0!==e&&e.setValue(dt,H.setFromMatrixPosition(t.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial)&&b.setValue(dt,\"isOrthographic\",!0===t.isOrthographicCamera),(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.isShadowMaterial||i.isSkinnedMesh)&&b.setValue(dt,\"viewMatrix\",t.matrixWorldInverse)}if(i.isSkinnedMesh){b.setOptional(dt,i,\"bindMatrix\"),b.setOptional(dt,i,\"bindMatrixInverse\");const t=i.skeleton;t&&(W.floatVertexTextures?(null===t.boneTexture&&t.computeBoneTexture(),b.setValue(dt,\"boneTexture\",t.boneTexture,Y),b.setValue(dt,\"boneTextureSize\",t.boneTextureSize)):b.setOptional(dt,t,\"boneMatrices\"))}return(y||u.receiveShadow!==i.receiveShadow)&&(u.receiveShadow=i.receiveShadow,b.setValue(dt,\"receiveShadow\",i.receiveShadow)),y&&(b.setValue(dt,\"toneMappingExposure\",g.toneMappingExposure),u.needsLights&&(function T(t,e){t.ambientLightColor.needsUpdate=e,t.lightProbe.needsUpdate=e,t.directionalLights.needsUpdate=e,t.directionalLightShadows.needsUpdate=e,t.pointLights.needsUpdate=e,t.pointLightShadows.needsUpdate=e,t.spotLights.needsUpdate=e,t.spotLightShadows.needsUpdate=e,t.rectAreaLights.needsUpdate=e,t.hemisphereLights.needsUpdate=e})(S,x),r&&n.fog&&et.refreshFogUniforms(S,r),et.refreshMaterialUniforms(S,n,L,A,F),ec.upload(dt,u.uniformsList,S,Y)),n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(ec.upload(dt,u.uniformsList,S,Y),n.uniformsNeedUpdate=!1),n.isSpriteMaterial&&b.setValue(dt,\"center\",i.center),b.setValue(dt,\"modelViewMatrix\",i.modelViewMatrix),b.setValue(dt,\"normalMatrix\",i.normalMatrix),b.setValue(dt,\"modelMatrix\",i.matrixWorld),m}wt.setAnimationLoop((function Ct(t){xt&&xt(t)})),\"undefined\"!=typeof window&&wt.setContext(window),this.setAnimationLoop=function(t){xt=t,mt.setAnimationLoop(t),null===t?wt.stop():wt.start()},mt.addEventListener(\"sessionstart\",_t),mt.addEventListener(\"sessionend\",Mt),this.render=function(t,e){if(void 0!==e&&!0!==e.isCamera)return void console.error(\"THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.\");if(!0===v)return;!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),!0===mt.enabled&&!0===mt.isPresenting&&(!0===mt.cameraAutoUpdate&&mt.updateCamera(e),e=mt.getCamera()),!0===t.isScene&&t.onBeforeRender(g,t,e,_),p=it.get(t,m.length),p.init(),m.push(p),B.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),O.setFromProjectionMatrix(B),U=this.localClippingEnabled,z=rt.init(this.clippingPlanes,U,e),d=nt.get(t,f.length),d.init(),f.push(d),bt(t,e,0,g.sortObjects),d.finish(),!0===g.sortObjects&&d.sort(C,R),!0===z&&rt.beginShadows();at.render(p.state.shadowsArray,t,e),p.setupLights(),p.setupLightsView(e),!0===z&&rt.endShadows(),!0===this.info.autoReset&&this.info.reset(),st.render(d,t);const n=d.opaque,i=d.transmissive,r=d.transparent;n.length>0&&St(n,t,e),i.length>0&&(function a(t,e,n,i){if(null===F){F=new(!0===o&&!0===W.isWebGL2?Dr:Pr)(1024,1024,{generateMipmaps:!0,type:null!==ht.convert(Xi)?Xi:Vi,minFilter:Gi,magFilter:Hi,wrapS:Fi,wrapT:Fi})}const r=g.getRenderTarget();g.setRenderTarget(F),g.clear();const a=g.toneMapping;g.toneMapping=0,St(t,n,i),g.toneMapping=a,Y.updateMultisampleRenderTarget(F),Y.updateRenderTargetMipmap(F),g.setRenderTarget(r),St(e,n,i)})(n,i,t,e),r.length>0&&St(r,t,e),null!==_&&(Y.updateMultisampleRenderTarget(_),Y.updateRenderTargetMipmap(_)),!0===t.isScene&&t.onAfterRender(g,t,e),j.buffers.depth.setTest(!0),j.buffers.depth.setMask(!0),j.buffers.color.setMask(!0),j.setPolygonOffset(!1),ut.resetDefaultState(),M=-1,w=null,m.pop(),p=m.length>0?m[m.length-1]:null,f.pop(),d=f.length>0?f[f.length-1]:null},this.getActiveCubeFace=function(){return y},this.getActiveMipmapLevel=function(){return x},this.getRenderTarget=function(){return _},this.setRenderTarget=function(t,e=0,n=0){_=t,y=e,x=n,t&&void 0===X.get(t).__webglFramebuffer&&Y.setupRenderTarget(t);let i=null,r=!1,a=!1;if(t){const n=t.texture;(n.isDataTexture3D||n.isDataTexture2DArray)&&(a=!0);const s=X.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(i=s[e],r=!0):i=t.isWebGLMultisampleRenderTarget?X.get(t).__webglMultisampledFramebuffer:s,b.copy(t.viewport),S.copy(t.scissor),T=t.scissorTest}else b.copy(P).multiplyScalar(L).floor(),S.copy(D).multiplyScalar(L).floor(),T=N;if(j.bindFramebuffer(36160,i)&&W.drawBuffers){let e=!1;if(t)if(t.isWebGLMultipleRenderTargets){const n=t.texture;if(I.length!==n.length||36064!==I[0]){for(let t=0,e=n.length;t<e;t++)I[t]=36064+t;I.length=n.length,e=!0}}else 1===I.length&&36064===I[0]||(I[0]=36064,I.length=1,e=!0);else 1===I.length&&1029===I[0]||(I[0]=1029,I.length=1,e=!0);e&&(W.isWebGL2?dt.drawBuffers(I):V.get(\"WEBGL_draw_buffers\").drawBuffersWEBGL(I))}if(j.viewport(b),j.scissor(S),j.setScissorTest(T),r){const i=X.get(t.texture);dt.framebufferTexture2D(36160,36064,34069+e,i.__webglTexture,n)}else if(a){const i=X.get(t.texture);dt.framebufferTextureLayer(36160,36064,i.__webglTexture,n||0,e||0)}},this.readRenderTargetPixels=function(t,e,n,i,r,a,s){if(!t||!t.isWebGLRenderTarget)return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.\");let o=X.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==s&&(o=o[s]),o){j.bindFramebuffer(36160,o);try{const s=t.texture,o=s.format,l=s.type;if(o!==Ji&&ht.convert(o)!==dt.getParameter(35739))return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.\");const c=l===Xi&&(V.has(\"EXT_color_buffer_half_float\")||W.isWebGL2&&V.has(\"EXT_color_buffer_float\"));if(!(l===Vi||ht.convert(l)===dt.getParameter(35738)||l===qi&&(W.isWebGL2||V.has(\"OES_texture_float\")||V.has(\"WEBGL_color_buffer_float\"))||c))return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.\");36053===dt.checkFramebufferStatus(36160)?e>=0&&e<=t.width-i&&n>=0&&n<=t.height-r&&dt.readPixels(e,n,i,r,ht.convert(o),ht.convert(l),a):console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.\")}finally{const t=null!==_?X.get(_).__webglFramebuffer:null;j.bindFramebuffer(36160,t)}}},this.copyFramebufferToTexture=function(t,e,n=0){const i=Math.pow(2,-n),r=Math.floor(e.image.width*i),a=Math.floor(e.image.height*i);let s=ht.convert(e.format);W.isWebGL2&&(6407===s&&(s=32849),6408===s&&(s=32856)),Y.setTexture2D(e,0),dt.copyTexImage2D(3553,n,s,t.x,t.y,r,a,0),j.unbindTexture()},this.copyTextureToTexture=function(t,e,n,i=0){const r=e.image.width,a=e.image.height,s=ht.convert(n.format),o=ht.convert(n.type);Y.setTexture2D(n,0),dt.pixelStorei(37440,n.flipY),dt.pixelStorei(37441,n.premultiplyAlpha),dt.pixelStorei(3317,n.unpackAlignment),e.isDataTexture?dt.texSubImage2D(3553,i,t.x,t.y,r,a,s,o,e.image.data):e.isCompressedTexture?dt.compressedTexSubImage2D(3553,i,t.x,t.y,e.mipmaps[0].width,e.mipmaps[0].height,s,e.mipmaps[0].data):dt.texSubImage2D(3553,i,t.x,t.y,s,o,e.image),0===i&&n.generateMipmaps&&dt.generateMipmap(3553),j.unbindTexture()},this.copyTextureToTexture3D=function(t,e,n,i,r=0){if(g.isWebGL1Renderer)return void console.warn(\"THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.\");const a=t.max.x-t.min.x+1,s=t.max.y-t.min.y+1,o=t.max.z-t.min.z+1,l=ht.convert(i.format),c=ht.convert(i.type);let h;if(i.isDataTexture3D)Y.setTexture3D(i,0),h=32879;else{if(!i.isDataTexture2DArray)return void console.warn(\"THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.\");Y.setTexture2DArray(i,0),h=35866}dt.pixelStorei(37440,i.flipY),dt.pixelStorei(37441,i.premultiplyAlpha),dt.pixelStorei(3317,i.unpackAlignment);const u=dt.getParameter(3314),d=dt.getParameter(32878),p=dt.getParameter(3316),f=dt.getParameter(3315),m=dt.getParameter(32877),v=n.isCompressedTexture?n.mipmaps[0]:n.image;dt.pixelStorei(3314,v.width),dt.pixelStorei(32878,v.height),dt.pixelStorei(3316,t.min.x),dt.pixelStorei(3315,t.min.y),dt.pixelStorei(32877,t.min.z),n.isDataTexture||n.isDataTexture3D?dt.texSubImage3D(h,r,e.x,e.y,e.z,a,s,o,l,c,v.data):n.isCompressedTexture?(console.warn(\"THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.\"),dt.compressedTexSubImage3D(h,r,e.x,e.y,e.z,a,s,o,l,v.data)):dt.texSubImage3D(h,r,e.x,e.y,e.z,a,s,o,l,c,v),dt.pixelStorei(3314,u),dt.pixelStorei(32878,d),dt.pixelStorei(3316,p),dt.pixelStorei(3315,f),dt.pixelStorei(32877,m),0===r&&i.generateMipmaps&&dt.generateMipmap(h),j.unbindTexture()},this.initTexture=function(t){Y.setTexture2D(t,0),j.unbindTexture()},this.resetState=function(){y=0,x=0,_=null,j.reset(),ut.reset()},\"undefined\"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent(\"observe\",{detail:this}))}(class extends qc{}).prototype.isWebGL1Renderer=!0;class Xc extends za{constructor(){super(),this.type=\"Scene\",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,\"undefined\"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent(\"observe\",{detail:this}))}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.fog&&(e.object.fog=this.fog.toJSON()),e}}Xc.prototype.isScene=!0;class Yc{constructor(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=ur,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=yr()}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,n){t*=this.stride,n*=e.stride;for(let i=0,r=this.stride;i<r;i++)this.array[t+i]=e.array[n+i];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=yr()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(e,this.stride);return n.setUsage(this.usage),n}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=yr()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}Yc.prototype.isInterleavedBuffer=!0;const Zc=new Ir;class Jc{constructor(t,e,n,i=!1){this.name=\"\",this.data=t,this.itemSize=e,this.offset=n,this.normalized=!0===i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,n=this.data.count;e<n;e++)Zc.x=this.getX(e),Zc.y=this.getY(e),Zc.z=this.getZ(e),Zc.applyMatrix4(t),this.setXYZ(e,Zc.x,Zc.y,Zc.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)Zc.x=this.getX(e),Zc.y=this.getY(e),Zc.z=this.getZ(e),Zc.applyNormalMatrix(t),this.setXYZ(e,Zc.x,Zc.y,Zc.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)Zc.x=this.getX(e),Zc.y=this.getY(e),Zc.z=this.getZ(e),Zc.transformDirection(t),this.setXYZ(e,Zc.x,Zc.y,Zc.z);return this}setX(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){return this.data.array[t*this.data.stride+this.offset]}getY(t){return this.data.array[t*this.data.stride+this.offset+1]}getZ(t){return this.data.array[t*this.data.stride+this.offset+2]}getW(t){return this.data.array[t*this.data.stride+this.offset+3]}setXY(t,e,n){return this.data.array[(t=t*this.data.stride+this.offset)+0]=e,this.data.array[t+1]=n,this}setXYZ(t,e,n,i){return this.data.array[(t=t*this.data.stride+this.offset)+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this}setXYZW(t,e,n,i,r){return this.data.array[(t=t*this.data.stride+this.offset)+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this.data.array[t+3]=r,this}clone(t){if(void 0===t){console.log(\"THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.\");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[n+e])}return new ss(new this.array.constructor(t),this.itemSize,this.normalized)}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new Jc(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(void 0===t){console.log(\"THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.\");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[n+e])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}Jc.prototype.isInterleavedBufferAttribute=!0;class Qc extends Za{constructor(t){super(),this.type=\"SpriteMaterial\",this.color=new ns(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this}}let Kc;Qc.prototype.isSpriteMaterial=!0;const $c=new Ir,th=new Ir,eh=new Ir,nh=new br,ih=new br,rh=new ua,ah=new Ir,sh=new Ir,oh=new Ir,lh=new br,ch=new br,hh=new br;function uh(t,e,n,i,r,a){nh.subVectors(t,n).addScalar(.5).multiply(i),void 0!==r?(ih.x=a*nh.x-r*nh.y,ih.y=r*nh.x+a*nh.y):ih.copy(nh),t.copy(e),t.x+=ih.x,t.y+=ih.y,t.applyMatrix4(rh)}(class extends za{constructor(t){if(super(),this.type=\"Sprite\",void 0===Kc){Kc=new ys;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),e=new Yc(t,5);Kc.setIndex([0,1,2,0,2,3]),Kc.setAttribute(\"position\",new Jc(e,3,0,!1)),Kc.setAttribute(\"uv\",new Jc(e,2,3,!1))}this.geometry=Kc,this.material=void 0!==t?t:new Qc,this.center=new br(.5,.5)}raycast(t,e){null===t.camera&&console.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.'),th.setFromMatrixScale(this.matrixWorld),rh.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),eh.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&th.multiplyScalar(-eh.z);const n=this.material.rotation;let i,r;0!==n&&(r=Math.cos(n),i=Math.sin(n));const a=this.center;uh(ah.set(-.5,-.5,0),eh,a,th,i,r),uh(sh.set(.5,-.5,0),eh,a,th,i,r),uh(oh.set(.5,.5,0),eh,a,th,i,r),lh.set(0,0),ch.set(1,0),hh.set(1,1);let s=t.ray.intersectTriangle(ah,sh,oh,!1,$c);if(null===s&&(uh(sh.set(-.5,.5,0),eh,a,th,i,r),ch.set(0,1),s=t.ray.intersectTriangle(ah,oh,sh,!1,$c),null===s))return;const o=t.ray.origin.distanceTo($c);o<t.near||o>t.far||e.push({distance:o,point:$c.clone(),uv:Xa.getUV($c,ah,sh,oh,lh,ch,hh,new br),face:null,object:this})}copy(t){return super.copy(t),void 0!==t.center&&this.center.copy(t.center),this.material=t.material,this}}).prototype.isSprite=!0;const dh=new Ir,ph=new Rr,fh=new Rr,mh=new Ir,gh=new ua;class vh extends zs{constructor(t,e){super(t,e),this.type=\"SkinnedMesh\",this.bindMode=\"attached\",this.bindMatrix=new ua,this.bindMatrixInverse=new ua}copy(t){return super.copy(t),this.bindMode=t.bindMode,this.bindMatrix.copy(t.bindMatrix),this.bindMatrixInverse.copy(t.bindMatrixInverse),this.skeleton=t.skeleton,this}bind(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new Rr,e=this.geometry.attributes.skinWeight;for(let n=0,i=e.count;n<i;n++){t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.w=e.getW(n);const i=1/t.manhattanLength();i!==1/0?t.multiplyScalar(i):t.set(1,0,0,0),e.setXYZW(n,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t),\"attached\"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():\"detached\"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn(\"THREE.SkinnedMesh: Unrecognized bindMode: \"+this.bindMode)}boneTransform(t,e){const n=this.skeleton,i=this.geometry;ph.fromBufferAttribute(i.attributes.skinIndex,t),fh.fromBufferAttribute(i.attributes.skinWeight,t),dh.fromBufferAttribute(i.attributes.position,t).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let t=0;t<4;t++){const i=fh.getComponent(t);if(0!==i){const r=ph.getComponent(t);gh.multiplyMatrices(n.bones[r].matrixWorld,n.boneInverses[r]),e.addScaledVector(mh.copy(dh).applyMatrix4(gh),i)}}return e.applyMatrix4(this.bindMatrixInverse)}}vh.prototype.isSkinnedMesh=!0;(class extends za{constructor(){super(),this.type=\"Bone\"}}).prototype.isBone=!0;(class extends Lr{constructor(t=null,e=1,n=1,i,r,a,s,o,l=1003,c=1003,h,u){super(null,a,s,o,l,c,i,r,h,u),this.image={data:t,width:e,height:n},this.magFilter=l,this.minFilter=c,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}).prototype.isDataTexture=!0;const yh=new ua,xh=new ua,_h=[],Mh=new zs;(class extends zs{constructor(t,e,n){super(t,e),this.instanceMatrix=new ss(new Float32Array(16*n),16),this.instanceColor=null,this.count=n,this.frustumCulled=!1}copy(t){return super.copy(t),this.instanceMatrix.copy(t.instanceMatrix),null!==t.instanceColor&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,this}getColorAt(t,e){e.fromArray(this.instanceColor.array,3*t)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,16*t)}raycast(t,e){const n=this.matrixWorld,i=this.count;if(Mh.geometry=this.geometry,Mh.material=this.material,void 0!==Mh.material)for(let r=0;r<i;r++){this.getMatrixAt(r,yh),xh.multiplyMatrices(n,yh),Mh.matrixWorld=xh,Mh.raycast(t,_h);for(let t=0,n=_h.length;t<n;t++){const n=_h[t];n.instanceId=r,n.object=this,e.push(n)}_h.length=0}}setColorAt(t,e){null===this.instanceColor&&(this.instanceColor=new ss(new Float32Array(3*this.instanceMatrix.count),3)),e.toArray(this.instanceColor.array,3*t)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,16*t)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:\"dispose\"})}}).prototype.isInstancedMesh=!0;class wh extends Za{constructor(t){super(),this.type=\"LineBasicMaterial\",this.color=new ns(16777215),this.linewidth=1,this.linecap=\"round\",this.linejoin=\"round\",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this}}wh.prototype.isLineBasicMaterial=!0;const bh=new Ir,Sh=new Ir,Th=new ua,Eh=new ha,Ah=new na;class Lh extends za{constructor(t=new ys,e=new wh){super(),this.type=\"Line\",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,n=[0];for(let t=1,i=e.count;t<i;t++)bh.fromBufferAttribute(e,t-1),Sh.fromBufferAttribute(e,t),n[t]=n[t-1],n[t]+=bh.distanceTo(Sh);t.setAttribute(\"lineDistance\",new cs(n,1))}else console.warn(\"THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.\");else t.isGeometry&&console.error(\"THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\");return this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,r=t.params.Line.threshold,a=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),Ah.copy(n.boundingSphere),Ah.applyMatrix4(i),Ah.radius+=r,!1===t.ray.intersectsSphere(Ah))return;Th.copy(i).invert(),Eh.copy(t.ray).applyMatrix4(Th);const s=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=s*s,l=new Ir,c=new Ir,h=new Ir,u=new Ir,d=this.isLineSegments?2:1;if(n.isBufferGeometry){const i=n.index,r=n.attributes.position;if(null!==i){for(let n=Math.max(0,a.start),s=Math.min(i.count,a.start+a.count)-1;n<s;n+=d){const a=i.getX(n),s=i.getX(n+1);l.fromBufferAttribute(r,a),c.fromBufferAttribute(r,s);if(Eh.distanceSqToSegment(l,c,u,h)>o)continue;u.applyMatrix4(this.matrixWorld);const d=t.ray.origin.distanceTo(u);d<t.near||d>t.far||e.push({distance:d,point:h.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}}else{for(let n=Math.max(0,a.start),i=Math.min(r.count,a.start+a.count)-1;n<i;n+=d){l.fromBufferAttribute(r,n),c.fromBufferAttribute(r,n+1);if(Eh.distanceSqToSegment(l,c,u,h)>o)continue;u.applyMatrix4(this.matrixWorld);const i=t.ray.origin.distanceTo(u);i<t.near||i>t.far||e.push({distance:i,point:h.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}}}else n.isGeometry&&console.error(\"THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error(\"THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.\")}}}Lh.prototype.isLine=!0;const Ch=new Ir,Rh=new Ir;class Ph extends Lh{constructor(t,e){super(t,e),this.type=\"LineSegments\"}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,n=[];for(let t=0,i=e.count;t<i;t+=2)Ch.fromBufferAttribute(e,t),Rh.fromBufferAttribute(e,t+1),n[t]=0===t?0:n[t-1],n[t+1]=n[t]+Ch.distanceTo(Rh);t.setAttribute(\"lineDistance\",new cs(n,1))}else console.warn(\"THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.\");else t.isGeometry&&console.error(\"THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\");return this}}Ph.prototype.isLineSegments=!0;(class extends Lh{constructor(t,e){super(t,e),this.type=\"LineLoop\"}}).prototype.isLineLoop=!0;class Dh extends Za{constructor(t){super(),this.type=\"PointsMaterial\",this.color=new ns(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this}}Dh.prototype.isPointsMaterial=!0;const Nh=new ua,Ih=new ha,Oh=new na,zh=new Ir;function Uh(t,e,n,i,r,a,s){const o=Ih.distanceSqToPoint(t);if(o<n){const n=new Ir;Ih.closestPointToPoint(t,n),n.applyMatrix4(i);const l=r.ray.origin.distanceTo(n);if(l<r.near||l>r.far)return;a.push({distance:l,distanceToRay:Math.sqrt(o),point:n,index:e,face:null,object:s})}}(class extends za{constructor(t=new ys,e=new Dh){super(),this.type=\"Points\",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,r=t.params.Points.threshold,a=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),Oh.copy(n.boundingSphere),Oh.applyMatrix4(i),Oh.radius+=r,!1===t.ray.intersectsSphere(Oh))return;Nh.copy(i).invert(),Ih.copy(t.ray).applyMatrix4(Nh);const s=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=s*s;if(n.isBufferGeometry){const r=n.index,s=n.attributes.position;if(null!==r){for(let n=Math.max(0,a.start),l=Math.min(r.count,a.start+a.count);n<l;n++){const a=r.getX(n);zh.fromBufferAttribute(s,a),Uh(zh,a,o,i,t,e,this)}}else{for(let n=Math.max(0,a.start),r=Math.min(s.count,a.start+a.count);n<r;n++)zh.fromBufferAttribute(s,n),Uh(zh,n,o,i,t,e,this)}}else console.error(\"THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error(\"THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.\")}}}).prototype.isPoints=!0;(class extends Lr{constructor(t,e,n,i,r,a,s,o,l){super(t,e,n,i,r,a,s,o,l),this.format=void 0!==s?s:Zi,this.minFilter=void 0!==a?a:ki,this.magFilter=void 0!==r?r:ki,this.generateMipmaps=!1;const c=this;\"requestVideoFrameCallback\"in t&&t.requestVideoFrameCallback((function e(){c.needsUpdate=!0,t.requestVideoFrameCallback(e)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;!1===\"requestVideoFrameCallback\"in t&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}).prototype.isVideoTexture=!0;(class extends Lr{constructor(t,e,n,i,r,a,s,o,l,c,h,u){super(null,a,s,o,l,c,i,r,h,u),this.image={width:e,height:n},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}).prototype.isCompressedTexture=!0;(class extends Lr{constructor(t,e,n,i,r,a,s,o,l){super(t,e,n,i,r,a,s,o,l),this.needsUpdate=!0}}).prototype.isCanvasTexture=!0;(class extends Lr{constructor(t,e,n,i,r,a,s,o,l,c){if((c=void 0!==c?c:Qi)!==Qi&&c!==Ki)throw new Error(\"DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat\");void 0===n&&c===Qi&&(n=Wi),void 0===n&&c===Ki&&(n=Yi),super(null,i,r,a,s,o,c,n,l),this.image={width:t,height:e},this.magFilter=void 0!==s?s:Hi,this.minFilter=void 0!==o?o:Hi,this.flipY=!1,this.generateMipmaps=!1}}).prototype.isDepthTexture=!0;class Fh extends ys{constructor(t=1,e=8,n=0,i=2*Math.PI){super(),this.type=\"CircleGeometry\",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:i},e=Math.max(3,e);const r=[],a=[],s=[],o=[],l=new Ir,c=new br;a.push(0,0,0),s.push(0,0,1),o.push(.5,.5);for(let r=0,h=3;r<=e;r++,h+=3){const u=n+r/e*i;l.x=t*Math.cos(u),l.y=t*Math.sin(u),a.push(l.x,l.y,l.z),s.push(0,0,1),c.x=(a[h]/t+1)/2,c.y=(a[h+1]/t+1)/2,o.push(c.x,c.y)}for(let t=1;t<=e;t++)r.push(t,t+1,0);this.setIndex(r),this.setAttribute(\"position\",new cs(a,3)),this.setAttribute(\"normal\",new cs(s,3)),this.setAttribute(\"uv\",new cs(o,2))}static fromJSON(t){return new Fh(t.radius,t.segments,t.thetaStart,t.thetaLength)}}new Ir,new Ir,new Ir,new Xa;class Bh{constructor(){this.type=\"Curve\",this.arcLengthDivisions=200}getPoint(){return console.warn(\"THREE.Curve: .getPoint() not implemented.\"),null}getPointAt(t,e){const n=this.getUtoTmapping(t);return this.getPoint(n,e)}getPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return e}getSpacedPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPointAt(n/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let n,i=this.getPoint(0),r=0;e.push(0);for(let a=1;a<=t;a++)n=this.getPoint(a/t),r+=n.distanceTo(i),e.push(r),i=n;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(t,e){const n=this.getLengths();let i=0;const r=n.length;let a;a=e||t*n[r-1];let s,o=0,l=r-1;for(;o<=l;)if(i=Math.floor(o+(l-o)/2),s=n[i]-a,s<0)o=i+1;else{if(!(s>0)){l=i;break}l=i-1}if(i=l,n[i]===a)return i/(r-1);const c=n[i];return(i+(a-c)/(n[i+1]-c))/(r-1)}getTangent(t,e){const n=1e-4;let i=t-n,r=t+n;i<0&&(i=0),r>1&&(r=1);const a=this.getPoint(i),s=this.getPoint(r),o=e||(a.isVector2?new br:new Ir);return o.copy(s).sub(a).normalize(),o}getTangentAt(t,e){const n=this.getUtoTmapping(t);return this.getTangent(n,e)}computeFrenetFrames(t,e){const n=new Ir,i=[],r=[],a=[],s=new Ir,o=new ua;for(let e=0;e<=t;e++){i[e]=this.getTangentAt(e/t,new Ir),i[e].normalize()}r[0]=new Ir,a[0]=new Ir;let l=Number.MAX_VALUE;const c=Math.abs(i[0].x),h=Math.abs(i[0].y),u=Math.abs(i[0].z);c<=l&&(l=c,n.set(1,0,0)),h<=l&&(l=h,n.set(0,1,0)),u<=l&&n.set(0,0,1),s.crossVectors(i[0],n).normalize(),r[0].crossVectors(i[0],s),a[0].crossVectors(i[0],r[0]);for(let e=1;e<=t;e++){if(r[e]=r[e-1].clone(),a[e]=a[e-1].clone(),s.crossVectors(i[e-1],i[e]),s.length()>Number.EPSILON){s.normalize();const t=Math.acos(xr(i[e-1].dot(i[e]),-1,1));r[e].applyMatrix4(o.makeRotationAxis(s,t))}a[e].crossVectors(i[e],r[e])}if(!0===e){let e=Math.acos(xr(r[0].dot(r[t]),-1,1));e/=t,i[0].dot(s.crossVectors(r[0],r[t]))>0&&(e=-e);for(let n=1;n<=t;n++)r[n].applyMatrix4(o.makeRotationAxis(i[n],e*n)),a[n].crossVectors(i[n],r[n])}return{tangents:i,normals:r,binormals:a}}clone(){return(new this.constructor).copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.5,type:\"Curve\",generator:\"Curve.toJSON\"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}class Hh extends Bh{constructor(t=0,e=0,n=1,i=1,r=0,a=2*Math.PI,s=!1,o=0){super(),this.type=\"EllipseCurve\",this.aX=t,this.aY=e,this.xRadius=n,this.yRadius=i,this.aStartAngle=r,this.aEndAngle=a,this.aClockwise=s,this.aRotation=o}getPoint(t,e){const n=e||new br,i=2*Math.PI;let r=this.aEndAngle-this.aStartAngle;const a=Math.abs(r)<Number.EPSILON;for(;r<0;)r+=i;for(;r>i;)r-=i;r<Number.EPSILON&&(r=a?0:i),!0!==this.aClockwise||a||(r===i?r=-i:r-=i);const s=this.aStartAngle+t*r;let o=this.aX+this.xRadius*Math.cos(s),l=this.aY+this.yRadius*Math.sin(s);if(0!==this.aRotation){const t=Math.cos(this.aRotation),e=Math.sin(this.aRotation),n=o-this.aX,i=l-this.aY;o=n*t-i*e+this.aX,l=n*e+i*t+this.aY}return n.set(o,l)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}Hh.prototype.isEllipseCurve=!0;class kh extends Hh{constructor(t,e,n,i,r,a){super(t,e,n,n,i,r,a),this.type=\"ArcCurve\"}}function Gh(){let t=0,e=0,n=0,i=0;function r(r,a,s,o){t=r,e=s,n=-3*r+3*a-2*s-o,i=2*r-2*a+s+o}return{initCatmullRom:function(t,e,n,i,a){r(e,n,a*(n-t),a*(i-e))},initNonuniformCatmullRom:function(t,e,n,i,a,s,o){let l=(e-t)/a-(n-t)/(a+s)+(n-e)/s,c=(n-e)/s-(i-e)/(s+o)+(i-n)/o;l*=s,c*=s,r(e,n,l,c)},calc:function(r){const a=r*r;return t+e*r+n*a+i*(a*r)}}}kh.prototype.isArcCurve=!0;const Vh=new Ir,Wh=new Gh,jh=new Gh,qh=new Gh;class Xh extends Bh{constructor(t=[],e=!1,n=\"centripetal\",i=.5){super(),this.type=\"CatmullRomCurve3\",this.points=t,this.closed=e,this.curveType=n,this.tension=i}getPoint(t,e=new Ir){const n=e,i=this.points,r=i.length,a=(r-(this.closed?0:1))*t;let s,o,l=Math.floor(a),c=a-l;this.closed?l+=l>0?0:(Math.floor(Math.abs(l)/r)+1)*r:0===c&&l===r-1&&(l=r-2,c=1),this.closed||l>0?s=i[(l-1)%r]:(Vh.subVectors(i[0],i[1]).add(i[0]),s=Vh);const h=i[l%r],u=i[(l+1)%r];if(this.closed||l+2<r?o=i[(l+2)%r]:(Vh.subVectors(i[r-1],i[r-2]).add(i[r-1]),o=Vh),\"centripetal\"===this.curveType||\"chordal\"===this.curveType){const t=\"chordal\"===this.curveType?.5:.25;let e=Math.pow(s.distanceToSquared(h),t),n=Math.pow(h.distanceToSquared(u),t),i=Math.pow(u.distanceToSquared(o),t);n<1e-4&&(n=1),e<1e-4&&(e=n),i<1e-4&&(i=n),Wh.initNonuniformCatmullRom(s.x,h.x,u.x,o.x,e,n,i),jh.initNonuniformCatmullRom(s.y,h.y,u.y,o.y,e,n,i),qh.initNonuniformCatmullRom(s.z,h.z,u.z,o.z,e,n,i)}else\"catmullrom\"===this.curveType&&(Wh.initCatmullRom(s.x,h.x,u.x,o.x,this.tension),jh.initCatmullRom(s.y,h.y,u.y,o.y,this.tension),qh.initCatmullRom(s.z,h.z,u.z,o.z,this.tension));return n.set(Wh.calc(c),jh.calc(c),qh.calc(c)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){this.points.push(t.points[e].clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){t.points.push(this.points[e].toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new Ir).fromArray(n))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}function Yh(t,e,n,i,r){const a=.5*(i-e),s=.5*(r-n),o=t*t;return(2*n-2*i+a+s)*(t*o)+(-3*n+3*i-2*a-s)*o+a*t+n}function Zh(t,e,n,i){return(function r(t,e){const n=1-t;return n*n*e})(t,e)+(function a(t,e){return 2*(1-t)*t*e})(t,n)+(function s(t,e){return t*t*e})(t,i)}function Jh(t,e,n,i,r){return(function a(t,e){const n=1-t;return n*n*n*e})(t,e)+(function s(t,e){const n=1-t;return 3*n*n*t*e})(t,n)+(function o(t,e){return 3*(1-t)*t*t*e})(t,i)+(function l(t,e){return t*t*t*e})(t,r)}Xh.prototype.isCatmullRomCurve3=!0;class Qh extends Bh{constructor(t=new br,e=new br,n=new br,i=new br){super(),this.type=\"CubicBezierCurve\",this.v0=t,this.v1=e,this.v2=n,this.v3=i}getPoint(t,e=new br){const n=e,i=this.v0,r=this.v1,a=this.v2,s=this.v3;return n.set(Jh(t,i.x,r.x,a.x,s.x),Jh(t,i.y,r.y,a.y,s.y)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}Qh.prototype.isCubicBezierCurve=!0;class Kh extends Bh{constructor(t=new Ir,e=new Ir,n=new Ir,i=new Ir){super(),this.type=\"CubicBezierCurve3\",this.v0=t,this.v1=e,this.v2=n,this.v3=i}getPoint(t,e=new Ir){const n=e,i=this.v0,r=this.v1,a=this.v2,s=this.v3;return n.set(Jh(t,i.x,r.x,a.x,s.x),Jh(t,i.y,r.y,a.y,s.y),Jh(t,i.z,r.z,a.z,s.z)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}Kh.prototype.isCubicBezierCurve3=!0;class $h extends Bh{constructor(t=new br,e=new br){super(),this.type=\"LineCurve\",this.v1=t,this.v2=e}getPoint(t,e=new br){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e){const n=e||new br;return n.copy(this.v2).sub(this.v1).normalize(),n}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}$h.prototype.isLineCurve=!0;class tu extends Bh{constructor(t=new br,e=new br,n=new br){super(),this.type=\"QuadraticBezierCurve\",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new br){const n=e,i=this.v0,r=this.v1,a=this.v2;return n.set(Zh(t,i.x,r.x,a.x),Zh(t,i.y,r.y,a.y)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}tu.prototype.isQuadraticBezierCurve=!0;class eu extends Bh{constructor(t=new Ir,e=new Ir,n=new Ir){super(),this.type=\"QuadraticBezierCurve3\",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new Ir){const n=e,i=this.v0,r=this.v1,a=this.v2;return n.set(Zh(t,i.x,r.x,a.x),Zh(t,i.y,r.y,a.y),Zh(t,i.z,r.z,a.z)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}eu.prototype.isQuadraticBezierCurve3=!0;class nu extends Bh{constructor(t=[]){super(),this.type=\"SplineCurve\",this.points=t}getPoint(t,e=new br){const n=e,i=this.points,r=(i.length-1)*t,a=Math.floor(r),s=r-a,o=i[0===a?a:a-1],l=i[a],c=i[a>i.length-2?i.length-1:a+1],h=i[a>i.length-3?i.length-1:a+2];return n.set(Yh(s,o.x,l.x,c.x,h.x),Yh(s,o.y,l.y,c.y,h.y)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){this.points.push(t.points[e].clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){t.points.push(this.points[e].toArray())}return t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new br).fromArray(n))}return this}}nu.prototype.isSplineCurve=!0;var iu=Object.freeze({__proto__:null,ArcCurve:kh,CatmullRomCurve3:Xh,CubicBezierCurve:Qh,CubicBezierCurve3:Kh,EllipseCurve:Hh,LineCurve:$h,LineCurve3:class extends Bh{constructor(t=new Ir,e=new Ir){super(),this.type=\"LineCurve3\",this.isLineCurve3=!0,this.v1=t,this.v2=e}getPoint(t,e=new Ir){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(t,e){return this.getPoint(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}},QuadraticBezierCurve:tu,QuadraticBezierCurve3:eu,SplineCurve:nu});const ru=function(t,e,n=2){const i=e&&e.length,r=i?e[0]*n:t.length;let a=au(t,0,r,n,!0);const s=[];if(!a||a.next===a.prev)return s;let o,l,c,h,u,d,p;if(i&&(a=(function f(t,e,n,i){const r=[];let a,s,o,l,c;for(a=0,s=e.length;a<s;a++)o=e[a]*i,l=a<s-1?e[a+1]*i:t.length,c=au(t,o,l,i,!1),c===c.next&&(c.steiner=!0),r.push(gu(c));for(r.sort(du),a=0;a<r.length;a++)pu(r[a],n),n=su(n,n.next);return n})(t,e,a,n)),t.length>80*n){o=c=t[0],l=h=t[1];for(let e=n;e<r;e+=n)u=t[e],d=t[e+1],u<o&&(o=u),d<l&&(l=d),u>c&&(c=u),d>h&&(h=d);p=Math.max(c-o,h-l),p=0!==p?1/p:0}return ou(a,s,n,o,l,p),s};function au(t,e,n,i,r){let a,s;if(r===(function o(t,e,n,i){let r=0;for(let a=e,s=n-i;a<n;a+=i)r+=(t[s]-t[a])*(t[a+1]+t[s+1]),s=a;return r})(t,e,n,i)>0)for(a=e;a<n;a+=i)s=Eu(a,t[a],t[a+1],s);else for(a=n-i;a>=e;a-=i)s=Eu(a,t[a],t[a+1],s);return s&&_u(s,s.next)&&(Au(s),s=s.next),s}function su(t,e){if(!t)return t;e||(e=t);let n,i=t;do{if(n=!1,i.steiner||!_u(i,i.next)&&0!==xu(i.prev,i,i.next))i=i.next;else{if(Au(i),i=e=i.prev,i===i.next)break;n=!0}}while(n||i!==e);return e}function ou(t,e,n,i,r,a,s){if(!t)return;!s&&a&&(function o(t,e,n,i){let r=t;do{null===r.z&&(r.z=mu(r.x,r.y,e,n,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,(function a(t){let e,n,i,r,a,s,o,l,c=1;do{for(n=t,t=null,a=null,s=0;n;){for(s++,i=n,o=0,e=0;e<c&&(o++,i=i.nextZ,i);e++);for(l=c;o>0||l>0&&i;)0!==o&&(0===l||!i||n.z<=i.z)?(r=n,n=n.nextZ,o--):(r=i,i=i.nextZ,l--),a?a.nextZ=r:t=r,r.prevZ=a,a=r;n=i}a.nextZ=null,c*=2}while(s>1);return t})(r)})(t,i,r,a);let l,c,h=t;for(;t.prev!==t.next;)if(l=t.prev,c=t.next,a?cu(t,i,r,a):lu(t))e.push(l.i/n),e.push(t.i/n),e.push(c.i/n),Au(t),t=c.next,h=c.next;else if((t=c)===h){s?1===s?ou(t=hu(su(t),e,n),e,n,i,r,a,2):2===s&&uu(t,e,n,i,r,a):ou(su(t),e,n,i,r,a,1);break}}function lu(t){const e=t.prev,n=t,i=t.next;if(xu(e,n,i)>=0)return!1;let r=t.next.next;for(;r!==t.prev;){if(vu(e.x,e.y,n.x,n.y,i.x,i.y,r.x,r.y)&&xu(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function cu(t,e,n,i){const r=t.prev,a=t,s=t.next;if(xu(r,a,s)>=0)return!1;const o=r.x>a.x?r.x>s.x?r.x:s.x:a.x>s.x?a.x:s.x,l=r.y>a.y?r.y>s.y?r.y:s.y:a.y>s.y?a.y:s.y,c=mu(r.x<a.x?r.x<s.x?r.x:s.x:a.x<s.x?a.x:s.x,r.y<a.y?r.y<s.y?r.y:s.y:a.y<s.y?a.y:s.y,e,n,i),h=mu(o,l,e,n,i);let u=t.prevZ,d=t.nextZ;for(;u&&u.z>=c&&d&&d.z<=h;){if(u!==t.prev&&u!==t.next&&vu(r.x,r.y,a.x,a.y,s.x,s.y,u.x,u.y)&&xu(u.prev,u,u.next)>=0)return!1;if(u=u.prevZ,d!==t.prev&&d!==t.next&&vu(r.x,r.y,a.x,a.y,s.x,s.y,d.x,d.y)&&xu(d.prev,d,d.next)>=0)return!1;d=d.nextZ}for(;u&&u.z>=c;){if(u!==t.prev&&u!==t.next&&vu(r.x,r.y,a.x,a.y,s.x,s.y,u.x,u.y)&&xu(u.prev,u,u.next)>=0)return!1;u=u.prevZ}for(;d&&d.z<=h;){if(d!==t.prev&&d!==t.next&&vu(r.x,r.y,a.x,a.y,s.x,s.y,d.x,d.y)&&xu(d.prev,d,d.next)>=0)return!1;d=d.nextZ}return!0}function hu(t,e,n){let i=t;do{const r=i.prev,a=i.next.next;!_u(r,a)&&Mu(r,i,i.next,a)&&Su(r,a)&&Su(a,r)&&(e.push(r.i/n),e.push(i.i/n),e.push(a.i/n),Au(i),Au(i.next),i=t=a),i=i.next}while(i!==t);return su(i)}function uu(t,e,n,i,r,a){let s=t;do{let t=s.next.next;for(;t!==s.prev;){if(s.i!==t.i&&yu(s,t)){let o=Tu(s,t);return s=su(s,s.next),o=su(o,o.next),ou(s,e,n,i,r,a),void ou(o,e,n,i,r,a)}t=t.next}s=s.next}while(s!==t)}function du(t,e){return t.x-e.x}function pu(t,e){if(e=(function n(t,e){let n=e;const i=t.x,r=t.y;let a,s=-1/0;do{if(r<=n.y&&r>=n.next.y&&n.next.y!==n.y){const t=n.x+(r-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(t<=i&&t>s){if(s=t,t===i){if(r===n.y)return n;if(r===n.next.y)return n.next}a=n.x<n.next.x?n:n.next}}n=n.next}while(n!==e);if(!a)return null;if(i===s)return a;const o=a,l=a.x,c=a.y;let h,u=1/0;n=a;do{i>=n.x&&n.x>=l&&i!==n.x&&vu(r<c?i:s,r,l,c,r<c?s:i,r,n.x,n.y)&&(h=Math.abs(r-n.y)/(i-n.x),Su(n,t)&&(h<u||h===u&&(n.x>a.x||n.x===a.x&&fu(a,n)))&&(a=n,u=h)),n=n.next}while(n!==o);return a})(t,e)){const n=Tu(e,t);su(e,e.next),su(n,n.next)}}function fu(t,e){return xu(t.prev,t,e.prev)<0&&xu(e.next,t,t.next)<0}function mu(t,e,n,i,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*r)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-i)*r)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function gu(t){let e=t,n=t;do{(e.x<n.x||e.x===n.x&&e.y<n.y)&&(n=e),e=e.next}while(e!==t);return n}function vu(t,e,n,i,r,a,s,o){return(r-s)*(e-o)-(t-s)*(a-o)>=0&&(t-s)*(i-o)-(n-s)*(e-o)>=0&&(n-s)*(a-o)-(r-s)*(i-o)>=0}function yu(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!(function n(t,e){let n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&Mu(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1})(t,e)&&(Su(t,e)&&Su(e,t)&&(function i(t,e){let n=t,i=!1;const r=(t.x+e.x)/2,a=(t.y+e.y)/2;do{n.y>a!=n.next.y>a&&n.next.y!==n.y&&r<(n.next.x-n.x)*(a-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==t);return i})(t,e)&&(xu(t.prev,t,e.prev)||xu(t,e.prev,e))||_u(t,e)&&xu(t.prev,t,t.next)>0&&xu(e.prev,e,e.next)>0)}function xu(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function _u(t,e){return t.x===e.x&&t.y===e.y}function Mu(t,e,n,i){const r=bu(xu(t,e,n)),a=bu(xu(t,e,i)),s=bu(xu(n,i,t)),o=bu(xu(n,i,e));return r!==a&&s!==o||(!(0!==r||!wu(t,n,e))||(!(0!==a||!wu(t,i,e))||(!(0!==s||!wu(n,t,i))||!(0!==o||!wu(n,e,i)))))}function wu(t,e,n){return e.x<=Math.max(t.x,n.x)&&e.x>=Math.min(t.x,n.x)&&e.y<=Math.max(t.y,n.y)&&e.y>=Math.min(t.y,n.y)}function bu(t){return t>0?1:t<0?-1:0}function Su(t,e){return xu(t.prev,t,t.next)<0?xu(t,e,t.next)>=0&&xu(t,t.prev,e)>=0:xu(t,e,t.prev)<0||xu(t,t.next,e)<0}function Tu(t,e){const n=new Lu(t.i,t.x,t.y),i=new Lu(e.i,e.x,e.y),r=t.next,a=e.prev;return t.next=e,e.prev=t,n.next=r,r.prev=n,i.next=n,n.prev=i,a.next=i,i.prev=a,i}function Eu(t,e,n,i){const r=new Lu(t,e,n);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function Au(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function Lu(t,e,n){this.i=t,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}class Cu{static area(t){const e=t.length;let n=0;for(let i=e-1,r=0;r<e;i=r++)n+=t[i].x*t[r].y-t[r].x*t[i].y;return.5*n}static isClockWise(t){return Cu.area(t)<0}static triangulateShape(t,e){const n=[],i=[],r=[];Ru(t),Pu(n,t);let a=t.length;e.forEach(Ru);for(let t=0;t<e.length;t++)i.push(a),a+=e[t].length,Pu(n,e[t]);const s=ru(n,i);for(let t=0;t<s.length;t+=3)r.push(s.slice(t,t+3));return r}}function Ru(t){const e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function Pu(t,e){for(let n=0;n<e.length;n++)t.push(e[n].x),t.push(e[n].y)}class Du extends ys{constructor(t,e){super(),this.type=\"ExtrudeGeometry\",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const n=this,i=[],r=[];for(let e=0,n=t.length;e<n;e++){a(t[e])}function a(t){const a=[],s=void 0!==e.curveSegments?e.curveSegments:12,o=void 0!==e.steps?e.steps:1;let l=void 0!==e.depth?e.depth:100,c=void 0===e.bevelEnabled||e.bevelEnabled,h=void 0!==e.bevelThickness?e.bevelThickness:6,u=void 0!==e.bevelSize?e.bevelSize:h-2,d=void 0!==e.bevelOffset?e.bevelOffset:0,p=void 0!==e.bevelSegments?e.bevelSegments:3;const f=e.extrudePath,m=void 0!==e.UVGenerator?e.UVGenerator:Nu;void 0!==e.amount&&(console.warn(\"THREE.ExtrudeBufferGeometry: amount has been renamed to depth.\"),l=e.amount);let g,v,y,x,_,M=!1;f&&(g=f.getSpacedPoints(o),M=!0,c=!1,v=f.computeFrenetFrames(o,!1),y=new Ir,x=new Ir,_=new Ir),c||(p=0,h=0,u=0,d=0);const w=t.extractPoints(s);let b=w.shape;const S=w.holes;if(!Cu.isClockWise(b)){b=b.reverse();for(let t=0,e=S.length;t<e;t++){const e=S[t];Cu.isClockWise(e)&&(S[t]=e.reverse())}}const T=Cu.triangulateShape(b,S),E=b;for(let t=0,e=S.length;t<e;t++){b=b.concat(S[t])}function A(t,e,n){return e||console.error(\"THREE.ExtrudeGeometry: vec does not exist\"),e.clone().multiplyScalar(n).add(t)}const L=b.length,C=T.length;function R(t,e,n){let i,r,a;const s=t.x-e.x,o=t.y-e.y,l=n.x-t.x,c=n.y-t.y,h=s*s+o*o;if(Math.abs(s*c-o*l)>Number.EPSILON){const u=Math.sqrt(h),d=Math.sqrt(l*l+c*c),p=e.x-o/u,f=e.y+s/u,m=((n.x-c/d-p)*c-(n.y+l/d-f)*l)/(s*c-o*l);i=p+s*m-t.x,r=f+o*m-t.y;const g=i*i+r*r;if(g<=2)return new br(i,r);a=Math.sqrt(g/2)}else{let t=!1;s>Number.EPSILON?l>Number.EPSILON&&(t=!0):s<-Number.EPSILON?l<-Number.EPSILON&&(t=!0):Math.sign(o)===Math.sign(c)&&(t=!0),t?(i=-o,r=s,a=Math.sqrt(h)):(i=s,r=o,a=Math.sqrt(h/2))}return new br(i/a,r/a)}const P=[];for(let t=0,e=E.length,n=e-1,i=t+1;t<e;t++,n++,i++)n===e&&(n=0),i===e&&(i=0),P[t]=R(E[t],E[n],E[i]);const D=[];let N,I=P.concat();for(let t=0,e=S.length;t<e;t++){const e=S[t];N=[];for(let t=0,n=e.length,i=n-1,r=t+1;t<n;t++,i++,r++)i===n&&(i=0),r===n&&(r=0),N[t]=R(e[t],e[i],e[r]);D.push(N),I=I.concat(N)}for(let t=0;t<p;t++){const e=t/p,n=h*Math.cos(e*Math.PI/2),i=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=E.length;t<e;t++){const e=A(E[t],P[t],i);U(e.x,e.y,-n)}for(let t=0,e=S.length;t<e;t++){const e=S[t];N=D[t];for(let t=0,r=e.length;t<r;t++){const r=A(e[t],N[t],i);U(r.x,r.y,-n)}}}const O=u+d;for(let t=0;t<L;t++){const e=c?A(b[t],I[t],O):b[t];M?(x.copy(v.normals[0]).multiplyScalar(e.x),y.copy(v.binormals[0]).multiplyScalar(e.y),_.copy(g[0]).add(x).add(y),U(_.x,_.y,_.z)):U(e.x,e.y,0)}for(let t=1;t<=o;t++)for(let e=0;e<L;e++){const n=c?A(b[e],I[e],O):b[e];M?(x.copy(v.normals[t]).multiplyScalar(n.x),y.copy(v.binormals[t]).multiplyScalar(n.y),_.copy(g[t]).add(x).add(y),U(_.x,_.y,_.z)):U(n.x,n.y,l/o*t)}for(let t=p-1;t>=0;t--){const e=t/p,n=h*Math.cos(e*Math.PI/2),i=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=E.length;t<e;t++){const e=A(E[t],P[t],i);U(e.x,e.y,l+n)}for(let t=0,e=S.length;t<e;t++){const e=S[t];N=D[t];for(let t=0,r=e.length;t<r;t++){const r=A(e[t],N[t],i);M?U(r.x,r.y+g[o-1].y,g[o-1].x+n):U(r.x,r.y,l+n)}}}function z(t,e){let n=t.length;for(;--n>=0;){const i=n;let r=n-1;r<0&&(r=t.length-1);for(let t=0,n=o+2*p;t<n;t++){const n=L*t,a=L*(t+1);B(e+i+n,e+r+n,e+r+a,e+i+a)}}}function U(t,e,n){a.push(t),a.push(e),a.push(n)}function F(t,e,r){H(t),H(e),H(r);const a=i.length/3,s=m.generateTopUV(n,i,a-3,a-2,a-1);k(s[0]),k(s[1]),k(s[2])}function B(t,e,r,a){H(t),H(e),H(a),H(e),H(r),H(a);const s=i.length/3,o=m.generateSideWallUV(n,i,s-6,s-3,s-2,s-1);k(o[0]),k(o[1]),k(o[3]),k(o[1]),k(o[2]),k(o[3])}function H(t){i.push(a[3*t+0]),i.push(a[3*t+1]),i.push(a[3*t+2])}function k(t){r.push(t.x),r.push(t.y)}!(function G(){const t=i.length/3;if(c){let t=0,e=L*t;for(let t=0;t<C;t++){const n=T[t];F(n[2]+e,n[1]+e,n[0]+e)}t=o+2*p,e=L*t;for(let t=0;t<C;t++){const n=T[t];F(n[0]+e,n[1]+e,n[2]+e)}}else{for(let t=0;t<C;t++){const e=T[t];F(e[2],e[1],e[0])}for(let t=0;t<C;t++){const e=T[t];F(e[0]+L*o,e[1]+L*o,e[2]+L*o)}}n.addGroup(t,i.length/3-t,0)})(),(function V(){const t=i.length/3;let e=0;z(E,e),e+=E.length;for(let t=0,n=S.length;t<n;t++){const n=S[t];z(n,e),e+=n.length}n.addGroup(t,i.length/3-t,1)})()}this.setAttribute(\"position\",new cs(i,3)),this.setAttribute(\"uv\",new cs(r,2)),this.computeVertexNormals()}toJSON(){const t=super.toJSON();return(function e(t,n,i){if(i.shapes=[],Array.isArray(t))for(let e=0,n=t.length;e<n;e++){i.shapes.push(t[e].uuid)}else i.shapes.push(t.uuid);void 0!==n.extrudePath&&(i.options.extrudePath=n.extrudePath.toJSON());return i})(this.parameters.shapes,this.parameters.options,t)}static fromJSON(t,e){const n=[];for(let i=0,r=t.shapes.length;i<r;i++){n.push(e[t.shapes[i]])}const i=t.options.extrudePath;return void 0!==i&&(t.options.extrudePath=(new iu[i.type]).fromJSON(i)),new Du(n,t.options)}}const Nu={generateTopUV:function(t,e,n,i,r){const a=e[3*i],s=e[3*i+1],o=e[3*r],l=e[3*r+1];return[new br(e[3*n],e[3*n+1]),new br(a,s),new br(o,l)]},generateSideWallUV:function(t,e,n,i,r,a){const s=e[3*n],o=e[3*n+1],l=e[3*n+2],c=e[3*i],h=e[3*i+1],u=e[3*i+2],d=e[3*r],p=e[3*r+1],f=e[3*r+2],m=e[3*a],g=e[3*a+1],v=e[3*a+2];return Math.abs(o-h)<Math.abs(s-c)?[new br(s,1-l),new br(c,1-u),new br(d,1-f),new br(m,1-v)]:[new br(o,1-l),new br(h,1-u),new br(p,1-f),new br(g,1-v)]}};class Iu extends ys{constructor(t,e=12){super(),this.type=\"ShapeGeometry\",this.parameters={shapes:t,curveSegments:e};const n=[],i=[],r=[],a=[];let s=0,o=0;if(!1===Array.isArray(t))l(t);else for(let e=0;e<t.length;e++)l(t[e]),this.addGroup(s,o,e),s+=o,o=0;function l(t){const s=i.length/3,l=t.extractPoints(e);let c=l.shape;const h=l.holes;!1===Cu.isClockWise(c)&&(c=c.reverse());for(let t=0,e=h.length;t<e;t++){const e=h[t];!0===Cu.isClockWise(e)&&(h[t]=e.reverse())}const u=Cu.triangulateShape(c,h);for(let t=0,e=h.length;t<e;t++){c=c.concat(h[t])}for(let t=0,e=c.length;t<e;t++){const e=c[t];i.push(e.x,e.y,0),r.push(0,0,1),a.push(e.x,e.y)}for(let t=0,e=u.length;t<e;t++){const e=u[t];n.push(e[0]+s,e[1]+s,e[2]+s),o+=3}}this.setIndex(n),this.setAttribute(\"position\",new cs(i,3)),this.setAttribute(\"normal\",new cs(r,3)),this.setAttribute(\"uv\",new cs(a,2))}toJSON(){const t=super.toJSON();return(function e(t,n){if(n.shapes=[],Array.isArray(t))for(let e=0,i=t.length;e<i;e++){n.shapes.push(t[e].uuid)}else n.shapes.push(t.uuid);return n})(this.parameters.shapes,t)}static fromJSON(t,e){const n=[];for(let i=0,r=t.shapes.length;i<r;i++){n.push(e[t.shapes[i]])}return new Iu(n,t.curveSegments)}}(class extends Za{constructor(t){super(),this.type=\"ShadowMaterial\",this.color=new ns(0),this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this}}).prototype.isShadowMaterial=!0;class Ou extends Za{constructor(t){super(),this.defines={STANDARD:\"\"},this.type=\"MeshStandardMaterial\",this.color=new ns(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ns(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new br(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:\"\"},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this}}Ou.prototype.isMeshStandardMaterial=!0;(class extends Ou{constructor(t){super(),this.defines={STANDARD:\"\",PHYSICAL:\"\"},this.type=\"MeshPhysicalMaterial\",this.clearcoat=0,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new br(1,1),this.clearcoatNormalMap=null,this.reflectivity=.5,Object.defineProperty(this,\"ior\",{get:function(){return(1+.4*this.reflectivity)/(1-.4*this.reflectivity)},set:function(t){this.reflectivity=xr(2.5*(t-1)/(t+1),0,1)}}),this.sheen=null,this.transmission=0,this.transmissionMap=null,this.thickness=.01,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationTint=new ns(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularTint=new ns(1,1,1),this.specularTintMap=null,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:\"\",PHYSICAL:\"\"},this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.reflectivity=t.reflectivity,this.sheen=t.sheen?(this.sheen||new ns).copy(t.sheen):null,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationTint.copy(t.attenuationTint),this.specularIntensity=t.specularIntensity,this.specularIntensityMap=t.specularIntensityMap,this.specularTint.copy(t.specularTint),this.specularTintMap=t.specularTintMap,this}}).prototype.isMeshPhysicalMaterial=!0;(class extends Za{constructor(t){super(),this.type=\"MeshPhongMaterial\",this.color=new ns(16777215),this.specular=new ns(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ns(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new br(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this}}).prototype.isMeshPhongMaterial=!0;(class extends Za{constructor(t){super(),this.defines={TOON:\"\"},this.type=\"MeshToonMaterial\",this.color=new ns(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ns(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new br(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}).prototype.isMeshToonMaterial=!0;(class extends Za{constructor(t){super(),this.type=\"MeshNormalMaterial\",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new br(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.flatShading=t.flatShading,this}}).prototype.isMeshNormalMaterial=!0;(class extends Za{constructor(t){super(),this.type=\"MeshLambertMaterial\",this.color=new ns(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ns(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}).prototype.isMeshLambertMaterial=!0;(class extends Za{constructor(t){super(),this.defines={MATCAP:\"\"},this.type=\"MeshMatcapMaterial\",this.color=new ns(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new br(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:\"\"},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.flatShading=t.flatShading,this}}).prototype.isMeshMatcapMaterial=!0;(class extends wh{constructor(t){super(),this.type=\"LineDashedMaterial\",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}).prototype.isLineDashedMaterial=!0;const zu={arraySlice:function(t,e,n){return zu.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==n?n:t.length)):t.slice(e,n)},convertArray:function(t,e,n){return!t||!n&&t.constructor===e?t:\"number\"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){const e=t.length,n=new Array(e);for(let t=0;t!==e;++t)n[t]=t;return n.sort((function i(e,n){return t[e]-t[n]})),n},sortedArray:function(t,e,n){const i=t.length,r=new t.constructor(i);for(let a=0,s=0;s!==i;++a){const i=n[a]*e;for(let n=0;n!==e;++n)r[s++]=t[i+n]}return r},flattenJSON:function(t,e,n,i){let r=1,a=t[0];for(;void 0!==a&&void 0===a[i];)a=t[r++];if(void 0===a)return;let s=a[i];if(void 0!==s)if(Array.isArray(s))do{s=a[i],void 0!==s&&(e.push(a.time),n.push.apply(n,s)),a=t[r++]}while(void 0!==a);else if(void 0!==s.toArray)do{s=a[i],void 0!==s&&(e.push(a.time),s.toArray(n,n.length)),a=t[r++]}while(void 0!==a);else do{s=a[i],void 0!==s&&(e.push(a.time),n.push(s)),a=t[r++]}while(void 0!==a)},subclip:function(t,e,n,i,r=30){const a=t.clone();a.name=e;const s=[];for(let t=0;t<a.tracks.length;++t){const e=a.tracks[t],o=e.getValueSize(),l=[],c=[];for(let t=0;t<e.times.length;++t){const a=e.times[t]*r;if(!(a<n||a>=i)){l.push(e.times[t]);for(let n=0;n<o;++n)c.push(e.values[t*o+n])}}0!==l.length&&(e.times=zu.convertArray(l,e.times.constructor),e.values=zu.convertArray(c,e.values.constructor),s.push(e))}a.tracks=s;let o=1/0;for(let t=0;t<a.tracks.length;++t)o>a.tracks[t].times[0]&&(o=a.tracks[t].times[0]);for(let t=0;t<a.tracks.length;++t)a.tracks[t].shift(-1*o);return a.resetDuration(),a},makeClipAdditive:function(t,e=0,n=t,i=30){i<=0&&(i=30);const r=n.tracks.length,a=e/i;for(let e=0;e<r;++e){const i=n.tracks[e],r=i.ValueTypeName;if(\"bool\"===r||\"string\"===r)continue;const s=t.tracks.find((function(t){return t.name===i.name&&t.ValueTypeName===r}));if(void 0===s)continue;let o=0;const l=i.getValueSize();i.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(o=l/3);let c=0;const h=s.getValueSize();s.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(c=h/3);const u=i.times.length-1;let d;if(a<=i.times[0]){d=zu.arraySlice(i.values,o,l-o)}else if(a>=i.times[u]){const t=u*l+o;d=zu.arraySlice(i.values,t,t+l-o)}else{const t=i.createInterpolant(),e=o,n=l-o;t.evaluate(a),d=zu.arraySlice(t.resultBuffer,e,n)}if(\"quaternion\"===r){(new Nr).fromArray(d).normalize().conjugate().toArray(d)}const p=s.times.length;for(let t=0;t<p;++t){const e=t*h+c;if(\"quaternion\"===r)Nr.multiplyQuaternionsFlat(s.values,e,d,0,s.values,e);else{const t=h-2*c;for(let n=0;n<t;++n)s.values[e+n]-=d[n]}}}return t.blendMode=2501,t}};class Uu{constructor(t,e,n,i){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==i?i:new e.constructor(n),this.sampleValues=e,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let n=this._cachedIndex,i=e[n],r=e[n-1];t:{e:{let a;n:{i:if(!(t<i)){for(let a=n+2;;){if(void 0===i){if(t<r)break i;return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,t,r)}if(n===a)break;if(r=i,i=e[++n],t<i)break e}a=e.length;break n}if(t>=r)break t;{const s=e[1];t<s&&(n=2,r=s);for(let a=n-2;;){if(void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,i);if(n===a)break;if(i=r,r=e[--n-1],t>=r)break e}a=n,n=0}}for(;n<a;){const i=n+a>>>1;t<e[i]?a=i:n=i+1}if(i=e[n],r=e[n-1],void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,i);if(void 0===i)return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,r,t)}this._cachedIndex=n,this.intervalChanged_(n,r,i)}return this.interpolate_(n,r,t,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,n=this.sampleValues,i=this.valueSize,r=t*i;for(let t=0;t!==i;++t)e[t]=n[r+t];return e}interpolate_(){throw new Error(\"call to abstract method\")}intervalChanged_(){}}Uu.prototype.beforeStart_=Uu.prototype.copySampleValue_,Uu.prototype.afterEnd_=Uu.prototype.copySampleValue_;class Fu extends Uu{constructor(t,e,n,i){super(t,e,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:nr,endingEnd:nr}}intervalChanged_(t,e,n){const i=this.parameterPositions;let r=t-2,a=t+1,s=i[r],o=i[a];if(void 0===s)switch(this.getSettings_().endingStart){case ir:r=t,s=2*e-n;break;case rr:r=i.length-2,s=e+i[r]-i[r+1];break;default:r=t,s=n}if(void 0===o)switch(this.getSettings_().endingEnd){case ir:a=t,o=2*n-e;break;case rr:a=1,o=n+i[1]-i[0];break;default:a=t-1,o=e}const l=.5*(n-e),c=this.valueSize;this._weightPrev=l/(e-s),this._weightNext=l/(o-n),this._offsetPrev=r*c,this._offsetNext=a*c}interpolate_(t,e,n,i){const r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=t*s,l=o-s,c=this._offsetPrev,h=this._offsetNext,u=this._weightPrev,d=this._weightNext,p=(n-e)/(i-e),f=p*p,m=f*p,g=-u*m+2*u*f-u*p,v=(1+u)*m+(-1.5-2*u)*f+(-.5+u)*p+1,y=(-1-d)*m+(1.5+d)*f+.5*p,x=d*m-d*f;for(let t=0;t!==s;++t)r[t]=g*a[c+t]+v*a[l+t]+y*a[o+t]+x*a[h+t];return r}}class Bu extends Uu{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=t*s,l=o-s,c=(n-e)/(i-e),h=1-c;for(let t=0;t!==s;++t)r[t]=a[l+t]*h+a[o+t]*c;return r}}class Hu extends Uu{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t){return this.copySampleValue_(t-1)}}class ku{constructor(t,e,n,i){if(void 0===t)throw new Error(\"THREE.KeyframeTrack: track name is undefined\");if(void 0===e||0===e.length)throw new Error(\"THREE.KeyframeTrack: no keyframes in track named \"+t);this.name=t,this.times=zu.convertArray(e,this.TimeBufferType),this.values=zu.convertArray(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let n;if(e.toJSON!==this.toJSON)n=e.toJSON(t);else{n={name:t.name,times:zu.convertArray(t.times,Array),values:zu.convertArray(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(n.interpolation=e)}return n.type=t.ValueTypeName,n}InterpolantFactoryMethodDiscrete(t){return new Hu(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new Bu(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new Fu(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case $i:e=this.InterpolantFactoryMethodDiscrete;break;case tr:e=this.InterpolantFactoryMethodLinear;break;case er:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e=\"unsupported interpolation for \"+this.ValueTypeName+\" keyframe track named \"+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn(\"THREE.KeyframeTrack:\",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return $i;case this.InterpolantFactoryMethodLinear:return tr;case this.InterpolantFactoryMethodSmooth:return er}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let n=0,i=e.length;n!==i;++n)e[n]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let n=0,i=e.length;n!==i;++n)e[n]*=t}return this}trim(t,e){const n=this.times,i=n.length;let r=0,a=i-1;for(;r!==i&&n[r]<t;)++r;for(;-1!==a&&n[a]>e;)--a;if(++a,0!==r||a!==i){r>=a&&(a=Math.max(a,1),r=a-1);const t=this.getValueSize();this.times=zu.arraySlice(n,r,a),this.values=zu.arraySlice(this.values,r*t,a*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error(\"THREE.KeyframeTrack: Invalid value size in track.\",this),t=!1);const n=this.times,i=this.values,r=n.length;0===r&&(console.error(\"THREE.KeyframeTrack: Track is empty.\",this),t=!1);let a=null;for(let e=0;e!==r;e++){const i=n[e];if(\"number\"==typeof i&&isNaN(i)){console.error(\"THREE.KeyframeTrack: Time is not a valid number.\",this,e,i),t=!1;break}if(null!==a&&a>i){console.error(\"THREE.KeyframeTrack: Out of order keys.\",this,e,i,a),t=!1;break}a=i}if(void 0!==i&&zu.isTypedArray(i))for(let e=0,n=i.length;e!==n;++e){const n=i[e];if(isNaN(n)){console.error(\"THREE.KeyframeTrack: Value is not a valid number.\",this,e,n),t=!1;break}}return t}optimize(){const t=zu.arraySlice(this.times),e=zu.arraySlice(this.values),n=this.getValueSize(),i=this.getInterpolation()===er,r=t.length-1;let a=1;for(let s=1;s<r;++s){let r=!1;const o=t[s];if(o!==t[s+1]&&(1!==s||o!==t[0]))if(i)r=!0;else{const t=s*n,i=t-n,a=t+n;for(let s=0;s!==n;++s){const n=e[t+s];if(n!==e[i+s]||n!==e[a+s]){r=!0;break}}}if(r){if(s!==a){t[a]=t[s];const i=s*n,r=a*n;for(let t=0;t!==n;++t)e[r+t]=e[i+t]}++a}}if(r>0){t[a]=t[r];for(let t=r*n,i=a*n,s=0;s!==n;++s)e[i+s]=e[t+s];++a}return a!==t.length?(this.times=zu.arraySlice(t,0,a),this.values=zu.arraySlice(e,0,a*n)):(this.times=t,this.values=e),this}clone(){const t=zu.arraySlice(this.times,0),e=zu.arraySlice(this.values,0),n=new(0,this.constructor)(this.name,t,e);return n.createInterpolant=this.createInterpolant,n}}ku.prototype.TimeBufferType=Float32Array,ku.prototype.ValueBufferType=Float32Array,ku.prototype.DefaultInterpolation=tr;class Gu extends ku{}Gu.prototype.ValueTypeName=\"bool\",Gu.prototype.ValueBufferType=Array,Gu.prototype.DefaultInterpolation=$i,Gu.prototype.InterpolantFactoryMethodLinear=void 0,Gu.prototype.InterpolantFactoryMethodSmooth=void 0;class Vu extends ku{}Vu.prototype.ValueTypeName=\"color\";class Wu extends ku{}Wu.prototype.ValueTypeName=\"number\";class ju extends Uu{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=(n-e)/(i-e);let l=t*s;for(let t=l+s;l!==t;l+=4)Nr.slerpFlat(r,0,a,l-s,a,l,o);return r}}class qu extends ku{InterpolantFactoryMethodLinear(t){return new ju(this.times,this.values,this.getValueSize(),t)}}qu.prototype.ValueTypeName=\"quaternion\",qu.prototype.DefaultInterpolation=tr,qu.prototype.InterpolantFactoryMethodSmooth=void 0;class Xu extends ku{}Xu.prototype.ValueTypeName=\"string\",Xu.prototype.ValueBufferType=Array,Xu.prototype.DefaultInterpolation=$i,Xu.prototype.InterpolantFactoryMethodLinear=void 0,Xu.prototype.InterpolantFactoryMethodSmooth=void 0;class Yu extends ku{}Yu.prototype.ValueTypeName=\"vector\";class Zu{constructor(t,e=-1,n,i=2500){this.name=t,this.tracks=n,this.duration=e,this.blendMode=i,this.uuid=yr(),this.duration<0&&this.resetDuration()}static parse(t){const e=[],n=t.tracks,i=1/(t.fps||1);for(let t=0,r=n.length;t!==r;++t)e.push(Ju(n[t]).scale(i));const r=new this(t.name,t.duration,e,t.blendMode);return r.uuid=t.uuid,r}static toJSON(t){const e=[],n=t.tracks,i={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,i=n.length;t!==i;++t)e.push(ku.toJSON(n[t]));return i}static CreateFromMorphTargetSequence(t,e,n,i){const r=e.length,a=[];for(let t=0;t<r;t++){let s=[],o=[];s.push((t+r-1)%r,t,(t+1)%r),o.push(0,1,0);const l=zu.getKeyframeOrder(s);s=zu.sortedArray(s,1,l),o=zu.sortedArray(o,1,l),i||0!==s[0]||(s.push(r),o.push(o[0])),a.push(new Wu(\".morphTargetInfluences[\"+e[t].name+\"]\",s,o).scale(1/n))}return new this(t,-1,a)}static findByName(t,e){let n=t;if(!Array.isArray(t)){const e=t;n=e.geometry&&e.geometry.animations||e.animations}for(let t=0;t<n.length;t++)if(n[t].name===e)return n[t];return null}static CreateClipsFromMorphTargetSequences(t,e,n){const i={},r=/^([\\w-]*?)([\\d]+)$/;for(let e=0,n=t.length;e<n;e++){const n=t[e],a=n.name.match(r);if(a&&a.length>1){const t=a[1];let e=i[t];e||(i[t]=e=[]),e.push(n)}}const a=[];for(const t in i)a.push(this.CreateFromMorphTargetSequence(t,i[t],e,n));return a}static parseAnimation(t,e){if(!t)return console.error(\"THREE.AnimationClip: No animation in JSONLoader data.\"),null;const n=function(t,e,n,i,r){if(0!==n.length){const a=[],s=[];zu.flattenJSON(n,a,s,i),0!==a.length&&r.push(new t(e,a,s))}},i=[],r=t.name||\"default\",a=t.fps||30,s=t.blendMode;let o=t.length||-1;const l=t.hierarchy||[];for(let t=0;t<l.length;t++){const r=l[t].keys;if(r&&0!==r.length)if(r[0].morphTargets){const t={};let e;for(e=0;e<r.length;e++)if(r[e].morphTargets)for(let n=0;n<r[e].morphTargets.length;n++)t[r[e].morphTargets[n]]=-1;for(const n in t){const t=[],a=[];for(let i=0;i!==r[e].morphTargets.length;++i){const i=r[e];t.push(i.time),a.push(i.morphTarget===n?1:0)}i.push(new Wu(\".morphTargetInfluence[\"+n+\"]\",t,a))}o=t.length*(a||1)}else{const a=\".bones[\"+e[t].name+\"]\";n(Yu,a+\".position\",r,\"pos\",i),n(qu,a+\".quaternion\",r,\"rot\",i),n(Yu,a+\".scale\",r,\"scl\",i)}}if(0===i.length)return null;return new this(r,o,i,s)}resetDuration(){let t=0;for(let e=0,n=this.tracks.length;e!==n;++e){const n=this.tracks[e];t=Math.max(t,n.times[n.times.length-1])}return this.duration=t,this}trim(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this}validate(){let t=!0;for(let e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t}optimize(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function Ju(t){if(void 0===t.type)throw new Error(\"THREE.KeyframeTrack: track type undefined, can not parse\");const e=(function n(t){switch(t.toLowerCase()){case\"scalar\":case\"double\":case\"float\":case\"number\":case\"integer\":return Wu;case\"vector\":case\"vector2\":case\"vector3\":case\"vector4\":return Yu;case\"color\":return Vu;case\"quaternion\":return qu;case\"bool\":case\"boolean\":return Gu;case\"string\":return Xu}throw new Error(\"THREE.KeyframeTrack: Unsupported typeName: \"+t)})(t.type);if(void 0===t.times){const e=[],n=[];zu.flattenJSON(t.keys,e,n,\"value\"),t.times=e,t.values=n}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}const Qu={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};const Ku=new class{constructor(t,e,n){const i=this;let r,a=!1,s=0,o=0;const l=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=n,this.itemStart=function(t){o++,!1===a&&void 0!==i.onStart&&i.onStart(t,s,o),a=!0},this.itemEnd=function(t){s++,void 0!==i.onProgress&&i.onProgress(t,s,o),s===o&&(a=!1,void 0!==i.onLoad&&i.onLoad())},this.itemError=function(t){void 0!==i.onError&&i.onError(t)},this.resolveURL=function(t){return r?r(t):t},this.setURLModifier=function(t){return r=t,this},this.addHandler=function(t,e){return l.push(t,e),this},this.removeHandler=function(t){const e=l.indexOf(t);return-1!==e&&l.splice(e,2),this},this.getHandler=function(t){for(let e=0,n=l.length;e<n;e+=2){const n=l[e],i=l[e+1];if(n.global&&(n.lastIndex=0),n.test(t))return i}return null}}};class $u{constructor(t){this.manager=void 0!==t?t:Ku,this.crossOrigin=\"anonymous\",this.withCredentials=!1,this.path=\"\",this.resourcePath=\"\",this.requestHeader={}}load(){}loadAsync(t,e){const n=this;return new Promise((function(i,r){n.load(t,i,e,r)}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}const td={};class ed extends $u{constructor(t){super(t)}load(t,e,n,i){void 0===t&&(t=\"\"),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,a=Qu.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout((function(){e&&e(a),r.manager.itemEnd(t)}),0),a;if(void 0!==td[t])return void td[t].push({onLoad:e,onProgress:n,onError:i});const s=t.match(/^data:(.*?)(;base64)?,(.*)$/);let o;if(s){const n=s[1],a=!!s[2];let o=s[3];o=decodeURIComponent(o),a&&(o=atob(o));try{let i;const a=(this.responseType||\"\").toLowerCase();switch(a){case\"arraybuffer\":case\"blob\":const t=new Uint8Array(o.length);for(let e=0;e<o.length;e++)t[e]=o.charCodeAt(e);i=\"blob\"===a?new Blob([t.buffer],{type:n}):t.buffer;break;case\"document\":const e=new DOMParser;i=e.parseFromString(o,n);break;case\"json\":i=JSON.parse(o);break;default:i=o}setTimeout((function(){e&&e(i),r.manager.itemEnd(t)}),0)}catch(e){setTimeout((function(){i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)}),0)}}else{td[t]=[],td[t].push({onLoad:e,onProgress:n,onError:i}),o=new XMLHttpRequest,o.open(\"GET\",t,!0),o.addEventListener(\"load\",(function(e){const n=this.response,i=td[t];if(delete td[t],200===this.status||0===this.status){0===this.status&&console.warn(\"THREE.FileLoader: HTTP Status 0 received.\"),Qu.add(t,n);for(let t=0,e=i.length;t<e;t++){const e=i[t];e.onLoad&&e.onLoad(n)}r.manager.itemEnd(t)}else{for(let t=0,n=i.length;t<n;t++){const n=i[t];n.onError&&n.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}}),!1),o.addEventListener(\"progress\",(function(e){const n=td[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];i.onProgress&&i.onProgress(e)}}),!1),o.addEventListener(\"error\",(function(e){const n=td[t];delete td[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];i.onError&&i.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}),!1),o.addEventListener(\"abort\",(function(e){const n=td[t];delete td[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];i.onError&&i.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}),!1),void 0!==this.responseType&&(o.responseType=this.responseType),void 0!==this.withCredentials&&(o.withCredentials=this.withCredentials),o.overrideMimeType&&o.overrideMimeType(void 0!==this.mimeType?this.mimeType:\"text/plain\");for(const t in this.requestHeader)o.setRequestHeader(t,this.requestHeader[t]);o.send(null)}return r.manager.itemStart(t),o}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class nd extends $u{constructor(t){super(t)}load(t,e,n,i){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,a=Qu.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout((function(){e&&e(a),r.manager.itemEnd(t)}),0),a;const s=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"img\");function o(){s.removeEventListener(\"load\",o,!1),s.removeEventListener(\"error\",l,!1),Qu.add(t,this),e&&e(this),r.manager.itemEnd(t)}function l(e){s.removeEventListener(\"load\",o,!1),s.removeEventListener(\"error\",l,!1),i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)}return s.addEventListener(\"load\",o,!1),s.addEventListener(\"error\",l,!1),\"data:\"!==t.substr(0,5)&&void 0!==this.crossOrigin&&(s.crossOrigin=this.crossOrigin),r.manager.itemStart(t),s.src=t,s}}class id extends $u{constructor(t){super(t)}load(t,e,n,i){const r=new Xs,a=new nd(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);let s=0;function o(n){a.load(t[n],(function(t){r.images[n]=t,s++,6===s&&(r.needsUpdate=!0,e&&e(r))}),void 0,i)}for(let e=0;e<t.length;++e)o(e);return r}}class rd extends $u{constructor(t){super(t)}load(t,e,n,i){const r=new Lr,a=new nd(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(t,(function(n){r.image=n;const i=t.search(/\\.jpe?g($|\\?)/i)>0||0===t.search(/^data\\:image\\/jpeg/);r.format=i?Zi:Ji,r.needsUpdate=!0,void 0!==e&&e(r)}),n,i),r}}class ad extends Bh{constructor(){super(),this.type=\"CurvePath\",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new $h(e,t))}getPoint(t){const e=t*this.getLength(),n=this.getCurveLengths();let i=0;for(;i<n.length;){if(n[i]>=e){const t=n[i]-e,r=this.curves[i],a=r.getLength();return r.getPointAt(0===a?0:1-t/a)}i++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let n=0,i=this.curves.length;n<i;n++)e+=this.curves[n].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let n;for(let i=0,r=this.curves;i<r.length;i++){const a=r[i],s=a.getPoints(a&&a.isEllipseCurve?2*t:a&&(a.isLineCurve||a.isLineCurve3)?1:a&&a.isSplineCurve?t*a.points.length:t);for(let t=0;t<s.length;t++){const i=s[t];n&&n.equals(i)||(e.push(i),n=i)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(t){super.copy(t),this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){this.curves.push(t.curves[e].clone())}return this.autoClose=t.autoClose,this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose,t.curves=[];for(let e=0,n=this.curves.length;e<n;e++){t.curves.push(this.curves[e].toJSON())}return t}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push((new iu[n.type]).fromJSON(n))}return this}}class sd extends ad{constructor(t){super(),this.type=\"Path\",this.currentPoint=new br,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,n=t.length;e<n;e++)this.lineTo(t[e].x,t[e].y);return this}moveTo(t,e){return this.currentPoint.set(t,e),this}lineTo(t,e){const n=new $h(this.currentPoint.clone(),new br(t,e));return this.curves.push(n),this.currentPoint.set(t,e),this}quadraticCurveTo(t,e,n,i){const r=new tu(this.currentPoint.clone(),new br(t,e),new br(n,i));return this.curves.push(r),this.currentPoint.set(n,i),this}bezierCurveTo(t,e,n,i,r,a){const s=new Qh(this.currentPoint.clone(),new br(t,e),new br(n,i),new br(r,a));return this.curves.push(s),this.currentPoint.set(r,a),this}splineThru(t){const e=[this.currentPoint.clone()].concat(t),n=new nu(e);return this.curves.push(n),this.currentPoint.copy(t[t.length-1]),this}arc(t,e,n,i,r,a){return this.absarc(t+this.currentPoint.x,e+this.currentPoint.y,n,i,r,a),this}absarc(t,e,n,i,r,a){return this.absellipse(t,e,n,n,i,r,a),this}ellipse(t,e,n,i,r,a,s,o){return this.absellipse(t+this.currentPoint.x,e+this.currentPoint.y,n,i,r,a,s,o),this}absellipse(t,e,n,i,r,a,s,o){const l=new Hh(t,e,n,i,r,a,s,o);if(this.curves.length>0){const t=l.getPoint(0);t.equals(this.currentPoint)||this.lineTo(t.x,t.y)}this.curves.push(l);const c=l.getPoint(1);return this.currentPoint.copy(c),this}copy(t){return super.copy(t),this.currentPoint.copy(t.currentPoint),this}toJSON(){const t=super.toJSON();return t.currentPoint=this.currentPoint.toArray(),t}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}class od extends sd{constructor(t){super(t),this.uuid=yr(),this.type=\"Shape\",this.holes=[]}getPointsHoles(t){const e=[];for(let n=0,i=this.holes.length;n<i;n++)e[n]=this.holes[n].getPoints(t);return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t),this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){this.holes.push(t.holes[e].clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid,t.holes=[];for(let e=0,n=this.holes.length;e<n;e++){t.holes.push(this.holes[e].toJSON())}return t}fromJSON(t){super.fromJSON(t),this.uuid=t.uuid,this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push((new sd).fromJSON(n))}return this}}class ld extends za{constructor(t,e=1){super(),this.type=\"Light\",this.color=new ns(t),this.intensity=e}dispose(){}copy(t){return super.copy(t),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}ld.prototype.isLight=!0;(class extends ld{constructor(t,e,n){super(t,n),this.type=\"HemisphereLight\",this.position.copy(za.DefaultUp),this.updateMatrix(),this.groundColor=new ns(e)}copy(t){return ld.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}).prototype.isHemisphereLight=!0;const cd=new ua,hd=new Ir,ud=new Ir;class dd{constructor(t){this.camera=t,this.bias=0,this.normalBias=0,this.radius=1,this.mapSize=new br(512,512),this.map=null,this.mapPass=null,this.matrix=new ua,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new eo,this._frameExtents=new br(1,1),this._viewportCount=1,this._viewports=[new Rr(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;hd.setFromMatrixPosition(t.matrixWorld),e.position.copy(hd),ud.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(ud),e.updateMatrixWorld(),cd.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(cd),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(e.projectionMatrix),n.multiply(e.matrixWorldInverse)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};return 0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class pd extends dd{constructor(){super(new Ws(50,1,.5,500)),this.focus=1}updateMatrices(t){const e=this.camera,n=2*vr*t.angle*this.focus,i=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;n===e.fov&&i===e.aspect&&r===e.far||(e.fov=n,e.aspect=i,e.far=r,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}pd.prototype.isSpotLightShadow=!0;(class extends ld{constructor(t,e,n=0,i=Math.PI/3,r=0,a=1){super(t,e),this.type=\"SpotLight\",this.position.copy(za.DefaultUp),this.updateMatrix(),this.target=new za,this.distance=n,this.angle=i,this.penumbra=r,this.decay=a,this.shadow=new pd}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}).prototype.isSpotLight=!0;const fd=new ua,md=new Ir,gd=new Ir;class vd extends dd{constructor(){super(new Ws(90,1,.5,500)),this._frameExtents=new br(4,2),this._viewportCount=6,this._viewports=[new Rr(2,1,1,1),new Rr(0,1,1,1),new Rr(3,1,1,1),new Rr(1,1,1,1),new Rr(3,0,1,1),new Rr(1,0,1,1)],this._cubeDirections=[new Ir(1,0,0),new Ir(-1,0,0),new Ir(0,0,1),new Ir(0,0,-1),new Ir(0,1,0),new Ir(0,-1,0)],this._cubeUps=[new Ir(0,1,0),new Ir(0,1,0),new Ir(0,1,0),new Ir(0,1,0),new Ir(0,0,1),new Ir(0,0,-1)]}updateMatrices(t,e=0){const n=this.camera,i=this.matrix,r=t.distance||n.far;r!==n.far&&(n.far=r,n.updateProjectionMatrix()),md.setFromMatrixPosition(t.matrixWorld),n.position.copy(md),gd.copy(n.position),gd.add(this._cubeDirections[e]),n.up.copy(this._cubeUps[e]),n.lookAt(gd),n.updateMatrixWorld(),i.makeTranslation(-md.x,-md.y,-md.z),fd.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(fd)}}vd.prototype.isPointLightShadow=!0;(class extends ld{constructor(t,e,n=0,i=1){super(t,e),this.type=\"PointLight\",this.distance=n,this.decay=i,this.shadow=new vd}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}).prototype.isPointLight=!0;class yd extends dd{constructor(){super(new mo(-5,5,5,-5,.5,500))}}yd.prototype.isDirectionalLightShadow=!0;(class extends ld{constructor(t,e){super(t,e),this.type=\"DirectionalLight\",this.position.copy(za.DefaultUp),this.updateMatrix(),this.target=new za,this.shadow=new yd}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}).prototype.isDirectionalLight=!0;(class extends ld{constructor(t,e){super(t,e),this.type=\"AmbientLight\"}}).prototype.isAmbientLight=!0;(class extends ld{constructor(t,e,n=10,i=10){super(t,e),this.type=\"RectAreaLight\",this.width=n,this.height=i}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}).prototype.isRectAreaLight=!0;class xd{constructor(){this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new Ir)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const n=t.x,i=t.y,r=t.z,a=this.coefficients;return e.copy(a[0]).multiplyScalar(.282095),e.addScaledVector(a[1],.488603*i),e.addScaledVector(a[2],.488603*r),e.addScaledVector(a[3],.488603*n),e.addScaledVector(a[4],n*i*1.092548),e.addScaledVector(a[5],i*r*1.092548),e.addScaledVector(a[6],.315392*(3*r*r-1)),e.addScaledVector(a[7],n*r*1.092548),e.addScaledVector(a[8],.546274*(n*n-i*i)),e}getIrradianceAt(t,e){const n=t.x,i=t.y,r=t.z,a=this.coefficients;return e.copy(a[0]).multiplyScalar(.886227),e.addScaledVector(a[1],1.023328*i),e.addScaledVector(a[2],1.023328*r),e.addScaledVector(a[3],1.023328*n),e.addScaledVector(a[4],.858086*n*i),e.addScaledVector(a[5],.858086*i*r),e.addScaledVector(a[6],.743125*r*r-.247708),e.addScaledVector(a[7],.858086*n*r),e.addScaledVector(a[8],.429043*(n*n-i*i)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(t.coefficients[n],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let n=0;n<9;n++)this.coefficients[n].lerp(t.coefficients[n],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(t,e+3*i);return this}toArray(t=[],e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(t,e+3*i);return t}static getBasisAt(t,e){const n=t.x,i=t.y,r=t.z;e[0]=.282095,e[1]=.488603*i,e[2]=.488603*r,e[3]=.488603*n,e[4]=1.092548*n*i,e[5]=1.092548*i*r,e[6]=.315392*(3*r*r-1),e[7]=1.092548*n*r,e[8]=.546274*(n*n-i*i)}}xd.prototype.isSphericalHarmonics3=!0;class _d extends ld{constructor(t=new xd,e=1){super(void 0,e),this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}_d.prototype.isLightProbe=!0;(class extends ys{constructor(){super(),this.type=\"InstancedBufferGeometry\",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}clone(){return(new this.constructor).copy(this)}toJSON(){const t=super.toJSON(this);return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}).prototype.isInstancedBufferGeometry=!0;(class extends ss{constructor(t,e,n,i=1){\"number\"==typeof n&&(i=n,n=!1,console.error(\"THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.\")),super(t,e,n),this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}).prototype.isInstancedBufferAttribute=!0;let Md;(class extends $u{constructor(t){super(t),\"undefined\"==typeof createImageBitmap&&console.warn(\"THREE.ImageBitmapLoader: createImageBitmap() not supported.\"),\"undefined\"==typeof fetch&&console.warn(\"THREE.ImageBitmapLoader: fetch() not supported.\"),this.options={premultiplyAlpha:\"none\"}}setOptions(t){return this.options=t,this}load(t,e,n,i){void 0===t&&(t=\"\"),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,a=Qu.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout((function(){e&&e(a),r.manager.itemEnd(t)}),0),a;const s={};s.credentials=\"anonymous\"===this.crossOrigin?\"same-origin\":\"include\",s.headers=this.requestHeader,fetch(t,s).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,Object.assign(r.options,{colorSpaceConversion:\"none\"}))})).then((function(n){Qu.add(t,n),e&&e(n),r.manager.itemEnd(t)})).catch((function(e){i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)})),r.manager.itemStart(t)}}).prototype.isImageBitmapLoader=!0;const wd=function(){return void 0===Md&&(Md=new(window.AudioContext||window.webkitAudioContext)),Md};class bd extends $u{constructor(t){super(t)}load(t,e,n,i){const r=this,a=new ed(this.manager);a.setResponseType(\"arraybuffer\"),a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(t,(function(n){try{const t=n.slice(0);wd().decodeAudioData(t,(function(t){e(t)}))}catch(e){i?i(e):console.error(e),r.manager.itemError(t)}}),n,i)}}(class extends _d{constructor(t,e,n=1){super(void 0,n);const i=(new ns).set(t),r=(new ns).set(e),a=new Ir(i.r,i.g,i.b),s=new Ir(r.r,r.g,r.b),o=Math.sqrt(Math.PI),l=o*Math.sqrt(.75);this.sh.coefficients[0].copy(a).add(s).multiplyScalar(o),this.sh.coefficients[1].copy(a).sub(s).multiplyScalar(l)}}).prototype.isHemisphereLightProbe=!0;(class extends _d{constructor(t,e=1){super(void 0,e);const n=(new ns).set(t);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}}).prototype.isAmbientLightProbe=!0;class Sd{constructor(t,e,n){let i,r,a;switch(this.binding=t,this.valueSize=n,e){case\"quaternion\":i=this._slerp,r=this._slerpAdditive,a=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*n),this._workIndex=5;break;case\"string\":case\"bool\":i=this._select,r=this._select,a=this._setAdditiveIdentityOther,this.buffer=new Array(5*n);break;default:i=this._lerp,r=this._lerpAdditive,a=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*n)}this._mixBufferRegion=i,this._mixBufferRegionAdditive=r,this._setIdentity=a,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,e){const n=this.buffer,i=this.valueSize,r=t*i+i;let a=this.cumulativeWeight;if(0===a){for(let t=0;t!==i;++t)n[r+t]=n[t];a=e}else{a+=e;this._mixBufferRegion(n,r,0,e/a,i)}this.cumulativeWeight=a}accumulateAdditive(t){const e=this.buffer,n=this.valueSize,i=n*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(e,i,0,t,n),this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,n=this.buffer,i=t*e+e,r=this.cumulativeWeight,a=this.cumulativeWeightAdditive,s=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,r<1){this._mixBufferRegion(n,i,e*this._origIndex,1-r,e)}a>0&&this._mixBufferRegionAdditive(n,i,this._addIndex*e,1,e);for(let t=e,r=e+e;t!==r;++t)if(n[t]!==n[t+e]){s.setValue(n,i);break}}saveOriginalState(){const t=this.buffer,e=this.valueSize,n=e*this._origIndex;this.binding.getValue(t,n);for(let i=e,r=n;i!==r;++i)t[i]=t[n+i%e];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){this.binding.setValue(this.buffer,3*this.valueSize)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let n=t;n<e;n++)this.buffer[n]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++)this.buffer[e+n]=this.buffer[t+n]}_select(t,e,n,i,r){if(i>=.5)for(let i=0;i!==r;++i)t[e+i]=t[n+i]}_slerp(t,e,n,i){Nr.slerpFlat(t,e,t,e,t,n,i)}_slerpAdditive(t,e,n,i,r){const a=this._workIndex*r;Nr.multiplyQuaternionsFlat(t,a,t,e,t,n),Nr.slerpFlat(t,e,t,e,t,a,i)}_lerp(t,e,n,i,r){const a=1-i;for(let s=0;s!==r;++s){const r=e+s;t[r]=t[r]*a+t[n+s]*i}}_lerpAdditive(t,e,n,i,r){for(let a=0;a!==r;++a){const r=e+a;t[r]=t[r]+t[n+a]*i}}}const Td=\"\\\\[\\\\]\\\\.:\\\\/\",Ed=new RegExp(\"[\\\\[\\\\]\\\\.:\\\\/]\",\"g\"),Ad=\"[^\\\\[\\\\]\\\\.:\\\\/]\",Ld=\"[^\"+Td.replace(\"\\\\.\",\"\")+\"]\",Cd=/((?:WC+[\\/:])*)/.source.replace(\"WC\",Ad),Rd=/(WCOD+)?/.source.replace(\"WCOD\",Ld),Pd=/(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace(\"WC\",Ad),Dd=/\\.(WC+)(?:\\[(.+)\\])?/.source.replace(\"WC\",Ad),Nd=new RegExp(\"^\"+Cd+Rd+Pd+Dd+\"$\"),Id=[\"material\",\"materials\",\"bones\"];class Od{constructor(t,e,n){this.path=e,this.parsedPath=n||Od.parseTrackName(e),this.node=Od.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,e,n){return t&&t.isAnimationObjectGroup?new Od.Composite(t,e,n):new Od(t,e,n)}static sanitizeNodeName(t){return t.replace(/\\s/g,\"_\").replace(Ed,\"\")}static parseTrackName(t){const e=Nd.exec(t);if(!e)throw new Error(\"PropertyBinding: Cannot parse trackName: \"+t);const n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},i=n.nodeName&&n.nodeName.lastIndexOf(\".\");if(void 0!==i&&-1!==i){const t=n.nodeName.substring(i+1);-1!==Id.indexOf(t)&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=t)}if(null===n.propertyName||0===n.propertyName.length)throw new Error(\"PropertyBinding: can not parse propertyName from trackName: \"+t);return n}static findNode(t,e){if(!e||\"\"===e||\".\"===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const n=t.skeleton.getBoneByName(e);if(void 0!==n)return n}if(t.children){const n=function(t){for(let i=0;i<t.length;i++){const r=t[i];if(r.name===e||r.uuid===e)return r;const a=n(r.children);if(a)return a}return null},i=n(t.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.node[this.propertyName]}_getValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)t[e++]=n[i]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,n=e.objectName,i=e.propertyName;let r=e.propertyIndex;if(t||(t=Od.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.error(\"THREE.PropertyBinding: Trying to update node for track: \"+this.path+\" but it wasn't found.\");if(n){let i=e.objectIndex;switch(n){case\"materials\":if(!t.material)return void console.error(\"THREE.PropertyBinding: Can not bind to material as node does not have a material.\",this);if(!t.material.materials)return void console.error(\"THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.\",this);t=t.material.materials;break;case\"bones\":if(!t.skeleton)return void console.error(\"THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.\",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===i){i=e;break}break;default:if(void 0===t[n])return void console.error(\"THREE.PropertyBinding: Can not bind to objectName of node undefined.\",this);t=t[n]}if(void 0!==i){if(void 0===t[i])return void console.error(\"THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.\",this,t);t=t[i]}}const a=t[i];if(void 0===a){return void console.error(\"THREE.PropertyBinding: Trying to update property for track: \"+e.nodeName+\".\"+i+\" but it wasn't found.\",t)}let s=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?s=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(s=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(void 0!==r){if(\"morphTargetInfluences\"===i){if(!t.geometry)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.\",this);if(!t.geometry.isBufferGeometry)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.\",this);if(!t.geometry.morphAttributes)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.\",this);void 0!==t.morphTargetDictionary[r]&&(r=t.morphTargetDictionary[r])}o=this.BindingType.ArrayElement,this.resolvedProperty=a,this.propertyIndex=r}else void 0!==a.fromArray&&void 0!==a.toArray?(o=this.BindingType.HasFromToArray,this.resolvedProperty=a):Array.isArray(a)?(o=this.BindingType.EntireArray,this.resolvedProperty=a):this.propertyName=i;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][s]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Od.Composite=class{constructor(t,e,n){const i=n||Od.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,i)}getValue(t,e){this.bind();const n=this._bindings[this._targetGroup.nCachedObjects_];void 0!==n&&n.getValue(t,e)}setValue(t,e){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i)n[i].setValue(t,e)}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].bind()}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].unbind()}},Od.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Od.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Od.prototype.GetterByBindingType=[Od.prototype._getValue_direct,Od.prototype._getValue_array,Od.prototype._getValue_arrayElement,Od.prototype._getValue_toArray],Od.prototype.SetterByBindingTypeAndVersioning=[[Od.prototype._setValue_direct,Od.prototype._setValue_direct_setNeedsUpdate,Od.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Od.prototype._setValue_array,Od.prototype._setValue_array_setNeedsUpdate,Od.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Od.prototype._setValue_arrayElement,Od.prototype._setValue_arrayElement_setNeedsUpdate,Od.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Od.prototype._setValue_fromArray,Od.prototype._setValue_fromArray_setNeedsUpdate,Od.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class zd{constructor(t,e,n=null,i=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=n,this.blendMode=i;const r=e.tracks,a=r.length,s=new Array(a),o={endingStart:nr,endingEnd:nr};for(let t=0;t!==a;++t){const e=r[t].createInterpolant(null);s[t]=e,e.settings=o}this._interpolantSettings=o,this._interpolants=s,this._propertyBindings=new Array(a),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,n){if(t.fadeOut(e),this.fadeIn(e),n){const n=this._clip.duration,i=t._clip.duration,r=n/i;t.warp(1,i/n,e),this.warp(r,1,e)}return this}crossFadeTo(t,e,n){return t.crossFadeFrom(this,e,n)}stopFading(){const t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,n){const i=this._mixer,r=i.time,a=this.timeScale;let s=this._timeScaleInterpolant;null===s&&(s=i._lendControlInterpolant(),this._timeScaleInterpolant=s);const o=s.parameterPositions,l=s.sampleValues;return o[0]=r,o[1]=r+n,l[0]=t/a,l[1]=e/a,this}stopWarping(){const t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,n,i){if(!this.enabled)return void this._updateWeight(t);const r=this._startTime;if(null!==r){const i=(t-r)*n;if(i<0||0===n)return;this._startTime=null,e=n*i}e*=this._updateTimeScale(t);const a=this._updateTime(e),s=this._updateWeight(t);if(s>0){const t=this._interpolants,e=this._propertyBindings;switch(this.blendMode){case 2501:for(let n=0,i=t.length;n!==i;++n)t[n].evaluate(a),e[n].accumulateAdditive(s);break;case ar:default:for(let n=0,r=t.length;n!==r;++n)t[n].evaluate(a),e[n].accumulate(i,s)}}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const n=this._weightInterpolant;if(null!==n){const i=n.evaluate(t)[0];e*=i,t>n.parameterPositions[1]&&(this.stopFading(),0===i&&(this.enabled=!1))}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const n=this._timeScaleInterpolant;if(null!==n){e*=n.evaluate(t)[0],t>n.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e)}}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,n=this.loop;let i=this.time+t,r=this._loopCount;const a=2202===n;if(0===t)return-1===r?i:a&&1==(1&r)?e-i:i;if(2200===n){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(i>=e)i=e;else{if(!(i<0)){this.time=i;break t}i=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=i,this._mixer.dispatchEvent({type:\"finished\",action:this,direction:t<0?-1:1})}}else{if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),i>=e||i<0){const n=Math.floor(i/e);i-=e*n,r+=Math.abs(n);const s=this.repetitions-r;if(s<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,i=t>0?e:0,this.time=i,this._mixer.dispatchEvent({type:\"finished\",action:this,direction:t>0?1:-1});else{if(1===s){const e=t<0;this._setEndings(e,!e,a)}else this._setEndings(!1,!1,a);this._loopCount=r,this.time=i,this._mixer.dispatchEvent({type:\"loop\",action:this,loopDelta:n})}}else this.time=i;if(a&&1==(1&r))return e-i}return i}_setEndings(t,e,n){const i=this._interpolantSettings;n?(i.endingStart=ir,i.endingEnd=ir):(i.endingStart=t?this.zeroSlopeAtStart?ir:nr:rr,i.endingEnd=e?this.zeroSlopeAtEnd?ir:nr:rr)}_scheduleFading(t,e,n){const i=this._mixer,r=i.time;let a=this._weightInterpolant;null===a&&(a=i._lendControlInterpolant(),this._weightInterpolant=a);const s=a.parameterPositions,o=a.sampleValues;return s[0]=r,o[0]=e,s[1]=r+t,o[1]=n,this}}(class extends fr{constructor(t){super(),this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(t,e){const n=t._localRoot||this._root,i=t._clip.tracks,r=i.length,a=t._propertyBindings,s=t._interpolants,o=n.uuid,l=this._bindingsByRootAndName;let c=l[o];void 0===c&&(c={},l[o]=c);for(let t=0;t!==r;++t){const r=i[t],l=r.name;let h=c[l];if(void 0!==h)a[t]=h;else{if(h=a[t],void 0!==h){null===h._cacheIndex&&(++h.referenceCount,this._addInactiveBinding(h,o,l));continue}h=new Sd(Od.create(n,l,e&&e._propertyBindings[t].binding.parsedPath),r.ValueTypeName,r.getValueSize()),++h.referenceCount,this._addInactiveBinding(h,o,l),a[t]=h}s[t].resultBuffer=h.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){const e=(t._localRoot||this._root).uuid,n=t._clip.uuid,i=this._actionsByClip[n];this._bindAction(t,i&&i.knownActions[0]),this._addInactiveAction(t,n,e)}const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==n.useCount++&&(this._lendBinding(n),n.saveOriginalState())}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==--n.useCount&&(n.restoreOriginalState(),this._takeBackBinding(n))}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return null!==e&&e<this._nActiveActions}_addInactiveAction(t,e,n){const i=this._actions,r=this._actionsByClip;let a=r[e];if(void 0===a)a={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,r[e]=a;else{const e=a.knownActions;t._byClipCacheIndex=e.length,e.push(t)}t._cacheIndex=i.length,i.push(t),a.actionByRoot[n]=t}_removeInactiveAction(t){const e=this._actions,n=e[e.length-1],i=t._cacheIndex;n._cacheIndex=i,e[i]=n,e.pop(),t._cacheIndex=null;const r=t._clip.uuid,a=this._actionsByClip,s=a[r],o=s.knownActions,l=o[o.length-1],c=t._byClipCacheIndex;l._byClipCacheIndex=c,o[c]=l,o.pop(),t._byClipCacheIndex=null;delete s.actionByRoot[(t._localRoot||this._root).uuid],0===o.length&&delete a[r],this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==--n.referenceCount&&this._removeInactiveBinding(n)}}_lendAction(t){const e=this._actions,n=t._cacheIndex,i=this._nActiveActions++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_takeBackAction(t){const e=this._actions,n=t._cacheIndex,i=--this._nActiveActions,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_addInactiveBinding(t,e,n){const i=this._bindingsByRootAndName,r=this._bindings;let a=i[e];void 0===a&&(a={},i[e]=a),a[n]=t,t._cacheIndex=r.length,r.push(t)}_removeInactiveBinding(t){const e=this._bindings,n=t.binding,i=n.rootNode.uuid,r=n.path,a=this._bindingsByRootAndName,s=a[i],o=e[e.length-1],l=t._cacheIndex;o._cacheIndex=l,e[l]=o,e.pop(),delete s[r],0===Object.keys(s).length&&delete a[i]}_lendBinding(t){const e=this._bindings,n=t._cacheIndex,i=this._nActiveBindings++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_takeBackBinding(t){const e=this._bindings,n=t._cacheIndex,i=--this._nActiveBindings,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let n=t[e];return void 0===n&&(n=new Bu(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),n.__cacheIndex=e,t[e]=n),n}_takeBackControlInterpolant(t){const e=this._controlInterpolants,n=t.__cacheIndex,i=--this._nActiveControlInterpolants,r=e[i];t.__cacheIndex=i,e[i]=t,r.__cacheIndex=n,e[n]=r}clipAction(t,e,n){const i=e||this._root,r=i.uuid;let a=\"string\"==typeof t?Zu.findByName(i,t):t;const s=null!==a?a.uuid:t,o=this._actionsByClip[s];let l=null;if(void 0===n&&(n=null!==a?a.blendMode:ar),void 0!==o){const t=o.actionByRoot[r];if(void 0!==t&&t.blendMode===n)return t;l=o.knownActions[0],null===a&&(a=l._clip)}if(null===a)return null;const c=new zd(this,a,e,n);return this._bindAction(c,l),this._addInactiveAction(c,s,r),c}existingAction(t,e){const n=e||this._root,i=n.uuid,r=\"string\"==typeof t?Zu.findByName(n,t):t,a=this._actionsByClip[r?r.uuid:t];return void 0!==a&&a.actionByRoot[i]||null}stopAllAction(){const t=this._actions;for(let e=this._nActiveActions-1;e>=0;--e)t[e].stop();return this}update(t){const e=this._actions,n=this._nActiveActions,i=this.time+=t*=this.timeScale,r=Math.sign(t),a=this._accuIndex^=1;for(let s=0;s!==n;++s){e[s]._update(i,t,r,a)}const s=this._bindings,o=this._nActiveBindings;for(let t=0;t!==o;++t)s[t].apply(a);return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,n=t.uuid,i=this._actionsByClip,r=i[n];if(void 0!==r){const t=r.knownActions;for(let n=0,i=t.length;n!==i;++n){const i=t[n];this._deactivateAction(i);const r=i._cacheIndex,a=e[e.length-1];i._cacheIndex=null,i._byClipCacheIndex=null,a._cacheIndex=r,e[r]=a,e.pop(),this._removeInactiveBindingsForAction(i)}delete i[n]}}uncacheRoot(t){const e=t.uuid,n=this._actionsByClip;for(const t in n){const i=n[t].actionByRoot[e];void 0!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}const i=this._bindingsByRootAndName[e];if(void 0!==i)for(const t in i){const e=i[t];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(t,e){const n=this.existingAction(t,e);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}).prototype._controlInterpolantsResultBuffer=new Float32Array(1);(class extends Yc{constructor(t,e,n=1){super(t,e),this.meshPerAttribute=n}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}).prototype.isInstancedInterleavedBuffer=!0;(class extends za{constructor(t){super(),this.material=t,this.render=function(){},this.hasPositions=!1,this.hasNormals=!1,this.hasColors=!1,this.hasUvs=!1,this.positionArray=null,this.normalArray=null,this.colorArray=null,this.uvArray=null,this.count=0}}).prototype.isImmediateRenderObject=!0;const Ud=new Ir,Fd=new ua,Bd=new ua;function Hd(t){const e=[];t&&t.isBone&&e.push(t);for(let n=0;n<t.children.length;n++)e.push.apply(e,Hd(t.children[n]));return e}const kd=new Float32Array(1);function Gd(t,e,n){if(1===n)return new ns(e);const i=j(e);if(!i)throw new Error(`d3 failed to recognize the color: ${e}`);return new ns(ht(i,t)(1-n))}var Vd,Wd;function jd(t,e){const n=e.length/2;let i=t.attributes.position;i&&i.count===3*n||(i=new ss(new Float32Array(3*n),3),t.setAttribute(\"position\",i));const r=i.array;for(let t=0;t<n;t++)r[3*t]=e[2*t],r[3*t+1]=e[2*t+1];i.needsUpdate=!0,t.setDrawRange(0,3*n),t.computeBoundingSphere()}function qd(t,e,n){const i=Math.max(e.length/2-1,0),r=2*i*3,a=3*r;let s=t.attributes.position;s&&s.count===r||(s=new ss(new Float32Array(a),3),t.setAttribute(\"position\",s));const o=s.array;for(let t=0;t<i;t++){const[i,r,a,s]=[e[2*t],e[2*t+1],e[2*t+2],e[2*t+3]],l=new br(i,r),c=new br(a,s),h=new br(a-i,s-r),u=new br(-h.y,h.x).setLength(n/2),d=l.clone().add(u),p=l.clone().sub(u),f=c.clone().add(u),m=c.clone().sub(u),g=[d.x,d.y,0,p.x,p.y,0,f.x,f.y,0,f.x,f.y,0,p.x,p.y,0,m.x,m.y,0];o.set(g,t*g.length)}s.needsUpdate=!0,t.setDrawRange(0,a),t.computeBoundingSphere()}function Xd(t,e,n,i){const{visible:r,color:a,opacity:s}=i;if(Array.isArray(e.material))throw new Error(\"Invariant error: only expect one material on an object\");const o=e.material;if(o.visible!==r&&(o.visible=r,o.needsUpdate=!0),!r)return!1;const l=Gd(t,a,null!=s?s:1),c=n(e.geometry);e.geometry!==c&&(e.geometry=c);return o.color.equals(l)||(o.color.set(l),o.needsUpdate=!0),!0}new Int32Array(kd.buffer),Bh.create=function(t,e){return console.log(\"THREE.Curve.create() has been deprecated\"),t.prototype=Object.create(Bh.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},sd.prototype.fromPoints=function(t){return console.warn(\"THREE.Path: .fromPoints() has been renamed to .setFromPoints().\"),this.setFromPoints(t)},class extends Ph{constructor(t=10,e=10,n=4473924,i=8947848){n=new ns(n),i=new ns(i);const r=e/2,a=t/e,s=t/2,o=[],l=[];for(let t=0,c=0,h=-s;t<=e;t++,h+=a){o.push(-s,0,h,s,0,h),o.push(h,0,-s,h,0,s);const e=t===r?n:i;e.toArray(l,c),c+=3,e.toArray(l,c),c+=3,e.toArray(l,c),c+=3,e.toArray(l,c),c+=3}const c=new ys;c.setAttribute(\"position\",new cs(o,3)),c.setAttribute(\"color\",new cs(l,3));super(c,new wh({vertexColors:!0,toneMapped:!1})),this.type=\"GridHelper\"}}.prototype.setColors=function(){console.error(\"THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.\")},class extends Ph{constructor(t){const e=Hd(t),n=new ys,i=[],r=[],a=new ns(0,0,1),s=new ns(0,1,0);for(let t=0;t<e.length;t++){const n=e[t];n.parent&&n.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),r.push(a.r,a.g,a.b),r.push(s.r,s.g,s.b))}n.setAttribute(\"position\",new cs(i,3)),n.setAttribute(\"color\",new cs(r,3));super(n,new wh({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.type=\"SkeletonHelper\",this.isSkeletonHelper=!0,this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,n=this.geometry,i=n.getAttribute(\"position\");Bd.copy(this.root.matrixWorld).invert();for(let t=0,n=0;t<e.length;t++){const r=e[t];r.parent&&r.parent.isBone&&(Fd.multiplyMatrices(Bd,r.matrixWorld),Ud.setFromMatrixPosition(Fd),i.setXYZ(n,Ud.x,Ud.y,Ud.z),Fd.multiplyMatrices(Bd,r.parent.matrixWorld),Ud.setFromMatrixPosition(Fd),i.setXYZ(n+1,Ud.x,Ud.y,Ud.z),n+=2)}n.getAttribute(\"position\").needsUpdate=!0,super.updateMatrixWorld(t)}}.prototype.update=function(){console.error(\"THREE.SkeletonHelper: update() no longer needs to be called.\")},$u.prototype.extractUrlBase=function(t){return console.warn(\"THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.\"),class{static decodeText(t){if(\"undefined\"!=typeof TextDecoder)return(new TextDecoder).decode(t);let e=\"\";for(let n=0,i=t.length;n<i;n++)e+=String.fromCharCode(t[n]);try{return decodeURIComponent(escape(e))}catch(t){return e}}static extractUrlBase(t){const e=t.lastIndexOf(\"/\");return-1===e?\"./\":t.substr(0,e+1)}}.extractUrlBase(t)},$u.Handlers={add:function(){console.error(\"THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.\")},get:function(){console.error(\"THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.\")}},Ur.prototype.center=function(t){return console.warn(\"THREE.Box3: .center() has been renamed to .getCenter().\"),this.getCenter(t)},Ur.prototype.empty=function(){return console.warn(\"THREE.Box3: .empty() has been renamed to .isEmpty().\"),this.isEmpty()},Ur.prototype.isIntersectionBox=function(t){return console.warn(\"THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().\"),this.intersectsBox(t)},Ur.prototype.isIntersectionSphere=function(t){return console.warn(\"THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().\"),this.intersectsSphere(t)},Ur.prototype.size=function(t){return console.warn(\"THREE.Box3: .size() has been renamed to .getSize().\"),this.getSize(t)},na.prototype.empty=function(){return console.warn(\"THREE.Sphere: .empty() has been renamed to .isEmpty().\"),this.isEmpty()},eo.prototype.setFromMatrix=function(t){return console.warn(\"THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().\"),this.setFromProjectionMatrix(t)},Sr.prototype.flattenToArrayOffset=function(t,e){return console.warn(\"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\"),this.toArray(t,e)},Sr.prototype.multiplyVector3=function(t){return console.warn(\"THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.\"),t.applyMatrix3(this)},Sr.prototype.multiplyVector3Array=function(){console.error(\"THREE.Matrix3: .multiplyVector3Array() has been removed.\")},Sr.prototype.applyToBufferAttribute=function(t){return console.warn(\"THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.\"),t.applyMatrix3(this)},Sr.prototype.applyToVector3Array=function(){console.error(\"THREE.Matrix3: .applyToVector3Array() has been removed.\")},Sr.prototype.getInverse=function(t){return console.warn(\"THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.\"),this.copy(t).invert()},ua.prototype.extractPosition=function(t){return console.warn(\"THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().\"),this.copyPosition(t)},ua.prototype.flattenToArrayOffset=function(t,e){return console.warn(\"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\"),this.toArray(t,e)},ua.prototype.getPosition=function(){return console.warn(\"THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.\"),(new Ir).setFromMatrixColumn(this,3)},ua.prototype.setRotationFromQuaternion=function(t){return console.warn(\"THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().\"),this.makeRotationFromQuaternion(t)},ua.prototype.multiplyToArray=function(){console.warn(\"THREE.Matrix4: .multiplyToArray() has been removed.\")},ua.prototype.multiplyVector3=function(t){return console.warn(\"THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),t.applyMatrix4(this)},ua.prototype.multiplyVector4=function(t){return console.warn(\"THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),t.applyMatrix4(this)},ua.prototype.multiplyVector3Array=function(){console.error(\"THREE.Matrix4: .multiplyVector3Array() has been removed.\")},ua.prototype.rotateAxis=function(t){console.warn(\"THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.\"),t.transformDirection(this)},ua.prototype.crossVector=function(t){return console.warn(\"THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),t.applyMatrix4(this)},ua.prototype.translate=function(){console.error(\"THREE.Matrix4: .translate() has been removed.\")},ua.prototype.rotateX=function(){console.error(\"THREE.Matrix4: .rotateX() has been removed.\")},ua.prototype.rotateY=function(){console.error(\"THREE.Matrix4: .rotateY() has been removed.\")},ua.prototype.rotateZ=function(){console.error(\"THREE.Matrix4: .rotateZ() has been removed.\")},ua.prototype.rotateByAxis=function(){console.error(\"THREE.Matrix4: .rotateByAxis() has been removed.\")},ua.prototype.applyToBufferAttribute=function(t){return console.warn(\"THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.\"),t.applyMatrix4(this)},ua.prototype.applyToVector3Array=function(){console.error(\"THREE.Matrix4: .applyToVector3Array() has been removed.\")},ua.prototype.makeFrustum=function(t,e,n,i,r,a){return console.warn(\"THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.\"),this.makePerspective(t,e,i,n,r,a)},ua.prototype.getInverse=function(t){return console.warn(\"THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.\"),this.copy(t).invert()},Ks.prototype.isIntersectionLine=function(t){return console.warn(\"THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().\"),this.intersectsLine(t)},Nr.prototype.multiplyVector3=function(t){return console.warn(\"THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.\"),t.applyQuaternion(this)},Nr.prototype.inverse=function(){return console.warn(\"THREE.Quaternion: .inverse() has been renamed to invert().\"),this.invert()},ha.prototype.isIntersectionBox=function(t){return console.warn(\"THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().\"),this.intersectsBox(t)},ha.prototype.isIntersectionPlane=function(t){return console.warn(\"THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().\"),this.intersectsPlane(t)},ha.prototype.isIntersectionSphere=function(t){return console.warn(\"THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().\"),this.intersectsSphere(t)},Xa.prototype.area=function(){return console.warn(\"THREE.Triangle: .area() has been renamed to .getArea().\"),this.getArea()},Xa.prototype.barycoordFromPoint=function(t,e){return console.warn(\"THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().\"),this.getBarycoord(t,e)},Xa.prototype.midpoint=function(t){return console.warn(\"THREE.Triangle: .midpoint() has been renamed to .getMidpoint().\"),this.getMidpoint(t)},Xa.prototypenormal=function(t){return console.warn(\"THREE.Triangle: .normal() has been renamed to .getNormal().\"),this.getNormal(t)},Xa.prototype.plane=function(t){return console.warn(\"THREE.Triangle: .plane() has been renamed to .getPlane().\"),this.getPlane(t)},Xa.barycoordFromPoint=function(t,e,n,i,r){return console.warn(\"THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().\"),Xa.getBarycoord(t,e,n,i,r)},Xa.normal=function(t,e,n,i){return console.warn(\"THREE.Triangle: .normal() has been renamed to .getNormal().\"),Xa.getNormal(t,e,n,i)},od.prototype.extractAllPoints=function(t){return console.warn(\"THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.\"),this.extractPoints(t)},od.prototype.extrude=function(t){return console.warn(\"THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.\"),new Du(this,t)},od.prototype.makeGeometry=function(t){return console.warn(\"THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.\"),new Iu(this,t)},br.prototype.fromAttribute=function(t,e,n){return console.warn(\"THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(t,e,n)},br.prototype.distanceToManhattan=function(t){return console.warn(\"THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().\"),this.manhattanDistanceTo(t)},br.prototype.lengthManhattan=function(){return console.warn(\"THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().\"),this.manhattanLength()},Ir.prototype.setEulerFromRotationMatrix=function(){console.error(\"THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.\")},Ir.prototype.setEulerFromQuaternion=function(){console.error(\"THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.\")},Ir.prototype.getPositionFromMatrix=function(t){return console.warn(\"THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().\"),this.setFromMatrixPosition(t)},Ir.prototype.getScaleFromMatrix=function(t){return console.warn(\"THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().\"),this.setFromMatrixScale(t)},Ir.prototype.getColumnFromMatrix=function(t,e){return console.warn(\"THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().\"),this.setFromMatrixColumn(e,t)},Ir.prototype.applyProjection=function(t){return console.warn(\"THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.\"),this.applyMatrix4(t)},Ir.prototype.fromAttribute=function(t,e,n){return console.warn(\"THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(t,e,n)},Ir.prototype.distanceToManhattan=function(t){return console.warn(\"THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().\"),this.manhattanDistanceTo(t)},Ir.prototype.lengthManhattan=function(){return console.warn(\"THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().\"),this.manhattanLength()},Rr.prototype.fromAttribute=function(t,e,n){return console.warn(\"THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(t,e,n)},Rr.prototype.lengthManhattan=function(){return console.warn(\"THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().\"),this.manhattanLength()},za.prototype.getChildByName=function(t){return console.warn(\"THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().\"),this.getObjectByName(t)},za.prototype.renderDepth=function(){console.warn(\"THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.\")},za.prototype.translate=function(t,e){return console.warn(\"THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.\"),this.translateOnAxis(e,t)},za.prototype.getWorldRotation=function(){console.error(\"THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.\")},za.prototype.applyMatrix=function(t){return console.warn(\"THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().\"),this.applyMatrix4(t)},Object.defineProperties(za.prototype,{eulerOrder:{get:function(){return console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\"),this.rotation.order},set:function(t){console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\"),this.rotation.order=t}},useQuaternion:{get:function(){console.warn(\"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\")},set:function(){console.warn(\"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\")}}}),zs.prototype.setDrawMode=function(){console.error(\"THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.\")},Object.defineProperties(zs.prototype,{drawMode:{get:function(){return console.error(\"THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.\"),0},set:function(){console.error(\"THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.\")}}}),vh.prototype.initBones=function(){console.error(\"THREE.SkinnedMesh: initBones() has been removed.\")},Ws.prototype.setLens=function(t,e){console.warn(\"THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.\"),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(ld.prototype,{onlyShadow:{set:function(){console.warn(\"THREE.Light: .onlyShadow has been removed.\")}},shadowCameraFov:{set:function(t){console.warn(\"THREE.Light: .shadowCameraFov is now .shadow.camera.fov.\"),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn(\"THREE.Light: .shadowCameraLeft is now .shadow.camera.left.\"),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn(\"THREE.Light: .shadowCameraRight is now .shadow.camera.right.\"),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn(\"THREE.Light: .shadowCameraTop is now .shadow.camera.top.\"),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn(\"THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.\"),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn(\"THREE.Light: .shadowCameraNear is now .shadow.camera.near.\"),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn(\"THREE.Light: .shadowCameraFar is now .shadow.camera.far.\"),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn(\"THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.\")}},shadowBias:{set:function(t){console.warn(\"THREE.Light: .shadowBias is now .shadow.bias.\"),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn(\"THREE.Light: .shadowDarkness has been removed.\")}},shadowMapWidth:{set:function(t){console.warn(\"THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.\"),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn(\"THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.\"),this.shadow.mapSize.height=t}}}),Object.defineProperties(ss.prototype,{length:{get:function(){return console.warn(\"THREE.BufferAttribute: .length has been deprecated. Use .count instead.\"),this.array.length}},dynamic:{get:function(){return console.warn(\"THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.\"),this.usage===dr},set:function(){console.warn(\"THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.\"),this.setUsage(dr)}}}),ss.prototype.setDynamic=function(t){return console.warn(\"THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.\"),this.setUsage(!0===t?dr:ur),this},ss.prototype.copyIndicesArray=function(){console.error(\"THREE.BufferAttribute: .copyIndicesArray() has been removed.\")},ss.prototype.setArray=function(){console.error(\"THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers\")},ys.prototype.addIndex=function(t){console.warn(\"THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().\"),this.setIndex(t)},ys.prototype.addAttribute=function(t,e){return console.warn(\"THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().\"),e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?\"index\"===t?(console.warn(\"THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.\"),this.setIndex(e),this):this.setAttribute(t,e):(console.warn(\"THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).\"),this.setAttribute(t,new ss(arguments[1],arguments[2])))},ys.prototype.addDrawCall=function(t,e,n){void 0!==n&&console.warn(\"THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.\"),console.warn(\"THREE.BufferGeometry: .addDrawCall() is now .addGroup().\"),this.addGroup(t,e)},ys.prototype.clearDrawCalls=function(){console.warn(\"THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().\"),this.clearGroups()},ys.prototype.computeOffsets=function(){console.warn(\"THREE.BufferGeometry: .computeOffsets() has been removed.\")},ys.prototype.removeAttribute=function(t){return console.warn(\"THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().\"),this.deleteAttribute(t)},ys.prototype.applyMatrix=function(t){return console.warn(\"THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().\"),this.applyMatrix4(t)},Object.defineProperties(ys.prototype,{drawcalls:{get:function(){return console.error(\"THREE.BufferGeometry: .drawcalls has been renamed to .groups.\"),this.groups}},offsets:{get:function(){return console.warn(\"THREE.BufferGeometry: .offsets has been renamed to .groups.\"),this.groups}}}),Yc.prototype.setDynamic=function(t){return console.warn(\"THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.\"),this.setUsage(!0===t?dr:ur),this},Yc.prototype.setArray=function(){console.error(\"THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers\")},Du.prototype.getArrays=function(){console.error(\"THREE.ExtrudeGeometry: .getArrays() has been removed.\")},Du.prototype.addShapeList=function(){console.error(\"THREE.ExtrudeGeometry: .addShapeList() has been removed.\")},Du.prototype.addShape=function(){console.error(\"THREE.ExtrudeGeometry: .addShape() has been removed.\")},Xc.prototype.dispose=function(){console.error(\"THREE.Scene: .dispose() has been removed.\")},Object.defineProperties(Za.prototype,{wrapAround:{get:function(){console.warn(\"THREE.Material: .wrapAround has been removed.\")},set:function(){console.warn(\"THREE.Material: .wrapAround has been removed.\")}},overdraw:{get:function(){console.warn(\"THREE.Material: .overdraw has been removed.\")},set:function(){console.warn(\"THREE.Material: .overdraw has been removed.\")}},wrapRGB:{get:function(){return console.warn(\"THREE.Material: .wrapRGB has been removed.\"),new ns}},shading:{get:function(){console.error(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\")},set:function(t){console.warn(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\"),this.flatShading=1===t}},stencilMask:{get:function(){return console.warn(\"THREE.\"+this.type+\": .stencilMask has been removed. Use .stencilFuncMask instead.\"),this.stencilFuncMask},set:function(t){console.warn(\"THREE.\"+this.type+\": .stencilMask has been removed. Use .stencilFuncMask instead.\"),this.stencilFuncMask=t}},vertexTangents:{get:function(){console.warn(\"THREE.\"+this.type+\": .vertexTangents has been removed.\")},set:function(){console.warn(\"THREE.\"+this.type+\": .vertexTangents has been removed.\")}}}),Object.defineProperties(Gs.prototype,{derivatives:{get:function(){return console.warn(\"THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\"),this.extensions.derivatives},set:function(t){console.warn(\"THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\"),this.extensions.derivatives=t}}}),qc.prototype.clearTarget=function(t,e,n,i){console.warn(\"THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.\"),this.setRenderTarget(t),this.clear(e,n,i)},qc.prototype.animate=function(t){console.warn(\"THREE.WebGLRenderer: .animate() is now .setAnimationLoop().\"),this.setAnimationLoop(t)},qc.prototype.getCurrentRenderTarget=function(){return console.warn(\"THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().\"),this.getRenderTarget()},qc.prototype.getMaxAnisotropy=function(){return console.warn(\"THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().\"),this.capabilities.getMaxAnisotropy()},qc.prototype.getPrecision=function(){return console.warn(\"THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.\"),this.capabilities.precision},qc.prototype.resetGLState=function(){return console.warn(\"THREE.WebGLRenderer: .resetGLState() is now .state.reset().\"),this.state.reset()},qc.prototype.supportsFloatTextures=function(){return console.warn(\"THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).\"),this.extensions.get(\"OES_texture_float\")},qc.prototype.supportsHalfFloatTextures=function(){return console.warn(\"THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).\"),this.extensions.get(\"OES_texture_half_float\")},qc.prototype.supportsStandardDerivatives=function(){return console.warn(\"THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).\"),this.extensions.get(\"OES_standard_derivatives\")},qc.prototype.supportsCompressedTextureS3TC=function(){return console.warn(\"THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).\"),this.extensions.get(\"WEBGL_compressed_texture_s3tc\")},qc.prototype.supportsCompressedTexturePVRTC=function(){return console.warn(\"THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).\"),this.extensions.get(\"WEBGL_compressed_texture_pvrtc\")},qc.prototype.supportsBlendMinMax=function(){return console.warn(\"THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).\"),this.extensions.get(\"EXT_blend_minmax\")},qc.prototype.supportsVertexTextures=function(){return console.warn(\"THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.\"),this.capabilities.vertexTextures},qc.prototype.supportsInstancedArrays=function(){return console.warn(\"THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).\"),this.extensions.get(\"ANGLE_instanced_arrays\")},qc.prototype.enableScissorTest=function(t){console.warn(\"THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().\"),this.setScissorTest(t)},qc.prototype.initMaterial=function(){console.warn(\"THREE.WebGLRenderer: .initMaterial() has been removed.\")},qc.prototype.addPrePlugin=function(){console.warn(\"THREE.WebGLRenderer: .addPrePlugin() has been removed.\")},qc.prototype.addPostPlugin=function(){console.warn(\"THREE.WebGLRenderer: .addPostPlugin() has been removed.\")},qc.prototype.updateShadowMap=function(){console.warn(\"THREE.WebGLRenderer: .updateShadowMap() has been removed.\")},qc.prototype.setFaceCulling=function(){console.warn(\"THREE.WebGLRenderer: .setFaceCulling() has been removed.\")},qc.prototype.allocTextureUnit=function(){console.warn(\"THREE.WebGLRenderer: .allocTextureUnit() has been removed.\")},qc.prototype.setTexture=function(){console.warn(\"THREE.WebGLRenderer: .setTexture() has been removed.\")},qc.prototype.setTexture2D=function(){console.warn(\"THREE.WebGLRenderer: .setTexture2D() has been removed.\")},qc.prototype.setTextureCube=function(){console.warn(\"THREE.WebGLRenderer: .setTextureCube() has been removed.\")},qc.prototype.getActiveMipMapLevel=function(){return console.warn(\"THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().\"),this.getActiveMipmapLevel()},Object.defineProperties(qc.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn(\"THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.\"),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn(\"THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.\"),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.\")}},context:{get:function(){return console.warn(\"THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.\"),this.getContext()}},vr:{get:function(){return console.warn(\"THREE.WebGLRenderer: .vr has been renamed to .xr\"),this.xr}},gammaInput:{get:function(){return console.warn(\"THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.\"),!1},set:function(){console.warn(\"THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.\")}},gammaOutput:{get:function(){return console.warn(\"THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.\"),!1},set:function(t){console.warn(\"THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.\"),this.outputEncoding=!0===t?or:sr}},toneMappingWhitePoint:{get:function(){return console.warn(\"THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.\"),1},set:function(){console.warn(\"THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.\")}}}),Object.defineProperties(zc.prototype,{cullFace:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.\")}},renderReverseSided:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.\")}},renderSingleSided:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.\")}}}),Object.defineProperties(Pr.prototype,{wrapS:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\"),this.texture.wrapS},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\"),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\"),this.texture.wrapT},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\"),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\"),this.texture.magFilter},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\"),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\"),this.texture.minFilter},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\"),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\"),this.texture.anisotropy},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\"),this.texture.anisotropy=t}},offset:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .offset is now .texture.offset.\"),this.texture.offset},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .offset is now .texture.offset.\"),this.texture.offset=t}},repeat:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\"),this.texture.repeat},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\"),this.texture.repeat=t}},format:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .format is now .texture.format.\"),this.texture.format},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .format is now .texture.format.\"),this.texture.format=t}},type:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\"),this.texture.type},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\"),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\"),this.texture.generateMipmaps},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\"),this.texture.generateMipmaps=t}}}),class extends za{constructor(t){super(),this.type=\"Audio\",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType=\"empty\",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType=\"audioNode\",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType=\"mediaNode\",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType=\"mediaStreamNode\",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType=\"buffer\",this.autoplay&&this.play(),this}play(t=0){if(!0===this.isPlaying)return void console.warn(\"THREE.Audio: Audio is already playing.\");if(!1===this.hasPlaybackControl)return void console.warn(\"THREE.Audio: this Audio has no playback control.\");this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn(\"THREE.Audio: this Audio has no playback control.\")}stop(){if(!1!==this.hasPlaybackControl)return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn(\"THREE.Audio: this Audio has no playback control.\")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(t){return t||(t=[]),!0===this._connected?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){if(this.detune=t,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn(\"THREE.Audio: this Audio has no playback control.\")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn(\"THREE.Audio: this Audio has no playback control.\"),!1):this.loop}setLoop(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn(\"THREE.Audio: this Audio has no playback control.\")}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}.prototype.load=function(t){console.warn(\"THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.\");const e=this;return(new bd).load(t,(function(t){e.setBuffer(t)})),this},qs.prototype.updateCubeMap=function(t,e){return console.warn(\"THREE.CubeCamera: .updateCubeMap() is now .update().\"),this.update(t,e)},qs.prototype.clear=function(t,e,n,i){return console.warn(\"THREE.CubeCamera: .clear() is now .renderTarget.clear().\"),this.renderTarget.clear(t,e,n,i)},Er.crossOrigin=void 0,Er.loadTexture=function(t,e,n,i){console.warn(\"THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.\");const r=new rd;r.setCrossOrigin(this.crossOrigin);const a=r.load(t,n,void 0,i);return e&&(a.mapping=e),a},Er.loadTextureCube=function(t,e,n,i){console.warn(\"THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.\");const r=new id;r.setCrossOrigin(this.crossOrigin);const a=r.load(t,n,void 0,i);return e&&(a.mapping=e),a},Er.loadCompressedTexture=function(){console.error(\"THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.\")},Er.loadCompressedTextureCube=function(){console.error(\"THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.\")},\"undefined\"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent(\"register\",{detail:{revision:\"131\"}})),\"undefined\"!=typeof window&&(window.__THREE__?console.warn(\"WARNING: Multiple instances of Three.js being imported.\"):window.__THREE__=\"131\"),(function(t){t[t.CIRCLE=0]=\"CIRCLE\",t[t.LINE=1]=\"LINE\",t[t.TRIANGLE=2]=\"TRIANGLE\",t[t.TRAPEZOID=3]=\"TRAPEZOID\"})(Vd||(Vd={}));class Yd{constructor(t,e,n,i){this.coordinator=e,this.scene=new Xc,this.backgroundColor=\"#fff\",(function r(){return self.hasOwnProperty(\"OffscreenCanvas\")})()&&t instanceof OffscreenCanvas&&(t.style=t.style||{}),i&&t.addEventListener(\"webglcontextlost\",i),this.renderer=new qc({canvas:t,context:t.getContext(\"webgl2\",{antialias:!0,precision:\"highp\",alpha:!0})}),this.renderer.setPixelRatio(n)}onResize(t){this.renderer.setSize(t.width,t.height)}destroyObject(t){const e=t.obj3d;if(this.scene.remove(e),e instanceof zs){e.geometry.dispose();const t=Array.isArray(e.material)?e.material:[e.material];for(const e of t)e.dispose()}}setUseDarkMode(t){this.backgroundColor=t?\"#303030\":\"#fff\"}createOrUpdateLineObject(t,e,n){var i;if(!t&&!n.visible)return null;const{visible:r,width:a}=n;if(!t){const t=Gd(this.backgroundColor,n.color,null!==(i=n.opacity)&&void 0!==i?i:1),s=new ys,o=new wh({color:t}),l=new zs(s,o);return o.visible=r,qd(s,e,a),this.scene.add(l),{type:Vd.LINE,data:e,obj3d:l,width:a}}const{data:s,obj3d:o,width:l}=t;return Xd(this.backgroundColor,o,(t=>(a===l&&s&&Li(s,e)||qd(t,e,a),t)),n)?{type:Vd.LINE,data:e,obj3d:o,width:a}:t}createMesh(t,e){if(!e.visible)return null;const{visible:n,color:i,opacity:r}=e,a=Gd(this.backgroundColor,i,null!=r?r:1),s=new is({color:a,visible:n});return new zs(t,s)}createOrUpdateTriangleObject(t,e,n){const{size:i}=n,r=i*Math.sqrt(3)/2,a=new Float32Array([e.x-i/2,e.y-r/3,e.x+i/2,e.y-r/3,e.x,e.y+2*r/3]);if(!t){const t=new ys;jd(t,a);const i=this.createMesh(t,n);return null===i?null:(this.scene.add(i),{type:Vd.TRIANGLE,data:e,obj3d:i})}return Xd(this.backgroundColor,t.obj3d,(t=>(jd(t,a),t)),n)?{type:Vd.TRIANGLE,data:e,obj3d:t.obj3d}:t}createOrUpdateCircleObject(t,e,n){const{radius:i}=n,r=new Fh(n.radius);if(!t){const t=this.createMesh(r,n);return null===t?null:(t.position.set(e.x,e.y,0),this.scene.add(t),{type:Vd.CIRCLE,data:{loc:e,radius:i},obj3d:t})}return Xd(this.backgroundColor,t.obj3d,(()=>r),n)?(t.obj3d.position.set(e.x,e.y,0),{type:Vd.CIRCLE,data:{loc:e,radius:i},obj3d:t.obj3d}):t}createOrUpdateTrapezoidObject(t,e,n,i){if(e.y!==n.y)throw new RangeError(\"Input error: start.y != end.y.\");const{altitude:r}=i,a=2/Math.sqrt(3)*r,s=new od([new br(e.x-a/2,e.y-r/2),new br(e.x,e.y+r/2),new br(n.x,n.y+r/2),new br(n.x+a/2,n.y-r/2)]);s.autoClose=!0;const o=new Iu(s);if(!t){const t=this.createMesh(o,i);return null===t?null:(this.scene.add(t),{type:Vd.TRAPEZOID,data:[e,n],obj3d:t})}return Xd(this.backgroundColor,t.obj3d,(()=>o),i)?{type:Vd.TRAPEZOID,data:[e,n],obj3d:t.obj3d}:t}flush(){this.renderer.render(this.scene,this.coordinator.getCamera())}dispose(){this.renderer.dispose()}}class Zd{constructor(t,e){this.renderCache=t,this.renderer=e}setLine(t,e,n){const i=this.renderer.createOrUpdateLineObject(this.renderCache.getFromPreviousFrame(t),e,n);i&&this.renderCache.setToCurrentFrame(t,i)}setTriangle(t,e,n){const i=this.renderer.createOrUpdateTriangleObject(this.renderCache.getFromPreviousFrame(t),e,n);i&&this.renderCache.setToCurrentFrame(t,i)}setCircle(t,e,n){const i=this.renderer.createOrUpdateCircleObject(this.renderCache.getFromPreviousFrame(t),e,n);i&&this.renderCache.setToCurrentFrame(t,i)}setTrapezoid(t,e,n,i){const r=this.renderer.createOrUpdateTrapezoidObject(this.renderCache.getFromPreviousFrame(t),e,n,i);r&&this.renderCache.setToCurrentFrame(t,r)}}class Jd{constructor(){this.prevFrameCache=new Map,this.currFrameCache=new Map}getFromPreviousFrame(t){const e=this.prevFrameCache.get(t);return null!=e?e:null}setToCurrentFrame(t,e){this.currFrameCache.set(t,e)}finalizeFrameAndGetRemoved(){const t=[];for(const[e,n]of this.prevFrameCache.entries())this.currFrameCache.has(e)||t.push(n);return this.prevFrameCache=this.currFrameCache,this.currFrameCache=new Map,t}}!(function(t){t[t.NUMBER=0]=\"NUMBER\",t[t.NAN=1]=\"NAN\"})(Wd||(Wd={}));class Qd extends class{constructor(t){this.rawSeriesData=[],this.series=[],this.paintDirty=!0,this.renderCache=new Jd,this.coordinateIdentifier=null,this.layout={x:0,width:1,y:0,height:1},this.getMetadataMapImpl=t.getMetadataMap,this.coordinator=t.coordinator,this.renderer=t.renderer,this.paintBrush=new Zd(this.renderCache,this.renderer)}setLayoutRect(t){this.layout.x===t.x&&this.layout.width===t.width&&this.layout.y===t.y&&this.layout.height===t.height||(this.paintDirty=!0),this.layout=t}getLayoutRect(){return this.layout}getMetadataMap(){return this.getMetadataMapImpl()}markAsPaintDirty(){this.paintDirty=!0}render(){if(this.transformCoordinatesIfStale(),this.paintDirty){this.redraw();for(const t of this.renderCache.finalizeFrameAndGetRemoved())this.renderer.destroyObject(t);this.paintDirty=!1}}isCoordinateUpdated(){return this.coordinator.getUpdateIdentifier()!==this.coordinateIdentifier}clearCoordinateIdentifier(){this.coordinateIdentifier=null}setData(t){this.clearCoordinateIdentifier(),this.rawSeriesData=t}transformCoordinatesIfStale(){if(!this.isCoordinateUpdated())return;const t=this.getLayoutRect();this.series=new Array(this.rawSeriesData.length);for(let e=0;e<this.rawSeriesData.length;e++){const n=this.rawSeriesData[e];this.series[e]={id:n.id,polyline:new Float32Array(2*n.points.length)};for(let i=0;i<n.points.length;i++){const[r,a]=this.coordinator.transformDataToUiCoord(t,[n.points[i].x,n.points[i].y]);this.series[e].polyline[2*i]=r,this.series[e].polyline[2*i+1]=a}}this.coordinateIdentifier=this.coordinator.getUpdateIdentifier(),this.markAsPaintDirty()}}{recordPartition(t,e,n){return t?{type:Wd.NUMBER,polyline:e}:{type:Wd.NAN,polyline:e.map(((t,e)=>isNaN(t)?e%2==0?n.x:n.y:t))}}partitionPolyline(t){const e=[];let n=0,i=!1;const r=this.coordinator.transformDataToUiCoord(this.getLayoutRect(),[0,0]),a={x:r[0],y:r[1]};let s=null;for(let r=0;r<t.length;r+=2){const a=t[r],o=t[r+1],l=isNaN(a)||isNaN(o);l!==i&&n!==r&&(e.push(this.recordPartition(!i,t.slice(n,r),null===s?{x:a,y:o}:s)),n=r),l||(s={x:a,y:o}),i=l}return n!==t.length-1&&e.push(this.recordPartition(!i,t.slice(n,t.length),null!=s?s:a)),e}redraw(){var t,e,n;for(const i of this.series){const r=this.getMetadataMap()[i.id];if(!r)continue;if(i.polyline.length%2!=0)throw new Error(`Cannot have odd length-ed polyline: ${i.polyline.length}`);const a=this.partitionPolyline(i.polyline);for(const[s,{type:o,polyline:l}]of a.entries())if(o===Wd.NUMBER)2===l.length?this.paintBrush.setCircle(JSON.stringify([\"circle\",i.id,s]),{x:l[0],y:l[1]},{color:r.color,visible:r.visible,opacity:null!==(t=r.opacity)&&void 0!==t?t:1,radius:4}):this.paintBrush.setLine(JSON.stringify([\"line\",i.id,s]),l,{color:r.color,visible:r.visible,opacity:null!==(e=r.opacity)&&void 0!==e?e:1,width:2});else if(!r.aux)for(let t=0;t<l.length;t+=2)this.paintBrush.setTriangle(JSON.stringify([\"NaN\",i.id,l[t],l[t+1]]),{x:l[t],y:l[t+1]},{color:r.color,visible:r.visible,opacity:null!==(n=r.opacity)&&void 0!==n?n:1,size:12})}}}class Kd extends Ci{constructor(){super(...arguments),this.camera=new mo(0,1e3,1e3,0,0,100)}isYAxisPointedDown(){return!1}setDomContainerRect(t){super.setDomContainerRect(t),this.camera.left=t.x,this.camera.right=t.x+t.width,this.camera.top=t.y+t.height,this.camera.bottom=t.y,this.camera.updateProjectionMatrix()}getCamera(){return this.camera}}const $d=t=>self.requestAnimationFrame(t);class tp{constructor(t){switch(this.metadataMap={},this.shouldRepaint=!1,this.callbacks=t.callbacks,t.type){case Ri.SVG:this.coordinator=new Ci,this.renderer=new Di(t.container);break;case Ri.WEBGL:{const e=new Kd;this.coordinator=e,this.renderer=new Yd(t.container,e,t.devicePixelRatio,t.callbacks.onContextLost);break}}this.renderer.setUseDarkMode(t.useDarkMode),this.seriesLineView=new Qd({renderer:this.renderer,coordinator:this.coordinator,getMetadataMap:()=>this.metadataMap}),this.resize(t.domDimension)}dispose(){}setXScaleType(t){this.coordinator.setXScale(Si(t)),this.scheduleRepaint()}setYScaleType(t){this.coordinator.setYScale(Si(t)),this.scheduleRepaint()}resize(t){this.coordinator.setDomContainerRect(Object.assign({x:0,y:0},t)),this.renderer.onResize(Object.assign({x:0,y:0},t)),this.seriesLineView.setLayoutRect(Object.assign(Object.assign({},t),{x:0,y:0})),this.scheduleRepaint()}setMetadata(t){let e=!1;Object.entries(t).forEach((([t,n])=>{const i=this.metadataMap[t];i&&n.color===i.color&&n.visible===i.visible&&n.opacity===i.opacity||(e=!0),this.metadataMap[t]=n})),e&&this.seriesLineView.markAsPaintDirty(),this.scheduleRepaint()}setViewBox(t){this.coordinator.setViewBoxRect({x:t.x[0],width:t.x[1]-t.x[0],y:t.y[0],height:t.y[1]-t.y[0]}),this.scheduleRepaint()}setData(t){this.seriesLineView.setData(t),this.scheduleRepaint()}setUseDarkMode(t){this.renderer.setUseDarkMode(t),this.seriesLineView.markAsPaintDirty(),this.scheduleRepaint()}scheduleRepaint(){this.shouldRepaint||(this.shouldRepaint=!0,$d((()=>{this.repaint(),this.shouldRepaint=!1})))}repaint(){this.seriesLineView.render(),this.renderer.flush(),this.callbacks.onDrawEnd()}}var ep,np;!(function(t){t[t.SERIES_DATA_UPDATED=0]=\"SERIES_DATA_UPDATED\",t[t.SERIES_METADATA_CHANGED=1]=\"SERIES_METADATA_CHANGED\",t[t.SCALE_UPDATED=2]=\"SCALE_UPDATED\",t[t.VIEW_BOX_UPDATED=3]=\"VIEW_BOX_UPDATED\",t[t.INIT=4]=\"INIT\",t[t.DOM_RESIZED=5]=\"DOM_RESIZED\",t[t.DARK_MODE_UPDATED=6]=\"DARK_MODE_UPDATED\",t[t.DISPOSED=7]=\"DISPOSED\"})(ep||(ep={})),(function(t){t[t.ON_REDRAW_END=0]=\"ON_REDRAW_END\",t[t.ON_CONTEXT_LOST=1]=\"ON_CONTEXT_LOST\"})(np||(np={})),self.addEventListener(\"message\",(t=>{!(function e(t,n){const{canvas:i,devicePixelRatio:r,dim:a,rendererType:s,useDarkMode:o}=n,l={onDrawEnd:()=>{t.postMessage({type:np.ON_REDRAW_END})},onContextLost:()=>{t.postMessage({type:np.ON_CONTEXT_LOST})}};let c;switch(s){case Ri.WEBGL:c={type:Ri.WEBGL,domDimension:a,callbacks:l,container:i,devicePixelRatio:r,useDarkMode:o};break;default:throw new RangeError(`Invariant error: cannot have Offscreen chart for renderer type: ${s}`)}const h=new tp(c);t.onmessage=function(t){const e=t.data;switch(e.type){case ep.SERIES_DATA_UPDATED:{const t=(function n(t){const{flattenedSeries:e,idsAndLengths:n}=t,i=new Float64Array(e),r=[];if(i.length%2!=0)throw new Error(\"`flattenedSeries` must have even number of elements\");let a=0;for(const{id:t,length:e}of n){const n=[];for(let t=0;t<e;t++)n.push({x:i[a++],y:i[a++]});r.push({id:t,points:n})}return r})(e.compactDataSeries);h.setData(t);break}case ep.SERIES_METADATA_CHANGED:h.setMetadata(e.metadata);break;case ep.VIEW_BOX_UPDATED:h.setViewBox(e.extent);break;case ep.DOM_RESIZED:h.resize(e.dim);break;case ep.DARK_MODE_UPDATED:h.setUseDarkMode(e.useDarkMode);break;case ep.SCALE_UPDATED:switch(e.axis){case\"x\":h.setXScaleType(e.scaleType);break;case\"y\":h.setYScaleType(e.scaleType);break;default:throw new RangeError(`Unknown axis: ${e.axis}`)}break;case ep.DISPOSED:h.dispose()}}})(t.ports[0],t.data)}))})();"
          },
          "redirectURL": "",
          "headersSize": 307,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2022-03-19T17:57:54.468Z",
        "time": 5.401000002166256,
        "timings": {
          "blocked": 0.3579999981764704,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 1.1129999977685512,
          "receive": 3.930000006221235,
          "_blocked_queueing": 0.3169999981764704
        }
      }
    ]
  }
}